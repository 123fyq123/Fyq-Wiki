{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 FYQ Wiki \u00b6 \u4e00\u4f4d\u53cc\u975e\u79d1\u73ed\u5b66\u751f\u642d\u5efa\u7684\u4e2a\u4ebaWiki\u3002 **\u5982\u679c**\u4f60\u5bf9\u7b97\u6cd5\u6709\u7740\u5f3a\u70c8\u7684\u70ed\u60c5 **\u5982\u679c**\u4f60\u5bf9\u4e00\u5207\u4e8b\u7269\u6709\u7740\u5f3a\u70c8\u7684\u63a2\u7d22\u6b32 **\u5982\u679c**\u4f60\u5bf9\u8ba1\u7b97\u673a\u5b66\u4e60\u611f\u5230\u8ff7\u832b \u8fd9\u4e2a\u7f51\u7ad9\u6216\u8bb8\u80fd\u5e2e\u52a9\u5230\u4f60\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u5206\u4eab\u6211\u6240\u5b66\u5230\u7684\u76f8\u5173\u77e5\u8bc6\u4ee5\u53ca\u6211\u7684\u7ecf\u5386 \u672c\u9879\u76ee\u4f7f\u7528Mkdocs\u642d\u5efa\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u5185\u5bb9 Mkdocs\u5b98\u7f51 \u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2 Mkdocs\u5feb\u901f\u4e0a\u624b\u6307\u5357 Markdown\u5b98\u65b9\u6587\u6863","title":"welcome"},{"location":"#fyq-wiki","text":"\u4e00\u4f4d\u53cc\u975e\u79d1\u73ed\u5b66\u751f\u642d\u5efa\u7684\u4e2a\u4ebaWiki\u3002 **\u5982\u679c**\u4f60\u5bf9\u7b97\u6cd5\u6709\u7740\u5f3a\u70c8\u7684\u70ed\u60c5 **\u5982\u679c**\u4f60\u5bf9\u4e00\u5207\u4e8b\u7269\u6709\u7740\u5f3a\u70c8\u7684\u63a2\u7d22\u6b32 **\u5982\u679c**\u4f60\u5bf9\u8ba1\u7b97\u673a\u5b66\u4e60\u611f\u5230\u8ff7\u832b \u8fd9\u4e2a\u7f51\u7ad9\u6216\u8bb8\u80fd\u5e2e\u52a9\u5230\u4f60\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u5206\u4eab\u6211\u6240\u5b66\u5230\u7684\u76f8\u5173\u77e5\u8bc6\u4ee5\u53ca\u6211\u7684\u7ecf\u5386 \u672c\u9879\u76ee\u4f7f\u7528Mkdocs\u642d\u5efa\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u5185\u5bb9 Mkdocs\u5b98\u7f51 \u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2 Mkdocs\u5feb\u901f\u4e0a\u624b\u6307\u5357 Markdown\u5b98\u65b9\u6587\u6863","title":"\u6b22\u8fce\u6765\u5230 FYQ Wiki"},{"location":"404/","text":"404 not found \u00b6","title":"404 not found"},{"location":"404/#404-not-found","text":"","title":"404 not found"},{"location":"ACM/%E6%A8%A1%E6%9D%BF/","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u683c\u5f0f \u8f93\u51fa\u683c\u5f0f \u6570\u636e\u8303\u56f4 $$ \u8f93\u5165\u6837\u4f8b \u8f93\u51fa\u6837\u4f8b","title":"\u6a21\u677f"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/","text":"\u6982\u8ff0 \u00b6 \u533a\u95f4dp\u5c31\u662f\u5229\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5c06\u6574\u4e2a\u533a\u95f4\u4e0d\u65ad\u7684\u62c6\u5206\u4e00\u4e0b\uff0c\u5c06\u4e00\u4e2a\u533a\u95f4[l,r]\u5206\u6210[l,k] [k+1,r]\uff0c\u7136\u540e\u518d\u5bf9[l,k]\u548c[k+1,r]\u8fdb\u884c\u7c7b\u4f3c\u7684\u62c6\u5206\uff0c\u76f4\u5230\u62c6\u5206\u6210\u6700\u5c0f\u7684\u533a\u95f4\uff0c\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u5c0f\u533a\u95f4\u7b97\u51fa\u6700\u5c0f\u6216\u8005\u6700\u5927\u4ee3\u4ef7\uff0c\u518d\u901a\u8fc7\u5c06\u8fd9\u4e9b\u5c0f\u533a\u95f4\u7ec4\u5408\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u533a\u95f4\uff0c\u54ea\u79cd\u7ec4\u5408\u65b9\u5f0f\u6700\u4f18\uff0c\u5219\u5c31\u662f\u6240\u6c42\u89e3\u3002\u89e3\u9898\u4e3a\u4e09\u90e8\u5206+\u6700\u540e\u4e00\u6b65+\u8fb9\u754c\u60c5\u51b5\u3002 \u4f8b1.\u77f3\u5b50\u5408\u5e76 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u8bbe\u6709 N \u5806\u77f3\u5b50\u6392\u6210\u4e00\u6392\uff0c\u5176\u7f16\u53f7\u4e3a 1\uff0c2\uff0c3\uff0c\u2026\uff0cN\u3002 \u6bcf\u5806\u77f3\u5b50\u6709\u4e00\u5b9a\u7684\u8d28\u91cf\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u6765\u63cf\u8ff0\uff0c\u73b0\u5728\u8981\u5c06\u8fd9 N \u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e3a\u4e00\u5806\u3002 \u6bcf\u6b21\u53ea\u80fd\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u5806\uff0c\u5408\u5e76\u7684\u4ee3\u4ef7\u4e3a\u8fd9\u4e24\u5806\u77f3\u5b50\u7684\u8d28\u91cf\u4e4b\u548c\uff0c\u5408\u5e76\u540e\u4e0e\u8fd9\u4e24\u5806\u77f3\u5b50\u76f8\u90bb\u7684\u77f3\u5b50\u5c06\u548c\u65b0\u5806\u76f8\u90bb\uff0c\u5408\u5e76\u65f6\u7531\u4e8e\u9009\u62e9\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u5408\u5e76\u7684\u603b\u4ee3\u4ef7\u4e5f\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\u6709 4 \u5806\u77f3\u5b50\u5206\u522b\u4e3a 1 3 5 2\uff0c \u6211\u4eec\u53ef\u4ee5\u5148\u5408\u5e76 1\u30012 \u5806\uff0c\u4ee3\u4ef7\u4e3a 4\uff0c\u5f97\u5230 4 5 2\uff0c \u53c8\u5408\u5e76 1\uff0c2 \u5806\uff0c\u4ee3\u4ef7\u4e3a 9\uff0c\u5f97\u5230 9 2 \uff0c\u518d\u5408\u5e76\u5f97\u5230 11\uff0c\u603b\u4ee3\u4ef7\u4e3a 4+9+11=24\uff1b \u5982\u679c\u7b2c\u4e8c\u6b65\u662f\u5148\u5408\u5e76 2\uff0c3 \u5806\uff0c\u5219\u4ee3\u4ef7\u4e3a 7\uff0c\u5f97\u5230 4 7\uff0c\u6700\u540e\u4e00\u6b21\u5408\u5e76\u4ee3\u4ef7\u4e3a 11\uff0c\u603b\u4ee3\u4ef7\u4e3a 4+7+11=22\u3002 \u95ee\u9898\u662f\uff1a\u627e\u51fa\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6cd5\uff0c\u4f7f\u603b\u7684\u4ee3\u4ef7\u6700\u5c0f\uff0c\u8f93\u51fa\u6700\u5c0f\u4ee3\u4ef7\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570 N \u8868\u793a\u77f3\u5b50\u7684\u5806\u6570 N\u3002 \u7b2c\u4e8c\u884c N \u4e2a\u6570\uff0c\u8868\u793a\u6bcf\u5806\u77f3\u5b50\u7684\u8d28\u91cf(\u5747\u4e0d\u8d85\u8fc7 1000)\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u4ee3\u4ef7\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264300 1\u2264N\u2264300 \u8f93\u5165\u6837\u4f8b 4 1 3 5 2 \u8f93\u51fa\u6837\u4f8b 22 \u9898\u89e3 \u00b6 \u533a\u95f4DP\u7684\u72b6\u6001\u5b9a\u4e49\u4e00\u822c\u4e3a\u4e00\u4e2a\u8303\u56f4\uff0c\u6211\u4eec\u4ee4 f[l,r] f[l,r] \u4e3a\u5408\u5e76 l-r l-r \u8303\u56f4\u5185\u7684\u77f3\u5b50\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u6839\u636e\u6700\u540e\u4e00\u6b65\u5408\u5e76\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u90e8\u5206\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f88\u5bb9\u6613\u53ef\u4ee5\u8868\u793a\u4e3a f[l,r]=min(f[l,k]+f[k + 1,r] + (w[l]+w[l+1]...+w[r]), f[l,r]) f[l,r]=min(f[l,k]+f[k + 1,r] + (w[l]+w[l+1]...+w[r]), f[l,r]) \uff0c\u5176\u4e2dk\u4e3a\u6700\u540e\u4e00\u6b65\u5408\u5e76\u7684\u7aef\u70b9,\u8fd9\u91cc w[l]+...w[r] w[l]+...w[r] \u53ef\u4ee5\u7528\u524d\u7f00\u548c\u4f18\u5316 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 305 ; int dp [ N ][ N ]; int a [ N ], sum [ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i -1 ] + a [ i ]; memset ( dp , 0x3f , sizeof ( dp )); for ( int i = 1 ; i <= n ; i ++ ) dp [ i ][ i ] = 0 ; for ( int len = 1 ; len <= n ; len ++ ) { for ( int i = 1 ; i <= n ; i ++ ) { if ( i + len -1 > n ) break ; int l = i , r = i + len -1 ; for ( int k = l ; k <= r ; k ++ ) { dp [ l ][ r ] = min ( dp [ l ][ r ], dp [ l ][ k ] + dp [ k + 1 ][ r ] + sum [ r ] - sum [ l -1 ]); } } } cout << dp [ 1 ][ n ] << endl ; return 0 ; } \u4f8b2.\u73af\u5f62\u77f3\u5b50\u5408\u5e76 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5c06 n \u5806\u77f3\u5b50\u7ed5\u5706\u5f62\u64cd\u573a\u6392\u653e\uff0c\u73b0\u8981\u5c06\u77f3\u5b50\u6709\u5e8f\u5730\u5408\u5e76\u6210\u4e00\u5806\u3002 \u89c4\u5b9a\u6bcf\u6b21\u53ea\u80fd\u9009\u76f8\u90bb\u7684\u4e24\u5806\u5408\u5e76\u6210\u65b0\u7684\u4e00\u5806\uff0c\u5e76\u5c06\u65b0\u7684\u4e00\u5806\u7684\u77f3\u5b50\u6570\u8bb0\u505a\u8be5\u6b21\u5408\u5e76\u7684\u5f97\u5206\u3002 \u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u5806\u6570 n \u53ca\u6bcf\u5806\u7684\u77f3\u5b50\u6570\uff0c\u5e76\u8fdb\u884c\u5982\u4e0b\u8ba1\u7b97\uff1a \u9009\u62e9\u4e00\u79cd\u5408\u5e76\u77f3\u5b50\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u505a n\u22121 \u6b21\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5927\u3002 \u9009\u62e9\u4e00\u79cd\u5408\u5e76\u77f3\u5b50\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u505a n\u22121 \u6b21\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5c0f\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\uff0c\u8868\u793a\u5171\u6709 n \u5806\u77f3\u5b50\u3002 \u7b2c\u4e8c\u884c\u5305\u542b n \u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u6bcf\u5806\u77f3\u5b50\u7684\u6570\u91cf\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5171\u4e24\u884c\uff1a \u7b2c\u4e00\u884c\u4e3a\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5c0f\u503c\uff0c \u7b2c\u4e8c\u884c\u4e3a\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5927\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264200 1\u2264n\u2264200 \u8f93\u5165\u6837\u4f8b 4 4 5 9 4 \u8f93\u51fa\u6837\u4f8b 43 54 \u9898\u89e3 \u00b6 \u4e0e\u6734\u7d20\u7248\u76f8\u6bd4\uff0c\u591a\u4e86\u4e00\u4e2a\u7834\u73af\u6210\u94fe\u7684\u8fc7\u7a0b\uff0c\u7531\u4e8e\u662f\u4e2a\u73af\uff0cn\u5806\u77f3\u5b50\u5c31\u6709n\u4e2a\u7a7a\u9699\uff0c\u82e5\u6309\u7167\u7a7a\u9699\u65ad\u5f00\u53ef\u4ee5\u6709n\u79cd\u65ad\u6cd5\uff0c\u7531\u4e8e\u73af\u65ad\u5f00\u540e\u4e2a\u6570\u4ecd\u7136\u4e3an\u4e2a\uff0c\u4e8e\u662f\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u5728\u539fn\u5806\u77f3\u5b50\u540e\u9762\u8865\u4e0an\u4e2a\uff0c\u4ece\u524dn\u5806\u5f00\u59cb\u5206\u522b\u5bf9\u5e94\u4e00\u79cd\u65ad\u6cd5\uff0c\u6700\u540e\u5728\u8fd9\u4e9b\u65ad\u6cd5\u4e2d\u53d6\u6700\u5c0f\u503c(\u6216\u6700\u5927\u503c)\uff0c\u800c\u6bcf\u79cd\u65ad\u6cd5\u4f7f\u7528\u6734\u7d20\u7248\u7684\u505a\u6cd5\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 405 , INF = 0x3f3f3f3f ; int f [ N ][ N ], g [ N ][ N ]; int a [ N ]; int sum [ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]; a [ i + n ] = a [ i ]; } for ( int i = 1 ; i <= 2 * n ; i ++ ) sum [ i ] = sum [ i - 1 ] + a [ i ]; memset ( f , 0x3f , sizeof ( f )); memset ( g , -0x3f , sizeof ( g )); for ( int i = 1 ; i <= 2 * n ; i ++ ) f [ i ][ i ] = g [ i ][ i ] = 0 ; for ( int len = 2 ; len <= n ; len ++ ) { for ( int l = 1 ; l + len - 1 <= 2 * n ; l ++ ) { int r = l + len - 1 ; for ( int k = l ; k <= r ; k ++ ) { f [ l ][ r ] = min ( f [ l ][ r ], f [ l ][ k ] + f [ k + 1 ][ r ] + sum [ r ] - sum [ l - 1 ]); g [ l ][ r ] = max ( g [ l ][ r ], g [ l ][ k ] + g [ k + 1 ][ r ] + sum [ r ] - sum [ l - 1 ]); } } } int minx = INF , maxx = - INF ; for ( int i = 1 ; i <= n ; i ++ ) { minx = min ( minx , f [ i ][ i + n - 1 ]); maxx = max ( maxx , g [ i ][ i + n - 1 ]); } cout << minx << endl << maxx ; return 0 ; } \u4f8b3.\u80fd\u91cf\u9879\u94fe \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728 Mars \u661f\u7403\u4e0a\uff0c\u6bcf\u4e2a Mars \u4eba\u90fd\u968f\u8eab\u4f69\u5e26\u7740\u4e00\u4e32\u80fd\u91cf\u9879\u94fe\uff0c\u5728\u9879\u94fe\u4e0a\u6709 N \u9897\u80fd\u91cf\u73e0\u3002 \u80fd\u91cf\u73e0\u662f\u4e00\u9897\u6709\u5934\u6807\u8bb0\u4e0e\u5c3e\u6807\u8bb0\u7684\u73e0\u5b50\uff0c\u8fd9\u4e9b\u6807\u8bb0\u5bf9\u5e94\u7740\u67d0\u4e2a\u6b63\u6574\u6570\u3002 \u5e76\u4e14\uff0c\u5bf9\u4e8e\u76f8\u90bb\u7684\u4e24\u9897\u73e0\u5b50\uff0c\u524d\u4e00\u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u4e00\u5b9a\u7b49\u4e8e\u540e\u4e00\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002 \u56e0\u4e3a\u53ea\u6709\u8fd9\u6837\uff0c\u901a\u8fc7\u5438\u76d8\uff08\u5438\u76d8\u662f Mars \u4eba\u5438\u6536\u80fd\u91cf\u7684\u4e00\u79cd\u5668\u5b98\uff09\u7684\u4f5c\u7528\uff0c\u8fd9\u4e24\u9897\u73e0\u5b50\u624d\u80fd\u805a\u5408\u6210\u4e00\u9897\u73e0\u5b50\uff0c\u540c\u65f6\u91ca\u653e\u51fa\u53ef\u4ee5\u88ab\u5438\u76d8\u5438\u6536\u7684\u80fd\u91cf\u3002 \u5982\u679c\u524d\u4e00\u9897\u80fd\u91cf\u73e0\u7684\u5934\u6807\u8bb0\u4e3a m\uff0c\u5c3e\u6807\u8bb0\u4e3a r\uff0c\u540e\u4e00\u9897\u80fd\u91cf\u73e0\u7684\u5934\u6807\u8bb0\u4e3a r\uff0c\u5c3e\u6807\u8bb0\u4e3a n\uff0c\u5219\u805a\u5408\u540e\u91ca\u653e\u7684\u80fd\u91cf\u4e3a m\u00d7r\u00d7n\uff08Mars \u5355\u4f4d\uff09\uff0c\u65b0\u4ea7\u751f\u7684\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u4e3a m\uff0c\u5c3e\u6807\u8bb0\u4e3a n\u3002 \u9700\u8981\u65f6\uff0cMars \u4eba\u5c31\u7528\u5438\u76d8\u5939\u4f4f\u76f8\u90bb\u7684\u4e24\u9897\u73e0\u5b50\uff0c\u901a\u8fc7\u805a\u5408\u5f97\u5230\u80fd\u91cf\uff0c\u76f4\u5230\u9879\u94fe\u4e0a\u53ea\u5269\u4e0b\u4e00\u9897\u73e0\u5b50\u4e3a\u6b62\u3002 \u663e\u7136\uff0c\u4e0d\u540c\u7684\u805a\u5408\u987a\u5e8f\u5f97\u5230\u7684\u603b\u80fd\u91cf\u662f\u4e0d\u540c\u7684\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u805a\u5408\u987a\u5e8f\uff0c\u4f7f\u4e00\u4e32\u9879\u94fe\u91ca\u653e\u51fa\u7684\u603b\u80fd\u91cf\u6700\u5927\u3002 \u4f8b\u5982\uff1a\u8bbe N=4\uff0c4 \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u4e0e\u5c3e\u6807\u8bb0\u4f9d\u6b21\u4e3a (2\uff0c3)(3\uff0c5)(5\uff0c10)(10\uff0c2)\u3002 \u6211\u4eec\u7528\u8bb0\u53f7 \u2295 \u8868\u793a\u4e24\u9897\u73e0\u5b50\u7684\u805a\u5408\u64cd\u4f5c\uff0c(j\u2295k) \u8868\u793a\u7b2c j\uff0ck \u4e24\u9897\u73e0\u5b50\u805a\u5408\u540e\u6240\u91ca\u653e\u7684\u80fd\u91cf\u3002\u5219 \u7b2c 4\u30011 \u4e24\u9897\u73e0\u5b50\u805a\u5408\u540e\u91ca\u653e\u7684\u80fd\u91cf\u4e3a\uff1a(4\u22951)=10\u00d72\u00d73=60\u3002 \u8fd9\u4e00\u4e32\u9879\u94fe\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u503c\u7684\u4e00\u4e2a\u805a\u5408\u987a\u5e8f\u6240\u91ca\u653e\u7684\u603b\u80fd\u91cf\u4e3a ((4\u22951)\u22952)\u22953)=10\u00d72\u00d73+10\u00d73\u00d75+10\u00d75\u00d710=710\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 N\uff0c\u8868\u793a\u9879\u94fe\u4e0a\u73e0\u5b50\u7684\u4e2a\u6570\u3002 \u7b2c\u4e8c\u884c\u662f N \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u6240\u6709\u7684\u6570\u5747\u4e0d\u8d85\u8fc7 1000\uff0c\u7b2c i \u4e2a\u6570\u4e3a\u7b2c i \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\uff0c\u5f53 i < N \u65f6\uff0c\u7b2c i \u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u5e94\u8be5\u7b49\u4e8e\u7b2c i+1 \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\uff0c\u7b2c N \u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u5e94\u8be5\u7b49\u4e8e\u7b2c 1 \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002 \u81f3\u4e8e\u73e0\u5b50\u7684\u987a\u5e8f\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u786e\u5b9a\uff1a\u5c06\u9879\u94fe\u653e\u5230\u684c\u9762\u4e0a\uff0c\u4e0d\u8981\u51fa\u73b0\u4ea4\u53c9\uff0c\u968f\u610f\u6307\u5b9a\u7b2c\u4e00\u9897\u73e0\u5b50\uff0c\u7136\u540e\u6309\u987a\u65f6\u9488\u65b9\u5411\u786e\u5b9a\u5176\u4ed6\u73e0\u5b50\u7684\u987a\u5e8f\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 E\uff0c\u4e3a\u4e00\u4e2a\u6700\u4f18\u805a\u5408\u987a\u5e8f\u6240\u91ca\u653e\u7684\u603b\u80fd\u91cf\u3002 \u6570\u636e\u8303\u56f4 4\u2264N\u2264100, 4\u2264N\u2264100, 1\u2264E\u22642.1\u00d7109 1\u2264E\u22642.1\u00d7109 \u8f93\u5165\u6837\u4f8b 4 2 3 5 10 \u8f93\u51fa\u6837\u4f8b 710 \u9898\u89e3 \u00b6 \u73af\u5f62\u95ee\u9898\uff0c\u9996\u5148\u7834\u73af\u6210\u94fe\uff0c\u53c2\u8003\u73af\u5f62\u77f3\u5b50\u5408\u5e76\u7684\u65b9\u6cd5\uff0c\u672c\u9898\u4e0e\u73af\u5f62\u77f3\u5b50\u5408\u5e76\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u6bcf\u4e00\u5806\u65e2\u6709\u5934\u4e5f\u6709\u5c3e\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5806\u6570\u4e3an\u7684\u77f3\u5b50\u5b9e\u9645\u957f\u5ea6\u5e94\u8be5\u4e3an+1\uff0c\u6240\u4ee5\u672c\u9898\u5c31\u662f\u5728\u957f\u5ea6\u4e3an+1\u7684\u77f3\u5b50\u5806\u4e2d\u505a\u73af\u5f62\u77f3\u5b50\u5408\u5e76\u95ee\u9898\uff0c\u7b2cn+1\u548c\u7b2c1\u4e2a\u4e00\u6837\uff0c\u957f\u5ea6\u4e3a1\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece2\u5f00\u59cb\u679a\u4e3e\uff0c\u6ce8\u610f\u4e00\u4e2a\u5c0f\u5751\uff0c\u5728\u679a\u4e3e\u6700\u540e\u4e00\u6b65\u65f6\u4e0d\u80fd\u9009\u62e9\u4e00\u4e2a\u73e0\u5b50\u7684\u540c\u4e00\u7aef\uff0c\u5373k\u8303\u56f4\u4e3al+1\u5230r-1 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 205 ; int dp [ N ][ N ]; int a [ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= 2 * n ; i ++ ) { cin >> a [ i ]; a [ i + n ] = a [ i ]; } for ( int len = 2 ; len <= n + 1 ; len ++ ) { for ( int l = 1 ; l + len - 1 <= 2 * n ; l ++ ) { int r = l + len - 1 ; for ( int k = l + 1 ; k <= r - 1 ; k ++ ) { dp [ l ][ r ] = max ( dp [ l ][ r ], dp [ l ][ k ] + dp [ k ][ r ] + a [ l ] * a [ r ] * a [ k ]); } } } int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { res = max ( res , dp [ i ][ i + n ]); } cout << res ; return 0 ; } \u4f8b4.\u51f8\u591a\u8fb9\u5f62\u7684\u5212\u5206 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5177\u6709 N \u4e2a\u9876\u70b9\u7684\u51f8\u591a\u8fb9\u5f62\uff0c\u5c06\u9876\u70b9\u4ece 1 \u81f3 N \u6807\u53f7\uff0c\u6bcf\u4e2a\u9876\u70b9\u7684\u6743\u503c\u90fd\u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u5c06\u8fd9\u4e2a\u51f8\u591a\u8fb9\u5f62\u5212\u5206\u6210 N\u22122 \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u4e09\u89d2\u5f62\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e09\u89d2\u5f62\uff0c\u5176\u4e09\u4e2a\u9876\u70b9\u7684\u6743\u503c\u76f8\u4e58\u90fd\u53ef\u5f97\u5230\u4e00\u4e2a\u6743\u503c\u4e58\u79ef\uff0c\u8bd5\u6c42\u6240\u6709\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u6743\u503c\u4e58\u79ef\u4e4b\u548c\u81f3\u5c11\u4e3a\u591a\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N\uff0c\u8868\u793a\u9876\u70b9\u6570\u91cf\u3002 \u7b2c\u4e8c\u884c\u5305\u542b N \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4e3a\u9876\u70b9 1 \u81f3\u9876\u70b9 N \u7684\u6743\u503c\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u4e3a\u6240\u6709\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u6743\u503c\u4e58\u79ef\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u3002 \u6570\u636e\u8303\u56f4 N\u226450, N\u226450, \u6570\u636e\u4fdd\u8bc1\u6240\u6709\u9876\u70b9\u7684\u6743\u503c\u90fd\u5c0f\u4e8e 10^9 10^9 \u8f93\u5165\u6837\u4f8b 5 121 122 123 245 231 \u8f93\u51fa\u6837\u4f8b 12214884 \u9898\u89e3 \u00b6 \u6211\u4eec\u679a\u4e3e\u4e09\u89d2\u5f62\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u8bbe f[l,r] f[l,r] \u4e3a\u6240\u6709\u7531 [l,l+1],[l+1,l+2],...[r-2,r-1],[r-1,r],[r-l] [l,l+1],[l+1,l+2],...[r-2,r-1],[r-1,r],[r-l] \u8fd9\u4e9b\u8fb9\u7ec4\u6210\u7684\u56db\u8fb9\u5f62\u5212\u5206\u6210\u4e09\u89d2\u5f62\u65b9\u6848\u7684\u6700\u5c0f\u503c\uff0c\u6839\u636e\u6700\u540e\u4e00\u6b65\u5373\u9664 l,r l,r \u8fd9\u4e24\u4e2a\u70b9\u5916\u4e09\u89d2\u5f62\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u4f4d\u7f6e\u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e09\u4e2a\u70b9\u53ef\u4ee5\u53d6\u5230 (l,r) (l,r) \u5185\u7684\u6240\u6709\u70b9\uff0c\u4e8e\u662f f[l,r]=min(f[l,r],f[l,k]+f[k,r]+w[l]*w[k]*w[r] f[l,r]=min(f[l,r],f[l,k]+f[k,r]+w[l]*w[k]*w[r] \uff0c\u770b\u4e0a\u53bb\u548c\u4e0a\u9898\u8f6c\u79fb\u65b9\u7a0b\u4e00\u6837\uff0c\u4f46\u672c\u9898\u957f\u5ea6\u4e3an\u5e76\u4e14\u4e0d\u9700\u8981\u7834\u73af\u5c31\u80fd\u679a\u4e3e\u5230\u6240\u6709\u7ebf\u6bb5\uff0c\u6570\u636e\u8303\u56f4\u5f88\u5927\uff0c\u9700\u8981\u4f7f\u7528\u9ad8\u7cbe\u5ea6 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 55 , M = 100 ; int dp [ N ][ N ][ M ]; int a [ N ]; int n ; void add ( int a [], int b []) { int c [ M ]; memset ( c , 0 , sizeof ( c )); for ( int i = 0 , t = 0 ; i < M ; i ++ ) { t += a [ i ] + b [ i ]; c [ i ] = t % 10 ; t /= 10 ; } memcpy ( a , c , sizeof ( c )); } void mul ( int a [], int b ) { int c [ M ]; memset ( c , 0 , sizeof ( c )); int t = 0 ; for ( int i = 0 ; i < M ; i ++ ) { t += a [ i ] * b ; c [ i ] = t % 10 ; t /= 10 ; } memcpy ( a , c , sizeof ( c )); } int cmp ( int a [], int b []) { for ( int i = M - 1 ; i >= 0 ; i -- ) { if ( a [ i ] > b [ i ]) return 1 ; else if ( a [ i ] < b [ i ]) return -1 ; } return 0 ; } void print ( int a []) { int k = M - 1 ; while ( ! a [ k ] && k ) k -- ; while ( k >= 0 ) cout << a [ k -- ]; cout << endl ; } signed main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]; } int tmp [ M ]; for ( int len = 3 ; len <= n ; len ++ ) { for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { int r = l + len - 1 ; for ( int i = 0 ; i < M ; i ++ ) dp [ l ][ r ][ i ] = 9 ; for ( int k = l + 1 ; k < r ; k ++ ) { // dp[l][r] = min(dp[l][r], dp[l][k] + dp[k][r] + a[l] * a[k] * a[r]); memset ( tmp , 0 , sizeof ( tmp )); tmp [ 0 ] = a [ l ]; mul ( tmp , a [ k ]); mul ( tmp , a [ r ]); add ( tmp , dp [ l ][ k ]); add ( tmp , dp [ k ][ r ]); if ( cmp ( dp [ l ][ r ], tmp ) > 0 ) memcpy ( dp [ l ][ r ], tmp , sizeof ( tmp )); } } } print ( dp [ 1 ][ n ]); return 0 ; } \u4f8b5.\u52a0\u5206\u4e8c\u53c9\u6811 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u8bbe\u4e00\u4e2a n \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811 tree \u7684\u4e2d\u5e8f\u904d\u5386\u4e3a\uff081,2,3,\u2026,n\uff09\uff0c\u5176\u4e2d\u6570\u5b57 1,2,3,\u2026,n \u4e3a\u8282\u70b9\u7f16\u53f7\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff08\u5747\u4e3a\u6b63\u6574\u6570\uff09\uff0c\u8bb0\u7b2c i \u4e2a\u8282\u70b9\u7684\u5206\u6570\u4e3a di\uff0ctree \u53ca\u5b83\u7684\u6bcf\u4e2a\u5b50\u6811\u90fd\u6709\u4e00\u4e2a\u52a0\u5206\uff0c\u4efb\u4e00\u68f5\u5b50\u6811 subtree\uff08\u4e5f\u5305\u542b tree \u672c\u8eab\uff09\u7684\u52a0\u5206\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a\u2002\u2002\u2002\u2002\u2002 subtree\u7684\u5de6\u5b50\u6811\u7684\u52a0\u5206 \u00d7 subtree\u7684\u53f3\u5b50\u6811\u7684\u52a0\u5206 \uff0b subtree\u7684\u6839\u7684\u5206\u6570\u2002 \u82e5\u67d0\u4e2a\u5b50\u6811\u4e3a\u7a7a\uff0c\u89c4\u5b9a\u5176\u52a0\u5206\u4e3a 1\u3002 \u53f6\u5b50\u7684\u52a0\u5206\u5c31\u662f\u53f6\u8282\u70b9\u672c\u8eab\u7684\u5206\u6570\uff0c\u4e0d\u8003\u8651\u5b83\u7684\u7a7a\u5b50\u6811\u3002 \u8bd5\u6c42\u4e00\u68f5\u7b26\u5408\u4e2d\u5e8f\u904d\u5386\u4e3a\uff081,2,3,\u2026,n\uff09\u4e14\u52a0\u5206\u6700\u9ad8\u7684\u4e8c\u53c9\u6811 tree\u3002 \u8981\u6c42\u8f93\u51fa\uff1a\u2002 \uff081\uff09tree\u7684\u6700\u9ad8\u52a0\u5206\u2002 \uff082\uff09tree\u7684\u524d\u5e8f\u904d\u5386 \u8f93\u5165\u683c\u5f0f \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 n\uff0c\u4e3a\u8282\u70b9\u4e2a\u6570\u3002\u2002 \u7b2c 2 \u884c\uff1an \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u5206\u6570\uff080<\u5206\u6570<100\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u6700\u9ad8\u52a0\u5206\uff08\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7int\u8303\u56f4\uff09\u3002\u2002\u2002\u2002\u2002\u2002 \u7b2c 2 \u884c\uff1an \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u4e3a\u8be5\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002\u5982\u679c\u5b58\u5728\u591a\u79cd\u65b9\u6848\uff0c\u5219\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\u3002 \u6570\u636e\u8303\u56f4 n<30 n<30 \u8f93\u5165\u6837\u4f8b 5 5 7 1 2 10 \u8f93\u51fa\u6837\u4f8b 145 3 1 2 4 5 \u9898\u89e3 \u00b6 \u7531\u4e8e\u6bcf\u4e00\u9897\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5728\u5e8f\u5217\u4e2d\u65f6\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6839\u636e\u4ee5\u5f80\u533a\u95f4DP\u5c06\u5176\u5206\u6210\u4e09\u90e8\u5206\u7684\u89c4\u5f8b\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u4ee4 f[l,r] f[l,r] \u4e3a\u4e2d\u5e8f\u904d\u5386\u4e3a l-r l-r \u7684\u4e8c\u53c9\u6811\u65b9\u6848\u7684\u5206\u6570\u6700\u5927\u503c\uff0c\u8fd9\u91cc\u7684\u6700\u540e\u4e00\u6b65\u662f\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff0c\u5047\u8bbe\u4e3ak\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a f[l,r]=max(f[l,r],f[l,k-1] \\times f[k+1,r]+w[k]) f[l,r]=max(f[l,r],f[l,k-1] \\times f[k+1,r]+w[k]) \u6ce8\u610f\u8fb9\u754c\u60c5\u51b5 \u5f53\u6ca1\u6709\u5b50\u6811\u65f6\u5206\u6570\u4e3a\u81ea\u8eab\u503c \u5f53\u6ca1\u6709\u4e00\u9897\u5b50\u6811\u65f6\uff0c\u6ca1\u6709\u7684\u5b50\u6811\u6743\u503c\u4e3a1 \u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u524d\u5e8f\u904d\u5386\uff0c\u7531\u4e8e\u524d\u5e8f\u904d\u5386\u4f18\u5148\u8f93\u51fa\u6839\u8282\u70b9\uff0c\u800c\u6839\u8282\u70b9\u53c8\u4e3a\u4e0b\u6807\uff0c\u4e8e\u662f\u60f3\u5230\u6839\u7ed3\u70b9\u8d8a\u9760\u524d\u8d8a\u597d\uff0c\u5373\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6700\u5927\u503c\u7684\u6570\uff0c\u4e4b\u540e\u9047\u5230\u76f8\u540c\u5206\u6570\u4e0d\u8fdb\u884c f[l,r] f[l,r] \u7684\u66f4\u65b0 \u4ee3\u7801 \u00b6 // f[l][r]\u4e3a\u4e2d\u5e8f\u904d\u5386\u4e3al-r\u7684\u4e8c\u53c9\u6811\u7684\u5206\u6570\u6700\u5927\u503c // g[l][r]\u8868\u793a\u6839 #include <bits/stdc++.h> using namespace std ; const int N = 35 ; int a [ N ]; int f [ N ][ N ]; int g [ N ][ N ]; void dfs ( int l , int r ) { if ( l > r ) return ; int root = g [ l ][ r ]; cout << root << \" \" ; dfs ( l , root - 1 ); dfs ( root + 1 , r ); } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ i ] = a [ i ]; g [ i ][ i ] = i ; } for ( int len = 2 ; len <= n ; len ++ ) { for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { int r = l + len - 1 ; for ( int k = l ; k <= r ; k ++ ) { int left = ( k == l ? 1 : f [ l ][ k - 1 ]); int right = ( k == r ? 1 : f [ k + 1 ][ r ]); int score = left * right + a [ k ]; if ( score > f [ l ][ r ]) { // \u5b57\u5178\u5e8f\u6700\u5c0f\u8981\u6c42\u6839\u7684\u4f4d\u7f6e\u4e3a\u6700\u5de6\u8fb9 f [ l ][ r ] = score ; g [ l ][ r ] = k ; } } } } cout << f [ 1 ][ n ] << endl ; dfs ( 1 , n ); return 0 ; } \u4f8b6.\u68cb\u76d8\u5206\u5272 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a 8\u00d78 \u7684\u68cb\u76d8\u8fdb\u884c\u5982\u4e0b\u5206\u5272\uff1a\u5c06\u539f\u68cb\u76d8\u5272\u4e0b\u4e00\u5757\u77e9\u5f62\u68cb\u76d8\u5e76\u4f7f\u5269\u4e0b\u90e8\u5206\u4e5f\u662f\u77e9\u5f62\uff0c\u518d\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u7ee7\u7eed\u5982\u6b64\u5206\u5272\uff0c\u8fd9\u6837\u5272\u4e86 (n\u22121) \u6b21\u540e\uff0c\u8fde\u540c\u6700\u540e\u5269\u4e0b\u7684\u77e9\u5f62\u68cb\u76d8\u5171\u6709 n \u5757\u77e9\u5f62\u68cb\u76d8\u3002(\u6bcf\u6b21\u5207\u5272\u90fd\u53ea\u80fd\u6cbf\u7740\u68cb\u76d8\u683c\u5b50\u7684\u8fb9\u8fdb\u884c) \u539f\u68cb\u76d8\u4e0a\u6bcf\u4e00\u683c\u6709\u4e00\u4e2a\u5206\u503c\uff0c\u4e00\u5757\u77e9\u5f62\u68cb\u76d8\u7684\u603b\u5206\u4e3a\u5176\u6240\u542b\u5404\u683c\u5206\u503c\u4e4b\u548c\u3002 \u73b0\u5728\u9700\u8981\u628a\u68cb\u76d8\u6309\u4e0a\u8ff0\u89c4\u5219\u5206\u5272\u6210 n \u5757\u77e9\u5f62\u68cb\u76d8\uff0c\u5e76\u4f7f\u5404\u77e9\u5f62\u68cb\u76d8\u603b\u5206\u7684\u5747\u65b9\u5dee\u6700\u5c0f\u3002 \u5747\u65b9\u5deeformula.png \uff0c\u5176\u4e2d\u5e73\u5747\u503clala.png \uff0cxi \u4e3a\u7b2c i \u5757\u77e9\u5f62\u68cb\u76d8\u7684\u603b\u5206\u3002 \u8bf7\u7f16\u7a0b\u5bf9\u7ed9\u51fa\u7684\u68cb\u76d8\u53ca n\uff0c\u6c42\u51fa\u5747\u65b9\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c 1 \u884c\u4e3a\u4e00\u4e2a\u6574\u6570 n\u3002 \u7b2c 2 \u884c\u81f3\u7b2c 9 \u884c\u6bcf\u884c\u4e3a 8 \u4e2a\u5c0f\u4e8e 100 \u7684\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a\u68cb\u76d8\u4e0a\u76f8\u5e94\u683c\u5b50\u7684\u5206\u503c\u3002\u6bcf\u884c\u76f8\u90bb\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6700\u5c0f\u5747\u65b9\u5dee\u503c\uff08\u56db\u820d\u4e94\u5165\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e09\u4f4d\uff09\u3002 \u6570\u636e\u8303\u56f4 1<n<15 1<n<15 \u8f93\u5165\u6837\u4f8b 3 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 3 \u8f93\u51fa\u6837\u4f8b 1.633 \u9898\u89e3 \u00b6 \u8bbe f[x1][y1][x2][y2][k] f[x1][y1][x2][y2][k] \u4e3a\u5de6\u7aef\u70b9\u4e3a (x1,y1) (x1,y1) \uff0c\u53f3\u7aef\u70b9\u4e3a (x2,y2) (x2,y2) \u7684\u77e9\u9635\u5212\u5206\u4e3ak\u90e8\u5206\u7684\u5747\u65b9\u5dee\u7684\u6700\u5c0f\u503c\uff0c\u53d1\u73b0\u82e5\u8981\u4f7f\u6240\u6709\u90e8\u5206\u5728\u5207\u7684\u8fc7\u7a0b\u4e2d\u90fd\u80fd\u4e3a\u77e9\u5f62\uff0c\u53ea\u6709\u6a2a\u5207\u5230\u5e95\u548c\u7ad6\u5207\u5230\u5e95\u4e24\u79cd\u65b9\u6cd5\uff0c\u672c\u9898\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u6765\u5199 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: \u6a2a\u5207: f[x1][y1][x2][y2][k]=min(f[x1][y1][x2][i][k-1]+get(x1,i+1,x2,y2), f[x1][y1][x2][y2][k]=min(f[x1][y1][x2][i][k-1]+get(x1,i+1,x2,y2), f[x1][i+1][x2][y2][k-1]+get(x1,y1,x2,i),f[x1][y1][x2][y2][k]) f[x1][i+1][x2][y2][k-1]+get(x1,y1,x2,i),f[x1][y1][x2][y2][k]) \u7ad6\u5207: f[x1][y1][x2][y2][k]=min(f[x1][y1] [x2][i][k-1]+get(x1, i + 1, x2, y2), f[x1][y1][x2][y2][k]=min(f[x1][y1] [x2][i][k-1]+get(x1, i + 1, x2, y2), f[x1][i+1][x2][y2][k-1]+get(x1, y1, x2, i),f[x1][y1][x2][y2][k]) f[x1][i+1][x2][y2][k-1]+get(x1, y1, x2, i),f[x1][y1][x2][y2][k]) \u5229\u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u7ee7\u7eed\u4f18\u5316 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 10 , M = 16 ; double s [ N ][ N ]; double f [ M ][ M ][ M ][ M ][ N ]; double X ; int n ; double get ( int x1 , int y1 , int x2 , int y2 ) { double sum = s [ x2 ][ y2 ] - s [ x2 ][ y1 - 1 ] - s [ x1 - 1 ][ y2 ] + s [ x1 - 1 ][ y1 - 1 ]; sum -= X ; return sum * sum / n ; } double dfs ( int x1 , int y1 , int x2 , int y2 , int k ) { double & v = f [ x1 ][ y1 ][ x2 ][ y2 ][ k ]; if ( v >= 0 ) return v ; if ( k == 1 ) return get ( x1 , y1 , x2 , y2 ); v = 0x3f3f3f3f ; for ( int i = x1 ; i < x2 ; i ++ ) { // \u6a2a v = min ( v , dfs ( x1 , y1 , i , y2 , k - 1 ) + get ( i + 1 , y1 , x2 , y2 )); v = min ( v , dfs ( i + 1 , y1 , x2 , y2 , k - 1 ) + get ( x1 , y1 , i , y2 )); } for ( int i = y1 ; i < y2 ; i ++ ) { // \u7ad6 v = min ( v , dfs ( x1 , y1 , x2 , i , k - 1 ) + get ( x1 , i + 1 , x2 , y2 )); v = min ( v , dfs ( x1 , i + 1 , x2 , y2 , k - 1 ) + get ( x1 , y1 , x2 , i )); } return v ; } int main () { cin >> n ; for ( int i = 1 ; i <= 8 ; i ++ ) { for ( int j = 1 ; j <= 8 ; j ++ ) { cin >> s [ i ][ j ]; s [ i ][ j ] += s [ i - 1 ][ j ] + s [ i ][ j - 1 ] - s [ i - 1 ][ j - 1 ]; } } X = s [ 8 ][ 8 ] / n ; memset ( f , -1 , sizeof ( f )); printf ( \"%.3lf\" , sqrt ( dfs ( 1 , 1 , 8 , 8 , n ))); return 0 ; }","title":"\u533a\u95f4DP"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_1","text":"\u533a\u95f4dp\u5c31\u662f\u5229\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5c06\u6574\u4e2a\u533a\u95f4\u4e0d\u65ad\u7684\u62c6\u5206\u4e00\u4e0b\uff0c\u5c06\u4e00\u4e2a\u533a\u95f4[l,r]\u5206\u6210[l,k] [k+1,r]\uff0c\u7136\u540e\u518d\u5bf9[l,k]\u548c[k+1,r]\u8fdb\u884c\u7c7b\u4f3c\u7684\u62c6\u5206\uff0c\u76f4\u5230\u62c6\u5206\u6210\u6700\u5c0f\u7684\u533a\u95f4\uff0c\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u5c0f\u533a\u95f4\u7b97\u51fa\u6700\u5c0f\u6216\u8005\u6700\u5927\u4ee3\u4ef7\uff0c\u518d\u901a\u8fc7\u5c06\u8fd9\u4e9b\u5c0f\u533a\u95f4\u7ec4\u5408\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u533a\u95f4\uff0c\u54ea\u79cd\u7ec4\u5408\u65b9\u5f0f\u6700\u4f18\uff0c\u5219\u5c31\u662f\u6240\u6c42\u89e3\u3002\u89e3\u9898\u4e3a\u4e09\u90e8\u5206+\u6700\u540e\u4e00\u6b65+\u8fb9\u754c\u60c5\u51b5\u3002","title":"\u6982\u8ff0"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u8bbe\u6709 N \u5806\u77f3\u5b50\u6392\u6210\u4e00\u6392\uff0c\u5176\u7f16\u53f7\u4e3a 1\uff0c2\uff0c3\uff0c\u2026\uff0cN\u3002 \u6bcf\u5806\u77f3\u5b50\u6709\u4e00\u5b9a\u7684\u8d28\u91cf\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u6765\u63cf\u8ff0\uff0c\u73b0\u5728\u8981\u5c06\u8fd9 N \u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e3a\u4e00\u5806\u3002 \u6bcf\u6b21\u53ea\u80fd\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u5806\uff0c\u5408\u5e76\u7684\u4ee3\u4ef7\u4e3a\u8fd9\u4e24\u5806\u77f3\u5b50\u7684\u8d28\u91cf\u4e4b\u548c\uff0c\u5408\u5e76\u540e\u4e0e\u8fd9\u4e24\u5806\u77f3\u5b50\u76f8\u90bb\u7684\u77f3\u5b50\u5c06\u548c\u65b0\u5806\u76f8\u90bb\uff0c\u5408\u5e76\u65f6\u7531\u4e8e\u9009\u62e9\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u5408\u5e76\u7684\u603b\u4ee3\u4ef7\u4e5f\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\u6709 4 \u5806\u77f3\u5b50\u5206\u522b\u4e3a 1 3 5 2\uff0c \u6211\u4eec\u53ef\u4ee5\u5148\u5408\u5e76 1\u30012 \u5806\uff0c\u4ee3\u4ef7\u4e3a 4\uff0c\u5f97\u5230 4 5 2\uff0c \u53c8\u5408\u5e76 1\uff0c2 \u5806\uff0c\u4ee3\u4ef7\u4e3a 9\uff0c\u5f97\u5230 9 2 \uff0c\u518d\u5408\u5e76\u5f97\u5230 11\uff0c\u603b\u4ee3\u4ef7\u4e3a 4+9+11=24\uff1b \u5982\u679c\u7b2c\u4e8c\u6b65\u662f\u5148\u5408\u5e76 2\uff0c3 \u5806\uff0c\u5219\u4ee3\u4ef7\u4e3a 7\uff0c\u5f97\u5230 4 7\uff0c\u6700\u540e\u4e00\u6b21\u5408\u5e76\u4ee3\u4ef7\u4e3a 11\uff0c\u603b\u4ee3\u4ef7\u4e3a 4+7+11=22\u3002 \u95ee\u9898\u662f\uff1a\u627e\u51fa\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6cd5\uff0c\u4f7f\u603b\u7684\u4ee3\u4ef7\u6700\u5c0f\uff0c\u8f93\u51fa\u6700\u5c0f\u4ee3\u4ef7\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570 N \u8868\u793a\u77f3\u5b50\u7684\u5806\u6570 N\u3002 \u7b2c\u4e8c\u884c N \u4e2a\u6570\uff0c\u8868\u793a\u6bcf\u5806\u77f3\u5b50\u7684\u8d28\u91cf(\u5747\u4e0d\u8d85\u8fc7 1000)\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u4ee3\u4ef7\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264300 1\u2264N\u2264300 \u8f93\u5165\u6837\u4f8b 4 1 3 5 2 \u8f93\u51fa\u6837\u4f8b 22","title":"\u4f8b1.\u77f3\u5b50\u5408\u5e76"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_2","text":"\u533a\u95f4DP\u7684\u72b6\u6001\u5b9a\u4e49\u4e00\u822c\u4e3a\u4e00\u4e2a\u8303\u56f4\uff0c\u6211\u4eec\u4ee4 f[l,r] f[l,r] \u4e3a\u5408\u5e76 l-r l-r \u8303\u56f4\u5185\u7684\u77f3\u5b50\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u6839\u636e\u6700\u540e\u4e00\u6b65\u5408\u5e76\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u90e8\u5206\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f88\u5bb9\u6613\u53ef\u4ee5\u8868\u793a\u4e3a f[l,r]=min(f[l,k]+f[k + 1,r] + (w[l]+w[l+1]...+w[r]), f[l,r]) f[l,r]=min(f[l,k]+f[k + 1,r] + (w[l]+w[l+1]...+w[r]), f[l,r]) \uff0c\u5176\u4e2dk\u4e3a\u6700\u540e\u4e00\u6b65\u5408\u5e76\u7684\u7aef\u70b9,\u8fd9\u91cc w[l]+...w[r] w[l]+...w[r] \u53ef\u4ee5\u7528\u524d\u7f00\u548c\u4f18\u5316","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_3","text":"#include <bits/stdc++.h> using namespace std ; const int N = 305 ; int dp [ N ][ N ]; int a [ N ], sum [ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i -1 ] + a [ i ]; memset ( dp , 0x3f , sizeof ( dp )); for ( int i = 1 ; i <= n ; i ++ ) dp [ i ][ i ] = 0 ; for ( int len = 1 ; len <= n ; len ++ ) { for ( int i = 1 ; i <= n ; i ++ ) { if ( i + len -1 > n ) break ; int l = i , r = i + len -1 ; for ( int k = l ; k <= r ; k ++ ) { dp [ l ][ r ] = min ( dp [ l ][ r ], dp [ l ][ k ] + dp [ k + 1 ][ r ] + sum [ r ] - sum [ l -1 ]); } } } cout << dp [ 1 ][ n ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5c06 n \u5806\u77f3\u5b50\u7ed5\u5706\u5f62\u64cd\u573a\u6392\u653e\uff0c\u73b0\u8981\u5c06\u77f3\u5b50\u6709\u5e8f\u5730\u5408\u5e76\u6210\u4e00\u5806\u3002 \u89c4\u5b9a\u6bcf\u6b21\u53ea\u80fd\u9009\u76f8\u90bb\u7684\u4e24\u5806\u5408\u5e76\u6210\u65b0\u7684\u4e00\u5806\uff0c\u5e76\u5c06\u65b0\u7684\u4e00\u5806\u7684\u77f3\u5b50\u6570\u8bb0\u505a\u8be5\u6b21\u5408\u5e76\u7684\u5f97\u5206\u3002 \u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u5806\u6570 n \u53ca\u6bcf\u5806\u7684\u77f3\u5b50\u6570\uff0c\u5e76\u8fdb\u884c\u5982\u4e0b\u8ba1\u7b97\uff1a \u9009\u62e9\u4e00\u79cd\u5408\u5e76\u77f3\u5b50\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u505a n\u22121 \u6b21\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5927\u3002 \u9009\u62e9\u4e00\u79cd\u5408\u5e76\u77f3\u5b50\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u505a n\u22121 \u6b21\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5c0f\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\uff0c\u8868\u793a\u5171\u6709 n \u5806\u77f3\u5b50\u3002 \u7b2c\u4e8c\u884c\u5305\u542b n \u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u6bcf\u5806\u77f3\u5b50\u7684\u6570\u91cf\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5171\u4e24\u884c\uff1a \u7b2c\u4e00\u884c\u4e3a\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5c0f\u503c\uff0c \u7b2c\u4e8c\u884c\u4e3a\u5408\u5e76\u5f97\u5206\u603b\u548c\u6700\u5927\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264200 1\u2264n\u2264200 \u8f93\u5165\u6837\u4f8b 4 4 5 9 4 \u8f93\u51fa\u6837\u4f8b 43 54","title":"\u4f8b2.\u73af\u5f62\u77f3\u5b50\u5408\u5e76"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_4","text":"\u4e0e\u6734\u7d20\u7248\u76f8\u6bd4\uff0c\u591a\u4e86\u4e00\u4e2a\u7834\u73af\u6210\u94fe\u7684\u8fc7\u7a0b\uff0c\u7531\u4e8e\u662f\u4e2a\u73af\uff0cn\u5806\u77f3\u5b50\u5c31\u6709n\u4e2a\u7a7a\u9699\uff0c\u82e5\u6309\u7167\u7a7a\u9699\u65ad\u5f00\u53ef\u4ee5\u6709n\u79cd\u65ad\u6cd5\uff0c\u7531\u4e8e\u73af\u65ad\u5f00\u540e\u4e2a\u6570\u4ecd\u7136\u4e3an\u4e2a\uff0c\u4e8e\u662f\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u5728\u539fn\u5806\u77f3\u5b50\u540e\u9762\u8865\u4e0an\u4e2a\uff0c\u4ece\u524dn\u5806\u5f00\u59cb\u5206\u522b\u5bf9\u5e94\u4e00\u79cd\u65ad\u6cd5\uff0c\u6700\u540e\u5728\u8fd9\u4e9b\u65ad\u6cd5\u4e2d\u53d6\u6700\u5c0f\u503c(\u6216\u6700\u5927\u503c)\uff0c\u800c\u6bcf\u79cd\u65ad\u6cd5\u4f7f\u7528\u6734\u7d20\u7248\u7684\u505a\u6cd5\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_5","text":"#include <bits/stdc++.h> using namespace std ; const int N = 405 , INF = 0x3f3f3f3f ; int f [ N ][ N ], g [ N ][ N ]; int a [ N ]; int sum [ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]; a [ i + n ] = a [ i ]; } for ( int i = 1 ; i <= 2 * n ; i ++ ) sum [ i ] = sum [ i - 1 ] + a [ i ]; memset ( f , 0x3f , sizeof ( f )); memset ( g , -0x3f , sizeof ( g )); for ( int i = 1 ; i <= 2 * n ; i ++ ) f [ i ][ i ] = g [ i ][ i ] = 0 ; for ( int len = 2 ; len <= n ; len ++ ) { for ( int l = 1 ; l + len - 1 <= 2 * n ; l ++ ) { int r = l + len - 1 ; for ( int k = l ; k <= r ; k ++ ) { f [ l ][ r ] = min ( f [ l ][ r ], f [ l ][ k ] + f [ k + 1 ][ r ] + sum [ r ] - sum [ l - 1 ]); g [ l ][ r ] = max ( g [ l ][ r ], g [ l ][ k ] + g [ k + 1 ][ r ] + sum [ r ] - sum [ l - 1 ]); } } } int minx = INF , maxx = - INF ; for ( int i = 1 ; i <= n ; i ++ ) { minx = min ( minx , f [ i ][ i + n - 1 ]); maxx = max ( maxx , g [ i ][ i + n - 1 ]); } cout << minx << endl << maxx ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728 Mars \u661f\u7403\u4e0a\uff0c\u6bcf\u4e2a Mars \u4eba\u90fd\u968f\u8eab\u4f69\u5e26\u7740\u4e00\u4e32\u80fd\u91cf\u9879\u94fe\uff0c\u5728\u9879\u94fe\u4e0a\u6709 N \u9897\u80fd\u91cf\u73e0\u3002 \u80fd\u91cf\u73e0\u662f\u4e00\u9897\u6709\u5934\u6807\u8bb0\u4e0e\u5c3e\u6807\u8bb0\u7684\u73e0\u5b50\uff0c\u8fd9\u4e9b\u6807\u8bb0\u5bf9\u5e94\u7740\u67d0\u4e2a\u6b63\u6574\u6570\u3002 \u5e76\u4e14\uff0c\u5bf9\u4e8e\u76f8\u90bb\u7684\u4e24\u9897\u73e0\u5b50\uff0c\u524d\u4e00\u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u4e00\u5b9a\u7b49\u4e8e\u540e\u4e00\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002 \u56e0\u4e3a\u53ea\u6709\u8fd9\u6837\uff0c\u901a\u8fc7\u5438\u76d8\uff08\u5438\u76d8\u662f Mars \u4eba\u5438\u6536\u80fd\u91cf\u7684\u4e00\u79cd\u5668\u5b98\uff09\u7684\u4f5c\u7528\uff0c\u8fd9\u4e24\u9897\u73e0\u5b50\u624d\u80fd\u805a\u5408\u6210\u4e00\u9897\u73e0\u5b50\uff0c\u540c\u65f6\u91ca\u653e\u51fa\u53ef\u4ee5\u88ab\u5438\u76d8\u5438\u6536\u7684\u80fd\u91cf\u3002 \u5982\u679c\u524d\u4e00\u9897\u80fd\u91cf\u73e0\u7684\u5934\u6807\u8bb0\u4e3a m\uff0c\u5c3e\u6807\u8bb0\u4e3a r\uff0c\u540e\u4e00\u9897\u80fd\u91cf\u73e0\u7684\u5934\u6807\u8bb0\u4e3a r\uff0c\u5c3e\u6807\u8bb0\u4e3a n\uff0c\u5219\u805a\u5408\u540e\u91ca\u653e\u7684\u80fd\u91cf\u4e3a m\u00d7r\u00d7n\uff08Mars \u5355\u4f4d\uff09\uff0c\u65b0\u4ea7\u751f\u7684\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u4e3a m\uff0c\u5c3e\u6807\u8bb0\u4e3a n\u3002 \u9700\u8981\u65f6\uff0cMars \u4eba\u5c31\u7528\u5438\u76d8\u5939\u4f4f\u76f8\u90bb\u7684\u4e24\u9897\u73e0\u5b50\uff0c\u901a\u8fc7\u805a\u5408\u5f97\u5230\u80fd\u91cf\uff0c\u76f4\u5230\u9879\u94fe\u4e0a\u53ea\u5269\u4e0b\u4e00\u9897\u73e0\u5b50\u4e3a\u6b62\u3002 \u663e\u7136\uff0c\u4e0d\u540c\u7684\u805a\u5408\u987a\u5e8f\u5f97\u5230\u7684\u603b\u80fd\u91cf\u662f\u4e0d\u540c\u7684\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u805a\u5408\u987a\u5e8f\uff0c\u4f7f\u4e00\u4e32\u9879\u94fe\u91ca\u653e\u51fa\u7684\u603b\u80fd\u91cf\u6700\u5927\u3002 \u4f8b\u5982\uff1a\u8bbe N=4\uff0c4 \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u4e0e\u5c3e\u6807\u8bb0\u4f9d\u6b21\u4e3a (2\uff0c3)(3\uff0c5)(5\uff0c10)(10\uff0c2)\u3002 \u6211\u4eec\u7528\u8bb0\u53f7 \u2295 \u8868\u793a\u4e24\u9897\u73e0\u5b50\u7684\u805a\u5408\u64cd\u4f5c\uff0c(j\u2295k) \u8868\u793a\u7b2c j\uff0ck \u4e24\u9897\u73e0\u5b50\u805a\u5408\u540e\u6240\u91ca\u653e\u7684\u80fd\u91cf\u3002\u5219 \u7b2c 4\u30011 \u4e24\u9897\u73e0\u5b50\u805a\u5408\u540e\u91ca\u653e\u7684\u80fd\u91cf\u4e3a\uff1a(4\u22951)=10\u00d72\u00d73=60\u3002 \u8fd9\u4e00\u4e32\u9879\u94fe\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u503c\u7684\u4e00\u4e2a\u805a\u5408\u987a\u5e8f\u6240\u91ca\u653e\u7684\u603b\u80fd\u91cf\u4e3a ((4\u22951)\u22952)\u22953)=10\u00d72\u00d73+10\u00d73\u00d75+10\u00d75\u00d710=710\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 N\uff0c\u8868\u793a\u9879\u94fe\u4e0a\u73e0\u5b50\u7684\u4e2a\u6570\u3002 \u7b2c\u4e8c\u884c\u662f N \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u6240\u6709\u7684\u6570\u5747\u4e0d\u8d85\u8fc7 1000\uff0c\u7b2c i \u4e2a\u6570\u4e3a\u7b2c i \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\uff0c\u5f53 i < N \u65f6\uff0c\u7b2c i \u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u5e94\u8be5\u7b49\u4e8e\u7b2c i+1 \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\uff0c\u7b2c N \u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u5e94\u8be5\u7b49\u4e8e\u7b2c 1 \u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002 \u81f3\u4e8e\u73e0\u5b50\u7684\u987a\u5e8f\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u786e\u5b9a\uff1a\u5c06\u9879\u94fe\u653e\u5230\u684c\u9762\u4e0a\uff0c\u4e0d\u8981\u51fa\u73b0\u4ea4\u53c9\uff0c\u968f\u610f\u6307\u5b9a\u7b2c\u4e00\u9897\u73e0\u5b50\uff0c\u7136\u540e\u6309\u987a\u65f6\u9488\u65b9\u5411\u786e\u5b9a\u5176\u4ed6\u73e0\u5b50\u7684\u987a\u5e8f\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 E\uff0c\u4e3a\u4e00\u4e2a\u6700\u4f18\u805a\u5408\u987a\u5e8f\u6240\u91ca\u653e\u7684\u603b\u80fd\u91cf\u3002 \u6570\u636e\u8303\u56f4 4\u2264N\u2264100, 4\u2264N\u2264100, 1\u2264E\u22642.1\u00d7109 1\u2264E\u22642.1\u00d7109 \u8f93\u5165\u6837\u4f8b 4 2 3 5 10 \u8f93\u51fa\u6837\u4f8b 710","title":"\u4f8b3.\u80fd\u91cf\u9879\u94fe"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_6","text":"\u73af\u5f62\u95ee\u9898\uff0c\u9996\u5148\u7834\u73af\u6210\u94fe\uff0c\u53c2\u8003\u73af\u5f62\u77f3\u5b50\u5408\u5e76\u7684\u65b9\u6cd5\uff0c\u672c\u9898\u4e0e\u73af\u5f62\u77f3\u5b50\u5408\u5e76\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u6bcf\u4e00\u5806\u65e2\u6709\u5934\u4e5f\u6709\u5c3e\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5806\u6570\u4e3an\u7684\u77f3\u5b50\u5b9e\u9645\u957f\u5ea6\u5e94\u8be5\u4e3an+1\uff0c\u6240\u4ee5\u672c\u9898\u5c31\u662f\u5728\u957f\u5ea6\u4e3an+1\u7684\u77f3\u5b50\u5806\u4e2d\u505a\u73af\u5f62\u77f3\u5b50\u5408\u5e76\u95ee\u9898\uff0c\u7b2cn+1\u548c\u7b2c1\u4e2a\u4e00\u6837\uff0c\u957f\u5ea6\u4e3a1\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece2\u5f00\u59cb\u679a\u4e3e\uff0c\u6ce8\u610f\u4e00\u4e2a\u5c0f\u5751\uff0c\u5728\u679a\u4e3e\u6700\u540e\u4e00\u6b65\u65f6\u4e0d\u80fd\u9009\u62e9\u4e00\u4e2a\u73e0\u5b50\u7684\u540c\u4e00\u7aef\uff0c\u5373k\u8303\u56f4\u4e3al+1\u5230r-1","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_7","text":"#include <bits/stdc++.h> using namespace std ; const int N = 205 ; int dp [ N ][ N ]; int a [ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= 2 * n ; i ++ ) { cin >> a [ i ]; a [ i + n ] = a [ i ]; } for ( int len = 2 ; len <= n + 1 ; len ++ ) { for ( int l = 1 ; l + len - 1 <= 2 * n ; l ++ ) { int r = l + len - 1 ; for ( int k = l + 1 ; k <= r - 1 ; k ++ ) { dp [ l ][ r ] = max ( dp [ l ][ r ], dp [ l ][ k ] + dp [ k ][ r ] + a [ l ] * a [ r ] * a [ k ]); } } } int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { res = max ( res , dp [ i ][ i + n ]); } cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5177\u6709 N \u4e2a\u9876\u70b9\u7684\u51f8\u591a\u8fb9\u5f62\uff0c\u5c06\u9876\u70b9\u4ece 1 \u81f3 N \u6807\u53f7\uff0c\u6bcf\u4e2a\u9876\u70b9\u7684\u6743\u503c\u90fd\u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u5c06\u8fd9\u4e2a\u51f8\u591a\u8fb9\u5f62\u5212\u5206\u6210 N\u22122 \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u4e09\u89d2\u5f62\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e09\u89d2\u5f62\uff0c\u5176\u4e09\u4e2a\u9876\u70b9\u7684\u6743\u503c\u76f8\u4e58\u90fd\u53ef\u5f97\u5230\u4e00\u4e2a\u6743\u503c\u4e58\u79ef\uff0c\u8bd5\u6c42\u6240\u6709\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u6743\u503c\u4e58\u79ef\u4e4b\u548c\u81f3\u5c11\u4e3a\u591a\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N\uff0c\u8868\u793a\u9876\u70b9\u6570\u91cf\u3002 \u7b2c\u4e8c\u884c\u5305\u542b N \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4e3a\u9876\u70b9 1 \u81f3\u9876\u70b9 N \u7684\u6743\u503c\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u4e3a\u6240\u6709\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u6743\u503c\u4e58\u79ef\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u3002 \u6570\u636e\u8303\u56f4 N\u226450, N\u226450, \u6570\u636e\u4fdd\u8bc1\u6240\u6709\u9876\u70b9\u7684\u6743\u503c\u90fd\u5c0f\u4e8e 10^9 10^9 \u8f93\u5165\u6837\u4f8b 5 121 122 123 245 231 \u8f93\u51fa\u6837\u4f8b 12214884","title":"\u4f8b4.\u51f8\u591a\u8fb9\u5f62\u7684\u5212\u5206"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_8","text":"\u6211\u4eec\u679a\u4e3e\u4e09\u89d2\u5f62\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u8bbe f[l,r] f[l,r] \u4e3a\u6240\u6709\u7531 [l,l+1],[l+1,l+2],...[r-2,r-1],[r-1,r],[r-l] [l,l+1],[l+1,l+2],...[r-2,r-1],[r-1,r],[r-l] \u8fd9\u4e9b\u8fb9\u7ec4\u6210\u7684\u56db\u8fb9\u5f62\u5212\u5206\u6210\u4e09\u89d2\u5f62\u65b9\u6848\u7684\u6700\u5c0f\u503c\uff0c\u6839\u636e\u6700\u540e\u4e00\u6b65\u5373\u9664 l,r l,r \u8fd9\u4e24\u4e2a\u70b9\u5916\u4e09\u89d2\u5f62\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u4f4d\u7f6e\u786e\u5b9a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e09\u4e2a\u70b9\u53ef\u4ee5\u53d6\u5230 (l,r) (l,r) \u5185\u7684\u6240\u6709\u70b9\uff0c\u4e8e\u662f f[l,r]=min(f[l,r],f[l,k]+f[k,r]+w[l]*w[k]*w[r] f[l,r]=min(f[l,r],f[l,k]+f[k,r]+w[l]*w[k]*w[r] \uff0c\u770b\u4e0a\u53bb\u548c\u4e0a\u9898\u8f6c\u79fb\u65b9\u7a0b\u4e00\u6837\uff0c\u4f46\u672c\u9898\u957f\u5ea6\u4e3an\u5e76\u4e14\u4e0d\u9700\u8981\u7834\u73af\u5c31\u80fd\u679a\u4e3e\u5230\u6240\u6709\u7ebf\u6bb5\uff0c\u6570\u636e\u8303\u56f4\u5f88\u5927\uff0c\u9700\u8981\u4f7f\u7528\u9ad8\u7cbe\u5ea6","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_9","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 55 , M = 100 ; int dp [ N ][ N ][ M ]; int a [ N ]; int n ; void add ( int a [], int b []) { int c [ M ]; memset ( c , 0 , sizeof ( c )); for ( int i = 0 , t = 0 ; i < M ; i ++ ) { t += a [ i ] + b [ i ]; c [ i ] = t % 10 ; t /= 10 ; } memcpy ( a , c , sizeof ( c )); } void mul ( int a [], int b ) { int c [ M ]; memset ( c , 0 , sizeof ( c )); int t = 0 ; for ( int i = 0 ; i < M ; i ++ ) { t += a [ i ] * b ; c [ i ] = t % 10 ; t /= 10 ; } memcpy ( a , c , sizeof ( c )); } int cmp ( int a [], int b []) { for ( int i = M - 1 ; i >= 0 ; i -- ) { if ( a [ i ] > b [ i ]) return 1 ; else if ( a [ i ] < b [ i ]) return -1 ; } return 0 ; } void print ( int a []) { int k = M - 1 ; while ( ! a [ k ] && k ) k -- ; while ( k >= 0 ) cout << a [ k -- ]; cout << endl ; } signed main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]; } int tmp [ M ]; for ( int len = 3 ; len <= n ; len ++ ) { for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { int r = l + len - 1 ; for ( int i = 0 ; i < M ; i ++ ) dp [ l ][ r ][ i ] = 9 ; for ( int k = l + 1 ; k < r ; k ++ ) { // dp[l][r] = min(dp[l][r], dp[l][k] + dp[k][r] + a[l] * a[k] * a[r]); memset ( tmp , 0 , sizeof ( tmp )); tmp [ 0 ] = a [ l ]; mul ( tmp , a [ k ]); mul ( tmp , a [ r ]); add ( tmp , dp [ l ][ k ]); add ( tmp , dp [ k ][ r ]); if ( cmp ( dp [ l ][ r ], tmp ) > 0 ) memcpy ( dp [ l ][ r ], tmp , sizeof ( tmp )); } } } print ( dp [ 1 ][ n ]); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#5","text":"\u9898\u76ee\u63cf\u8ff0 \u8bbe\u4e00\u4e2a n \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811 tree \u7684\u4e2d\u5e8f\u904d\u5386\u4e3a\uff081,2,3,\u2026,n\uff09\uff0c\u5176\u4e2d\u6570\u5b57 1,2,3,\u2026,n \u4e3a\u8282\u70b9\u7f16\u53f7\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff08\u5747\u4e3a\u6b63\u6574\u6570\uff09\uff0c\u8bb0\u7b2c i \u4e2a\u8282\u70b9\u7684\u5206\u6570\u4e3a di\uff0ctree \u53ca\u5b83\u7684\u6bcf\u4e2a\u5b50\u6811\u90fd\u6709\u4e00\u4e2a\u52a0\u5206\uff0c\u4efb\u4e00\u68f5\u5b50\u6811 subtree\uff08\u4e5f\u5305\u542b tree \u672c\u8eab\uff09\u7684\u52a0\u5206\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a\u2002\u2002\u2002\u2002\u2002 subtree\u7684\u5de6\u5b50\u6811\u7684\u52a0\u5206 \u00d7 subtree\u7684\u53f3\u5b50\u6811\u7684\u52a0\u5206 \uff0b subtree\u7684\u6839\u7684\u5206\u6570\u2002 \u82e5\u67d0\u4e2a\u5b50\u6811\u4e3a\u7a7a\uff0c\u89c4\u5b9a\u5176\u52a0\u5206\u4e3a 1\u3002 \u53f6\u5b50\u7684\u52a0\u5206\u5c31\u662f\u53f6\u8282\u70b9\u672c\u8eab\u7684\u5206\u6570\uff0c\u4e0d\u8003\u8651\u5b83\u7684\u7a7a\u5b50\u6811\u3002 \u8bd5\u6c42\u4e00\u68f5\u7b26\u5408\u4e2d\u5e8f\u904d\u5386\u4e3a\uff081,2,3,\u2026,n\uff09\u4e14\u52a0\u5206\u6700\u9ad8\u7684\u4e8c\u53c9\u6811 tree\u3002 \u8981\u6c42\u8f93\u51fa\uff1a\u2002 \uff081\uff09tree\u7684\u6700\u9ad8\u52a0\u5206\u2002 \uff082\uff09tree\u7684\u524d\u5e8f\u904d\u5386 \u8f93\u5165\u683c\u5f0f \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 n\uff0c\u4e3a\u8282\u70b9\u4e2a\u6570\u3002\u2002 \u7b2c 2 \u884c\uff1an \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u5206\u6570\uff080<\u5206\u6570<100\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u6700\u9ad8\u52a0\u5206\uff08\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7int\u8303\u56f4\uff09\u3002\u2002\u2002\u2002\u2002\u2002 \u7b2c 2 \u884c\uff1an \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u4e3a\u8be5\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002\u5982\u679c\u5b58\u5728\u591a\u79cd\u65b9\u6848\uff0c\u5219\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\u3002 \u6570\u636e\u8303\u56f4 n<30 n<30 \u8f93\u5165\u6837\u4f8b 5 5 7 1 2 10 \u8f93\u51fa\u6837\u4f8b 145 3 1 2 4 5","title":"\u4f8b5.\u52a0\u5206\u4e8c\u53c9\u6811"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_10","text":"\u7531\u4e8e\u6bcf\u4e00\u9897\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5728\u5e8f\u5217\u4e2d\u65f6\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6839\u636e\u4ee5\u5f80\u533a\u95f4DP\u5c06\u5176\u5206\u6210\u4e09\u90e8\u5206\u7684\u89c4\u5f8b\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u4ee4 f[l,r] f[l,r] \u4e3a\u4e2d\u5e8f\u904d\u5386\u4e3a l-r l-r \u7684\u4e8c\u53c9\u6811\u65b9\u6848\u7684\u5206\u6570\u6700\u5927\u503c\uff0c\u8fd9\u91cc\u7684\u6700\u540e\u4e00\u6b65\u662f\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff0c\u5047\u8bbe\u4e3ak\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a f[l,r]=max(f[l,r],f[l,k-1] \\times f[k+1,r]+w[k]) f[l,r]=max(f[l,r],f[l,k-1] \\times f[k+1,r]+w[k]) \u6ce8\u610f\u8fb9\u754c\u60c5\u51b5 \u5f53\u6ca1\u6709\u5b50\u6811\u65f6\u5206\u6570\u4e3a\u81ea\u8eab\u503c \u5f53\u6ca1\u6709\u4e00\u9897\u5b50\u6811\u65f6\uff0c\u6ca1\u6709\u7684\u5b50\u6811\u6743\u503c\u4e3a1 \u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u524d\u5e8f\u904d\u5386\uff0c\u7531\u4e8e\u524d\u5e8f\u904d\u5386\u4f18\u5148\u8f93\u51fa\u6839\u8282\u70b9\uff0c\u800c\u6839\u8282\u70b9\u53c8\u4e3a\u4e0b\u6807\uff0c\u4e8e\u662f\u60f3\u5230\u6839\u7ed3\u70b9\u8d8a\u9760\u524d\u8d8a\u597d\uff0c\u5373\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6700\u5927\u503c\u7684\u6570\uff0c\u4e4b\u540e\u9047\u5230\u76f8\u540c\u5206\u6570\u4e0d\u8fdb\u884c f[l,r] f[l,r] \u7684\u66f4\u65b0","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_11","text":"// f[l][r]\u4e3a\u4e2d\u5e8f\u904d\u5386\u4e3al-r\u7684\u4e8c\u53c9\u6811\u7684\u5206\u6570\u6700\u5927\u503c // g[l][r]\u8868\u793a\u6839 #include <bits/stdc++.h> using namespace std ; const int N = 35 ; int a [ N ]; int f [ N ][ N ]; int g [ N ][ N ]; void dfs ( int l , int r ) { if ( l > r ) return ; int root = g [ l ][ r ]; cout << root << \" \" ; dfs ( l , root - 1 ); dfs ( root + 1 , r ); } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ i ] = a [ i ]; g [ i ][ i ] = i ; } for ( int len = 2 ; len <= n ; len ++ ) { for ( int l = 1 ; l + len - 1 <= n ; l ++ ) { int r = l + len - 1 ; for ( int k = l ; k <= r ; k ++ ) { int left = ( k == l ? 1 : f [ l ][ k - 1 ]); int right = ( k == r ? 1 : f [ k + 1 ][ r ]); int score = left * right + a [ k ]; if ( score > f [ l ][ r ]) { // \u5b57\u5178\u5e8f\u6700\u5c0f\u8981\u6c42\u6839\u7684\u4f4d\u7f6e\u4e3a\u6700\u5de6\u8fb9 f [ l ][ r ] = score ; g [ l ][ r ] = k ; } } } } cout << f [ 1 ][ n ] << endl ; dfs ( 1 , n ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#6","text":"\u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a 8\u00d78 \u7684\u68cb\u76d8\u8fdb\u884c\u5982\u4e0b\u5206\u5272\uff1a\u5c06\u539f\u68cb\u76d8\u5272\u4e0b\u4e00\u5757\u77e9\u5f62\u68cb\u76d8\u5e76\u4f7f\u5269\u4e0b\u90e8\u5206\u4e5f\u662f\u77e9\u5f62\uff0c\u518d\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u7ee7\u7eed\u5982\u6b64\u5206\u5272\uff0c\u8fd9\u6837\u5272\u4e86 (n\u22121) \u6b21\u540e\uff0c\u8fde\u540c\u6700\u540e\u5269\u4e0b\u7684\u77e9\u5f62\u68cb\u76d8\u5171\u6709 n \u5757\u77e9\u5f62\u68cb\u76d8\u3002(\u6bcf\u6b21\u5207\u5272\u90fd\u53ea\u80fd\u6cbf\u7740\u68cb\u76d8\u683c\u5b50\u7684\u8fb9\u8fdb\u884c) \u539f\u68cb\u76d8\u4e0a\u6bcf\u4e00\u683c\u6709\u4e00\u4e2a\u5206\u503c\uff0c\u4e00\u5757\u77e9\u5f62\u68cb\u76d8\u7684\u603b\u5206\u4e3a\u5176\u6240\u542b\u5404\u683c\u5206\u503c\u4e4b\u548c\u3002 \u73b0\u5728\u9700\u8981\u628a\u68cb\u76d8\u6309\u4e0a\u8ff0\u89c4\u5219\u5206\u5272\u6210 n \u5757\u77e9\u5f62\u68cb\u76d8\uff0c\u5e76\u4f7f\u5404\u77e9\u5f62\u68cb\u76d8\u603b\u5206\u7684\u5747\u65b9\u5dee\u6700\u5c0f\u3002 \u5747\u65b9\u5deeformula.png \uff0c\u5176\u4e2d\u5e73\u5747\u503clala.png \uff0cxi \u4e3a\u7b2c i \u5757\u77e9\u5f62\u68cb\u76d8\u7684\u603b\u5206\u3002 \u8bf7\u7f16\u7a0b\u5bf9\u7ed9\u51fa\u7684\u68cb\u76d8\u53ca n\uff0c\u6c42\u51fa\u5747\u65b9\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c 1 \u884c\u4e3a\u4e00\u4e2a\u6574\u6570 n\u3002 \u7b2c 2 \u884c\u81f3\u7b2c 9 \u884c\u6bcf\u884c\u4e3a 8 \u4e2a\u5c0f\u4e8e 100 \u7684\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a\u68cb\u76d8\u4e0a\u76f8\u5e94\u683c\u5b50\u7684\u5206\u503c\u3002\u6bcf\u884c\u76f8\u90bb\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6700\u5c0f\u5747\u65b9\u5dee\u503c\uff08\u56db\u820d\u4e94\u5165\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e09\u4f4d\uff09\u3002 \u6570\u636e\u8303\u56f4 1<n<15 1<n<15 \u8f93\u5165\u6837\u4f8b 3 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 3 \u8f93\u51fa\u6837\u4f8b 1.633","title":"\u4f8b6.\u68cb\u76d8\u5206\u5272"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_12","text":"\u8bbe f[x1][y1][x2][y2][k] f[x1][y1][x2][y2][k] \u4e3a\u5de6\u7aef\u70b9\u4e3a (x1,y1) (x1,y1) \uff0c\u53f3\u7aef\u70b9\u4e3a (x2,y2) (x2,y2) \u7684\u77e9\u9635\u5212\u5206\u4e3ak\u90e8\u5206\u7684\u5747\u65b9\u5dee\u7684\u6700\u5c0f\u503c\uff0c\u53d1\u73b0\u82e5\u8981\u4f7f\u6240\u6709\u90e8\u5206\u5728\u5207\u7684\u8fc7\u7a0b\u4e2d\u90fd\u80fd\u4e3a\u77e9\u5f62\uff0c\u53ea\u6709\u6a2a\u5207\u5230\u5e95\u548c\u7ad6\u5207\u5230\u5e95\u4e24\u79cd\u65b9\u6cd5\uff0c\u672c\u9898\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u6765\u5199 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: \u6a2a\u5207: f[x1][y1][x2][y2][k]=min(f[x1][y1][x2][i][k-1]+get(x1,i+1,x2,y2), f[x1][y1][x2][y2][k]=min(f[x1][y1][x2][i][k-1]+get(x1,i+1,x2,y2), f[x1][i+1][x2][y2][k-1]+get(x1,y1,x2,i),f[x1][y1][x2][y2][k]) f[x1][i+1][x2][y2][k-1]+get(x1,y1,x2,i),f[x1][y1][x2][y2][k]) \u7ad6\u5207: f[x1][y1][x2][y2][k]=min(f[x1][y1] [x2][i][k-1]+get(x1, i + 1, x2, y2), f[x1][y1][x2][y2][k]=min(f[x1][y1] [x2][i][k-1]+get(x1, i + 1, x2, y2), f[x1][i+1][x2][y2][k-1]+get(x1, y1, x2, i),f[x1][y1][x2][y2][k]) f[x1][i+1][x2][y2][k-1]+get(x1, y1, x2, i),f[x1][y1][x2][y2][k]) \u5229\u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u7ee7\u7eed\u4f18\u5316","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_13","text":"#include <bits/stdc++.h> using namespace std ; const int N = 10 , M = 16 ; double s [ N ][ N ]; double f [ M ][ M ][ M ][ M ][ N ]; double X ; int n ; double get ( int x1 , int y1 , int x2 , int y2 ) { double sum = s [ x2 ][ y2 ] - s [ x2 ][ y1 - 1 ] - s [ x1 - 1 ][ y2 ] + s [ x1 - 1 ][ y1 - 1 ]; sum -= X ; return sum * sum / n ; } double dfs ( int x1 , int y1 , int x2 , int y2 , int k ) { double & v = f [ x1 ][ y1 ][ x2 ][ y2 ][ k ]; if ( v >= 0 ) return v ; if ( k == 1 ) return get ( x1 , y1 , x2 , y2 ); v = 0x3f3f3f3f ; for ( int i = x1 ; i < x2 ; i ++ ) { // \u6a2a v = min ( v , dfs ( x1 , y1 , i , y2 , k - 1 ) + get ( i + 1 , y1 , x2 , y2 )); v = min ( v , dfs ( i + 1 , y1 , x2 , y2 , k - 1 ) + get ( x1 , y1 , i , y2 )); } for ( int i = y1 ; i < y2 ; i ++ ) { // \u7ad6 v = min ( v , dfs ( x1 , y1 , x2 , i , k - 1 ) + get ( x1 , i + 1 , x2 , y2 )); v = min ( v , dfs ( x1 , i + 1 , x2 , y2 , k - 1 ) + get ( x1 , y1 , x2 , i )); } return v ; } int main () { cin >> n ; for ( int i = 1 ; i <= 8 ; i ++ ) { for ( int j = 1 ; j <= 8 ; j ++ ) { cin >> s [ i ][ j ]; s [ i ][ j ] += s [ i - 1 ][ j ] + s [ i ][ j - 1 ] - s [ i - 1 ][ j - 1 ]; } } X = s [ 8 ][ 8 ] / n ; memset ( f , -1 , sizeof ( f )); printf ( \"%.3lf\" , sqrt ( dfs ( 1 , 1 , 8 , 8 , n ))); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/","text":"\u5355\u8c03\u961f\u5217 \u00b6 \u5355\u8c03\u961f\u5217\u662f\u5728\u961f\u5217\u7684\u57fa\u7840\u4e0a\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u7684\u5e8f\u5217\u3002\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\uff08\u7ed9\u5b9a\u5927\u5c0f\u7684\uff09\u533a\u95f4\u7684\u6700\u503c\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3ao(n)\uff0c\u5176\u4e2dn\u4e3a\u5e8f\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b1.\u6ed1\u52a8\u7a97\u53e3 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n\u2264106 \u7684\u6570\u7ec4\u3002 \u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u5b83\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u8fb9\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002 \u4f60\u53ea\u80fd\u5728\u7a97\u53e3\u4e2d\u770b\u5230 k \u4e2a\u6570\u5b57\u3002 \u6bcf\u6b21\u6ed1\u52a8\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u8be5\u6570\u7ec4\u4e3a [1 3 -1 -3 5 3 6 7]\uff0ck \u4e3a 3\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u6ed1\u52a8\u7a97\u53e3\u4f4d\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u5206\u522b\u4ee3\u8868\u6570\u7ec4\u957f\u5ea6\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u6709 n \u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u5177\u4f53\u6570\u503c\u3002 \u540c\u884c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5305\u542b\u4e24\u4e2a\u3002 \u7b2c\u4e00\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u7b2c\u4e8c\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8f93\u5165\u6837\u4f8b 8 3 1 3 -1 -3 5 3 6 7 \u8f93\u51fa\u6837\u4f8b -1 -3 -3 -3 3 3 3 3 5 5 6 7 \u9898\u89e3 \u00b6 \u961f\u5217\u4e2d\u7ef4\u62a4\u957f\u5ea6\u4e3am\u7684\u533a\u95f4\u5185\u6570\u7684\u6700\u503c \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; const int N = 1000010 ; int a [ N ], q [ N ], n , k , hh = 0 , tt = -1 ; int main () { cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; for ( int i = 0 ; i < n ; i ++ ) { while ( hh <= tt && i - k + 1 > q [ hh ]) hh ++ ; while ( hh <= tt && a [ i ] <= a [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; if ( i - k + 1 >= 0 ) cout << a [ q [ hh ]] << \" \" ; } cout << endl ; hh = 0 , tt = -1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hh <= tt && i - k + 1 > q [ hh ]) hh ++ ; while ( hh <= tt && a [ i ] >= a [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; if ( i - k + 1 >= 0 ) cout << a [ q [ hh ]] << \" \" ; } cout << endl ; } \u4f8b2.\u6700\u5927\u5b50\u5e8f\u548c \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u4e2d\u627e\u51fa\u4e00\u6bb5\u957f\u5ea6\u4e0d\u8d85\u8fc7 m \u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u5b50\u5e8f\u5217\u4e2d\u6240\u6709\u6570\u7684\u548c\u6700\u5927\u3002 \u6ce8\u610f\uff1a \u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u81f3\u5c11\u662f 1\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570 n,m\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165 n \u4e2a\u6570\uff0c\u4ee3\u8868\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217\u3002 \u540c\u4e00\u884c\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u8be5\u5e8f\u5217\u7684\u6700\u5927\u5b50\u5e8f\u548c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264300000 1\u2264n,m\u2264300000 \u8f93\u5165\u6837\u4f8b 6 4 1 -3 5 1 -2 3 \u8f93\u51fa\u6837\u4f8b 7 \u9898\u89e3 \u00b6 \u5b50\u5e8f\u548c\u5f88\u5bb9\u6613\u60f3\u5230\u524d\u7f00\u548c\uff0c s[i]+s[i+1]...+s[j] = s[j] - s[i - 1] s[i]+s[i+1]...+s[j] = s[j] - s[i - 1] \uff0c\u5f53\u6211\u4eec\u904d\u5386\u5230\u7b2ci\u4e2a\u6570\u65f6\uff0c\u6700\u5927\u5b50\u5e8f\u548c= s[i]-min_{j-m<j<i}(s[j]) s[i]-min_{j-m<j<i}(s[j]) \uff0c\u53d1\u73b0\u662f\u533a\u95f4\u6700\u503c\u95ee\u9898\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\uff0c\u961f\u5217\u4e2d\u7ef4\u62a4\u8fde\u7eedm\u4e2a\u6570\u4e2ds[i]\u7684\u6700\u5c0f\u503c \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 3e5 + 5 ; int s [ N ]; int q [ N ], tt = -1 , hh = 0 ; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ]; s [ i ] += s [ i - 1 ]; } int res = -0x3f3f3f3f ; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] > m ) hh ++ ; res = max ( res , s [ i ] - s [ q [ hh ]]); while ( hh <= tt && s [ i ] <= s [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; } cout << res ; return 0 ; } \u4f8b3.\u4fee\u526a\u8349\u576a \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u5e74\u524d\u8d62\u5f97\u4e86\u5c0f\u9547\u7684\u6700\u4f73\u8349\u576a\u6bd4\u8d5b\u540e\uff0cFJ \u53d8\u5f97\u5f88\u61d2\uff0c\u518d\u4e5f\u6ca1\u6709\u4fee\u526a\u8fc7\u8349\u576a\u3002 \u73b0\u5728\uff0c\u65b0\u4e00\u8f6e\u7684\u6700\u4f73\u8349\u576a\u6bd4\u8d5b\u53c8\u5f00\u59cb\u4e86\uff0cFJ \u5e0c\u671b\u80fd\u591f\u518d\u6b21\u593a\u51a0\u3002 \u7136\u800c\uff0cFJ \u7684\u8349\u576a\u975e\u5e38\u810f\u4e71\uff0c\u56e0\u6b64\uff0cFJ \u53ea\u80fd\u591f\u8ba9\u4ed6\u7684\u5976\u725b\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002 FJ \u6709 N \u53ea\u6392\u6210\u4e00\u6392\u7684\u5976\u725b\uff0c\u7f16\u53f7\u4e3a 1 \u5230 N\u3002 \u6bcf\u53ea\u5976\u725b\u7684\u6548\u7387\u662f\u4e0d\u540c\u7684\uff0c\u5976\u725b i \u7684\u6548\u7387\u4e3a Ei\u3002 \u7f16\u53f7\u76f8\u90bb\u7684\u5976\u725b\u4eec\u5f88\u719f\u6089\uff0c\u5982\u679c FJ \u5b89\u6392\u8d85\u8fc7 K \u53ea\u7f16\u53f7\u8fde\u7eed\u7684\u5976\u725b\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5976\u725b\u5c31\u4f1a\u7f62\u5de5\u53bb\u5f00\u6d3e\u5bf9\u3002 \u56e0\u6b64\uff0c\u73b0\u5728 FJ \u9700\u8981\u4f60\u7684\u5e2e\u52a9\uff0c\u627e\u5230\u6700\u5408\u7406\u7684\u5b89\u6392\u65b9\u6848\u5e76\u8ba1\u7b97 FJ \u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u6548\u7387\u3002 \u6ce8\u610f\uff0c\u65b9\u6848\u9700\u6ee1\u8db3\u4e0d\u80fd\u5305\u542b\u8d85\u8fc7 K \u53ea\u7f16\u53f7\u8fde\u7eed\u7684\u5976\u725b\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\uff1a\u7a7a\u683c\u9694\u5f00\u7684\u4e24\u4e2a\u6574\u6570 N \u548c K\uff1b \u7b2c\u4e8c\u5230 N+1 \u884c\uff1a\u7b2c i+1 \u884c\u6709\u4e00\u4e2a\u6574\u6570 Ei\u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6570\u503c\uff0c\u8868\u793a FJ \u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u7684\u6548\u7387\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264105, 1\u2264N\u2264105, 0\u2264Ei\u2264109 0\u2264Ei\u2264109 \u8f93\u5165\u6837\u4f8b 5 2 1 2 3 4 5 \u8f93\u51fa\u6837\u4f8b 12 \u9898\u89e3 \u00b6 \u4ee4 f[i] f[i] \u4e3a\u5230\u7b2ci\u5934\u725b\u4e3a\u6b62\u5408\u6cd5\u7684\u65b9\u6848\u7684\u6548\u7387\u6700\u5927\u503c\uff0c\u82e5\u7b2ci\u5934\u4e0d\u9009\uff0c\u5219 f[i]=f[i-1] f[i]=f[i-1] \uff0c\u82e5\u7b2ci\u5934\u725b\u9009\uff0c\u6211\u4eec\u4ee5\u524d\u4e00\u5934\u7a7a\u4f4d\u7f6e\u4e3a\u6700\u540e\u4e00\u6b65\uff0c\u5219 f[i]=max_{i-m \\le j \\lt i}(f[j-1]+s[i]-s[j]) f[i]=max_{i-m \\le j \\lt i}(f[j-1]+s[i]-s[j]) \uff0c\u5c06\u5e38\u91cf f[i] f[i] \u63d0\u53d6\uff0c\u5219 f[i]=s[i]+max_{i-m \\le j \\lt i}(f[j-1]-s[j]) f[i]=s[i]+max_{i-m \\le j \\lt i}(f[j-1]-s[j]) \uff0c\u53d1\u73b0\u662f\u533a\u95f4\u6700\u503c\uff0c\u5219\u7528\u5355\u8c03\u961f\u5217\u8fdb\u884c\u4f18\u5316 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int s [ N ]; int q [ N ], tt = -1 , hh = 0 ; // \u5b58\u957f\u5ea6\u4e0d\u8d85\u8fc7m\u7684f[i - 1] - s[i] int f [ N ]; int g ( int x ) { return f [ x - 1 ] - s [ x ]; } signed main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ]; s [ i ] += s [ i - 1 ]; } q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] > m ) hh ++ ; f [ i ] = max ( f [ i - 1 ], g ( q [ hh ]) + s [ i ]); while ( hh <= tt && g ( i ) >= g ( q [ tt ])) tt -- ; q [ ++ tt ] = i ; } cout << f [ n ] << endl ; return 0 ; } \u4f8b4.\u70fd\u706b\u4f20\u9012 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u70fd\u706b\u53f0\u662f\u91cd\u8981\u7684\u519b\u4e8b\u9632\u5fa1\u8bbe\u65bd\uff0c\u4e00\u822c\u5efa\u5728\u4ea4\u901a\u8981\u9053\u6216\u9669\u8981\u5904\u3002 \u4e00\u65e6\u6709\u519b\u60c5\u53d1\u751f\uff0c\u5219\u767d\u5929\u7528\u6d53\u70df\uff0c\u665a\u4e0a\u6709\u706b\u5149\u4f20\u9012\u519b\u60c5\u3002 \u5728\u67d0\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6709 n \u5ea7\u70fd\u706b\u53f0\uff0c\u6bcf\u4e2a\u70fd\u706b\u53f0\u53d1\u51fa\u4fe1\u53f7\u90fd\u6709\u4e00\u5b9a\u7684\u4ee3\u4ef7\u3002 \u4e3a\u4e86\u4f7f\u60c5\u62a5\u51c6\u786e\u4f20\u9012\uff0c\u5728\u8fde\u7eed m \u4e2a\u70fd\u706b\u53f0\u4e2d\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u53d1\u51fa\u4fe1\u53f7\u3002 \u73b0\u5728\u8f93\u5165 n,m \u548c\u6bcf\u4e2a\u70fd\u706b\u53f0\u7684\u4ee3\u4ef7\uff0c\u8bf7\u8ba1\u7b97\u5728\u4e24\u57ce\u5e02\u4e4b\u95f4\u51c6\u786e\u4f20\u9012\u60c5\u62a5\u6240\u9700\u82b1\u8d39\u7684\u603b\u4ee3\u4ef7\u6700\u5c11\u4e3a\u591a\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570 n,m\uff0c\u5177\u4f53\u542b\u4e49\u89c1\u9898\u76ee\u63cf\u8ff0\uff1b \u7b2c\u4e8c\u884c n \u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u70fd\u706b\u53f0\u7684\u4ee3\u4ef7 ai\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4ec5\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u4ee3\u4ef7\u3002 \u6570\u636e\u8303\u56f4 1\u2264m\u2264n\u22642\u00d7105 , 1\u2264m\u2264n\u22642\u00d7105 , 0\u2264ai\u22641000 0\u2264ai\u22641000 \u8f93\u5165\u6837\u4f8b 5 3 1 2 5 6 2 \u8f93\u51fa\u6837\u4f8b 4 \u9898\u89e3 \u00b6 \u4e00\u4e2a\u70fd\u706b\u53f0\u5177\u6709\u53d1\u51fa\u548c\u4e0d\u53d1\u51fa\u4fe1\u53f7\u4e24\u79cd\u72b6\u6001\uff0c\u8003\u8651\u72b6\u6001\u673a\uff0c\u4ee4 f[i][0] f[i][0] \u8868\u793a\u7b2ci\u4e2a\u70fd\u706b\u53f0\u4e0d\u53d1\u51fa\u4fe1\u53f7\u7684\u5408\u6cd5\u65b9\u6848\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c f[i][1] f[i][1] \u8868\u793a\u7b2ci\u4e2a\u70fd\u706b\u53f0\u53d1\u51fa\u4fe1\u53f7\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a f[i][0] = min_{i - m \\lt j \\lt i}(f[j][1]) f[i][0] = min_{i - m \\lt j \\lt i}(f[j][1]) f[i][1] = min(f[i - 1][0], f[i - 1][1]) f[i][1] = min(f[i - 1][0], f[i - 1][1]) \u5219\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4 f[i][1] f[i][1] \u7684\u6700\u5c0f\u503c \u5f53\u7136\u672c\u9898\u4e5f\u53ef\u4ee5\u7528\u4e00\u7ef4dp\u6765\u505a\uff0c\u4ee4 f[i] f[i] \u8868\u793a\u9009\u62e9\u7b2ci\u4e2a\u70fd\u706b\u53f0\u53d1\u51fa\u4fe1\u53f7\u7684\u5408\u6cd5\u65b9\u6848\u7684\u6700\u5c0f\u4ef7\u503c\uff0c\u5219 f[i]=min_{i - m \\le j \\lt i}(f[j]) + w[i] f[i]=min_{i - m \\le j \\lt i}(f[j]) + w[i] \u540c\u6837\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4 f[i] f[i] \u7684\u6700\u5c0f\u503c \u4ee3\u7801 \u00b6 // \u72b6\u6001\u673a\u7248 #include <bits/stdc++.h> using namespace std ; const int N = 2e5 + 5 ; int f [ N ][ 2 ]; int w [ N ]; int q [ N ], tt = - 1 , hh = 0 ; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] >= m ) hh ++ ; f [ i ][ 0 ] = f [ q [ hh ]][ 1 ]; f [ i ][ 1 ] = min ( f [ i - 1 ][ 0 ], f [ i - 1 ][ 1 ]) + w [ i ]; while ( hh <= tt && f [ i ][ 1 ] <= f [ q [ tt ]][ 1 ]) tt -- ; q [ ++ tt ] = i ; } cout << min ( f [ n ][ 1 ], f [ n ][ 0 ]) << endl ; return 0 ; } // \u4e00\u7ef4 #include <bits/stdc++.h> using namespace std ; const int N = 2e5 + 5 ; int f [ N ]; int w [ N ]; int q [ N ], tt = - 1 , hh = 0 ; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] > m ) hh ++ ; f [ i ] = f [ q [ hh ]] + w [ i ]; while ( hh <= tt && f [ i ] <= f [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; } int res = 0x3f3f3f3f ; for ( int i = n - m + 1 ; i <= n ; i ++ ) res = min ( res , f [ i ]); cout << res ; return 0 ; } \u4f8b5.\u7eff\u8272\u901a\u9053 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u9ad8\u4e8c\u6570\u5b66\u300a\u7eff\u8272\u901a\u9053\u300b\u603b\u5171\u6709 n \u9053\u9898\u76ee\u8981\u6284\uff0c\u7f16\u53f7 1,2,\u2026,n\uff0c\u6284\u7b2c i \u9898\u8981\u82b1 ai \u5206\u949f\u3002 \u5c0f Y \u51b3\u5b9a\u53ea\u7528\u4e0d\u8d85\u8fc7 t \u5206\u949f\u6284\u8fd9\u4e2a\uff0c\u56e0\u6b64\u5fc5\u7136\u6709\u7a7a\u7740\u7684\u9898\u3002 \u6bcf\u9053\u9898\u8981\u4e48\u4e0d\u5199\uff0c\u8981\u4e48\u6284\u5b8c\uff0c\u4e0d\u80fd\u5199\u4e00\u534a\u3002 \u4e0b\u6807\u8fde\u7eed\u7684\u4e00\u4e9b\u7a7a\u9898\u79f0\u4e3a\u4e00\u4e2a\u7a7a\u9898\u6bb5\uff0c\u5b83\u7684\u957f\u5ea6\u5c31\u662f\u6240\u5305\u542b\u7684\u9898\u76ee\u6570\u3002 \u8fd9\u6837\u5e94\u4ed8\u81ea\u7136\u4f1a\u5f15\u8d77\u9a6c\u8001\u5e08\u7684\u6124\u6012\uff0c\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u8d8a\u957f\uff0c\u9a6c\u8001\u5e08\u8d8a\u751f\u6c14\u3002 \u73b0\u5728\uff0c\u5c0f Y \u60f3\u77e5\u9053\u4ed6\u5728\u8fd9 t \u5206\u949f\u5185\u5199\u54ea\u4e9b\u9898\uff0c\u624d\u80fd\u591f\u5c3d\u91cf\u51cf\u8f7b\u9a6c\u8001\u5e08\u7684\u6012\u706b\u3002 \u7531\u4e8e\u5c0f Y \u5f88\u806a\u660e\uff0c\u4f60\u53ea\u8981\u544a\u8bc9\u4ed6\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u81f3\u5c11\u6709\u591a\u957f\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8f93\u51fa\u65b9\u6848\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 n,t\u3002 \u7b2c\u4e8c\u884c\u4e3a n \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4e3a a1,a2,\u2026,an\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u81f3\u5c11\u6709\u591a\u957f\u3002 \u6570\u636e\u8303\u56f4 0<n\u22645\u00d7104 , 0<n\u22645\u00d7104 , 0<ai\u22643000, 0<ai\u22643000, 0<t\u2264108 0<t\u2264108 \u8f93\u5165\u6837\u4f8b 17 11 6 4 5 2 5 3 4 5 2 3 4 5 2 3 6 3 5 \u8f93\u51fa\u6837\u4f8b 3 \u9898\u89e3 \u00b6 \u81f3\u5c11\uff0c\u81f3\u591a\u7c7b\u4f3c\u7684\u9898\u8003\u8651\u4e8c\u5206\uff0c\u4e8c\u5206\u7a7a\u9898\u6bb5\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8003\u8651check\u51fd\u6570\uff0c\u53d1\u73b0\u5f53\u6700\u5927\u7a7a\u9898\u6bb5\u957f\u5ea6m\u786e\u5b9a\u540e\uff0c\u672c\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u8fde\u7eedm\u9053\u9898\u4e2d\u81f3\u5c11\u6284\u4e00\u9053\u9898\u7684\u5408\u6cd5\u65b9\u6848\u6240\u9700\u6700\u5c11\u65f6\u95f4\u662f\u5426\u5728\u7ed9\u5b9a\u65f6\u95f4t\u5185\uff0c\u5c06\u6284\u9898\u548c\u53d1\u4fe1\u53f7\u5bf9\u5e94\uff0c\u53d1\u73b0\u548c\u70fd\u706b\u4f20\u9012\u51e0\u4e4e\u4e00\u81f4\uff0c\u56e0\u6b64\u5957\u7528\u70fd\u706b\u4f20\u9012\u7684\u65b9\u6cd5\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 5e4 + 5 ; int w [ N ]; int f [ N ][ 2 ]; int q [ N ], tt = -1 , hh = 0 ; int n , t ; bool check ( int x ) { f [ 0 ][ 1 ] = 0 ; f [ 0 ][ 0 ] = 0 ; tt = -1 , hh = 0 ; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( i - q [ hh ] > x ) hh ++ ; f [ i ][ 0 ] = f [ q [ hh ]][ 1 ]; f [ i ][ 1 ] = min ( f [ i - 1 ][ 0 ], f [ i - 1 ][ 1 ]) + w [ i ]; while ( hh <= tt && f [ i ][ 1 ] <= f [ q [ tt ]][ 1 ]) tt -- ; q [ ++ tt ] = i ; } if ( min ( f [ n ][ 0 ], f [ n ][ 1 ]) > t ) return false ; return true ; } signed main () { cin >> n >> t ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> w [ i ]; sum += w [ i ]; } if ( sum <= t ) { cout << \"0\" ; return 0 ; } int l = 1 , r = n ; while ( l < r ) { int mid = l + r >> 1 ; if ( check ( mid )) r = mid ; else l = mid + 1 ; } cout << r << endl ; return 0 ; }","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316DP"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_1","text":"\u5355\u8c03\u961f\u5217\u662f\u5728\u961f\u5217\u7684\u57fa\u7840\u4e0a\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u7684\u5e8f\u5217\u3002\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\uff08\u7ed9\u5b9a\u5927\u5c0f\u7684\uff09\u533a\u95f4\u7684\u6700\u503c\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3ao(n)\uff0c\u5176\u4e2dn\u4e3a\u5e8f\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002","title":"\u5355\u8c03\u961f\u5217"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n\u2264106 \u7684\u6570\u7ec4\u3002 \u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u5b83\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u8fb9\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002 \u4f60\u53ea\u80fd\u5728\u7a97\u53e3\u4e2d\u770b\u5230 k \u4e2a\u6570\u5b57\u3002 \u6bcf\u6b21\u6ed1\u52a8\u7a97\u53e3\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u8be5\u6570\u7ec4\u4e3a [1 3 -1 -3 5 3 6 7]\uff0ck \u4e3a 3\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u6ed1\u52a8\u7a97\u53e3\u4f4d\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u5206\u522b\u4ee3\u8868\u6570\u7ec4\u957f\u5ea6\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u6709 n \u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u5177\u4f53\u6570\u503c\u3002 \u540c\u884c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5305\u542b\u4e24\u4e2a\u3002 \u7b2c\u4e00\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u7b2c\u4e8c\u884c\u8f93\u51fa\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8f93\u5165\u6837\u4f8b 8 3 1 3 -1 -3 5 3 6 7 \u8f93\u51fa\u6837\u4f8b -1 -3 -3 -3 3 3 3 3 5 5 6 7","title":"\u4f8b1.\u6ed1\u52a8\u7a97\u53e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_2","text":"\u961f\u5217\u4e2d\u7ef4\u62a4\u957f\u5ea6\u4e3am\u7684\u533a\u95f4\u5185\u6570\u7684\u6700\u503c","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_3","text":"#include <iostream> using namespace std ; const int N = 1000010 ; int a [ N ], q [ N ], n , k , hh = 0 , tt = -1 ; int main () { cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; for ( int i = 0 ; i < n ; i ++ ) { while ( hh <= tt && i - k + 1 > q [ hh ]) hh ++ ; while ( hh <= tt && a [ i ] <= a [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; if ( i - k + 1 >= 0 ) cout << a [ q [ hh ]] << \" \" ; } cout << endl ; hh = 0 , tt = -1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hh <= tt && i - k + 1 > q [ hh ]) hh ++ ; while ( hh <= tt && a [ i ] >= a [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; if ( i - k + 1 >= 0 ) cout << a [ q [ hh ]] << \" \" ; } cout << endl ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u4e2d\u627e\u51fa\u4e00\u6bb5\u957f\u5ea6\u4e0d\u8d85\u8fc7 m \u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u5b50\u5e8f\u5217\u4e2d\u6240\u6709\u6570\u7684\u548c\u6700\u5927\u3002 \u6ce8\u610f\uff1a \u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u81f3\u5c11\u662f 1\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570 n,m\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165 n \u4e2a\u6570\uff0c\u4ee3\u8868\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u5e8f\u5217\u3002 \u540c\u4e00\u884c\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u8be5\u5e8f\u5217\u7684\u6700\u5927\u5b50\u5e8f\u548c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264300000 1\u2264n,m\u2264300000 \u8f93\u5165\u6837\u4f8b 6 4 1 -3 5 1 -2 3 \u8f93\u51fa\u6837\u4f8b 7","title":"\u4f8b2.\u6700\u5927\u5b50\u5e8f\u548c"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_4","text":"\u5b50\u5e8f\u548c\u5f88\u5bb9\u6613\u60f3\u5230\u524d\u7f00\u548c\uff0c s[i]+s[i+1]...+s[j] = s[j] - s[i - 1] s[i]+s[i+1]...+s[j] = s[j] - s[i - 1] \uff0c\u5f53\u6211\u4eec\u904d\u5386\u5230\u7b2ci\u4e2a\u6570\u65f6\uff0c\u6700\u5927\u5b50\u5e8f\u548c= s[i]-min_{j-m<j<i}(s[j]) s[i]-min_{j-m<j<i}(s[j]) \uff0c\u53d1\u73b0\u662f\u533a\u95f4\u6700\u503c\u95ee\u9898\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\uff0c\u961f\u5217\u4e2d\u7ef4\u62a4\u8fde\u7eedm\u4e2a\u6570\u4e2ds[i]\u7684\u6700\u5c0f\u503c","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_5","text":"#include <bits/stdc++.h> using namespace std ; const int N = 3e5 + 5 ; int s [ N ]; int q [ N ], tt = -1 , hh = 0 ; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ]; s [ i ] += s [ i - 1 ]; } int res = -0x3f3f3f3f ; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] > m ) hh ++ ; res = max ( res , s [ i ] - s [ q [ hh ]]); while ( hh <= tt && s [ i ] <= s [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; } cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u5e74\u524d\u8d62\u5f97\u4e86\u5c0f\u9547\u7684\u6700\u4f73\u8349\u576a\u6bd4\u8d5b\u540e\uff0cFJ \u53d8\u5f97\u5f88\u61d2\uff0c\u518d\u4e5f\u6ca1\u6709\u4fee\u526a\u8fc7\u8349\u576a\u3002 \u73b0\u5728\uff0c\u65b0\u4e00\u8f6e\u7684\u6700\u4f73\u8349\u576a\u6bd4\u8d5b\u53c8\u5f00\u59cb\u4e86\uff0cFJ \u5e0c\u671b\u80fd\u591f\u518d\u6b21\u593a\u51a0\u3002 \u7136\u800c\uff0cFJ \u7684\u8349\u576a\u975e\u5e38\u810f\u4e71\uff0c\u56e0\u6b64\uff0cFJ \u53ea\u80fd\u591f\u8ba9\u4ed6\u7684\u5976\u725b\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002 FJ \u6709 N \u53ea\u6392\u6210\u4e00\u6392\u7684\u5976\u725b\uff0c\u7f16\u53f7\u4e3a 1 \u5230 N\u3002 \u6bcf\u53ea\u5976\u725b\u7684\u6548\u7387\u662f\u4e0d\u540c\u7684\uff0c\u5976\u725b i \u7684\u6548\u7387\u4e3a Ei\u3002 \u7f16\u53f7\u76f8\u90bb\u7684\u5976\u725b\u4eec\u5f88\u719f\u6089\uff0c\u5982\u679c FJ \u5b89\u6392\u8d85\u8fc7 K \u53ea\u7f16\u53f7\u8fde\u7eed\u7684\u5976\u725b\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5976\u725b\u5c31\u4f1a\u7f62\u5de5\u53bb\u5f00\u6d3e\u5bf9\u3002 \u56e0\u6b64\uff0c\u73b0\u5728 FJ \u9700\u8981\u4f60\u7684\u5e2e\u52a9\uff0c\u627e\u5230\u6700\u5408\u7406\u7684\u5b89\u6392\u65b9\u6848\u5e76\u8ba1\u7b97 FJ \u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u6548\u7387\u3002 \u6ce8\u610f\uff0c\u65b9\u6848\u9700\u6ee1\u8db3\u4e0d\u80fd\u5305\u542b\u8d85\u8fc7 K \u53ea\u7f16\u53f7\u8fde\u7eed\u7684\u5976\u725b\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\uff1a\u7a7a\u683c\u9694\u5f00\u7684\u4e24\u4e2a\u6574\u6570 N \u548c K\uff1b \u7b2c\u4e8c\u5230 N+1 \u884c\uff1a\u7b2c i+1 \u884c\u6709\u4e00\u4e2a\u6574\u6570 Ei\u3002 \u8f93\u51fa\u683c\u5f0f \u5171\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6570\u503c\uff0c\u8868\u793a FJ \u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u7684\u6548\u7387\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264105, 1\u2264N\u2264105, 0\u2264Ei\u2264109 0\u2264Ei\u2264109 \u8f93\u5165\u6837\u4f8b 5 2 1 2 3 4 5 \u8f93\u51fa\u6837\u4f8b 12","title":"\u4f8b3.\u4fee\u526a\u8349\u576a"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_6","text":"\u4ee4 f[i] f[i] \u4e3a\u5230\u7b2ci\u5934\u725b\u4e3a\u6b62\u5408\u6cd5\u7684\u65b9\u6848\u7684\u6548\u7387\u6700\u5927\u503c\uff0c\u82e5\u7b2ci\u5934\u4e0d\u9009\uff0c\u5219 f[i]=f[i-1] f[i]=f[i-1] \uff0c\u82e5\u7b2ci\u5934\u725b\u9009\uff0c\u6211\u4eec\u4ee5\u524d\u4e00\u5934\u7a7a\u4f4d\u7f6e\u4e3a\u6700\u540e\u4e00\u6b65\uff0c\u5219 f[i]=max_{i-m \\le j \\lt i}(f[j-1]+s[i]-s[j]) f[i]=max_{i-m \\le j \\lt i}(f[j-1]+s[i]-s[j]) \uff0c\u5c06\u5e38\u91cf f[i] f[i] \u63d0\u53d6\uff0c\u5219 f[i]=s[i]+max_{i-m \\le j \\lt i}(f[j-1]-s[j]) f[i]=s[i]+max_{i-m \\le j \\lt i}(f[j-1]-s[j]) \uff0c\u53d1\u73b0\u662f\u533a\u95f4\u6700\u503c\uff0c\u5219\u7528\u5355\u8c03\u961f\u5217\u8fdb\u884c\u4f18\u5316","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_7","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int s [ N ]; int q [ N ], tt = -1 , hh = 0 ; // \u5b58\u957f\u5ea6\u4e0d\u8d85\u8fc7m\u7684f[i - 1] - s[i] int f [ N ]; int g ( int x ) { return f [ x - 1 ] - s [ x ]; } signed main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ]; s [ i ] += s [ i - 1 ]; } q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] > m ) hh ++ ; f [ i ] = max ( f [ i - 1 ], g ( q [ hh ]) + s [ i ]); while ( hh <= tt && g ( i ) >= g ( q [ tt ])) tt -- ; q [ ++ tt ] = i ; } cout << f [ n ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u70fd\u706b\u53f0\u662f\u91cd\u8981\u7684\u519b\u4e8b\u9632\u5fa1\u8bbe\u65bd\uff0c\u4e00\u822c\u5efa\u5728\u4ea4\u901a\u8981\u9053\u6216\u9669\u8981\u5904\u3002 \u4e00\u65e6\u6709\u519b\u60c5\u53d1\u751f\uff0c\u5219\u767d\u5929\u7528\u6d53\u70df\uff0c\u665a\u4e0a\u6709\u706b\u5149\u4f20\u9012\u519b\u60c5\u3002 \u5728\u67d0\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6709 n \u5ea7\u70fd\u706b\u53f0\uff0c\u6bcf\u4e2a\u70fd\u706b\u53f0\u53d1\u51fa\u4fe1\u53f7\u90fd\u6709\u4e00\u5b9a\u7684\u4ee3\u4ef7\u3002 \u4e3a\u4e86\u4f7f\u60c5\u62a5\u51c6\u786e\u4f20\u9012\uff0c\u5728\u8fde\u7eed m \u4e2a\u70fd\u706b\u53f0\u4e2d\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u53d1\u51fa\u4fe1\u53f7\u3002 \u73b0\u5728\u8f93\u5165 n,m \u548c\u6bcf\u4e2a\u70fd\u706b\u53f0\u7684\u4ee3\u4ef7\uff0c\u8bf7\u8ba1\u7b97\u5728\u4e24\u57ce\u5e02\u4e4b\u95f4\u51c6\u786e\u4f20\u9012\u60c5\u62a5\u6240\u9700\u82b1\u8d39\u7684\u603b\u4ee3\u4ef7\u6700\u5c11\u4e3a\u591a\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570 n,m\uff0c\u5177\u4f53\u542b\u4e49\u89c1\u9898\u76ee\u63cf\u8ff0\uff1b \u7b2c\u4e8c\u884c n \u4e2a\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u70fd\u706b\u53f0\u7684\u4ee3\u4ef7 ai\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4ec5\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u4ee3\u4ef7\u3002 \u6570\u636e\u8303\u56f4 1\u2264m\u2264n\u22642\u00d7105 , 1\u2264m\u2264n\u22642\u00d7105 , 0\u2264ai\u22641000 0\u2264ai\u22641000 \u8f93\u5165\u6837\u4f8b 5 3 1 2 5 6 2 \u8f93\u51fa\u6837\u4f8b 4","title":"\u4f8b4.\u70fd\u706b\u4f20\u9012"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_8","text":"\u4e00\u4e2a\u70fd\u706b\u53f0\u5177\u6709\u53d1\u51fa\u548c\u4e0d\u53d1\u51fa\u4fe1\u53f7\u4e24\u79cd\u72b6\u6001\uff0c\u8003\u8651\u72b6\u6001\u673a\uff0c\u4ee4 f[i][0] f[i][0] \u8868\u793a\u7b2ci\u4e2a\u70fd\u706b\u53f0\u4e0d\u53d1\u51fa\u4fe1\u53f7\u7684\u5408\u6cd5\u65b9\u6848\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c f[i][1] f[i][1] \u8868\u793a\u7b2ci\u4e2a\u70fd\u706b\u53f0\u53d1\u51fa\u4fe1\u53f7\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a f[i][0] = min_{i - m \\lt j \\lt i}(f[j][1]) f[i][0] = min_{i - m \\lt j \\lt i}(f[j][1]) f[i][1] = min(f[i - 1][0], f[i - 1][1]) f[i][1] = min(f[i - 1][0], f[i - 1][1]) \u5219\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4 f[i][1] f[i][1] \u7684\u6700\u5c0f\u503c \u5f53\u7136\u672c\u9898\u4e5f\u53ef\u4ee5\u7528\u4e00\u7ef4dp\u6765\u505a\uff0c\u4ee4 f[i] f[i] \u8868\u793a\u9009\u62e9\u7b2ci\u4e2a\u70fd\u706b\u53f0\u53d1\u51fa\u4fe1\u53f7\u7684\u5408\u6cd5\u65b9\u6848\u7684\u6700\u5c0f\u4ef7\u503c\uff0c\u5219 f[i]=min_{i - m \\le j \\lt i}(f[j]) + w[i] f[i]=min_{i - m \\le j \\lt i}(f[j]) + w[i] \u540c\u6837\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4 f[i] f[i] \u7684\u6700\u5c0f\u503c","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_9","text":"// \u72b6\u6001\u673a\u7248 #include <bits/stdc++.h> using namespace std ; const int N = 2e5 + 5 ; int f [ N ][ 2 ]; int w [ N ]; int q [ N ], tt = - 1 , hh = 0 ; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] >= m ) hh ++ ; f [ i ][ 0 ] = f [ q [ hh ]][ 1 ]; f [ i ][ 1 ] = min ( f [ i - 1 ][ 0 ], f [ i - 1 ][ 1 ]) + w [ i ]; while ( hh <= tt && f [ i ][ 1 ] <= f [ q [ tt ]][ 1 ]) tt -- ; q [ ++ tt ] = i ; } cout << min ( f [ n ][ 1 ], f [ n ][ 0 ]) << endl ; return 0 ; } // \u4e00\u7ef4 #include <bits/stdc++.h> using namespace std ; const int N = 2e5 + 5 ; int f [ N ]; int w [ N ]; int q [ N ], tt = - 1 , hh = 0 ; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( hh <= tt && i - q [ hh ] > m ) hh ++ ; f [ i ] = f [ q [ hh ]] + w [ i ]; while ( hh <= tt && f [ i ] <= f [ q [ tt ]]) tt -- ; q [ ++ tt ] = i ; } int res = 0x3f3f3f3f ; for ( int i = n - m + 1 ; i <= n ; i ++ ) res = min ( res , f [ i ]); cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#5","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u9ad8\u4e8c\u6570\u5b66\u300a\u7eff\u8272\u901a\u9053\u300b\u603b\u5171\u6709 n \u9053\u9898\u76ee\u8981\u6284\uff0c\u7f16\u53f7 1,2,\u2026,n\uff0c\u6284\u7b2c i \u9898\u8981\u82b1 ai \u5206\u949f\u3002 \u5c0f Y \u51b3\u5b9a\u53ea\u7528\u4e0d\u8d85\u8fc7 t \u5206\u949f\u6284\u8fd9\u4e2a\uff0c\u56e0\u6b64\u5fc5\u7136\u6709\u7a7a\u7740\u7684\u9898\u3002 \u6bcf\u9053\u9898\u8981\u4e48\u4e0d\u5199\uff0c\u8981\u4e48\u6284\u5b8c\uff0c\u4e0d\u80fd\u5199\u4e00\u534a\u3002 \u4e0b\u6807\u8fde\u7eed\u7684\u4e00\u4e9b\u7a7a\u9898\u79f0\u4e3a\u4e00\u4e2a\u7a7a\u9898\u6bb5\uff0c\u5b83\u7684\u957f\u5ea6\u5c31\u662f\u6240\u5305\u542b\u7684\u9898\u76ee\u6570\u3002 \u8fd9\u6837\u5e94\u4ed8\u81ea\u7136\u4f1a\u5f15\u8d77\u9a6c\u8001\u5e08\u7684\u6124\u6012\uff0c\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u8d8a\u957f\uff0c\u9a6c\u8001\u5e08\u8d8a\u751f\u6c14\u3002 \u73b0\u5728\uff0c\u5c0f Y \u60f3\u77e5\u9053\u4ed6\u5728\u8fd9 t \u5206\u949f\u5185\u5199\u54ea\u4e9b\u9898\uff0c\u624d\u80fd\u591f\u5c3d\u91cf\u51cf\u8f7b\u9a6c\u8001\u5e08\u7684\u6012\u706b\u3002 \u7531\u4e8e\u5c0f Y \u5f88\u806a\u660e\uff0c\u4f60\u53ea\u8981\u544a\u8bc9\u4ed6\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u81f3\u5c11\u6709\u591a\u957f\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8f93\u51fa\u65b9\u6848\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 n,t\u3002 \u7b2c\u4e8c\u884c\u4e3a n \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4e3a a1,a2,\u2026,an\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u81f3\u5c11\u6709\u591a\u957f\u3002 \u6570\u636e\u8303\u56f4 0<n\u22645\u00d7104 , 0<n\u22645\u00d7104 , 0<ai\u22643000, 0<ai\u22643000, 0<t\u2264108 0<t\u2264108 \u8f93\u5165\u6837\u4f8b 17 11 6 4 5 2 5 3 4 5 2 3 4 5 2 3 6 3 5 \u8f93\u51fa\u6837\u4f8b 3","title":"\u4f8b5.\u7eff\u8272\u901a\u9053"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_10","text":"\u81f3\u5c11\uff0c\u81f3\u591a\u7c7b\u4f3c\u7684\u9898\u8003\u8651\u4e8c\u5206\uff0c\u4e8c\u5206\u7a7a\u9898\u6bb5\u7684\u957f\u5ea6\uff0c\u7136\u540e\u8003\u8651check\u51fd\u6570\uff0c\u53d1\u73b0\u5f53\u6700\u5927\u7a7a\u9898\u6bb5\u957f\u5ea6m\u786e\u5b9a\u540e\uff0c\u672c\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u8fde\u7eedm\u9053\u9898\u4e2d\u81f3\u5c11\u6284\u4e00\u9053\u9898\u7684\u5408\u6cd5\u65b9\u6848\u6240\u9700\u6700\u5c11\u65f6\u95f4\u662f\u5426\u5728\u7ed9\u5b9a\u65f6\u95f4t\u5185\uff0c\u5c06\u6284\u9898\u548c\u53d1\u4fe1\u53f7\u5bf9\u5e94\uff0c\u53d1\u73b0\u548c\u70fd\u706b\u4f20\u9012\u51e0\u4e4e\u4e00\u81f4\uff0c\u56e0\u6b64\u5957\u7528\u70fd\u706b\u4f20\u9012\u7684\u65b9\u6cd5\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#_11","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 5e4 + 5 ; int w [ N ]; int f [ N ][ 2 ]; int q [ N ], tt = -1 , hh = 0 ; int n , t ; bool check ( int x ) { f [ 0 ][ 1 ] = 0 ; f [ 0 ][ 0 ] = 0 ; tt = -1 , hh = 0 ; q [ ++ tt ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( i - q [ hh ] > x ) hh ++ ; f [ i ][ 0 ] = f [ q [ hh ]][ 1 ]; f [ i ][ 1 ] = min ( f [ i - 1 ][ 0 ], f [ i - 1 ][ 1 ]) + w [ i ]; while ( hh <= tt && f [ i ][ 1 ] <= f [ q [ tt ]][ 1 ]) tt -- ; q [ ++ tt ] = i ; } if ( min ( f [ n ][ 0 ], f [ n ][ 1 ]) > t ) return false ; return true ; } signed main () { cin >> n >> t ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> w [ i ]; sum += w [ i ]; } if ( sum <= t ) { cout << \"0\" ; return 0 ; } int l = 1 , r = n ; while ( l < r ) { int mid = l + r >> 1 ; if ( check ( mid )) r = mid ; else l = mid + 1 ; } cout << r << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/","text":"\u4f8b1.\u6458\u82b1\u751f \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Hello Kitty\u60f3\u6458\u70b9\u82b1\u751f\u9001\u7ed9\u5979\u559c\u6b22\u7684\u7c73\u8001\u9f20\u3002 \u5979\u6765\u5230\u4e00\u7247\u6709\u7f51\u683c\u72b6\u9053\u8def\u7684\u77e9\u5f62\u82b1\u751f\u5730(\u5982\u4e0b\u56fe)\uff0c\u4ece\u897f\u5317\u89d2\u8fdb\u53bb\uff0c\u4e1c\u5357\u89d2\u51fa\u6765\u3002 \u5730\u91cc\u6bcf\u4e2a\u9053\u8def\u7684\u4ea4\u53c9\u70b9\u4e0a\u90fd\u6709\u79cd\u7740\u4e00\u682a\u82b1\u751f\u82d7\uff0c\u4e0a\u9762\u6709\u82e5\u5e72\u9897\u82b1\u751f\uff0c\u7ecf\u8fc7\u4e00\u682a\u82b1\u751f\u82d7\u5c31\u80fd\u6458\u8d70\u8be5\u5b83\u4e0a\u9762\u6240\u6709\u7684\u82b1\u751f\u3002 Hello Kitty\u53ea\u80fd\u5411\u4e1c\u6216\u5411\u5357\u8d70\uff0c\u4e0d\u80fd\u5411\u897f\u6216\u5411\u5317\u8d70\u3002 \u95eeHello Kitty\u6700\u591a\u80fd\u591f\u6458\u5230\u591a\u5c11\u9897\u82b1\u751f\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\uff0c\u4ee3\u8868\u4e00\u5171\u6709\u591a\u5c11\u7ec4\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868\u82b1\u751f\u82d7\u7684\u884c\u6570R\u548c\u5217\u6570 C\u3002 \u6bcf\u7ec4\u6570\u636e\u7684\u63a5\u4e0b\u6765R\u884c\u6570\u636e\uff0c\u4ece\u5317\u5411\u5357\u4f9d\u6b21\u63cf\u8ff0\u6bcf\u884c\u82b1\u751f\u82d7\u7684\u60c5\u51b5\u3002\u6bcf\u884c\u6570\u636e\u6709C\u4e2a\u6574\u6570\uff0c\u6309\u4ece\u897f\u5411\u4e1c\u7684\u987a\u5e8f\u63cf\u8ff0\u4e86\u8be5\u884c\u6bcf\u682a\u82b1\u751f\u82d7\u4e0a\u7684\u82b1\u751f\u6570\u76eeM\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5185\u5bb9\u4e3aHello Kitty\u80fd\u6458\u5230\u5f97\u6700\u591a\u7684\u82b1\u751f\u9897\u6570\u3002 \u6570\u636e\u8303\u56f4 1\u2264T\u2264100, 1\u2264T\u2264100, 1\u2264R,C\u2264100, 1\u2264R,C\u2264100, 0\u2264M\u22641000 0\u2264M\u22641000 \u8f93\u5165\u6837\u4f8b 2 2 2 1 1 3 4 2 3 2 3 4 1 6 5 \u8f93\u51fa\u6837\u4f8b 8 16 \u601d\u8def \u00b6 \u6807\u51c6\u7684\u52a8\u6001\u89c4\u5212\u9898\u76ee,\u4ece\u4ee5\u4e0b\u4e09\u4e2a\u89d2\u5ea6\u6765\u5206\u6790 \u72b6\u6001\u8868\u793a: \u96c6\u5408:\u5b9a\u4e49 f[i,j] f[i,j] \u8868\u793a\u4ece (1,1) (1,1) \u5230 (i,j) (i,j) \u7684\u6240\u6709\u65b9\u6848 \u5c5e\u6027:\u6700\u5927\u503c \u72b6\u6001\u8f6c\u79fb: (i,j) (i,j) \u4ece (i-1,j) (i-1,j) \u8f6c\u79fb\u8fc7\u6765, f[i,j]=f[i-1,j]+a[i,j] f[i,j]=f[i-1,j]+a[i,j] (i,j) (i,j) \u4ece (i,j-1) (i,j-1) \u8f6c\u79fb\u8fc7\u6765, f[i,j]=f[i,j-1]+a[i,j] f[i,j]=f[i,j-1]+a[i,j] \u4f18\u5316 \u7531\u4e8e f[i][j] f[i][j] \u53ea\u9700\u8981\u7528\u5230\u8fd9\u4e00\u5c42\u548c\u4e0a\u4e00\u5c42\u7684\u5143\u7d20,\u56e0\u6b64\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 1005 ; int a [ N ][ N ], f [ N ][ N ]; int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int t ; cin >> t ; while ( t -- ) { int n , m ; cin >> n >> m ; memset ( f , 0 , sizeof ( f )); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ][ j ]; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j -1 ]) + a [ i ][ j ]; cout << f [ n ][ m ] << endl ; } } \u4f8b2.\u6700\u4f4e\u901a\u884c\u8d39 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u5546\u4eba\u7a7f\u8fc7\u4e00\u4e2a N\u00d7N N\u00d7N \u7684\u6b63\u65b9\u5f62\u7684\u7f51\u683c\uff0c\u53bb\u53c2\u52a0\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5546\u52a1\u6d3b\u52a8\u3002 \u4ed6\u8981\u4ece\u7f51\u683c\u7684\u5de6\u4e0a\u89d2\u8fdb\uff0c\u53f3\u4e0b\u89d2\u51fa\u3002 \u6bcf\u7a7f\u8d8a\u4e2d\u95f4 1 1 \u4e2a\u5c0f\u65b9\u683c\uff0c\u90fd\u8981\u82b1\u8d39 1 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u3002 \u5546\u4eba\u5fc5\u987b\u5728 (2N\u22121) (2N\u22121) \u4e2a\u5355\u4f4d\u65f6\u95f4\u7a7f\u8d8a\u51fa\u53bb\u3002 \u800c\u5728\u7ecf\u8fc7\u4e2d\u95f4\u7684\u6bcf\u4e2a\u5c0f\u65b9\u683c\u65f6\uff0c\u90fd\u9700\u8981\u7f34\u7eb3\u4e00\u5b9a\u7684\u8d39\u7528\u3002 \u8fd9\u4e2a\u5546\u4eba\u671f\u671b\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u7528\u6700\u5c11\u8d39\u7528\u7a7f\u8d8a\u51fa\u53bb\u3002 \u8bf7\u95ee\u81f3\u5c11\u9700\u8981\u591a\u5c11\u8d39\u7528\uff1f \u6ce8\u610f\uff1a\u4e0d\u80fd\u5bf9\u89d2\u7a7f\u8d8a\u5404\u4e2a\u5c0f\u65b9\u683c\uff08\u5373\uff0c\u53ea\u80fd\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e14\u4e0d\u80fd\u79bb\u5f00\u7f51\u683c\uff09\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6$ N$\u3002 \u540e\u9762 N N \u884c\uff0c\u6bcf\u884c$ N \u4e2a\u4e0d\u5927\u4e8e \u4e2a\u4e0d\u5927\u4e8e 100 $\u7684\u6b63\u6574\u6570\uff0c\u4e3a\u7f51\u683c\u4e0a\u6bcf\u4e2a\u5c0f\u65b9\u683c\u7684\u8d39\u7528\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u81f3\u5c11\u9700\u8981\u7684\u8d39\u7528\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264100 1\u2264N\u2264100 \u8f93\u5165\u6837\u4f8b 5 1 4 6 8 10 2 5 7 15 17 6 8 9 18 20 10 11 12 19 21 20 23 25 29 33 \u8f93\u51fa\u6837\u4f8b 109 \u9898\u89e3 \u00b6 \u72b6\u6001\u8868\u793a: \u96c6\u5408: f[i,j] f[i,j] \u8868\u793a\u4ece\u8d77\u70b9\u51fa\u53d1,\u8d70\u5230\u7b2c (i,j) (i,j) \u7684\u6240\u6709\u65b9\u6848 \u5c5e\u6027:\u603b\u4ef7\u503c\u6700\u5c0f \u72b6\u6001\u8f6c\u79fb: f[i,j]=min(f[i-1,j],f[i,j-1])+w[i,j] f[i,j]=min(f[i-1,j],f[i,j-1])+w[i,j] \u4ee3\u7801 \u00b6 #include <iostream> #include <cstring> #include <algorithm> using namespace std ; const int N = 105 ; int a [ N ][ N ], f [ N ][ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) cin >> a [ i ][ j ]; memset ( f , 0x3f , sizeof ( f )); f [ 0 ][ 0 ] = f [ 0 ][ 1 ] = f [ 1 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) f [ i ][ j ] = min ( f [ i -1 ][ j ], f [ i ][ j -1 ]) + a [ i ][ j ]; cout << f [ n ][ n ] << endl ; return 0 ; } \u4f8b3.\u65b9\u683c\u53d6\u6570 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u8bbe\u6709 N\u00d7N \u7684\u65b9\u683c\u56fe\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u7684\u67d0\u4e9b\u65b9\u683c\u4e2d\u586b\u5165\u6b63\u6574\u6570\uff0c\u800c\u5176\u5b83\u7684\u65b9\u683c\u4e2d\u5219\u653e\u5165\u6570\u5b570\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u67d0\u4eba\u4ece\u56fe\u4e2d\u7684\u5de6\u4e0a\u89d2 A \u51fa\u53d1\uff0c\u53ef\u4ee5\u5411\u4e0b\u884c\u8d70\uff0c\u4e5f\u53ef\u4ee5\u5411\u53f3\u884c\u8d70\uff0c\u76f4\u5230\u5230\u8fbe\u53f3\u4e0b\u89d2\u7684 B \u70b9\u3002 \u5728\u8d70\u8fc7\u7684\u8def\u4e0a\uff0c\u4ed6\u53ef\u4ee5\u53d6\u8d70\u65b9\u683c\u4e2d\u7684\u6570\uff08\u53d6\u8d70\u540e\u7684\u65b9\u683c\u4e2d\u5c06\u53d8\u4e3a\u6570\u5b570\uff09\u3002 \u6b64\u4eba\u4ece A \u70b9\u5230 B \u70b9\u5171\u8d70\u4e86\u4e24\u6b21\uff0c\u8bd5\u627e\u51fa\u4e24\u6761\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u53d6\u5f97\u7684\u6570\u5b57\u548c\u4e3a\u6700\u5927\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a N\u00d7N \u7684\u65b9\u683c\u56fe\u3002 \u63a5\u4e0b\u6765\u7684\u6bcf\u884c\u6709\u4e09\u4e2a\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u884c\u53f7\u6570\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u5217\u53f7\u6570\uff0c\u7b2c\u4e09\u4e2a\u4e3a\u5728\u8be5\u884c\u3001\u8be5\u5217\u4e0a\u6240\u653e\u7684\u6570\u3002 \u884c\u548c\u5217\u7f16\u53f7\u4ece 1 \u5f00\u59cb\u3002 \u4e00\u884c\u201c0 0 0\u201d\u8868\u793a\u7ed3\u675f\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e24\u6761\u8def\u5f84\u4e0a\u53d6\u5f97\u7684\u6700\u5927\u7684\u548c\u3002 \u6570\u636e\u8303\u56f4 N\u226410 N\u226410 \u8f93\u5165\u6837\u4f8b 8 2 3 13 2 6 6 3 5 7 4 4 14 5 2 21 5 6 4 6 3 15 7 2 14 0 0 0 \u8f93\u51fa\u6837\u4f8b 67 \u9898\u89e3 \u00b6 \u521a\u5f00\u59cb\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6b63\u5e38\u601d\u8def\u5e94\u8be5\u662f\u7528\u5f00\u56db\u7ef4DP\uff0c f[x1,y1,x2,y2] f[x1,y1,x2,y2] \u8868\u793a\u4e24\u6761\u8def\u7ebf\u8d70\u5230\u7684\u4f4d\u7f6e\uff0c\u53ef\u7531\u4e8e\u9898\u76ee\u7ed9\u51fa\u4e00\u4e2a\u683c\u5b50\u7684\u8d21\u732e\u65e0\u6cd5\u91cd\u590d\u8ba1\u7b97\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u7ef4\u6765\u8868\u793a\u6bcf\u4e2a\u683c\u5b50\u662f\u5426\u88ab\u53d6\u8fc7\uff0c\u4f46\u8fd9\u6837\u663e\u7136\u65f6\u95f4\u7a7a\u95f4\u90fd\u7206\u70b8\uff0c\u56e0\u6b64\u8003\u8651\u5176\u4ed6\u65b9\u6cd5 \u867d\u7136\u9898\u76ee\u8981\u6c42\u5148\u540e\u51fa\u53d1\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u7ba1\u662f\u5148\u540e\u51fa\u53d1\u8fd8\u662f\u540c\u65f6\u51fa\u53d1\uff0c\u4e00\u4e2a\u683c\u5b50\u7684\u8d21\u732e\u90fd\u53ea\u80fd\u88ab\u7b97\u4e00\u6b21\uff0c\u800c\u6211\u4eec\u82e5\u9009\u62e9\u540c\u65f6\u51fa\u53d1\u7684\u8bdd\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e24\u6761\u8def\u7ebf\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u662f\u76f8\u7b49\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u4e09\u7ef4\u72b6\u6001\u8868\u793a\u4e24\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u4ece\u4ee5\u4e0b\u8868\u793a\u548c\u8f6c\u79fb\u4e24\u4e2a\u89d2\u5ea6\u8003\u8651: \u72b6\u6001\u8868\u793a: \u5c5e\u6027: f[k,i,j] f[k,i,j] \u8868\u793a\u8def\u5f84\u957f\u5ea6\u4e3ak,\u7b2c\u4e00\u6761\u8def\u5f84\u7684x\u5750\u6807\u4e3ai,\u7b2c\u4e8c\u6761\u8def\u5f84\u7684x\u5750\u6807\u4e3aj\u7684\u6240\u6709\u65b9\u6848 \u96c6\u5408:\u603b\u4ef7\u503c\u6700\u5927 \u72b6\u6001\u8f6c\u79fb: f[k,i,j]=max(f[k-1,i,j],f[k-1,i-1,j],f[k-1,i,j-1],f[k-1][i-1][j-1])+w[i,j] f[k,i,j]=max(f[k-1,i,j],f[k-1,i-1,j],f[k-1,i,j-1],f[k-1][i-1][j-1])+w[i,j] \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 15 ; int a [ N ][ N ], f [ 2 * N ][ N ][ N ]; int main () { int n ; cin >> n ; int x , y , z ; while ( cin >> x >> y >> z ) { a [ x ][ y ] = z ; if ( ! x &&! y &&! z ) break ; } for ( int k = 2 ; k <= 2 * n ; k ++ ) { for ( int i1 = 1 ; i1 <= n ; i1 ++ ) { for ( int i2 = 1 ; i2 <= n ; i2 ++ ) { int j1 = k - i1 , j2 = k - i2 ; if ( j1 < 1 || j2 < 1 || j1 > n || j2 > n ) continue ; int v ; if ( i1 == i2 && j1 == j2 ) v = a [ i1 ][ j1 ]; else v = a [ i1 ][ j1 ] + a [ i2 ][ j2 ]; f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); } } } cout << f [ 2 * n ][ n ][ n ] << endl ; return 0 ; } \u4f8b4.\u4f20\u7eb8\u6761 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5c0f\u6e0a\u548c\u5c0f\u8f69\u662f\u597d\u670b\u53cb\u4e5f\u662f\u540c\u73ed\u540c\u5b66\uff0c\u4ed6\u4eec\u5728\u4e00\u8d77\u603b\u6709\u8c08\u4e0d\u5b8c\u7684\u8bdd\u9898\u3002 \u4e00\u6b21\u7d20\u8d28\u62d3\u5c55\u6d3b\u52a8\u4e2d\uff0c\u73ed\u4e0a\u540c\u5b66\u5b89\u6392\u5750\u6210\u4e00\u4e2a m \u884c n \u5217\u7684\u77e9\u9635\uff0c\u800c\u5c0f\u6e0a\u548c\u5c0f\u8f69\u88ab\u5b89\u6392\u5728\u77e9\u9635\u5bf9\u89d2\u7ebf\u7684\u4e24\u7aef\uff0c\u56e0\u6b64\uff0c\u4ed6\u4eec\u5c31\u65e0\u6cd5\u76f4\u63a5\u4ea4\u8c08\u4e86\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f20\u7eb8\u6761\u6765\u8fdb\u884c\u4ea4\u6d41\u3002 \u7eb8\u6761\u8981\u7ecf\u7531\u8bb8\u591a\u540c\u5b66\u4f20\u5230\u5bf9\u65b9\u624b\u91cc\uff0c\u5c0f\u6e0a\u5750\u5728\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\uff0c\u5750\u6807 (1,1)\uff0c\u5c0f\u8f69\u5750\u5728\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\uff0c\u5750\u6807 (m,n)\u3002 \u4ece\u5c0f\u6e0a\u4f20\u5230\u5c0f\u8f69\u7684\u7eb8\u6761\u53ea\u53ef\u4ee5\u5411\u4e0b\u6216\u8005\u5411\u53f3\u4f20\u9012\uff0c\u4ece\u5c0f\u8f69\u4f20\u7ed9\u5c0f\u6e0a\u7684\u7eb8\u6761\u53ea\u53ef\u4ee5\u5411\u4e0a\u6216\u8005\u5411\u5de6\u4f20\u9012\u3002\u2002 \u5728\u6d3b\u52a8\u8fdb\u884c\u4e2d\uff0c\u5c0f\u6e0a\u5e0c\u671b\u7ed9\u5c0f\u8f69\u4f20\u9012\u4e00\u5f20\u7eb8\u6761\uff0c\u540c\u65f6\u5e0c\u671b\u5c0f\u8f69\u7ed9\u4ed6\u56de\u590d\u3002 \u73ed\u91cc\u6bcf\u4e2a\u540c\u5b66\u90fd\u53ef\u4ee5\u5e2e\u4ed6\u4eec\u4f20\u9012\uff0c\u4f46\u53ea\u4f1a\u5e2e\u4ed6\u4eec\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6b64\u4eba\u5728\u5c0f\u6e0a\u9012\u7ed9\u5c0f\u8f69\u7eb8\u6761\u7684\u65f6\u5019\u5e2e\u5fd9\uff0c\u90a3\u4e48\u5728\u5c0f\u8f69\u9012\u7ed9\u5c0f\u6e0a\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u518d\u5e2e\u5fd9\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u2002 \u8fd8\u6709\u4e00\u4ef6\u4e8b\u60c5\u9700\u8981\u6ce8\u610f\uff0c\u5168\u73ed\u6bcf\u4e2a\u540c\u5b66\u613f\u610f\u5e2e\u5fd9\u7684\u597d\u611f\u5ea6\u6709\u9ad8\u6709\u4f4e\uff08\u6ce8\u610f\uff1a\u5c0f\u6e0a\u548c\u5c0f\u8f69\u7684\u597d\u5fc3\u7a0b\u5ea6\u6ca1\u6709\u5b9a\u4e49\uff0c\u8f93\u5165\u65f6\u7528 0 \u8868\u793a\uff09\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a 0\u223c100 \u7684\u81ea\u7136\u6570\u6765\u8868\u793a\uff0c\u6570\u8d8a\u5927\u8868\u793a\u8d8a\u597d\u5fc3\u3002 \u5c0f\u6e0a\u548c\u5c0f\u8f69\u5e0c\u671b\u5c3d\u53ef\u80fd\u627e\u597d\u5fc3\u7a0b\u5ea6\u9ad8\u7684\u540c\u5b66\u6765\u5e2e\u5fd9\u4f20\u7eb8\u6761\uff0c\u5373\u627e\u5230\u6765\u56de\u4e24\u6761\u4f20\u9012\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e24\u6761\u8def\u5f84\u4e0a\u540c\u5b66\u7684\u597d\u5fc3\u7a0b\u5ea6\u4e4b\u548c\u6700\u5927\u3002 \u73b0\u5728\uff0c\u8bf7\u4f60\u5e2e\u52a9\u5c0f\u6e0a\u548c\u5c0f\u8f69\u627e\u5230\u8fd9\u6837\u7684\u4e24\u6761\u8def\u5f84\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u6709 2 \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 m \u548c n\uff0c\u8868\u793a\u5b66\u751f\u77e9\u9635\u6709 m \u884c n \u5217\u3002 \u63a5\u4e0b\u6765\u7684 m \u884c\u662f\u4e00\u4e2a m\u00d7n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7b2c i \u884c j \u5217\u7684\u6574\u6570\u8868\u793a\u5750\u5728\u7b2c i \u884c j \u5217\u7684\u5b66\u751f\u7684\u597d\u5fc3\u7a0b\u5ea6\uff0c\u6bcf\u884c\u7684 n \u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6765\u56de\u4e24\u6761\u8def\u4e0a\u53c2\u4e0e\u4f20\u9012\u7eb8\u6761\u7684\u5b66\u751f\u7684\u597d\u5fc3\u7a0b\u5ea6\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u226450 1\u2264n,m\u226450 \u8f93\u5165\u6837\u4f8b 3 3 0 3 9 2 8 5 5 7 0 \u8f93\u51fa\u6837\u4f8b 34 \u9898\u89e3 \u00b6 \u7531\u4e8e\u4ece (n,m) (n,m) \u70b9\u901a\u8fc7\u5411\u4e0a\u5411\u5de6\u8d70\u5230 (1,1) (1,1) \uff0c\u7b49\u540c\u4e8e\u4ece (1,1) (1,1) \u70b9\u901a\u8fc7\u5411\u4e0b\u5411\u53f3\u8d70\u5230 (n,m) (n,m) \u56e0\u6b64\u672c\u9898\u5c31\u8f6c\u5316\u4e3a: \u4ece (1,1) (1,1) \u51fa\u53d1\u5230\u8fbe (n,m) (n,m) \uff0c\u4e14\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\uff0c\u5148\u540e\u51fa\u53d1\u4e24\u6b21\uff0c\u4e14\u4e24\u6b21\u4e0d\u80fd\u901a\u8fc7\u91cd\u590d\u683c\u5b50\u7684\u65b9\u6848\u6570 \u4e0e\u4e0a\u4e00\u9898\u65b9\u683c\u53d6\u6570\u5f88\u76f8\u4f3c\uff0c\u4f46\u89c4\u5b9a\u4e86\u4e0d\u80fd\u8d70\u91cd\u590d\u683c\u5b50 \u63a5\u4e0b\u6765\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u8bba: \u65b9\u683c\u53d6\u6570\u4e2d\u6700\u4f18\u65b9\u6848\u4e24\u6761\u8def\u5f84\u4e00\u5b9a\u4e0d\u8d70\u91cd\u590d\u683c\u5b50 \u63a5\u4e0b\u6765\u7ed9\u51fa\u8bc1\u660e: \u60c5\u51b51: \u6700\u4f18\u89e3\u7684\u4e24\u6761\u8def\u5f84\u662f\u76f8\u4e92\u4ea4\u53c9\u7ecf\u8fc7\u7684 \u5219\u6211\u4eec\u53ef\u4ee5\u5bf9\u4ea4\u53c9\u90e8\u5206\u8fdb\u884c\u8def\u5f84\u4ea4\u6362 \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e0d\u4ea4\u53c9\u7684\u8def\u7ebf \u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u4ea4\u53c9\u8def\u5f84\uff0c\u90fd\u5fc5\u7136\u6709\u4e00\u6761\u4e0d\u4ea4\u53c9\u8def\u5f84\u4e0e\u5176\u5bf9\u5e94 \u60c5\u51b52: \u6700\u4f18\u89e3\u7684\u4e24\u6761\u8def\u5f84\u4e0d\u4ea4\u53c9\uff0c\u4f46\u5728\u67d0\u4e9b\u70b9\u91cd\u5408 \u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u7ee7\u7eed\u5fae\u8c03\uff0c\u5982\u4e0b\u56fe \u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u989d\u5916\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5176\u4e0d\u901a\u8fc7\u91cd\u590d\u70b9 \u56e0\u6b64\u5f97\u8bc1 \u7ecf\u8fc7\u4ee5\u4e0a\u8bc1\u660e\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u9898\u548c\u4e0a\u9898\u4e00\u6a21\u4e00\u6837\uff0c\u5177\u4f53\u72b6\u6001\u5b9a\u4e49\u548c\u8f6c\u79fb\u89c1\u4e0a\u9898 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 55 ; int a [ N ][ N ], f [ 2 * N ][ N ][ N ]; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ][ j ]; for ( int k = 2 ; k <= n + m ; k ++ ) { for ( int i1 = 1 ; i1 <= n ; i1 ++ ) { for ( int i2 = 1 ; i2 <= n ; i2 ++ ) { int j1 = k - i1 , j2 = k - i2 ; if ( j1 < 1 || j2 < 1 || j1 > m || j2 > m ) continue ; int v ; if ( i1 == i2 && j1 == j2 ) v = a [ i1 ][ j1 ]; else v = a [ i1 ][ j1 ] + a [ i2 ][ j2 ]; f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); } } } cout << f [ n + m ][ n ][ n ] << endl ; return 0 ; }","title":"\u6570\u5b57\u4e09\u89d2\u5f62\u6a21\u578b"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Hello Kitty\u60f3\u6458\u70b9\u82b1\u751f\u9001\u7ed9\u5979\u559c\u6b22\u7684\u7c73\u8001\u9f20\u3002 \u5979\u6765\u5230\u4e00\u7247\u6709\u7f51\u683c\u72b6\u9053\u8def\u7684\u77e9\u5f62\u82b1\u751f\u5730(\u5982\u4e0b\u56fe)\uff0c\u4ece\u897f\u5317\u89d2\u8fdb\u53bb\uff0c\u4e1c\u5357\u89d2\u51fa\u6765\u3002 \u5730\u91cc\u6bcf\u4e2a\u9053\u8def\u7684\u4ea4\u53c9\u70b9\u4e0a\u90fd\u6709\u79cd\u7740\u4e00\u682a\u82b1\u751f\u82d7\uff0c\u4e0a\u9762\u6709\u82e5\u5e72\u9897\u82b1\u751f\uff0c\u7ecf\u8fc7\u4e00\u682a\u82b1\u751f\u82d7\u5c31\u80fd\u6458\u8d70\u8be5\u5b83\u4e0a\u9762\u6240\u6709\u7684\u82b1\u751f\u3002 Hello Kitty\u53ea\u80fd\u5411\u4e1c\u6216\u5411\u5357\u8d70\uff0c\u4e0d\u80fd\u5411\u897f\u6216\u5411\u5317\u8d70\u3002 \u95eeHello Kitty\u6700\u591a\u80fd\u591f\u6458\u5230\u591a\u5c11\u9897\u82b1\u751f\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570T\uff0c\u4ee3\u8868\u4e00\u5171\u6709\u591a\u5c11\u7ec4\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u662fT\u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868\u82b1\u751f\u82d7\u7684\u884c\u6570R\u548c\u5217\u6570 C\u3002 \u6bcf\u7ec4\u6570\u636e\u7684\u63a5\u4e0b\u6765R\u884c\u6570\u636e\uff0c\u4ece\u5317\u5411\u5357\u4f9d\u6b21\u63cf\u8ff0\u6bcf\u884c\u82b1\u751f\u82d7\u7684\u60c5\u51b5\u3002\u6bcf\u884c\u6570\u636e\u6709C\u4e2a\u6574\u6570\uff0c\u6309\u4ece\u897f\u5411\u4e1c\u7684\u987a\u5e8f\u63cf\u8ff0\u4e86\u8be5\u884c\u6bcf\u682a\u82b1\u751f\u82d7\u4e0a\u7684\u82b1\u751f\u6570\u76eeM\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5185\u5bb9\u4e3aHello Kitty\u80fd\u6458\u5230\u5f97\u6700\u591a\u7684\u82b1\u751f\u9897\u6570\u3002 \u6570\u636e\u8303\u56f4 1\u2264T\u2264100, 1\u2264T\u2264100, 1\u2264R,C\u2264100, 1\u2264R,C\u2264100, 0\u2264M\u22641000 0\u2264M\u22641000 \u8f93\u5165\u6837\u4f8b 2 2 2 1 1 3 4 2 3 2 3 4 1 6 5 \u8f93\u51fa\u6837\u4f8b 8 16","title":"\u4f8b1.\u6458\u82b1\u751f"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_1","text":"\u6807\u51c6\u7684\u52a8\u6001\u89c4\u5212\u9898\u76ee,\u4ece\u4ee5\u4e0b\u4e09\u4e2a\u89d2\u5ea6\u6765\u5206\u6790 \u72b6\u6001\u8868\u793a: \u96c6\u5408:\u5b9a\u4e49 f[i,j] f[i,j] \u8868\u793a\u4ece (1,1) (1,1) \u5230 (i,j) (i,j) \u7684\u6240\u6709\u65b9\u6848 \u5c5e\u6027:\u6700\u5927\u503c \u72b6\u6001\u8f6c\u79fb: (i,j) (i,j) \u4ece (i-1,j) (i-1,j) \u8f6c\u79fb\u8fc7\u6765, f[i,j]=f[i-1,j]+a[i,j] f[i,j]=f[i-1,j]+a[i,j] (i,j) (i,j) \u4ece (i,j-1) (i,j-1) \u8f6c\u79fb\u8fc7\u6765, f[i,j]=f[i,j-1]+a[i,j] f[i,j]=f[i,j-1]+a[i,j] \u4f18\u5316 \u7531\u4e8e f[i][j] f[i][j] \u53ea\u9700\u8981\u7528\u5230\u8fd9\u4e00\u5c42\u548c\u4e0a\u4e00\u5c42\u7684\u5143\u7d20,\u56e0\u6b64\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4","title":"\u601d\u8def"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_2","text":"#include <bits/stdc++.h> using namespace std ; const int N = 1005 ; int a [ N ][ N ], f [ N ][ N ]; int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int t ; cin >> t ; while ( t -- ) { int n , m ; cin >> n >> m ; memset ( f , 0 , sizeof ( f )); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ][ j ]; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j -1 ]) + a [ i ][ j ]; cout << f [ n ][ m ] << endl ; } }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u5546\u4eba\u7a7f\u8fc7\u4e00\u4e2a N\u00d7N N\u00d7N \u7684\u6b63\u65b9\u5f62\u7684\u7f51\u683c\uff0c\u53bb\u53c2\u52a0\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5546\u52a1\u6d3b\u52a8\u3002 \u4ed6\u8981\u4ece\u7f51\u683c\u7684\u5de6\u4e0a\u89d2\u8fdb\uff0c\u53f3\u4e0b\u89d2\u51fa\u3002 \u6bcf\u7a7f\u8d8a\u4e2d\u95f4 1 1 \u4e2a\u5c0f\u65b9\u683c\uff0c\u90fd\u8981\u82b1\u8d39 1 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u3002 \u5546\u4eba\u5fc5\u987b\u5728 (2N\u22121) (2N\u22121) \u4e2a\u5355\u4f4d\u65f6\u95f4\u7a7f\u8d8a\u51fa\u53bb\u3002 \u800c\u5728\u7ecf\u8fc7\u4e2d\u95f4\u7684\u6bcf\u4e2a\u5c0f\u65b9\u683c\u65f6\uff0c\u90fd\u9700\u8981\u7f34\u7eb3\u4e00\u5b9a\u7684\u8d39\u7528\u3002 \u8fd9\u4e2a\u5546\u4eba\u671f\u671b\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u7528\u6700\u5c11\u8d39\u7528\u7a7f\u8d8a\u51fa\u53bb\u3002 \u8bf7\u95ee\u81f3\u5c11\u9700\u8981\u591a\u5c11\u8d39\u7528\uff1f \u6ce8\u610f\uff1a\u4e0d\u80fd\u5bf9\u89d2\u7a7f\u8d8a\u5404\u4e2a\u5c0f\u65b9\u683c\uff08\u5373\uff0c\u53ea\u80fd\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e14\u4e0d\u80fd\u79bb\u5f00\u7f51\u683c\uff09\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6$ N$\u3002 \u540e\u9762 N N \u884c\uff0c\u6bcf\u884c$ N \u4e2a\u4e0d\u5927\u4e8e \u4e2a\u4e0d\u5927\u4e8e 100 $\u7684\u6b63\u6574\u6570\uff0c\u4e3a\u7f51\u683c\u4e0a\u6bcf\u4e2a\u5c0f\u65b9\u683c\u7684\u8d39\u7528\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u81f3\u5c11\u9700\u8981\u7684\u8d39\u7528\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264100 1\u2264N\u2264100 \u8f93\u5165\u6837\u4f8b 5 1 4 6 8 10 2 5 7 15 17 6 8 9 18 20 10 11 12 19 21 20 23 25 29 33 \u8f93\u51fa\u6837\u4f8b 109","title":"\u4f8b2.\u6700\u4f4e\u901a\u884c\u8d39"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_3","text":"\u72b6\u6001\u8868\u793a: \u96c6\u5408: f[i,j] f[i,j] \u8868\u793a\u4ece\u8d77\u70b9\u51fa\u53d1,\u8d70\u5230\u7b2c (i,j) (i,j) \u7684\u6240\u6709\u65b9\u6848 \u5c5e\u6027:\u603b\u4ef7\u503c\u6700\u5c0f \u72b6\u6001\u8f6c\u79fb: f[i,j]=min(f[i-1,j],f[i,j-1])+w[i,j] f[i,j]=min(f[i-1,j],f[i,j-1])+w[i,j]","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_4","text":"#include <iostream> #include <cstring> #include <algorithm> using namespace std ; const int N = 105 ; int a [ N ][ N ], f [ N ][ N ]; int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) cin >> a [ i ][ j ]; memset ( f , 0x3f , sizeof ( f )); f [ 0 ][ 0 ] = f [ 0 ][ 1 ] = f [ 1 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) f [ i ][ j ] = min ( f [ i -1 ][ j ], f [ i ][ j -1 ]) + a [ i ][ j ]; cout << f [ n ][ n ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u8bbe\u6709 N\u00d7N \u7684\u65b9\u683c\u56fe\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u7684\u67d0\u4e9b\u65b9\u683c\u4e2d\u586b\u5165\u6b63\u6574\u6570\uff0c\u800c\u5176\u5b83\u7684\u65b9\u683c\u4e2d\u5219\u653e\u5165\u6570\u5b570\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u67d0\u4eba\u4ece\u56fe\u4e2d\u7684\u5de6\u4e0a\u89d2 A \u51fa\u53d1\uff0c\u53ef\u4ee5\u5411\u4e0b\u884c\u8d70\uff0c\u4e5f\u53ef\u4ee5\u5411\u53f3\u884c\u8d70\uff0c\u76f4\u5230\u5230\u8fbe\u53f3\u4e0b\u89d2\u7684 B \u70b9\u3002 \u5728\u8d70\u8fc7\u7684\u8def\u4e0a\uff0c\u4ed6\u53ef\u4ee5\u53d6\u8d70\u65b9\u683c\u4e2d\u7684\u6570\uff08\u53d6\u8d70\u540e\u7684\u65b9\u683c\u4e2d\u5c06\u53d8\u4e3a\u6570\u5b570\uff09\u3002 \u6b64\u4eba\u4ece A \u70b9\u5230 B \u70b9\u5171\u8d70\u4e86\u4e24\u6b21\uff0c\u8bd5\u627e\u51fa\u4e24\u6761\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u53d6\u5f97\u7684\u6570\u5b57\u548c\u4e3a\u6700\u5927\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a N\u00d7N \u7684\u65b9\u683c\u56fe\u3002 \u63a5\u4e0b\u6765\u7684\u6bcf\u884c\u6709\u4e09\u4e2a\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u884c\u53f7\u6570\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u5217\u53f7\u6570\uff0c\u7b2c\u4e09\u4e2a\u4e3a\u5728\u8be5\u884c\u3001\u8be5\u5217\u4e0a\u6240\u653e\u7684\u6570\u3002 \u884c\u548c\u5217\u7f16\u53f7\u4ece 1 \u5f00\u59cb\u3002 \u4e00\u884c\u201c0 0 0\u201d\u8868\u793a\u7ed3\u675f\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e24\u6761\u8def\u5f84\u4e0a\u53d6\u5f97\u7684\u6700\u5927\u7684\u548c\u3002 \u6570\u636e\u8303\u56f4 N\u226410 N\u226410 \u8f93\u5165\u6837\u4f8b 8 2 3 13 2 6 6 3 5 7 4 4 14 5 2 21 5 6 4 6 3 15 7 2 14 0 0 0 \u8f93\u51fa\u6837\u4f8b 67","title":"\u4f8b3.\u65b9\u683c\u53d6\u6570"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_5","text":"\u521a\u5f00\u59cb\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6b63\u5e38\u601d\u8def\u5e94\u8be5\u662f\u7528\u5f00\u56db\u7ef4DP\uff0c f[x1,y1,x2,y2] f[x1,y1,x2,y2] \u8868\u793a\u4e24\u6761\u8def\u7ebf\u8d70\u5230\u7684\u4f4d\u7f6e\uff0c\u53ef\u7531\u4e8e\u9898\u76ee\u7ed9\u51fa\u4e00\u4e2a\u683c\u5b50\u7684\u8d21\u732e\u65e0\u6cd5\u91cd\u590d\u8ba1\u7b97\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u7ef4\u6765\u8868\u793a\u6bcf\u4e2a\u683c\u5b50\u662f\u5426\u88ab\u53d6\u8fc7\uff0c\u4f46\u8fd9\u6837\u663e\u7136\u65f6\u95f4\u7a7a\u95f4\u90fd\u7206\u70b8\uff0c\u56e0\u6b64\u8003\u8651\u5176\u4ed6\u65b9\u6cd5 \u867d\u7136\u9898\u76ee\u8981\u6c42\u5148\u540e\u51fa\u53d1\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u7ba1\u662f\u5148\u540e\u51fa\u53d1\u8fd8\u662f\u540c\u65f6\u51fa\u53d1\uff0c\u4e00\u4e2a\u683c\u5b50\u7684\u8d21\u732e\u90fd\u53ea\u80fd\u88ab\u7b97\u4e00\u6b21\uff0c\u800c\u6211\u4eec\u82e5\u9009\u62e9\u540c\u65f6\u51fa\u53d1\u7684\u8bdd\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e24\u6761\u8def\u7ebf\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u662f\u76f8\u7b49\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u4e09\u7ef4\u72b6\u6001\u8868\u793a\u4e24\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u4ece\u4ee5\u4e0b\u8868\u793a\u548c\u8f6c\u79fb\u4e24\u4e2a\u89d2\u5ea6\u8003\u8651: \u72b6\u6001\u8868\u793a: \u5c5e\u6027: f[k,i,j] f[k,i,j] \u8868\u793a\u8def\u5f84\u957f\u5ea6\u4e3ak,\u7b2c\u4e00\u6761\u8def\u5f84\u7684x\u5750\u6807\u4e3ai,\u7b2c\u4e8c\u6761\u8def\u5f84\u7684x\u5750\u6807\u4e3aj\u7684\u6240\u6709\u65b9\u6848 \u96c6\u5408:\u603b\u4ef7\u503c\u6700\u5927 \u72b6\u6001\u8f6c\u79fb: f[k,i,j]=max(f[k-1,i,j],f[k-1,i-1,j],f[k-1,i,j-1],f[k-1][i-1][j-1])+w[i,j] f[k,i,j]=max(f[k-1,i,j],f[k-1,i-1,j],f[k-1,i,j-1],f[k-1][i-1][j-1])+w[i,j]","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_6","text":"#include <bits/stdc++.h> using namespace std ; const int N = 15 ; int a [ N ][ N ], f [ 2 * N ][ N ][ N ]; int main () { int n ; cin >> n ; int x , y , z ; while ( cin >> x >> y >> z ) { a [ x ][ y ] = z ; if ( ! x &&! y &&! z ) break ; } for ( int k = 2 ; k <= 2 * n ; k ++ ) { for ( int i1 = 1 ; i1 <= n ; i1 ++ ) { for ( int i2 = 1 ; i2 <= n ; i2 ++ ) { int j1 = k - i1 , j2 = k - i2 ; if ( j1 < 1 || j2 < 1 || j1 > n || j2 > n ) continue ; int v ; if ( i1 == i2 && j1 == j2 ) v = a [ i1 ][ j1 ]; else v = a [ i1 ][ j1 ] + a [ i2 ][ j2 ]; f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); } } } cout << f [ 2 * n ][ n ][ n ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5c0f\u6e0a\u548c\u5c0f\u8f69\u662f\u597d\u670b\u53cb\u4e5f\u662f\u540c\u73ed\u540c\u5b66\uff0c\u4ed6\u4eec\u5728\u4e00\u8d77\u603b\u6709\u8c08\u4e0d\u5b8c\u7684\u8bdd\u9898\u3002 \u4e00\u6b21\u7d20\u8d28\u62d3\u5c55\u6d3b\u52a8\u4e2d\uff0c\u73ed\u4e0a\u540c\u5b66\u5b89\u6392\u5750\u6210\u4e00\u4e2a m \u884c n \u5217\u7684\u77e9\u9635\uff0c\u800c\u5c0f\u6e0a\u548c\u5c0f\u8f69\u88ab\u5b89\u6392\u5728\u77e9\u9635\u5bf9\u89d2\u7ebf\u7684\u4e24\u7aef\uff0c\u56e0\u6b64\uff0c\u4ed6\u4eec\u5c31\u65e0\u6cd5\u76f4\u63a5\u4ea4\u8c08\u4e86\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f20\u7eb8\u6761\u6765\u8fdb\u884c\u4ea4\u6d41\u3002 \u7eb8\u6761\u8981\u7ecf\u7531\u8bb8\u591a\u540c\u5b66\u4f20\u5230\u5bf9\u65b9\u624b\u91cc\uff0c\u5c0f\u6e0a\u5750\u5728\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\uff0c\u5750\u6807 (1,1)\uff0c\u5c0f\u8f69\u5750\u5728\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\uff0c\u5750\u6807 (m,n)\u3002 \u4ece\u5c0f\u6e0a\u4f20\u5230\u5c0f\u8f69\u7684\u7eb8\u6761\u53ea\u53ef\u4ee5\u5411\u4e0b\u6216\u8005\u5411\u53f3\u4f20\u9012\uff0c\u4ece\u5c0f\u8f69\u4f20\u7ed9\u5c0f\u6e0a\u7684\u7eb8\u6761\u53ea\u53ef\u4ee5\u5411\u4e0a\u6216\u8005\u5411\u5de6\u4f20\u9012\u3002\u2002 \u5728\u6d3b\u52a8\u8fdb\u884c\u4e2d\uff0c\u5c0f\u6e0a\u5e0c\u671b\u7ed9\u5c0f\u8f69\u4f20\u9012\u4e00\u5f20\u7eb8\u6761\uff0c\u540c\u65f6\u5e0c\u671b\u5c0f\u8f69\u7ed9\u4ed6\u56de\u590d\u3002 \u73ed\u91cc\u6bcf\u4e2a\u540c\u5b66\u90fd\u53ef\u4ee5\u5e2e\u4ed6\u4eec\u4f20\u9012\uff0c\u4f46\u53ea\u4f1a\u5e2e\u4ed6\u4eec\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6b64\u4eba\u5728\u5c0f\u6e0a\u9012\u7ed9\u5c0f\u8f69\u7eb8\u6761\u7684\u65f6\u5019\u5e2e\u5fd9\uff0c\u90a3\u4e48\u5728\u5c0f\u8f69\u9012\u7ed9\u5c0f\u6e0a\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u518d\u5e2e\u5fd9\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u2002 \u8fd8\u6709\u4e00\u4ef6\u4e8b\u60c5\u9700\u8981\u6ce8\u610f\uff0c\u5168\u73ed\u6bcf\u4e2a\u540c\u5b66\u613f\u610f\u5e2e\u5fd9\u7684\u597d\u611f\u5ea6\u6709\u9ad8\u6709\u4f4e\uff08\u6ce8\u610f\uff1a\u5c0f\u6e0a\u548c\u5c0f\u8f69\u7684\u597d\u5fc3\u7a0b\u5ea6\u6ca1\u6709\u5b9a\u4e49\uff0c\u8f93\u5165\u65f6\u7528 0 \u8868\u793a\uff09\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a 0\u223c100 \u7684\u81ea\u7136\u6570\u6765\u8868\u793a\uff0c\u6570\u8d8a\u5927\u8868\u793a\u8d8a\u597d\u5fc3\u3002 \u5c0f\u6e0a\u548c\u5c0f\u8f69\u5e0c\u671b\u5c3d\u53ef\u80fd\u627e\u597d\u5fc3\u7a0b\u5ea6\u9ad8\u7684\u540c\u5b66\u6765\u5e2e\u5fd9\u4f20\u7eb8\u6761\uff0c\u5373\u627e\u5230\u6765\u56de\u4e24\u6761\u4f20\u9012\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e24\u6761\u8def\u5f84\u4e0a\u540c\u5b66\u7684\u597d\u5fc3\u7a0b\u5ea6\u4e4b\u548c\u6700\u5927\u3002 \u73b0\u5728\uff0c\u8bf7\u4f60\u5e2e\u52a9\u5c0f\u6e0a\u548c\u5c0f\u8f69\u627e\u5230\u8fd9\u6837\u7684\u4e24\u6761\u8def\u5f84\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u6709 2 \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 m \u548c n\uff0c\u8868\u793a\u5b66\u751f\u77e9\u9635\u6709 m \u884c n \u5217\u3002 \u63a5\u4e0b\u6765\u7684 m \u884c\u662f\u4e00\u4e2a m\u00d7n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7b2c i \u884c j \u5217\u7684\u6574\u6570\u8868\u793a\u5750\u5728\u7b2c i \u884c j \u5217\u7684\u5b66\u751f\u7684\u597d\u5fc3\u7a0b\u5ea6\uff0c\u6bcf\u884c\u7684 n \u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6765\u56de\u4e24\u6761\u8def\u4e0a\u53c2\u4e0e\u4f20\u9012\u7eb8\u6761\u7684\u5b66\u751f\u7684\u597d\u5fc3\u7a0b\u5ea6\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u226450 1\u2264n,m\u226450 \u8f93\u5165\u6837\u4f8b 3 3 0 3 9 2 8 5 5 7 0 \u8f93\u51fa\u6837\u4f8b 34","title":"\u4f8b4.\u4f20\u7eb8\u6761"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_7","text":"\u7531\u4e8e\u4ece (n,m) (n,m) \u70b9\u901a\u8fc7\u5411\u4e0a\u5411\u5de6\u8d70\u5230 (1,1) (1,1) \uff0c\u7b49\u540c\u4e8e\u4ece (1,1) (1,1) \u70b9\u901a\u8fc7\u5411\u4e0b\u5411\u53f3\u8d70\u5230 (n,m) (n,m) \u56e0\u6b64\u672c\u9898\u5c31\u8f6c\u5316\u4e3a: \u4ece (1,1) (1,1) \u51fa\u53d1\u5230\u8fbe (n,m) (n,m) \uff0c\u4e14\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\uff0c\u5148\u540e\u51fa\u53d1\u4e24\u6b21\uff0c\u4e14\u4e24\u6b21\u4e0d\u80fd\u901a\u8fc7\u91cd\u590d\u683c\u5b50\u7684\u65b9\u6848\u6570 \u4e0e\u4e0a\u4e00\u9898\u65b9\u683c\u53d6\u6570\u5f88\u76f8\u4f3c\uff0c\u4f46\u89c4\u5b9a\u4e86\u4e0d\u80fd\u8d70\u91cd\u590d\u683c\u5b50 \u63a5\u4e0b\u6765\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u8bba: \u65b9\u683c\u53d6\u6570\u4e2d\u6700\u4f18\u65b9\u6848\u4e24\u6761\u8def\u5f84\u4e00\u5b9a\u4e0d\u8d70\u91cd\u590d\u683c\u5b50 \u63a5\u4e0b\u6765\u7ed9\u51fa\u8bc1\u660e: \u60c5\u51b51: \u6700\u4f18\u89e3\u7684\u4e24\u6761\u8def\u5f84\u662f\u76f8\u4e92\u4ea4\u53c9\u7ecf\u8fc7\u7684 \u5219\u6211\u4eec\u53ef\u4ee5\u5bf9\u4ea4\u53c9\u90e8\u5206\u8fdb\u884c\u8def\u5f84\u4ea4\u6362 \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e0d\u4ea4\u53c9\u7684\u8def\u7ebf \u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u4ea4\u53c9\u8def\u5f84\uff0c\u90fd\u5fc5\u7136\u6709\u4e00\u6761\u4e0d\u4ea4\u53c9\u8def\u5f84\u4e0e\u5176\u5bf9\u5e94 \u60c5\u51b52: \u6700\u4f18\u89e3\u7684\u4e24\u6761\u8def\u5f84\u4e0d\u4ea4\u53c9\uff0c\u4f46\u5728\u67d0\u4e9b\u70b9\u91cd\u5408 \u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u7ee7\u7eed\u5fae\u8c03\uff0c\u5982\u4e0b\u56fe \u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u989d\u5916\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5176\u4e0d\u901a\u8fc7\u91cd\u590d\u70b9 \u56e0\u6b64\u5f97\u8bc1 \u7ecf\u8fc7\u4ee5\u4e0a\u8bc1\u660e\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u9898\u548c\u4e0a\u9898\u4e00\u6a21\u4e00\u6837\uff0c\u5177\u4f53\u72b6\u6001\u5b9a\u4e49\u548c\u8f6c\u79fb\u89c1\u4e0a\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/#_8","text":"#include <bits/stdc++.h> using namespace std ; const int N = 55 ; int a [ N ][ N ], f [ 2 * N ][ N ][ N ]; int main () { int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ][ j ]; for ( int k = 2 ; k <= n + m ; k ++ ) { for ( int i1 = 1 ; i1 <= n ; i1 ++ ) { for ( int i2 = 1 ; i2 <= n ; i2 ++ ) { int j1 = k - i1 , j2 = k - i2 ; if ( j1 < 1 || j2 < 1 || j1 > m || j2 > m ) continue ; int v ; if ( i1 == i2 && j1 == j2 ) v = a [ i1 ][ j1 ]; else v = a [ i1 ][ j1 ] + a [ i2 ][ j2 ]; f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 -1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 -1 ] + v , f [ k ][ i1 ][ i2 ]); f [ k ][ i1 ][ i2 ] = max ( f [ k -1 ][ i1 ][ i2 ] + v , f [ k ][ i1 ][ i2 ]); } } } cout << f [ n + m ][ n ][ n ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/","text":"\u6982\u8ff0 \u00b6 \u6811\u5f62DP\u51c6\u786e\u7684\u8bf4\u662f\u4e00\u79cdDP\u7684\u601d\u60f3\uff0c\u5c06DP\u5efa\u7acb\u5728\u6811\u72b6\u7ed3\u6784\u7684\u57fa\u7840\u4e0a\u3002\u6574\u4f53\u7684\u601d\u8def\u5927\u81f4\u5c31\u662f\u7528\u6811\u5f62\u7684\u7ed3\u6784\u5b58\u50a8\u6570\u636e\u3002 \u6811\u5f62DP\u7684\u5173\u952e\u548c\u5b9e\u73b0\u65b9\u6cd5\u662f**dfs**; \u5148\u627e\u5230\u6811\u6839\uff0c\u4ece\u6811\u6839\u5f00\u59cb\u8fd0\u7528dfs\u9012\u5f52\uff0c\u8ddfdfs\u4e00\u6837\u5148\u521d\u59cb\u5316\uff0c\u7136\u540e\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\u4e0a\u4e3a\u6b62\uff0c\u628a\u6700\u5e95\u5c42\u7684f[i][j]\u66f4\u65b0\u5b8c\u6bd5\uff0c\u518d\u56de\u6765\u5f80\u4e0a\u8d70\uff0c\u81ea\u5e95\u5411\u4e0a\u5730\u6839\u636e\u9898\u610f\u66f4\u65b0\u4e0a\u5c42\u7684f\u6570\u7ec4\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002 \u4f8b1.\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Ural \u5927\u5b66\u6709 N \u540d\u804c\u5458\uff0c\u7f16\u53f7\u4e3a 1\u223cN\u3002 \u4ed6\u4eec\u7684\u5173\u7cfb\u5c31\u50cf\u4e00\u68f5\u4ee5\u6821\u957f\u4e3a\u6839\u7684\u6811\uff0c\u7236\u8282\u70b9\u5c31\u662f\u5b50\u8282\u70b9\u7684\u76f4\u63a5\u4e0a\u53f8\u3002 \u6bcf\u4e2a\u804c\u5458\u6709\u4e00\u4e2a\u5feb\u4e50\u6307\u6570\uff0c\u7528\u6574\u6570 Hi \u7ed9\u51fa\uff0c\u5176\u4e2d 1\u2264i\u2264N\u3002 \u73b0\u5728\u8981\u53ec\u5f00\u4e00\u573a\u5468\u5e74\u5e86\u5bb4\u4f1a\uff0c\u4e0d\u8fc7\uff0c\u6ca1\u6709\u804c\u5458\u613f\u610f\u548c\u76f4\u63a5\u4e0a\u53f8\u4e00\u8d77\u53c2\u4f1a\u3002 \u5728\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u524d\u63d0\u4e0b\uff0c\u4e3b\u529e\u65b9\u5e0c\u671b\u9080\u8bf7\u4e00\u90e8\u5206\u804c\u5458\u53c2\u4f1a\uff0c\u4f7f\u5f97\u6240\u6709\u53c2\u4f1a\u804c\u5458\u7684\u5feb\u4e50\u6307\u6570\u603b\u548c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 N\u3002 \u63a5\u4e0b\u6765 N \u884c\uff0c\u7b2c i \u884c\u8868\u793a i \u53f7\u804c\u5458\u7684\u5feb\u4e50\u6307\u6570 Hi\u3002 \u63a5\u4e0b\u6765 N\u22121 \u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u5bf9\u6574\u6570 L,K\uff0c\u8868\u793a K \u662f L \u7684\u76f4\u63a5\u4e0a\u53f8\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6700\u5927\u7684\u5feb\u4e50\u6307\u6570\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u22646000, 1\u2264N\u22646000, \u2212128\u2264Hi\u2264127 \u2212128\u2264Hi\u2264127 \u8f93\u5165\u6837\u4f8b 7 1 1 1 1 1 1 1 1 3 2 3 6 4 7 4 4 5 3 5 \u8f93\u51fa\u6837\u4f8b 5 \u9898\u89e3 \u00b6 \u7ecf\u5178\u9898\uff0c\u9996\u5148\u5efa\u6811+\u627e\u6839\uff0c\u7528 f[i,0] f[i,0] \u8868\u793a\u4e0d\u9009\u5f53\u524d\u804c\u5458\u4e14\u5176\u4e3a\u6839\u7ed3\u70b9\u65f6\u7684\u6700\u5927\u5feb\u4e50\u6307\u6570\uff0c f[i,1] f[i,1] \u8868\u793a\u9009\u62e9\u5f53\u524d\u804c\u5458\u4e14\u5176\u4e3a\u6839\u8282\u70b9\u65f6\u7684\u6700\u5927\u5feb\u4e50\u6307\u6570\uff0c\u7531\u4e8e\u9009\u4e86\u5f53\u524d\u804c\u5458\u540e\uff0c\u4ed6\u7684\u90e8\u4e0b\u5c31\u4e0d\u80fd\u518d\u9009\uff0c\u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: f[i,0] = \\sum{max(f[j,0], f[j,1])} f[i,0] = \\sum{max(f[j,0], f[j,1])} f[i,1] = \\sum{f[j,0]} f[i,1] = \\sum{f[j,0]} \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 6005 ; int head [ N ], e [ N ], ne [ N ], w [ N ], idx = 0 ; void add ( int a , int b ) { // \u5efa\u6811 e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool vis [ N ]; int f [ N ][ 2 ]; void dfs ( int u ) { f [ u ][ 1 ] = w [ u ]; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += max ( f [ j ][ 0 ], f [ j ][ 1 ]); // \u4e0d\u9009\u7684\u8bdd\u5176\u5b50\u7ed3\u70b9\u53ef\u9009\u53ef\u4e0d\u9009 f [ u ][ 1 ] += f [ j ][ 0 ]; // \u9009\u4e86\u7684\u8bdd\u5176\u5b50\u8282\u70b9\u90fd\u4e0d\u80fd\u9009 } } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; for ( int i = 1 ; i <= n - 1 ; i ++ ) { int a , b ; cin >> a >> b ; add ( b , a ); vis [ a ] = true ; } int root = 1 ; while ( vis [ root ]) root ++ ; // \u627e\u6839 dfs ( root ); cout << max ( f [ root ][ 0 ], f [ root ][ 1 ]); return 0 ; } \u4f8b2.\u6811\u7684\u6700\u957f\u8def\u5f84 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6811\u4e2d\u5305\u542b n \u4e2a\u7ed3\u70b9\uff08\u7f16\u53f71~n\uff09\u548c n\u22121 \u6761\u65e0\u5411\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\u3002 \u73b0\u5728\u8bf7\u4f60\u627e\u5230\u6811\u4e2d\u7684\u4e00\u6761\u6700\u957f\u8def\u5f84\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8981\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u4f7f\u5f97\u8def\u5f84\u4e24\u7aef\u7684\u70b9\u7684\u8ddd\u79bb\u6700\u8fdc\u3002 \u6ce8\u610f\uff1a\u8def\u5f84\u4e2d\u53ef\u4ee5\u53ea\u5305\u542b\u4e00\u4e2a\u70b9\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\u3002 \u63a5\u4e0b\u6765 n\u22121 \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 ai,bi,ci\uff0c\u8868\u793a\u70b9 ai \u548c bi \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u6743\u503c\u4e3a ci \u7684\u8fb9\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6811\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226410000, 1\u2264n\u226410000, 1\u2264ai,bi\u2264n, 1\u2264ai,bi\u2264n, \u221210^5\u2264ci\u226410^5 \u221210^5\u2264ci\u226410^5 \u8f93\u5165\u6837\u4f8b 6 5 1 6 1 4 5 6 3 9 2 6 8 6 1 7 \u8f93\u51fa\u6837\u4f8b 22 \u9898\u89e3 \u00b6 \u672c\u9898\u4e5f\u79f0\u6811\u7684\u76f4\u5f84\uff0c\u6734\u7d20\u505a\u6cd5\u4e3a\u679a\u4e3e\u6bcf\u6761\u8def\u5f84\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\uff0c\u5229\u7528\u500d\u589e\u6c42\u51fa\u4e24\u70b9\u8ddd\u79bb\uff0c\u4f46\u8fd9\u6837\u5149\u679a\u4e3e\u8d77\u70b9\u548c\u7ec8\u70b9\u5df2\u7ecf O(n^2) O(n^2) \u8d85\u65f6\uff0c\u56e0\u6b64\u8f6c\u6362\u679a\u4e3e\u65b9\u5f0f\uff0c\u6211\u4eec\u9009\u62e9\u679a\u4e3e\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5e76\u4e14\u5047\u8bbe\u5176\u4e3a\u8def\u5f84\u4e0a\u7684\u6700\u9ad8\u70b9\uff0c\u5219\u76f4\u5f84\u4e00\u5b9a\u5728\u6240\u6709\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84+\u6b21\u957f\u8def\u5f84\u5f53\u4e2d\uff0c\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa\u6240\u6709\u70b9\u7684\u6700\u957f\u8def\u5f84\u548c\u6b21\u957f\u8def\u5f84\u5373\u53ef \u4f46\u4e0a\u9762\u6709\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e\u662f\u6811\u7684\u5f62\u5f0f\uff0c\u6700\u957f\u6216\u6b21\u957f\u8def\u5f84\u53ef\u80fd\u662f\u5f80\u4e0a\u7ecf\u8fc7\u7236\u8282\u70b9\u7684\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u5728\u679a\u4e3e\u5230\u5b83\u7684\u7956\u5148\u8282\u70b9\u65f6\u5df2\u7ecf\u8003\u8651\u5b8c\u4e86\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u89e3\u51b3\u4e86,\u4ee3\u7801\u7ed9\u51fa\u4e24\u79cddfs\u5199\u6cd5\uff0c\u5206\u522b\u4e3a\u6709\u8fd4\u56de\u503c\u548c\u65e0\u8fd4\u56de\u503c \u4ee3\u7801 \u00b6 // \u6709\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 , M = 2e4 + 4 ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n ; int res = 0 ; int dfs ( int u , int fa ) { int d = 0 , d1 = 0 , d2 = 0 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; d = dfs ( j , u ) + w [ i ]; if ( d >= d1 ) { // \u5927\u4e8e\u6700\u5927\u503c d2 = d1 ; d1 = d ; } else if ( d > d2 ) { // \u5927\u4e8e\u6b21\u5927\u503c d2 = d ; } } res = max ( d1 + d2 , res ); return d1 ; } int main () { cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n - 1 ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); add ( b , a , c ); } dfs ( 1 , -1 ); cout << res << endl ; return 0 ; } // \u65e0\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; int f [ N ][ 2 ]; // f[i][0] \u6700\u957f f[i][1] \u6b21\u957f void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int res = 0 ; void dfs ( int u , int fa ) { int d = 0 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; dfs ( j , u ); d = f [ j ][ 0 ] + w [ i ]; if ( d >= f [ u ][ 0 ]) { f [ u ][ 1 ] = f [ u ][ 0 ]; f [ u ][ 0 ] = d ; } else if ( d > f [ u ][ 1 ]) { f [ u ][ 1 ] = d ; } } res = max ( res , f [ u ][ 0 ] + f [ u ][ 1 ]); } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 0 ; i < n - 1 ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); add ( b , a , c ); } dfs ( 1 , -1 ); cout << res ; return 0 ; } \u4f8b3.\u6811\u7684\u4e2d\u5fc3 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6811\u4e2d\u5305\u542b n \u4e2a\u7ed3\u70b9\uff08\u7f16\u53f71~n\uff09\u548c n\u22121 \u6761\u65e0\u5411\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\u3002 \u8bf7\u4f60\u5728\u6811\u4e2d\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8be5\u70b9\u5230\u6811\u4e2d\u5176\u4ed6\u7ed3\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\u6700\u8fd1\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\u3002 \u63a5\u4e0b\u6765 n\u22121 \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 ai,bi,ci\uff0c\u8868\u793a\u70b9 ai \u548c bi \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u6743\u503c\u4e3a ci \u7684\u8fb9\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6240\u6c42\u70b9\u5230\u6811\u4e2d\u5176\u4ed6\u7ed3\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226410000, 1\u2264n\u226410000, $1\u2264ai,bi\u2264n, 1\u2264ci\u226410^5 1\u2264ci\u226410^5 \u8f93\u5165\u6837\u4f8b 5 2 1 1 3 2 1 4 3 1 5 1 1 \u8f93\u51fa\u6837\u4f8b 2 \u9898\u89e3 \u00b6 \u548c\u6811\u7684\u76f4\u5f84\u5f88\u76f8\u4f3c\uff0c\u4f46\u4e5f\u5f88\u4e0d\u540c\uff0c\u9996\u5148\u8003\u8651\u5bf9\u4e00\u4e2a\u70b9\u9700\u8981\u6bd4\u8f83\u54ea\u4e9b\u90e8\u5206 1.\u5f80\u5b50\u8282\u70b9\u8d70\u7684\u8def\u5f84 2.\u5f80\u7236\u8282\u70b9\u8d70\u7684\u8def\u5f84 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u548c\u6811\u7684\u76f4\u5f84\u5f88\u76f8\u4f3c\u4f46\u53c8\u4e0d\u540c\u7684\u5730\u65b9\u4e86\uff0c\u4e66\u7684\u76f4\u5f84\u5f80\u7236\u8282\u70b9\u8d70\u7684\u8def\u5f84\u5728\u679a\u4e3e\u7236\u8282\u70b9\u65f6\u5df2\u7ecf\u8003\u8651\uff0c\u662f\u56e0\u4e3a\u5f53\u65f6\u6211\u4eec\u8003\u8651\u7684\u662f\u76f4\u5f84\uff0c\u4e00\u6761\u76f4\u5f84\u53ef\u4ee5\u88ab\u62c6\u6210\u4e0d\u540c\u7684\u6700\u957f\u8def\u5f84\u548c\u6b21\u957f\u8def\u5f84\uff0c\u53ea\u8981\u76f4\u5f84\u7684\u6700\u9ad8\u70b9\u4e0d\u540c\u5373\u53ef\uff0c\u800c\u672c\u9898\u53ea\u662f\u4e00\u6761\u8def\u5f84\uff0c\u4e0d\u80fd\u88ab\u62c6\u5206\uff0c\u56e0\u6b64\u9700\u8981\u8003\u8651\u5f80\u4e0a\u8d70\uff0c\u6211\u4eec\u7528d1\uff0cd2\u5b58\u5f53\u524d\u70b9\u5f80\u5b50\u7ed3\u70b9\u8d70\u7684\u6700\u957f\u548c\u6b21\u957f\u8def\u5f84\uff0c\u7528up\u5b58\u5f80\u7236\u8282\u70b9\u8d70\u7684**\u4e0d\u7ecf\u8fc7\u5f53\u524d\u8282\u70b9**\u7684\u6700\u957f\u8def\u5f84\uff0c\u4f7f\u7528\u4e24\u4e2adfs\uff0c\u7b2c\u4e00\u4e2a\u5904\u7406d1\u548cd2\uff0c\u7b2c\u4e8c\u4e2a\u5904\u7406up\uff0c\u6700\u540e\u679a\u4e3e\u6240\u6709\u7684\u70b9\u66f4\u65b0\u7b54\u6848\u5c31\u884c\u4e86 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int d1 [ N ], d2 [ N ], up [ N ]; // \u6700\u957f\uff0c\u6b21\u957f\uff0c\u7ecf\u8fc7\u7236\u8282\u70b9\u7684\u6700\u957f int p1 [ N ], p2 [ N ]; // \u5b58\u7236\u8282\u70b9\u7ecf\u8fc7\u7684\u5b50\u8282\u70b9 void dfs_d ( int u , int fa ) { int d = 0 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; dfs_d ( j , u ); d = d1 [ j ] + w [ i ]; if ( d >= d1 [ u ]) { d2 [ u ] = d1 [ u ]; p2 [ u ] = p1 [ u ]; d1 [ u ] = d ; p1 [ u ] = j ; } else if ( d > d2 [ u ]) { d2 [ u ] = d ; p2 [ u ] = j ; } } } void dfs_u ( int u , int fa ) { for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; if ( p1 [ u ] == j ) { // \u6700\u957f\u7ecf\u8fc7\u5f53\u524d\u7ed3\u70b9\uff0c\u6b64\u65f6\u7528\u6b21\u957f\u66f4\u65b0 up [ j ] = max ( up [ u ], d2 [ u ]) + w [ i ]; } else { // \u4e0d\u7ecf\u8fc7\u5c31\u7528\u6700\u957f\u66f4\u65b0 up [ j ] = max ( up [ u ], d1 [ u ]) + w [ i ]; } dfs_u ( j , u ); } } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 0 ; i < n - 1 ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); add ( b , a , c ); } dfs_d ( 1 , -1 ); dfs_u ( 1 , -1 ); int res = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; i ++ ) { // \u679a\u4e3e\u6240\u6709\u70b9 res = min ( res , max ( up [ i ], d1 [ i ])); } cout << res ; return 0 ; } \u4f8b4.\u6570\u5b57\u8f6c\u6362 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5982\u679c\u4e00\u4e2a\u6570 x \u7684\u7ea6\u6570\u4e4b\u548c y\uff08\u4e0d\u5305\u62ec\u4ed6\u672c\u8eab\uff09\u6bd4\u4ed6\u672c\u8eab\u5c0f\uff0c\u90a3\u4e48 x \u53ef\u4ee5\u53d8\u6210 y\uff0cy \u4e5f\u53ef\u4ee5\u53d8\u6210 x\u3002 \u4f8b\u5982\uff0c4 \u53ef\u4ee5\u53d8\u4e3a 3\uff0c1 \u53ef\u4ee5\u53d8\u4e3a 7\u3002 \u9650\u5b9a\u6240\u6709\u6570\u5b57\u53d8\u6362\u5728\u4e0d\u8d85\u8fc7 n \u7684\u6b63\u6574\u6570\u8303\u56f4\u5185\u8fdb\u884c\uff0c\u6c42\u4e0d\u65ad\u8fdb\u884c\u6570\u5b57\u53d8\u6362\u4e14\u4e0d\u51fa\u73b0\u91cd\u590d\u6570\u5b57\u7684\u6700\u591a\u53d8\u6362\u6b65\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 n\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e0d\u65ad\u8fdb\u884c\u6570\u5b57\u53d8\u6362\u4e14\u4e0d\u51fa\u73b0\u91cd\u590d\u6570\u5b57\u7684\u6700\u591a\u53d8\u6362\u6b65\u6570\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226450000 1\u2264n\u226450000 \u8f93\u5165\u6837\u4f8b 7 \u8f93\u51fa\u6837\u4f8b 3 \u9898\u89e3 \u00b6 \u7b80\u6613\u7248\u7684\u6811\u7684\u76f4\u5f84\uff0c\u8fd9\u91cc\u7b80\u5355\u63d0\u4e00\u4e0b\u9884\u5904\u7406\u7ea6\u675f\u548c\u7684\u65b9\u6cd5\uff0c\u4e0d\u9009\u62e9\u679a\u4e3e\u6bcf\u4e2a\u6570\u7684\u7ea6\u675f\uff0c\u800c\u9009\u62e9\u679a\u4e3e\u6bcf\u4e2a\u6570\u7684\u500d\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlog_n + C) O(nlog_n + C) \uff0cC\u4e3a\u6b27\u62c9\u5e38\u6570\uff0c\u5efa\u6811\u540e\u7528\u5c31\u662f\u6c42\u8fb9\u6743\u4e3a1\u65f6\u6811\u7684\u76f4\u5f84 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 5e4 + 5 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int sum [ N ]; int res = 0 ; int d1 [ N ], d2 [ N ]; // \u6700\u957f\u4e0e\u6b21\u957f bool vis [ N ]; void dfs ( int u ) { d1 [ u ] = d2 [ u ] = -0x3f3f3f3f ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( vis [ j ]) continue ; vis [ j ] = true ; dfs ( j ); int d = d1 [ j ] + 1 ; if ( d >= d1 [ u ]) { d2 [ u ] = d1 [ u ]; d1 [ u ] = d ; } else if ( d > d2 [ u ]) { d2 [ u ] = d ; } } if ( d1 [ u ] == -0x3f3f3f3f ) d1 [ u ] = d2 [ u ] = 0 ; // \u53f6\u5b50\u8282\u70b9\u4e3a0\uff0c\u672c\u9898\u6743\u503c\u5927\u4e8e0\u53ef\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\u8d1f\u65e0\u7a77 res = max ( res , d1 [ u ] + ( d2 [ u ] == -0x3f3f3f3f ? 0 : d2 [ u ])); } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 2 * i ; j <= n ; j += i ) { sum [ j ] += i ; } } for ( int i = 2 ; i <= n ; i ++ ) { if ( sum [ i ] < i ) { add ( sum [ i ], i ); add ( i , sum [ i ]); } } for ( int i = 1 ; i <= n ; i ++ ) { if ( ! vis [ i ]) { vis [ i ] = true ; dfs ( i ); } } cout << res ; return 0 ; } \u4f8b5.\u6218\u7565\u6e38\u620f \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u9c8d\u52c3\u559c\u6b22\u73a9\u7535\u8111\u6e38\u620f\uff0c\u7279\u522b\u662f\u6218\u7565\u6e38\u620f\uff0c\u4f46\u6709\u65f6\u4ed6\u627e\u4e0d\u5230\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u8fd9\u8ba9\u4ed6\u5f88\u4f24\u5fc3\u3002 \u73b0\u5728\u4ed6\u6709\u4ee5\u4e0b\u95ee\u9898\u3002 \u4ed6\u5fc5\u987b\u4fdd\u62a4\u4e00\u5ea7\u4e2d\u4e16\u7eaa\u57ce\u5e02\uff0c\u8fd9\u6761\u57ce\u5e02\u7684\u9053\u8def\u6784\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u58eb\u5175\u53ef\u4ee5\u89c2\u5bdf\u5230\u6240\u6709\u548c\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u3002 \u4ed6\u5fc5\u987b\u5728\u8282\u70b9\u4e0a\u653e\u7f6e\u6700\u5c11\u6570\u91cf\u7684\u58eb\u5175\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u6240\u6709\u7684\u8fb9\u3002 \u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u6811\uff1a \u53ea\u9700\u8981\u653e\u7f6e 1 \u540d\u58eb\u5175\uff08\u5728\u8282\u70b9 1 \u5904\uff09\uff0c\u5c31\u53ef\u89c2\u5bdf\u5230\u6240\u6709\u7684\u8fb9\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7528\u4ee5\u63cf\u8ff0\u4e00\u68f5\u6811\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N\uff0c\u8868\u793a\u6811\u7684\u8282\u70b9\u6570\u76ee\u3002 \u63a5\u4e0b\u6765 N \u884c\uff0c\u6bcf\u884c\u6309\u5982\u4e0b\u65b9\u6cd5\u63cf\u8ff0\u4e00\u4e2a\u8282\u70b9\u3002 \u8282\u70b9\u7f16\u53f7\uff1a(\u5b50\u8282\u70b9\u6570\u76ee) \u5b50\u8282\u70b9 \u5b50\u8282\u70b9 \u2026 \u8282\u70b9\u7f16\u53f7\u4ece 0 \u5230 N\u22121\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e0d\u8d85\u8fc7 10\uff0c\u6bcf\u4e2a\u8fb9\u5728\u8f93\u5165\u6570\u636e\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u5360\u636e\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u8868\u793a\u6700\u5c11\u9700\u8981\u7684\u58eb\u5175\u6570\u3002 \u6570\u636e\u8303\u56f4 0<N\u22641500 , 0<N\u22641500 , \u4e00\u4e2a\u6d4b\u8bd5\u70b9\u6240\u6709 N \u76f8\u52a0\u4e4b\u548c\u4e0d\u8d85\u8fc7 300650 300650 \u3002 \u8f93\u5165\u6837\u4f8b 4 0:(1) 1 1:(2) 2 3 2:(0) 3:(0) 5 3:(3) 1 4 2 1:(1) 0 2:(0) 0:(0) 4:(0) \u8f93\u51fa\u6837\u4f8b 1 2 \u9898\u89e3 \u00b6 \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u6211\u6269\u5c55\uff0c\u4e0e\u5176\u4e0d\u540c\u7684\u662f\u82e5\u7236\u8282\u70b9\u9009\u62e9\uff0c\u5176\u5b50\u8282\u70b9\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u7236\u8282\u70b9\u672a\u9009\u62e9\uff0c\u5b50\u8282\u70b9\u5fc5\u9009\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: f[i,1]=\\sum min(f[j,0],f[j,1] f[i,1]=\\sum min(f[j,0],f[j,1] f[i,0]=\\sum f[j,1] f[i,0]=\\sum f[j,1] \u4ee3\u7801 \u00b6 // \u65e0\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1505 ; int head [ N ], e [ N ], ne [ N ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool vis [ N ]; int f [ N ][ 2 ]; void dfs ( int u ) { f [ u ][ 0 ] = 0 ; f [ u ][ 1 ] = 1 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += f [ j ][ 1 ]; f [ u ][ 1 ] += min ( f [ j ][ 0 ], f [ j ][ 1 ]); } } int main () { int n ; while ( scanf ( \"%d\" , & n ) != -1 ) { idx = 0 ; memset ( head , -1 , sizeof ( head )); memset ( vis , false , sizeof ( vis )); for ( int i = 0 ; i < n ; i ++ ) { int a ; int k ; scanf ( \"%d:(%d)\" , & a , & k ); for ( int j = 0 ; j < k ; j ++ ) { int b ; scanf ( \"%d\" , & b ); add ( a , b ); vis [ b ] = true ; } } int root = 0 ; while ( vis [ root ]) root ++ ; dfs ( root ); cout << min ( f [ root ][ 0 ], f [ root ][ 1 ]) << endl ; } return 0 ; } //\u6709\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1505 ; int head [ N ], e [ N ], ne [ N ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool vis [ N ]; int f [ N ][ 2 ]; int dfs ( int u , int t ) { if ( f [ u ][ t ] != -1 ) return f [ u ][ t ]; if ( t == 0 ) f [ u ][ t ] = 0 ; else f [ u ][ t ] = 1 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( t == 0 ) f [ u ][ t ] += dfs ( j , 1 ); else f [ u ][ t ] += min ( dfs ( j , 1 ), dfs ( j , 0 )); } return f [ u ][ t ]; } int main () { int n ; while ( scanf ( \"%d\" , & n ) != -1 ) { idx = 0 ; memset ( head , -1 , sizeof ( head )); memset ( vis , false , sizeof ( vis )); memset ( f , -1 , sizeof ( f )); for ( int i = 0 ; i < n ; i ++ ) { int a ; int k ; scanf ( \"%d:(%d)\" , & a , & k ); for ( int j = 0 ; j < k ; j ++ ) { int b ; scanf ( \"%d\" , & b ); add ( a , b ); vis [ b ] = true ; } } int root = 0 ; while ( vis [ root ]) root ++ ; cout << min ( dfs ( root , 0 ), dfs ( root , 1 )) << endl ; } return 0 ; } \u4f8b6.\u7687\u5bab\u770b\u5b88 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u592a\u5e73\u738b\u4e16\u5b50\u4e8b\u4ef6\u540e\uff0c\u9646\u5c0f\u51e4\u6210\u4e86\u7687\u4e0a\u7279\u8058\u7684\u5fa1\u524d\u4e00\u54c1\u4f8d\u536b\u3002 \u7687\u5bab\u5404\u4e2a\u5bab\u6bbf\u7684\u5206\u5e03\uff0c\u5448\u4e00\u68f5\u6811\u7684\u5f62\u72b6\uff0c\u5bab\u6bbf\u53ef\u89c6\u4e3a\u6811\u4e2d\u7ed3\u70b9\uff0c\u4e24\u4e2a\u5bab\u6bbf\u4e4b\u95f4\u5982\u679c\u5b58\u5728\u9053\u8def\u76f4\u63a5\u76f8\u8fde\uff0c\u5219\u8be5\u9053\u8def\u89c6\u4e3a\u6811\u4e2d\u7684\u4e00\u6761\u8fb9\u3002 \u5df2\u77e5\uff0c\u5728\u4e00\u4e2a\u5bab\u6bbf\u9547\u5b88\u7684\u5b88\u536b\u4e0d\u4ec5\u80fd\u591f\u89c2\u5bdf\u5230\u672c\u5bab\u6bbf\u7684\u72b6\u51b5\uff0c\u8fd8\u80fd\u89c2\u5bdf\u5230\u4e0e\u8be5\u5bab\u6bbf\u76f4\u63a5\u5b58\u5728\u9053\u8def\u76f8\u8fde\u7684\u5176\u4ed6\u5bab\u6bbf\u7684\u72b6\u51b5\u3002 \u5927\u5185\u4fdd\u536b\u68ee\u4e25\uff0c\u4e09\u6b65\u4e00\u5c97\uff0c\u4e94\u6b65\u4e00\u54e8\uff0c\u6bcf\u4e2a\u5bab\u6bbf\u90fd\u8981\u6709\u4eba\u5168\u5929\u5019\u770b\u5b88\uff0c\u5728\u4e0d\u540c\u7684\u5bab\u6bbf\u5b89\u6392\u770b\u5b88\u6240\u9700\u7684\u8d39\u7528\u4e0d\u540c\u3002 \u53ef\u662f\u9646\u5c0f\u51e4\u624b\u4e0a\u7684\u7ecf\u8d39\u4e0d\u8db3\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u6ca1\u6cd5\u5728\u6bcf\u4e2a\u5bab\u6bbf\u90fd\u5b89\u7f6e\u7559\u5b88\u4f8d\u536b\u3002 \u5e2e\u52a9\u9646\u5c0f\u51e4\u5e03\u7f6e\u4f8d\u536b\uff0c\u5728\u770b\u5b88\u5168\u90e8\u5bab\u6bbf\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u5f97\u82b1\u8d39\u7684\u7ecf\u8d39\u6700\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u4e2d\u6570\u636e\u63cf\u8ff0\u4e00\u68f5\u6811\uff0c\u63cf\u8ff0\u5982\u4e0b\uff1a \u7b2c\u4e00\u884c n\uff0c\u8868\u793a\u6811\u4e2d\u7ed3\u70b9\u7684\u6570\u76ee\u3002 \u7b2c\u4e8c\u884c\u81f3\u7b2c n+1 \u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u6bcf\u4e2a\u5bab\u6bbf\u7ed3\u70b9\u4fe1\u606f\uff0c\u4f9d\u6b21\u4e3a\uff1a\u8be5\u5bab\u6bbf\u7ed3\u70b9\u6807\u53f7 i\uff0c\u5728\u8be5\u5bab\u6bbf\u5b89\u7f6e\u4f8d\u536b\u6240\u9700\u7684\u7ecf\u8d39 k\uff0c\u8be5\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u6570 m\uff0c\u63a5\u4e0b\u6765 m \u4e2a\u6570\uff0c\u5206\u522b\u662f\u8fd9\u4e2a\u7ed3\u70b9\u7684 m \u4e2a\u5b50\u7ed3\u70b9\u7684\u6807\u53f7 r1,r2,\u2026,rm\u3002 \u5bf9\u4e8e\u4e00\u4e2a n \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u7ed3\u70b9\u6807\u53f7\u5728 1 \u5230 n \u4e4b\u95f4\uff0c\u4e14\u6807\u53f7\u4e0d\u91cd\u590d\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u7684\u7ecf\u8d39\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u22641500 1\u2264n\u22641500 \u8f93\u5165\u6837\u4f8b 6 1 30 3 2 3 4 2 16 2 5 6 3 5 0 4 4 0 5 11 0 6 5 0 \u8f93\u51fa\u6837\u4f8b 25 \u9898\u89e3 \u00b6 \u4e0a\u9898\u8981\u6c42\u89c2\u5bdf\u5230\u6240\u6709\u7684\u8fb9\uff0c\u672c\u9898\u8981\u6c42\u89c2\u5bdf\u5230\u6240\u6709\u7684\u70b9\uff0c\u6b64\u65f6\u8003\u8651\u50cf\u4e0a\u9898\u4e00\u6837\uff0c\u6bcf\u4e2a\u70b9\u6709\u65e0\u9632\u5b88\u536b\u8fd9\u4e24\u4e2a\u72b6\u6001\u662f\u5426\u8db3\u591f\uff0c\u8ba8\u8bba\u5f53\u524d\u70b9\u4e0d\u653e\u7f6e\u5b88\u536b\u7684\u60c5\u51b5: \u5f53\u524d\u70b9\u4e0d\u653e\u5b88\u536b\u4f46\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230\uff0c\u5219\u5b83\u7684\u5b50\u8282\u70b9\u53ef\u4ee5\u653e\u7f6e\u5b88\u536b\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u653e\u7f6e\u5b88\u536b \u5f53\u524d\u70b9\u4e0d\u653e\u5b88\u536b\u4f46\u672a\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230\uff0c\u5219\u5b83\u7684\u5b50\u8282\u70b9\u5fc5\u987b\u653e\u7f6e\u5b88\u536b \u56e0\u6b64\u5bf9\u4e8e\u4e0a\u8ff0\u60c5\u51b5\u6765\u770b\u4e24\u4e2a\u72b6\u6001\u662f\u4e0d\u591f\u7684 \u6211\u4eec\u5b9a\u4e49: f[i,0] f[i,0] \u4e3a\u4e0d\u653e\u7f6e\u5b88\u536b\u4f46\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230 f[i,1] f[i,1] \u4e3a\u4e0d\u653e\u7f6e\u5b88\u536b\u4e5f\u672a\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230 f[i,1] f[i,1] \u4e3a\u653e\u7f6e\u5b88\u536b \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: f[i,0]=\\sum min(f[j,1],f[j,2]) f[i,0]=\\sum min(f[j,1],f[j,2]) f[i,1]=min(f[i, 1], f[k, 2] + \\sum_{j \\ne k} min(f[j, 1],f[j, 2])) f[i,1]=min(f[i, 1], f[k, 2] + \\sum_{j \\ne k} min(f[j, 1],f[j, 2])) (\u5176\u4e2d\u4e00\u70b9\u653e\u5b88\u536b\u89c2\u5bdf\uff0c\u5176\u4f59\u70b9\u53ef\u653e\u53ef\u4e0d\u653e\uff0c\u53d6\u6700\u5c0f) f[i,2]=\\sum min(f[j,0], f[j,1],f[j,2]) f[i,2]=\\sum min(f[j,0], f[j,1],f[j,2]) \u4ee3\u7801 \u00b6 //f[i, 0] \u4e0d\u653e\u54e8\u5175\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230 f[i, 0] += min(f[j, 1], f[j, 2]) //f[i, 1] \u4e0d\u653e\u54e8\u5175\u88ab\u5b50\u8282\u70b9\u89c2\u5bdf\u5230 f[i, 1] = min(f[k, 2], sigema min(f[j, 1], f[j, 2])) //f[i, 2] \u653e\u54e8\u5175 f[i, 2] += min(f[j, 1], f[j, 2], f[j, 0]) #include <bits/stdc++.h> using namespace std ; const int N = 1505 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], idx = 0 ; int w [ N ]; bool vis [ N ]; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int f [ N ][ 3 ]; void dfs ( int u ) { f [ u ][ 0 ] = 0 ; f [ u ][ 1 ] = 1e9 ; f [ u ][ 2 ] = w [ u ]; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += min ( f [ j ][ 1 ], f [ j ][ 2 ]); f [ u ][ 2 ] += min ( f [ j ][ 0 ], min ( f [ j ][ 1 ], f [ j ][ 2 ])); } for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; f [ u ][ 1 ] = min ( f [ u ][ 1 ], f [ j ][ 2 ] + f [ u ][ 0 ] - min ( f [ j ][ 1 ], f [ j ][ 2 ])); } } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n ; i ++ ) { int a , k , tt ; cin >> a ; cin >> k ; w [ a ] = k ; cin >> tt ; for ( int j = 1 ; j <= tt ; j ++ ) { int b ; cin >> b ; add ( a , b ); vis [ b ] = true ; } } memset ( f , -1 , sizeof ( f )); int root = 1 ; while ( vis [ root ]) root ++ ; dfs ( root ); cout << min ( f [ root ][ 1 ], f [ root ][ 2 ]); return 0 ; }","title":"\u6811\u5f62DP"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_1","text":"\u6811\u5f62DP\u51c6\u786e\u7684\u8bf4\u662f\u4e00\u79cdDP\u7684\u601d\u60f3\uff0c\u5c06DP\u5efa\u7acb\u5728\u6811\u72b6\u7ed3\u6784\u7684\u57fa\u7840\u4e0a\u3002\u6574\u4f53\u7684\u601d\u8def\u5927\u81f4\u5c31\u662f\u7528\u6811\u5f62\u7684\u7ed3\u6784\u5b58\u50a8\u6570\u636e\u3002 \u6811\u5f62DP\u7684\u5173\u952e\u548c\u5b9e\u73b0\u65b9\u6cd5\u662f**dfs**; \u5148\u627e\u5230\u6811\u6839\uff0c\u4ece\u6811\u6839\u5f00\u59cb\u8fd0\u7528dfs\u9012\u5f52\uff0c\u8ddfdfs\u4e00\u6837\u5148\u521d\u59cb\u5316\uff0c\u7136\u540e\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\u4e0a\u4e3a\u6b62\uff0c\u628a\u6700\u5e95\u5c42\u7684f[i][j]\u66f4\u65b0\u5b8c\u6bd5\uff0c\u518d\u56de\u6765\u5f80\u4e0a\u8d70\uff0c\u81ea\u5e95\u5411\u4e0a\u5730\u6839\u636e\u9898\u610f\u66f4\u65b0\u4e0a\u5c42\u7684f\u6570\u7ec4\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002","title":"\u6982\u8ff0"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Ural \u5927\u5b66\u6709 N \u540d\u804c\u5458\uff0c\u7f16\u53f7\u4e3a 1\u223cN\u3002 \u4ed6\u4eec\u7684\u5173\u7cfb\u5c31\u50cf\u4e00\u68f5\u4ee5\u6821\u957f\u4e3a\u6839\u7684\u6811\uff0c\u7236\u8282\u70b9\u5c31\u662f\u5b50\u8282\u70b9\u7684\u76f4\u63a5\u4e0a\u53f8\u3002 \u6bcf\u4e2a\u804c\u5458\u6709\u4e00\u4e2a\u5feb\u4e50\u6307\u6570\uff0c\u7528\u6574\u6570 Hi \u7ed9\u51fa\uff0c\u5176\u4e2d 1\u2264i\u2264N\u3002 \u73b0\u5728\u8981\u53ec\u5f00\u4e00\u573a\u5468\u5e74\u5e86\u5bb4\u4f1a\uff0c\u4e0d\u8fc7\uff0c\u6ca1\u6709\u804c\u5458\u613f\u610f\u548c\u76f4\u63a5\u4e0a\u53f8\u4e00\u8d77\u53c2\u4f1a\u3002 \u5728\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u524d\u63d0\u4e0b\uff0c\u4e3b\u529e\u65b9\u5e0c\u671b\u9080\u8bf7\u4e00\u90e8\u5206\u804c\u5458\u53c2\u4f1a\uff0c\u4f7f\u5f97\u6240\u6709\u53c2\u4f1a\u804c\u5458\u7684\u5feb\u4e50\u6307\u6570\u603b\u548c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 N\u3002 \u63a5\u4e0b\u6765 N \u884c\uff0c\u7b2c i \u884c\u8868\u793a i \u53f7\u804c\u5458\u7684\u5feb\u4e50\u6307\u6570 Hi\u3002 \u63a5\u4e0b\u6765 N\u22121 \u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u5bf9\u6574\u6570 L,K\uff0c\u8868\u793a K \u662f L \u7684\u76f4\u63a5\u4e0a\u53f8\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6700\u5927\u7684\u5feb\u4e50\u6307\u6570\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u22646000, 1\u2264N\u22646000, \u2212128\u2264Hi\u2264127 \u2212128\u2264Hi\u2264127 \u8f93\u5165\u6837\u4f8b 7 1 1 1 1 1 1 1 1 3 2 3 6 4 7 4 4 5 3 5 \u8f93\u51fa\u6837\u4f8b 5","title":"\u4f8b1.\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_2","text":"\u7ecf\u5178\u9898\uff0c\u9996\u5148\u5efa\u6811+\u627e\u6839\uff0c\u7528 f[i,0] f[i,0] \u8868\u793a\u4e0d\u9009\u5f53\u524d\u804c\u5458\u4e14\u5176\u4e3a\u6839\u7ed3\u70b9\u65f6\u7684\u6700\u5927\u5feb\u4e50\u6307\u6570\uff0c f[i,1] f[i,1] \u8868\u793a\u9009\u62e9\u5f53\u524d\u804c\u5458\u4e14\u5176\u4e3a\u6839\u8282\u70b9\u65f6\u7684\u6700\u5927\u5feb\u4e50\u6307\u6570\uff0c\u7531\u4e8e\u9009\u4e86\u5f53\u524d\u804c\u5458\u540e\uff0c\u4ed6\u7684\u90e8\u4e0b\u5c31\u4e0d\u80fd\u518d\u9009\uff0c\u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: f[i,0] = \\sum{max(f[j,0], f[j,1])} f[i,0] = \\sum{max(f[j,0], f[j,1])} f[i,1] = \\sum{f[j,0]} f[i,1] = \\sum{f[j,0]}","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_3","text":"#include <bits/stdc++.h> using namespace std ; const int N = 6005 ; int head [ N ], e [ N ], ne [ N ], w [ N ], idx = 0 ; void add ( int a , int b ) { // \u5efa\u6811 e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool vis [ N ]; int f [ N ][ 2 ]; void dfs ( int u ) { f [ u ][ 1 ] = w [ u ]; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += max ( f [ j ][ 0 ], f [ j ][ 1 ]); // \u4e0d\u9009\u7684\u8bdd\u5176\u5b50\u7ed3\u70b9\u53ef\u9009\u53ef\u4e0d\u9009 f [ u ][ 1 ] += f [ j ][ 0 ]; // \u9009\u4e86\u7684\u8bdd\u5176\u5b50\u8282\u70b9\u90fd\u4e0d\u80fd\u9009 } } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; for ( int i = 1 ; i <= n - 1 ; i ++ ) { int a , b ; cin >> a >> b ; add ( b , a ); vis [ a ] = true ; } int root = 1 ; while ( vis [ root ]) root ++ ; // \u627e\u6839 dfs ( root ); cout << max ( f [ root ][ 0 ], f [ root ][ 1 ]); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6811\u4e2d\u5305\u542b n \u4e2a\u7ed3\u70b9\uff08\u7f16\u53f71~n\uff09\u548c n\u22121 \u6761\u65e0\u5411\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\u3002 \u73b0\u5728\u8bf7\u4f60\u627e\u5230\u6811\u4e2d\u7684\u4e00\u6761\u6700\u957f\u8def\u5f84\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8981\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u4f7f\u5f97\u8def\u5f84\u4e24\u7aef\u7684\u70b9\u7684\u8ddd\u79bb\u6700\u8fdc\u3002 \u6ce8\u610f\uff1a\u8def\u5f84\u4e2d\u53ef\u4ee5\u53ea\u5305\u542b\u4e00\u4e2a\u70b9\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\u3002 \u63a5\u4e0b\u6765 n\u22121 \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 ai,bi,ci\uff0c\u8868\u793a\u70b9 ai \u548c bi \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u6743\u503c\u4e3a ci \u7684\u8fb9\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6811\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226410000, 1\u2264n\u226410000, 1\u2264ai,bi\u2264n, 1\u2264ai,bi\u2264n, \u221210^5\u2264ci\u226410^5 \u221210^5\u2264ci\u226410^5 \u8f93\u5165\u6837\u4f8b 6 5 1 6 1 4 5 6 3 9 2 6 8 6 1 7 \u8f93\u51fa\u6837\u4f8b 22","title":"\u4f8b2.\u6811\u7684\u6700\u957f\u8def\u5f84"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_4","text":"\u672c\u9898\u4e5f\u79f0\u6811\u7684\u76f4\u5f84\uff0c\u6734\u7d20\u505a\u6cd5\u4e3a\u679a\u4e3e\u6bcf\u6761\u8def\u5f84\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\uff0c\u5229\u7528\u500d\u589e\u6c42\u51fa\u4e24\u70b9\u8ddd\u79bb\uff0c\u4f46\u8fd9\u6837\u5149\u679a\u4e3e\u8d77\u70b9\u548c\u7ec8\u70b9\u5df2\u7ecf O(n^2) O(n^2) \u8d85\u65f6\uff0c\u56e0\u6b64\u8f6c\u6362\u679a\u4e3e\u65b9\u5f0f\uff0c\u6211\u4eec\u9009\u62e9\u679a\u4e3e\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5e76\u4e14\u5047\u8bbe\u5176\u4e3a\u8def\u5f84\u4e0a\u7684\u6700\u9ad8\u70b9\uff0c\u5219\u76f4\u5f84\u4e00\u5b9a\u5728\u6240\u6709\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84+\u6b21\u957f\u8def\u5f84\u5f53\u4e2d\uff0c\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa\u6240\u6709\u70b9\u7684\u6700\u957f\u8def\u5f84\u548c\u6b21\u957f\u8def\u5f84\u5373\u53ef \u4f46\u4e0a\u9762\u6709\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e\u662f\u6811\u7684\u5f62\u5f0f\uff0c\u6700\u957f\u6216\u6b21\u957f\u8def\u5f84\u53ef\u80fd\u662f\u5f80\u4e0a\u7ecf\u8fc7\u7236\u8282\u70b9\u7684\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u5728\u679a\u4e3e\u5230\u5b83\u7684\u7956\u5148\u8282\u70b9\u65f6\u5df2\u7ecf\u8003\u8651\u5b8c\u4e86\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u89e3\u51b3\u4e86,\u4ee3\u7801\u7ed9\u51fa\u4e24\u79cddfs\u5199\u6cd5\uff0c\u5206\u522b\u4e3a\u6709\u8fd4\u56de\u503c\u548c\u65e0\u8fd4\u56de\u503c","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_5","text":"// \u6709\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 , M = 2e4 + 4 ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n ; int res = 0 ; int dfs ( int u , int fa ) { int d = 0 , d1 = 0 , d2 = 0 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; d = dfs ( j , u ) + w [ i ]; if ( d >= d1 ) { // \u5927\u4e8e\u6700\u5927\u503c d2 = d1 ; d1 = d ; } else if ( d > d2 ) { // \u5927\u4e8e\u6b21\u5927\u503c d2 = d ; } } res = max ( d1 + d2 , res ); return d1 ; } int main () { cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n - 1 ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); add ( b , a , c ); } dfs ( 1 , -1 ); cout << res << endl ; return 0 ; } // \u65e0\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; int f [ N ][ 2 ]; // f[i][0] \u6700\u957f f[i][1] \u6b21\u957f void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int res = 0 ; void dfs ( int u , int fa ) { int d = 0 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; dfs ( j , u ); d = f [ j ][ 0 ] + w [ i ]; if ( d >= f [ u ][ 0 ]) { f [ u ][ 1 ] = f [ u ][ 0 ]; f [ u ][ 0 ] = d ; } else if ( d > f [ u ][ 1 ]) { f [ u ][ 1 ] = d ; } } res = max ( res , f [ u ][ 0 ] + f [ u ][ 1 ]); } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 0 ; i < n - 1 ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); add ( b , a , c ); } dfs ( 1 , -1 ); cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6811\u4e2d\u5305\u542b n \u4e2a\u7ed3\u70b9\uff08\u7f16\u53f71~n\uff09\u548c n\u22121 \u6761\u65e0\u5411\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\u3002 \u8bf7\u4f60\u5728\u6811\u4e2d\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8be5\u70b9\u5230\u6811\u4e2d\u5176\u4ed6\u7ed3\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\u6700\u8fd1\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n\u3002 \u63a5\u4e0b\u6765 n\u22121 \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 ai,bi,ci\uff0c\u8868\u793a\u70b9 ai \u548c bi \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u6743\u503c\u4e3a ci \u7684\u8fb9\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6240\u6c42\u70b9\u5230\u6811\u4e2d\u5176\u4ed6\u7ed3\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226410000, 1\u2264n\u226410000, $1\u2264ai,bi\u2264n, 1\u2264ci\u226410^5 1\u2264ci\u226410^5 \u8f93\u5165\u6837\u4f8b 5 2 1 1 3 2 1 4 3 1 5 1 1 \u8f93\u51fa\u6837\u4f8b 2","title":"\u4f8b3.\u6811\u7684\u4e2d\u5fc3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_6","text":"\u548c\u6811\u7684\u76f4\u5f84\u5f88\u76f8\u4f3c\uff0c\u4f46\u4e5f\u5f88\u4e0d\u540c\uff0c\u9996\u5148\u8003\u8651\u5bf9\u4e00\u4e2a\u70b9\u9700\u8981\u6bd4\u8f83\u54ea\u4e9b\u90e8\u5206 1.\u5f80\u5b50\u8282\u70b9\u8d70\u7684\u8def\u5f84 2.\u5f80\u7236\u8282\u70b9\u8d70\u7684\u8def\u5f84 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u548c\u6811\u7684\u76f4\u5f84\u5f88\u76f8\u4f3c\u4f46\u53c8\u4e0d\u540c\u7684\u5730\u65b9\u4e86\uff0c\u4e66\u7684\u76f4\u5f84\u5f80\u7236\u8282\u70b9\u8d70\u7684\u8def\u5f84\u5728\u679a\u4e3e\u7236\u8282\u70b9\u65f6\u5df2\u7ecf\u8003\u8651\uff0c\u662f\u56e0\u4e3a\u5f53\u65f6\u6211\u4eec\u8003\u8651\u7684\u662f\u76f4\u5f84\uff0c\u4e00\u6761\u76f4\u5f84\u53ef\u4ee5\u88ab\u62c6\u6210\u4e0d\u540c\u7684\u6700\u957f\u8def\u5f84\u548c\u6b21\u957f\u8def\u5f84\uff0c\u53ea\u8981\u76f4\u5f84\u7684\u6700\u9ad8\u70b9\u4e0d\u540c\u5373\u53ef\uff0c\u800c\u672c\u9898\u53ea\u662f\u4e00\u6761\u8def\u5f84\uff0c\u4e0d\u80fd\u88ab\u62c6\u5206\uff0c\u56e0\u6b64\u9700\u8981\u8003\u8651\u5f80\u4e0a\u8d70\uff0c\u6211\u4eec\u7528d1\uff0cd2\u5b58\u5f53\u524d\u70b9\u5f80\u5b50\u7ed3\u70b9\u8d70\u7684\u6700\u957f\u548c\u6b21\u957f\u8def\u5f84\uff0c\u7528up\u5b58\u5f80\u7236\u8282\u70b9\u8d70\u7684**\u4e0d\u7ecf\u8fc7\u5f53\u524d\u8282\u70b9**\u7684\u6700\u957f\u8def\u5f84\uff0c\u4f7f\u7528\u4e24\u4e2adfs\uff0c\u7b2c\u4e00\u4e2a\u5904\u7406d1\u548cd2\uff0c\u7b2c\u4e8c\u4e2a\u5904\u7406up\uff0c\u6700\u540e\u679a\u4e3e\u6240\u6709\u7684\u70b9\u66f4\u65b0\u7b54\u6848\u5c31\u884c\u4e86","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_7","text":"#include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int d1 [ N ], d2 [ N ], up [ N ]; // \u6700\u957f\uff0c\u6b21\u957f\uff0c\u7ecf\u8fc7\u7236\u8282\u70b9\u7684\u6700\u957f int p1 [ N ], p2 [ N ]; // \u5b58\u7236\u8282\u70b9\u7ecf\u8fc7\u7684\u5b50\u8282\u70b9 void dfs_d ( int u , int fa ) { int d = 0 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; dfs_d ( j , u ); d = d1 [ j ] + w [ i ]; if ( d >= d1 [ u ]) { d2 [ u ] = d1 [ u ]; p2 [ u ] = p1 [ u ]; d1 [ u ] = d ; p1 [ u ] = j ; } else if ( d > d2 [ u ]) { d2 [ u ] = d ; p2 [ u ] = j ; } } } void dfs_u ( int u , int fa ) { for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( j == fa ) continue ; if ( p1 [ u ] == j ) { // \u6700\u957f\u7ecf\u8fc7\u5f53\u524d\u7ed3\u70b9\uff0c\u6b64\u65f6\u7528\u6b21\u957f\u66f4\u65b0 up [ j ] = max ( up [ u ], d2 [ u ]) + w [ i ]; } else { // \u4e0d\u7ecf\u8fc7\u5c31\u7528\u6700\u957f\u66f4\u65b0 up [ j ] = max ( up [ u ], d1 [ u ]) + w [ i ]; } dfs_u ( j , u ); } } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 0 ; i < n - 1 ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); add ( b , a , c ); } dfs_d ( 1 , -1 ); dfs_u ( 1 , -1 ); int res = 0x3f3f3f3f ; for ( int i = 1 ; i <= n ; i ++ ) { // \u679a\u4e3e\u6240\u6709\u70b9 res = min ( res , max ( up [ i ], d1 [ i ])); } cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5982\u679c\u4e00\u4e2a\u6570 x \u7684\u7ea6\u6570\u4e4b\u548c y\uff08\u4e0d\u5305\u62ec\u4ed6\u672c\u8eab\uff09\u6bd4\u4ed6\u672c\u8eab\u5c0f\uff0c\u90a3\u4e48 x \u53ef\u4ee5\u53d8\u6210 y\uff0cy \u4e5f\u53ef\u4ee5\u53d8\u6210 x\u3002 \u4f8b\u5982\uff0c4 \u53ef\u4ee5\u53d8\u4e3a 3\uff0c1 \u53ef\u4ee5\u53d8\u4e3a 7\u3002 \u9650\u5b9a\u6240\u6709\u6570\u5b57\u53d8\u6362\u5728\u4e0d\u8d85\u8fc7 n \u7684\u6b63\u6574\u6570\u8303\u56f4\u5185\u8fdb\u884c\uff0c\u6c42\u4e0d\u65ad\u8fdb\u884c\u6570\u5b57\u53d8\u6362\u4e14\u4e0d\u51fa\u73b0\u91cd\u590d\u6570\u5b57\u7684\u6700\u591a\u53d8\u6362\u6b65\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 n\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e0d\u65ad\u8fdb\u884c\u6570\u5b57\u53d8\u6362\u4e14\u4e0d\u51fa\u73b0\u91cd\u590d\u6570\u5b57\u7684\u6700\u591a\u53d8\u6362\u6b65\u6570\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226450000 1\u2264n\u226450000 \u8f93\u5165\u6837\u4f8b 7 \u8f93\u51fa\u6837\u4f8b 3","title":"\u4f8b4.\u6570\u5b57\u8f6c\u6362"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_8","text":"\u7b80\u6613\u7248\u7684\u6811\u7684\u76f4\u5f84\uff0c\u8fd9\u91cc\u7b80\u5355\u63d0\u4e00\u4e0b\u9884\u5904\u7406\u7ea6\u675f\u548c\u7684\u65b9\u6cd5\uff0c\u4e0d\u9009\u62e9\u679a\u4e3e\u6bcf\u4e2a\u6570\u7684\u7ea6\u675f\uff0c\u800c\u9009\u62e9\u679a\u4e3e\u6bcf\u4e2a\u6570\u7684\u500d\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlog_n + C) O(nlog_n + C) \uff0cC\u4e3a\u6b27\u62c9\u5e38\u6570\uff0c\u5efa\u6811\u540e\u7528\u5c31\u662f\u6c42\u8fb9\u6743\u4e3a1\u65f6\u6811\u7684\u76f4\u5f84","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_9","text":"#include <bits/stdc++.h> using namespace std ; const int N = 5e4 + 5 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int sum [ N ]; int res = 0 ; int d1 [ N ], d2 [ N ]; // \u6700\u957f\u4e0e\u6b21\u957f bool vis [ N ]; void dfs ( int u ) { d1 [ u ] = d2 [ u ] = -0x3f3f3f3f ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( vis [ j ]) continue ; vis [ j ] = true ; dfs ( j ); int d = d1 [ j ] + 1 ; if ( d >= d1 [ u ]) { d2 [ u ] = d1 [ u ]; d1 [ u ] = d ; } else if ( d > d2 [ u ]) { d2 [ u ] = d ; } } if ( d1 [ u ] == -0x3f3f3f3f ) d1 [ u ] = d2 [ u ] = 0 ; // \u53f6\u5b50\u8282\u70b9\u4e3a0\uff0c\u672c\u9898\u6743\u503c\u5927\u4e8e0\u53ef\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\u8d1f\u65e0\u7a77 res = max ( res , d1 [ u ] + ( d2 [ u ] == -0x3f3f3f3f ? 0 : d2 [ u ])); } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 2 * i ; j <= n ; j += i ) { sum [ j ] += i ; } } for ( int i = 2 ; i <= n ; i ++ ) { if ( sum [ i ] < i ) { add ( sum [ i ], i ); add ( i , sum [ i ]); } } for ( int i = 1 ; i <= n ; i ++ ) { if ( ! vis [ i ]) { vis [ i ] = true ; dfs ( i ); } } cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#5","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u9c8d\u52c3\u559c\u6b22\u73a9\u7535\u8111\u6e38\u620f\uff0c\u7279\u522b\u662f\u6218\u7565\u6e38\u620f\uff0c\u4f46\u6709\u65f6\u4ed6\u627e\u4e0d\u5230\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u8fd9\u8ba9\u4ed6\u5f88\u4f24\u5fc3\u3002 \u73b0\u5728\u4ed6\u6709\u4ee5\u4e0b\u95ee\u9898\u3002 \u4ed6\u5fc5\u987b\u4fdd\u62a4\u4e00\u5ea7\u4e2d\u4e16\u7eaa\u57ce\u5e02\uff0c\u8fd9\u6761\u57ce\u5e02\u7684\u9053\u8def\u6784\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u58eb\u5175\u53ef\u4ee5\u89c2\u5bdf\u5230\u6240\u6709\u548c\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u3002 \u4ed6\u5fc5\u987b\u5728\u8282\u70b9\u4e0a\u653e\u7f6e\u6700\u5c11\u6570\u91cf\u7684\u58eb\u5175\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u6240\u6709\u7684\u8fb9\u3002 \u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u6811\uff1a \u53ea\u9700\u8981\u653e\u7f6e 1 \u540d\u58eb\u5175\uff08\u5728\u8282\u70b9 1 \u5904\uff09\uff0c\u5c31\u53ef\u89c2\u5bdf\u5230\u6240\u6709\u7684\u8fb9\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7528\u4ee5\u63cf\u8ff0\u4e00\u68f5\u6811\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N\uff0c\u8868\u793a\u6811\u7684\u8282\u70b9\u6570\u76ee\u3002 \u63a5\u4e0b\u6765 N \u884c\uff0c\u6bcf\u884c\u6309\u5982\u4e0b\u65b9\u6cd5\u63cf\u8ff0\u4e00\u4e2a\u8282\u70b9\u3002 \u8282\u70b9\u7f16\u53f7\uff1a(\u5b50\u8282\u70b9\u6570\u76ee) \u5b50\u8282\u70b9 \u5b50\u8282\u70b9 \u2026 \u8282\u70b9\u7f16\u53f7\u4ece 0 \u5230 N\u22121\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e0d\u8d85\u8fc7 10\uff0c\u6bcf\u4e2a\u8fb9\u5728\u8f93\u5165\u6570\u636e\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u4e2a\u5360\u636e\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u8868\u793a\u6700\u5c11\u9700\u8981\u7684\u58eb\u5175\u6570\u3002 \u6570\u636e\u8303\u56f4 0<N\u22641500 , 0<N\u22641500 , \u4e00\u4e2a\u6d4b\u8bd5\u70b9\u6240\u6709 N \u76f8\u52a0\u4e4b\u548c\u4e0d\u8d85\u8fc7 300650 300650 \u3002 \u8f93\u5165\u6837\u4f8b 4 0:(1) 1 1:(2) 2 3 2:(0) 3:(0) 5 3:(3) 1 4 2 1:(1) 0 2:(0) 0:(0) 4:(0) \u8f93\u51fa\u6837\u4f8b 1 2","title":"\u4f8b5.\u6218\u7565\u6e38\u620f"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_10","text":"\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u6211\u6269\u5c55\uff0c\u4e0e\u5176\u4e0d\u540c\u7684\u662f\u82e5\u7236\u8282\u70b9\u9009\u62e9\uff0c\u5176\u5b50\u8282\u70b9\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u7236\u8282\u70b9\u672a\u9009\u62e9\uff0c\u5b50\u8282\u70b9\u5fc5\u9009\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: f[i,1]=\\sum min(f[j,0],f[j,1] f[i,1]=\\sum min(f[j,0],f[j,1] f[i,0]=\\sum f[j,1] f[i,0]=\\sum f[j,1]","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_11","text":"// \u65e0\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1505 ; int head [ N ], e [ N ], ne [ N ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool vis [ N ]; int f [ N ][ 2 ]; void dfs ( int u ) { f [ u ][ 0 ] = 0 ; f [ u ][ 1 ] = 1 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += f [ j ][ 1 ]; f [ u ][ 1 ] += min ( f [ j ][ 0 ], f [ j ][ 1 ]); } } int main () { int n ; while ( scanf ( \"%d\" , & n ) != -1 ) { idx = 0 ; memset ( head , -1 , sizeof ( head )); memset ( vis , false , sizeof ( vis )); for ( int i = 0 ; i < n ; i ++ ) { int a ; int k ; scanf ( \"%d:(%d)\" , & a , & k ); for ( int j = 0 ; j < k ; j ++ ) { int b ; scanf ( \"%d\" , & b ); add ( a , b ); vis [ b ] = true ; } } int root = 0 ; while ( vis [ root ]) root ++ ; dfs ( root ); cout << min ( f [ root ][ 0 ], f [ root ][ 1 ]) << endl ; } return 0 ; } //\u6709\u8fd4\u56de\u503c #include <bits/stdc++.h> using namespace std ; const int N = 1505 ; int head [ N ], e [ N ], ne [ N ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool vis [ N ]; int f [ N ][ 2 ]; int dfs ( int u , int t ) { if ( f [ u ][ t ] != -1 ) return f [ u ][ t ]; if ( t == 0 ) f [ u ][ t ] = 0 ; else f [ u ][ t ] = 1 ; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( t == 0 ) f [ u ][ t ] += dfs ( j , 1 ); else f [ u ][ t ] += min ( dfs ( j , 1 ), dfs ( j , 0 )); } return f [ u ][ t ]; } int main () { int n ; while ( scanf ( \"%d\" , & n ) != -1 ) { idx = 0 ; memset ( head , -1 , sizeof ( head )); memset ( vis , false , sizeof ( vis )); memset ( f , -1 , sizeof ( f )); for ( int i = 0 ; i < n ; i ++ ) { int a ; int k ; scanf ( \"%d:(%d)\" , & a , & k ); for ( int j = 0 ; j < k ; j ++ ) { int b ; scanf ( \"%d\" , & b ); add ( a , b ); vis [ b ] = true ; } } int root = 0 ; while ( vis [ root ]) root ++ ; cout << min ( dfs ( root , 0 ), dfs ( root , 1 )) << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#6","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u592a\u5e73\u738b\u4e16\u5b50\u4e8b\u4ef6\u540e\uff0c\u9646\u5c0f\u51e4\u6210\u4e86\u7687\u4e0a\u7279\u8058\u7684\u5fa1\u524d\u4e00\u54c1\u4f8d\u536b\u3002 \u7687\u5bab\u5404\u4e2a\u5bab\u6bbf\u7684\u5206\u5e03\uff0c\u5448\u4e00\u68f5\u6811\u7684\u5f62\u72b6\uff0c\u5bab\u6bbf\u53ef\u89c6\u4e3a\u6811\u4e2d\u7ed3\u70b9\uff0c\u4e24\u4e2a\u5bab\u6bbf\u4e4b\u95f4\u5982\u679c\u5b58\u5728\u9053\u8def\u76f4\u63a5\u76f8\u8fde\uff0c\u5219\u8be5\u9053\u8def\u89c6\u4e3a\u6811\u4e2d\u7684\u4e00\u6761\u8fb9\u3002 \u5df2\u77e5\uff0c\u5728\u4e00\u4e2a\u5bab\u6bbf\u9547\u5b88\u7684\u5b88\u536b\u4e0d\u4ec5\u80fd\u591f\u89c2\u5bdf\u5230\u672c\u5bab\u6bbf\u7684\u72b6\u51b5\uff0c\u8fd8\u80fd\u89c2\u5bdf\u5230\u4e0e\u8be5\u5bab\u6bbf\u76f4\u63a5\u5b58\u5728\u9053\u8def\u76f8\u8fde\u7684\u5176\u4ed6\u5bab\u6bbf\u7684\u72b6\u51b5\u3002 \u5927\u5185\u4fdd\u536b\u68ee\u4e25\uff0c\u4e09\u6b65\u4e00\u5c97\uff0c\u4e94\u6b65\u4e00\u54e8\uff0c\u6bcf\u4e2a\u5bab\u6bbf\u90fd\u8981\u6709\u4eba\u5168\u5929\u5019\u770b\u5b88\uff0c\u5728\u4e0d\u540c\u7684\u5bab\u6bbf\u5b89\u6392\u770b\u5b88\u6240\u9700\u7684\u8d39\u7528\u4e0d\u540c\u3002 \u53ef\u662f\u9646\u5c0f\u51e4\u624b\u4e0a\u7684\u7ecf\u8d39\u4e0d\u8db3\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u6ca1\u6cd5\u5728\u6bcf\u4e2a\u5bab\u6bbf\u90fd\u5b89\u7f6e\u7559\u5b88\u4f8d\u536b\u3002 \u5e2e\u52a9\u9646\u5c0f\u51e4\u5e03\u7f6e\u4f8d\u536b\uff0c\u5728\u770b\u5b88\u5168\u90e8\u5bab\u6bbf\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u5f97\u82b1\u8d39\u7684\u7ecf\u8d39\u6700\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u4e2d\u6570\u636e\u63cf\u8ff0\u4e00\u68f5\u6811\uff0c\u63cf\u8ff0\u5982\u4e0b\uff1a \u7b2c\u4e00\u884c n\uff0c\u8868\u793a\u6811\u4e2d\u7ed3\u70b9\u7684\u6570\u76ee\u3002 \u7b2c\u4e8c\u884c\u81f3\u7b2c n+1 \u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u6bcf\u4e2a\u5bab\u6bbf\u7ed3\u70b9\u4fe1\u606f\uff0c\u4f9d\u6b21\u4e3a\uff1a\u8be5\u5bab\u6bbf\u7ed3\u70b9\u6807\u53f7 i\uff0c\u5728\u8be5\u5bab\u6bbf\u5b89\u7f6e\u4f8d\u536b\u6240\u9700\u7684\u7ecf\u8d39 k\uff0c\u8be5\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u6570 m\uff0c\u63a5\u4e0b\u6765 m \u4e2a\u6570\uff0c\u5206\u522b\u662f\u8fd9\u4e2a\u7ed3\u70b9\u7684 m \u4e2a\u5b50\u7ed3\u70b9\u7684\u6807\u53f7 r1,r2,\u2026,rm\u3002 \u5bf9\u4e8e\u4e00\u4e2a n \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u7ed3\u70b9\u6807\u53f7\u5728 1 \u5230 n \u4e4b\u95f4\uff0c\u4e14\u6807\u53f7\u4e0d\u91cd\u590d\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u7684\u7ecf\u8d39\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u22641500 1\u2264n\u22641500 \u8f93\u5165\u6837\u4f8b 6 1 30 3 2 3 4 2 16 2 5 6 3 5 0 4 4 0 5 11 0 6 5 0 \u8f93\u51fa\u6837\u4f8b 25","title":"\u4f8b6.\u7687\u5bab\u770b\u5b88"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_12","text":"\u4e0a\u9898\u8981\u6c42\u89c2\u5bdf\u5230\u6240\u6709\u7684\u8fb9\uff0c\u672c\u9898\u8981\u6c42\u89c2\u5bdf\u5230\u6240\u6709\u7684\u70b9\uff0c\u6b64\u65f6\u8003\u8651\u50cf\u4e0a\u9898\u4e00\u6837\uff0c\u6bcf\u4e2a\u70b9\u6709\u65e0\u9632\u5b88\u536b\u8fd9\u4e24\u4e2a\u72b6\u6001\u662f\u5426\u8db3\u591f\uff0c\u8ba8\u8bba\u5f53\u524d\u70b9\u4e0d\u653e\u7f6e\u5b88\u536b\u7684\u60c5\u51b5: \u5f53\u524d\u70b9\u4e0d\u653e\u5b88\u536b\u4f46\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230\uff0c\u5219\u5b83\u7684\u5b50\u8282\u70b9\u53ef\u4ee5\u653e\u7f6e\u5b88\u536b\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u653e\u7f6e\u5b88\u536b \u5f53\u524d\u70b9\u4e0d\u653e\u5b88\u536b\u4f46\u672a\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230\uff0c\u5219\u5b83\u7684\u5b50\u8282\u70b9\u5fc5\u987b\u653e\u7f6e\u5b88\u536b \u56e0\u6b64\u5bf9\u4e8e\u4e0a\u8ff0\u60c5\u51b5\u6765\u770b\u4e24\u4e2a\u72b6\u6001\u662f\u4e0d\u591f\u7684 \u6211\u4eec\u5b9a\u4e49: f[i,0] f[i,0] \u4e3a\u4e0d\u653e\u7f6e\u5b88\u536b\u4f46\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230 f[i,1] f[i,1] \u4e3a\u4e0d\u653e\u7f6e\u5b88\u536b\u4e5f\u672a\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230 f[i,1] f[i,1] \u4e3a\u653e\u7f6e\u5b88\u536b \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b: f[i,0]=\\sum min(f[j,1],f[j,2]) f[i,0]=\\sum min(f[j,1],f[j,2]) f[i,1]=min(f[i, 1], f[k, 2] + \\sum_{j \\ne k} min(f[j, 1],f[j, 2])) f[i,1]=min(f[i, 1], f[k, 2] + \\sum_{j \\ne k} min(f[j, 1],f[j, 2])) (\u5176\u4e2d\u4e00\u70b9\u653e\u5b88\u536b\u89c2\u5bdf\uff0c\u5176\u4f59\u70b9\u53ef\u653e\u53ef\u4e0d\u653e\uff0c\u53d6\u6700\u5c0f) f[i,2]=\\sum min(f[j,0], f[j,1],f[j,2]) f[i,2]=\\sum min(f[j,0], f[j,1],f[j,2])","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_13","text":"//f[i, 0] \u4e0d\u653e\u54e8\u5175\u88ab\u7236\u8282\u70b9\u89c2\u5bdf\u5230 f[i, 0] += min(f[j, 1], f[j, 2]) //f[i, 1] \u4e0d\u653e\u54e8\u5175\u88ab\u5b50\u8282\u70b9\u89c2\u5bdf\u5230 f[i, 1] = min(f[k, 2], sigema min(f[j, 1], f[j, 2])) //f[i, 2] \u653e\u54e8\u5175 f[i, 2] += min(f[j, 1], f[j, 2], f[j, 0]) #include <bits/stdc++.h> using namespace std ; const int N = 1505 , M = 2 * N ; int head [ N ], e [ M ], ne [ M ], idx = 0 ; int w [ N ]; bool vis [ N ]; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int f [ N ][ 3 ]; void dfs ( int u ) { f [ u ][ 0 ] = 0 ; f [ u ][ 1 ] = 1e9 ; f [ u ][ 2 ] = w [ u ]; for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += min ( f [ j ][ 1 ], f [ j ][ 2 ]); f [ u ][ 2 ] += min ( f [ j ][ 0 ], min ( f [ j ][ 1 ], f [ j ][ 2 ])); } for ( int i = head [ u ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; f [ u ][ 1 ] = min ( f [ u ][ 1 ], f [ j ][ 2 ] + f [ u ][ 0 ] - min ( f [ j ][ 1 ], f [ j ][ 2 ])); } } int main () { int n ; cin >> n ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= n ; i ++ ) { int a , k , tt ; cin >> a ; cin >> k ; w [ a ] = k ; cin >> tt ; for ( int j = 1 ; j <= tt ; j ++ ) { int b ; cin >> b ; add ( a , b ); vis [ b ] = true ; } } memset ( f , -1 , sizeof ( f )); int root = 1 ; while ( vis [ root ]) root ++ ; dfs ( root ); cout << min ( f [ root ][ 1 ], f [ root ][ 2 ]); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/","text":"\u6982\u8ff0 \u00b6 \u72b6\u6001\u673a\u6a21\u578b\u5305\u542b\u591a\u4e2a\u5f85\u9009\u72b6\u6001\uff0c\u4e0d\u540c\u7684\u72b6\u6001\u4e4b\u95f4\u6709\u76f8\u4e92\u8f6c\u5316\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u8fd9\u4e9b\u8f6c\u5316\u7684\u624b\u6bb5\uff0c\u8fbe\u6210\u72b6\u6001\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u79fb\uff0c\u4e00\u822c\u9700\u8981\u5229\u7528\u56fe\u8bba\u7684\u77e5\u8bc6\u8fdb\u884c\u8f6c\u5316 \u4f8b1.\u5927\u76d7\u963f\u798f \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u963f\u798f\u662f\u4e00\u540d\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5927\u76d7\u3002\u8d81\u7740\u6708\u9ed1\u98ce\u9ad8\uff0c\u963f\u798f\u6253\u7b97\u4eca\u665a\u6d17\u52ab\u4e00\u6761\u8857\u4e0a\u7684\u5e97\u94fa\u3002 \u8fd9\u6761\u8857\u4e0a\u4e00\u5171\u6709 N \u5bb6\u5e97\u94fa\uff0c\u6bcf\u5bb6\u5e97\u4e2d\u90fd\u6709\u4e00\u4e9b\u73b0\u91d1\u3002 \u963f\u798f\u4e8b\u5148\u8c03\u67e5\u5f97\u77e5\uff0c\u53ea\u6709\u5f53\u4ed6\u540c\u65f6\u6d17\u52ab\u4e86\u4e24\u5bb6\u76f8\u90bb\u7684\u5e97\u94fa\u65f6\uff0c\u8857\u4e0a\u7684\u62a5\u8b66\u7cfb\u7edf\u624d\u4f1a\u542f\u52a8\uff0c\u7136\u540e\u8b66\u5bdf\u5c31\u4f1a\u8702\u62e5\u800c\u81f3\u3002 \u4f5c\u4e3a\u4e00\u5411\u8c28\u614e\u4f5c\u6848\u7684\u5927\u76d7\uff0c\u963f\u798f\u4e0d\u613f\u610f\u5192\u7740\u88ab\u8b66\u5bdf\u8ffd\u6355\u7684\u98ce\u9669\u884c\u7a83\u3002 \u4ed6\u60f3\u77e5\u9053\uff0c\u5728\u4e0d\u60ca\u52a8\u8b66\u5bdf\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eca\u665a\u6700\u591a\u53ef\u4ee5\u5f97\u5230\u591a\u5c11\u73b0\u91d1\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 T\uff0c\u8868\u793a\u4e00\u5171\u6709 T \u7ec4\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u7684\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 N \uff0c\u8868\u793a\u4e00\u5171\u6709 N \u5bb6\u5e97\u94fa\u3002 \u7b2c\u4e8c\u884c\u662f N \u4e2a\u88ab\u7a7a\u683c\u5206\u5f00\u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u5bb6\u5e97\u94fa\u4e2d\u7684\u73b0\u91d1\u6570\u91cf\u3002 \u6bcf\u5bb6\u5e97\u94fa\u4e2d\u7684\u73b0\u91d1\u6570\u91cf\u5747\u4e0d\u8d85\u8fc71000\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u3002 \u8be5\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u963f\u798f\u5728\u4e0d\u60ca\u52a8\u8b66\u5bdf\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5f97\u5230\u7684\u73b0\u91d1\u6570\u91cf\u3002 \u6570\u636e\u8303\u56f4 1\u2264T\u226450, 1\u2264T\u226450, 1\u2264N\u226410^5 1\u2264N\u226410^5 \u8f93\u5165\u6837\u4f8b 2 3 1 8 2 4 10 7 6 14 \u8f93\u51fa\u6837\u4f8b 8 24 \u9898\u89e3 \u00b6 \u8003\u8651\u5982\u4f55\u8868\u793a\u5f53\u524d\u7684\u72b6\u6001\uff0c\u5047\u8bbe\u5f53\u524d\u5230\u7b2ci\u5bb6\u5e97\u94fa\uff0c\u6211\u4eec\u6709\u5077\u548c\u4e0d\u5077\u4e24\u79cd\u72b6\u6001\uff0c f[i,1] f[i,1] \u8868\u793a\u5077\uff0c f[i,0] f[i,0] \u8868\u793a\u4e0d\u5077\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i,0]=max(f[i-1,0],f[i-1,1]) f[i,0]=max(f[i-1,0],f[i-1,1]) ,\u5f53\u524d\u4e0d\u5077\u5219\u4e0a\u4e00\u5bb6\u53ef\u5077\u53ef\u4e0d\u5077 f[i,1]=f[i-1,0]+w[i] f[i,1]=f[i-1,0]+w[i] ,\u5f53\u524d\u5077\u5219\u4e0a\u4e00\u5bb6\u4e0d\u5077 \u6700\u540e\u7ed3\u679c\u4e3a\u7b2cn\u5bb6\u5077\u6216\u4e0d\u5077\u53d6\u6700\u5927 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int dp [ N ][ 2 ]; int a [ N ]; signed main () { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]; dp [ i ][ 0 ] = max ( dp [ i - 1 ][ 0 ], dp [ i - 1 ][ 1 ]); dp [ i ][ 1 ] = dp [ i - 1 ][ 0 ] + a [ i ]; } cout << max ( dp [ n ][ 0 ], dp [ n ][ 1 ]) << '\\n' ; } return 0 ; } \u4f8b2.\u80a1\u7968\u4e70\u5356 IV \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u7b2c i \u4e2a\u6570\u5b57\u8868\u793a\u4e00\u4e2a\u7ed9\u5b9a\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 k \u7b14\u4ea4\u6613\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002\u4e00\u6b21\u4e70\u5165\u5356\u51fa\u5408\u4e3a\u4e00\u7b14\u4ea4\u6613\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N \u548c k\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\u4ee5\u53ca\u4f60\u53ef\u4ee5\u5b8c\u6210\u7684\u6700\u5927\u4ea4\u6613\u7b14\u6570\u3002 \u7b2c\u4e8c\u884c\u5305\u542b N \u4e2a\u4e0d\u8d85\u8fc7 10000 \u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u5b8c\u6574\u7684\u6570\u7ec4\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u5229\u6da6\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226410^5, 1\u2264N\u226410^5, 1\u2264k\u2264100 1\u2264k\u2264100 \u8f93\u5165\u6837\u4f8b 6 2 3 2 6 5 0 3 \u8f93\u51fa\u6837\u4f8b 7 \u9898\u89e3 \u00b6 \u8003\u8651\u72b6\u6001\u5982\u4f55\u8868\u793a\uff0c\u5bf9\u4e8e\u7b2ci\u5929\uff0c\u6709\u6301\u4ed3\u548c\u7a7a\u4ed3\u4e24\u79cd\u72b6\u6001\uff0c\u663e\u7136\u8fd9\u91cc\u9700\u8981\u4e24\u7ef4\uff0c\u4f46\u4ea4\u6613\u6b21\u6570\u663e\u7136\u9700\u8981\u4e00\u7ef4\uff0c\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49 f[i,j,k] f[i,j,k] \u4e3a\uff1a\u7b2ci\u5929\u5df2\u7ecf\u5b8c\u6210j\u7b14\u4ea4\u6613\u5e76\u4e14\u7b2ci\u5929\u521d\u59cb\u72b6\u6001\u4e3ak\u6240\u5f97\u7684\u6700\u5927\u5229\u6da6\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i,j,0]=max(f[i-1,j,0],f[i-1,j-1,1]+w[i]) f[i,j,0]=max(f[i-1,j,0],f[i-1,j-1,1]+w[i]) f[i,j,1]=max(f[i-1,j,1],f[i-1,j,0]-w[i]) f[i,j,1]=max(f[i-1,j,1],f[i-1,j,0]-w[i]) \u6ce8\u610f\u5f53j\u4e3a0\u65f6\u7279\u5224 f[i,j,0] f[i,j,0] \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> // #define int long long using namespace std ; const int N = 1e5 + 5 , M = 105 ; int dp [ N ][ M ][ 2 ]; int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int n , k ; cin >> n >> k ; memset ( dp , -0x3f , sizeof ( dp )); dp [ 0 ][ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int a ; cin >> a ; for ( int j = 0 ; j <= k ; j ++ ) { dp [ i ][ j ][ 1 ] = max ( dp [ i - 1 ][ j ][ 0 ] - a , dp [ i - 1 ][ j ][ 1 ]); if ( j ) dp [ i ][ j ][ 0 ] = max ( dp [ i - 1 ][ j - 1 ][ 1 ] + a , dp [ i - 1 ][ j ][ 0 ]); else dp [ i ][ j ][ 0 ] = dp [ i - 1 ][ j ][ 0 ]; } } int res = 0 ; for ( int i = 0 ; i <= k ; i ++ ) res = max ( res , dp [ n ][ i ][ 0 ]); cout << res ; return 0 ; } \u4f8b3.\u80a1\u7968\u4e70\u5356 V \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u7b2c i \u4e2a\u6570\u5b57\u8868\u793a\u4e00\u4e2a\u7ed9\u5b9a\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09: \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N\uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u5305\u542b N \u4e2a\u4e0d\u8d85\u8fc7 10000 \u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u5b8c\u6574\u7684\u6570\u7ec4\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u5229\u6da6\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264105 1\u2264N\u2264105 \u8f93\u5165\u6837\u4f8b 5 1 2 3 0 2 \u8f93\u51fa\u6837\u4f8b 3 \u9898\u89e3 \u00b6 \u6bd4\u4e0a\u9898\u65b0\u589e\u52a0\u4e86\u51b7\u51bb\u671f\u7684\u6761\u4ef6\uff0c\u56e0\u6b64\u72b6\u6001\u4e5f\u8981\u76f8\u5e94\u5730\u589e\u52a0\uff0c\u6211\u4eec\u4ee4 f[i,0] f[i,0] \u8868\u793a\u7b2ci\u5929\u7a7a\u4ed3\u4e14\u5904\u4e8e\u51b7\u51bb\u671f\uff0c f[i,1] f[i,1] \u8868\u793a\u7b2ci\u5929\u7a7a\u4ed3\u4e0d\u5904\u4e8e\u51b7\u51bb\u671f\uff0c f[i,2] f[i,2] \u8868\u793a\u7b2ci\u5929\u6301\u4ed3\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i,0]=f[i-1,2] + w[i] f[i,0]=f[i-1,2] + w[i] f[i,1]=max(f[i-1,0], f[i-1,1]) f[i,1]=max(f[i-1,0], f[i-1,1]) f[i,2]=max(f[i-1,2],f[i-1][1]-w[i] f[i,2]=max(f[i-1,2],f[i-1][1]-w[i] \u4ee3\u7801 \u00b6 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int N = 100010 , INF = 0x3f3f3f3f ; int n ; int w [ N ]; int f [ N ][ 3 ]; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & w [ i ]); f [ 0 ][ 0 ] = f [ 0 ][ 2 ] = - INF , f [ 0 ][ 1 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ 0 ] = f [ i - 1 ][ 2 ] + w [ i ]; f [ i ][ 1 ] = max ( f [ i - 1 ][ 0 ], f [ i - 1 ][ 1 ]); f [ i ][ 2 ] = max ( f [ i - 1 ][ 2 ], f [ i - 1 ][ 1 ] - w [ i ]); } printf ( \"%d \\n \" , max ( f [ n ][ 0 ], f [ n ][ 1 ])); return 0 ; } \u4f8b4.\u8bbe\u8ba1\u5bc6\u7801 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u4f60\u73b0\u5728\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u5bc6\u7801 S\uff0cS \u9700\u8981\u6ee1\u8db3\uff1a S \u7684\u957f\u5ea6\u662f N\uff1b S \u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff1b S \u4e0d\u5305\u542b\u5b50\u4e32 T\uff1b \u4f8b\u5982\uff1aabc \u548c abcde \u662f abcde \u7684\u5b50\u4e32\uff0cabd \u4e0d\u662f abcde \u7684\u5b50\u4e32\u3002 \u8bf7\u95ee\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5bc6\u7801\u6ee1\u8db3\u8981\u6c42\uff1f \u7531\u4e8e\u7b54\u6848\u4f1a\u975e\u5e38\u5927\uff0c\u8bf7\u8f93\u51fa\u7b54\u6848\u6a21 109+7 \u7684\u4f59\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570N\uff0c\u8868\u793a\u5bc6\u7801\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u5b57\u7b26\u4e32T\uff0cT\u4e2d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u603b\u65b9\u6848\u6570\u6a21 109+7 \u540e\u7684\u7ed3\u679c\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226450, 1\u2264N\u226450, 1\u2264|T|\u2264N 1\u2264|T|\u2264N \uff0c|T|\u662fT\u7684\u957f\u5ea6\u3002 \u8f93\u5165\u6837\u4f8b 4 cbc \u8f93\u51fa\u6837\u4f8b 456924 \u9898\u89e3 \u00b6 \u5bf9\u4e8e\u5355\u6bcd\u4e32\u548c\u5355\u6a21\u5f0f\u4e32\u5339\u914d\uff0c\u5f88\u5bb9\u6613\u8054\u60f3\u5230KMP\uff0c\u5bf9\u4e8e\u672c\u9898\uff0c\u6bcd\u4e32\u4e2d\u4e0d\u542b\u6a21\u5f0f\u4e32\u5176\u5b9e\u5c31\u662fj\u8d70\u4e0d\u5230\u6a21\u5f0f\u4e32\u7684\u7ec8\u70b9\uff0c\u6839\u636eKMP\u7b97\u6cd5\u7684\u7279\u70b9\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21j\u7684\u79fb\u52a8\u90fd\u662f\u4e0e\u6bcd\u4e32\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u4e00\u4e00\u5bf9\u5e94\uff0c\u56e0\u6b64\u82e5\u679a\u4e3e\u6bcd\u4e32\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5b57\u6bcd\u503c\uff0c\u5219j\u670926\u79cd\u8df3\u8dc3\u65b9\u6cd5\u3002\u6839\u636e\u56fe\u8bba\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u6700\u7ec8\u5efa\u51fa\u7684\u56fe\u5e94\u8be5\u662f\u6709m\u4e2a\u9876\u70b9\uff0c\u6bcf\u4e2a\u70b9\u670926\u6761\u8fde\u5411\u5176\u4ed6\u70b9\u7684\u8fb9\u6784\u6210\u7684\u56fe\uff0c\u6700\u7ec8\u7b54\u6848\u4e3aj\u672a\u8df3\u5230\u6a21\u5f0f\u4e32\u672b\u5c3e\u7684\u65b9\u6848\u6570\u4e4b\u548c \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 55 , mod = 1e9 + 7 ; int f [ N ][ N ]; int ne [ N ]; string s ; int main () { int n ; cin >> n >> s ; int len = s . size (); s = \" \" + s ; for ( int i = 2 , j = 0 ; i <= len ; i ++ ) { while ( j && s [ j + 1 ] != s [ i ]) j = ne [ j ]; if ( s [ j + 1 ] == s [ i ]) j ++ ; ne [ i ] = j ; } // \u6c42next\u6570\u7ec4 f [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { for ( char k = 'a' ; k <= 'z' ; k ++ ) { int u = j ; while ( u && s [ u + 1 ] != k ) u = ne [ u ]; if ( s [ u + 1 ] == k ) u ++ ; if ( u < len ) f [ i ][ u ] = ( f [ i ][ u ] + f [ i - 1 ][ j ]) % mod ; // j\u672a\u8df3\u5230\u7ec8\u70b9\u5219\u72b6\u6001\u8f6c\u79fb } } } int res = 0 ; for ( int i = 0 ; i < len ; i ++ ) { res += f [ n ][ i ]; res %= mod ; } cout << res ; return 0 ; }","title":"\u72b6\u6001\u673aDP"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_1","text":"\u72b6\u6001\u673a\u6a21\u578b\u5305\u542b\u591a\u4e2a\u5f85\u9009\u72b6\u6001\uff0c\u4e0d\u540c\u7684\u72b6\u6001\u4e4b\u95f4\u6709\u76f8\u4e92\u8f6c\u5316\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u8fd9\u4e9b\u8f6c\u5316\u7684\u624b\u6bb5\uff0c\u8fbe\u6210\u72b6\u6001\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u79fb\uff0c\u4e00\u822c\u9700\u8981\u5229\u7528\u56fe\u8bba\u7684\u77e5\u8bc6\u8fdb\u884c\u8f6c\u5316","title":"\u6982\u8ff0"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u963f\u798f\u662f\u4e00\u540d\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5927\u76d7\u3002\u8d81\u7740\u6708\u9ed1\u98ce\u9ad8\uff0c\u963f\u798f\u6253\u7b97\u4eca\u665a\u6d17\u52ab\u4e00\u6761\u8857\u4e0a\u7684\u5e97\u94fa\u3002 \u8fd9\u6761\u8857\u4e0a\u4e00\u5171\u6709 N \u5bb6\u5e97\u94fa\uff0c\u6bcf\u5bb6\u5e97\u4e2d\u90fd\u6709\u4e00\u4e9b\u73b0\u91d1\u3002 \u963f\u798f\u4e8b\u5148\u8c03\u67e5\u5f97\u77e5\uff0c\u53ea\u6709\u5f53\u4ed6\u540c\u65f6\u6d17\u52ab\u4e86\u4e24\u5bb6\u76f8\u90bb\u7684\u5e97\u94fa\u65f6\uff0c\u8857\u4e0a\u7684\u62a5\u8b66\u7cfb\u7edf\u624d\u4f1a\u542f\u52a8\uff0c\u7136\u540e\u8b66\u5bdf\u5c31\u4f1a\u8702\u62e5\u800c\u81f3\u3002 \u4f5c\u4e3a\u4e00\u5411\u8c28\u614e\u4f5c\u6848\u7684\u5927\u76d7\uff0c\u963f\u798f\u4e0d\u613f\u610f\u5192\u7740\u88ab\u8b66\u5bdf\u8ffd\u6355\u7684\u98ce\u9669\u884c\u7a83\u3002 \u4ed6\u60f3\u77e5\u9053\uff0c\u5728\u4e0d\u60ca\u52a8\u8b66\u5bdf\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eca\u665a\u6700\u591a\u53ef\u4ee5\u5f97\u5230\u591a\u5c11\u73b0\u91d1\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 T\uff0c\u8868\u793a\u4e00\u5171\u6709 T \u7ec4\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u7684\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 N \uff0c\u8868\u793a\u4e00\u5171\u6709 N \u5bb6\u5e97\u94fa\u3002 \u7b2c\u4e8c\u884c\u662f N \u4e2a\u88ab\u7a7a\u683c\u5206\u5f00\u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u5bb6\u5e97\u94fa\u4e2d\u7684\u73b0\u91d1\u6570\u91cf\u3002 \u6bcf\u5bb6\u5e97\u94fa\u4e2d\u7684\u73b0\u91d1\u6570\u91cf\u5747\u4e0d\u8d85\u8fc71000\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u3002 \u8be5\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u963f\u798f\u5728\u4e0d\u60ca\u52a8\u8b66\u5bdf\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5f97\u5230\u7684\u73b0\u91d1\u6570\u91cf\u3002 \u6570\u636e\u8303\u56f4 1\u2264T\u226450, 1\u2264T\u226450, 1\u2264N\u226410^5 1\u2264N\u226410^5 \u8f93\u5165\u6837\u4f8b 2 3 1 8 2 4 10 7 6 14 \u8f93\u51fa\u6837\u4f8b 8 24","title":"\u4f8b1.\u5927\u76d7\u963f\u798f"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_2","text":"\u8003\u8651\u5982\u4f55\u8868\u793a\u5f53\u524d\u7684\u72b6\u6001\uff0c\u5047\u8bbe\u5f53\u524d\u5230\u7b2ci\u5bb6\u5e97\u94fa\uff0c\u6211\u4eec\u6709\u5077\u548c\u4e0d\u5077\u4e24\u79cd\u72b6\u6001\uff0c f[i,1] f[i,1] \u8868\u793a\u5077\uff0c f[i,0] f[i,0] \u8868\u793a\u4e0d\u5077\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i,0]=max(f[i-1,0],f[i-1,1]) f[i,0]=max(f[i-1,0],f[i-1,1]) ,\u5f53\u524d\u4e0d\u5077\u5219\u4e0a\u4e00\u5bb6\u53ef\u5077\u53ef\u4e0d\u5077 f[i,1]=f[i-1,0]+w[i] f[i,1]=f[i-1,0]+w[i] ,\u5f53\u524d\u5077\u5219\u4e0a\u4e00\u5bb6\u4e0d\u5077 \u6700\u540e\u7ed3\u679c\u4e3a\u7b2cn\u5bb6\u5077\u6216\u4e0d\u5077\u53d6\u6700\u5927","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_3","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int dp [ N ][ 2 ]; int a [ N ]; signed main () { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]; dp [ i ][ 0 ] = max ( dp [ i - 1 ][ 0 ], dp [ i - 1 ][ 1 ]); dp [ i ][ 1 ] = dp [ i - 1 ][ 0 ] + a [ i ]; } cout << max ( dp [ n ][ 0 ], dp [ n ][ 1 ]) << '\\n' ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#2-iv","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u7b2c i \u4e2a\u6570\u5b57\u8868\u793a\u4e00\u4e2a\u7ed9\u5b9a\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 k \u7b14\u4ea4\u6613\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002\u4e00\u6b21\u4e70\u5165\u5356\u51fa\u5408\u4e3a\u4e00\u7b14\u4ea4\u6613\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N \u548c k\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\u4ee5\u53ca\u4f60\u53ef\u4ee5\u5b8c\u6210\u7684\u6700\u5927\u4ea4\u6613\u7b14\u6570\u3002 \u7b2c\u4e8c\u884c\u5305\u542b N \u4e2a\u4e0d\u8d85\u8fc7 10000 \u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u5b8c\u6574\u7684\u6570\u7ec4\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u5229\u6da6\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226410^5, 1\u2264N\u226410^5, 1\u2264k\u2264100 1\u2264k\u2264100 \u8f93\u5165\u6837\u4f8b 6 2 3 2 6 5 0 3 \u8f93\u51fa\u6837\u4f8b 7","title":"\u4f8b2.\u80a1\u7968\u4e70\u5356 IV"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_4","text":"\u8003\u8651\u72b6\u6001\u5982\u4f55\u8868\u793a\uff0c\u5bf9\u4e8e\u7b2ci\u5929\uff0c\u6709\u6301\u4ed3\u548c\u7a7a\u4ed3\u4e24\u79cd\u72b6\u6001\uff0c\u663e\u7136\u8fd9\u91cc\u9700\u8981\u4e24\u7ef4\uff0c\u4f46\u4ea4\u6613\u6b21\u6570\u663e\u7136\u9700\u8981\u4e00\u7ef4\uff0c\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49 f[i,j,k] f[i,j,k] \u4e3a\uff1a\u7b2ci\u5929\u5df2\u7ecf\u5b8c\u6210j\u7b14\u4ea4\u6613\u5e76\u4e14\u7b2ci\u5929\u521d\u59cb\u72b6\u6001\u4e3ak\u6240\u5f97\u7684\u6700\u5927\u5229\u6da6\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i,j,0]=max(f[i-1,j,0],f[i-1,j-1,1]+w[i]) f[i,j,0]=max(f[i-1,j,0],f[i-1,j-1,1]+w[i]) f[i,j,1]=max(f[i-1,j,1],f[i-1,j,0]-w[i]) f[i,j,1]=max(f[i-1,j,1],f[i-1,j,0]-w[i]) \u6ce8\u610f\u5f53j\u4e3a0\u65f6\u7279\u5224 f[i,j,0] f[i,j,0]","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_5","text":"#include <bits/stdc++.h> // #define int long long using namespace std ; const int N = 1e5 + 5 , M = 105 ; int dp [ N ][ M ][ 2 ]; int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int n , k ; cin >> n >> k ; memset ( dp , -0x3f , sizeof ( dp )); dp [ 0 ][ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int a ; cin >> a ; for ( int j = 0 ; j <= k ; j ++ ) { dp [ i ][ j ][ 1 ] = max ( dp [ i - 1 ][ j ][ 0 ] - a , dp [ i - 1 ][ j ][ 1 ]); if ( j ) dp [ i ][ j ][ 0 ] = max ( dp [ i - 1 ][ j - 1 ][ 1 ] + a , dp [ i - 1 ][ j ][ 0 ]); else dp [ i ][ j ][ 0 ] = dp [ i - 1 ][ j ][ 0 ]; } } int res = 0 ; for ( int i = 0 ; i <= k ; i ++ ) res = max ( res , dp [ n ][ i ][ 0 ]); cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#3-v","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u7b2c i \u4e2a\u6570\u5b57\u8868\u793a\u4e00\u4e2a\u7ed9\u5b9a\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09: \u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 N\uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u5305\u542b N \u4e2a\u4e0d\u8d85\u8fc7 10000 \u7684\u6b63\u6574\u6570\uff0c\u8868\u793a\u5b8c\u6574\u7684\u6570\u7ec4\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u5229\u6da6\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u2264105 1\u2264N\u2264105 \u8f93\u5165\u6837\u4f8b 5 1 2 3 0 2 \u8f93\u51fa\u6837\u4f8b 3","title":"\u4f8b3.\u80a1\u7968\u4e70\u5356 V"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_6","text":"\u6bd4\u4e0a\u9898\u65b0\u589e\u52a0\u4e86\u51b7\u51bb\u671f\u7684\u6761\u4ef6\uff0c\u56e0\u6b64\u72b6\u6001\u4e5f\u8981\u76f8\u5e94\u5730\u589e\u52a0\uff0c\u6211\u4eec\u4ee4 f[i,0] f[i,0] \u8868\u793a\u7b2ci\u5929\u7a7a\u4ed3\u4e14\u5904\u4e8e\u51b7\u51bb\u671f\uff0c f[i,1] f[i,1] \u8868\u793a\u7b2ci\u5929\u7a7a\u4ed3\u4e0d\u5904\u4e8e\u51b7\u51bb\u671f\uff0c f[i,2] f[i,2] \u8868\u793a\u7b2ci\u5929\u6301\u4ed3\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i,0]=f[i-1,2] + w[i] f[i,0]=f[i-1,2] + w[i] f[i,1]=max(f[i-1,0], f[i-1,1]) f[i,1]=max(f[i-1,0], f[i-1,1]) f[i,2]=max(f[i-1,2],f[i-1][1]-w[i] f[i,2]=max(f[i-1,2],f[i-1][1]-w[i]","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_7","text":"#include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int N = 100010 , INF = 0x3f3f3f3f ; int n ; int w [ N ]; int f [ N ][ 3 ]; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & w [ i ]); f [ 0 ][ 0 ] = f [ 0 ][ 2 ] = - INF , f [ 0 ][ 1 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ 0 ] = f [ i - 1 ][ 2 ] + w [ i ]; f [ i ][ 1 ] = max ( f [ i - 1 ][ 0 ], f [ i - 1 ][ 1 ]); f [ i ][ 2 ] = max ( f [ i - 1 ][ 2 ], f [ i - 1 ][ 1 ] - w [ i ]); } printf ( \"%d \\n \" , max ( f [ n ][ 0 ], f [ n ][ 1 ])); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u4f60\u73b0\u5728\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u5bc6\u7801 S\uff0cS \u9700\u8981\u6ee1\u8db3\uff1a S \u7684\u957f\u5ea6\u662f N\uff1b S \u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff1b S \u4e0d\u5305\u542b\u5b50\u4e32 T\uff1b \u4f8b\u5982\uff1aabc \u548c abcde \u662f abcde \u7684\u5b50\u4e32\uff0cabd \u4e0d\u662f abcde \u7684\u5b50\u4e32\u3002 \u8bf7\u95ee\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5bc6\u7801\u6ee1\u8db3\u8981\u6c42\uff1f \u7531\u4e8e\u7b54\u6848\u4f1a\u975e\u5e38\u5927\uff0c\u8bf7\u8f93\u51fa\u7b54\u6848\u6a21 109+7 \u7684\u4f59\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570N\uff0c\u8868\u793a\u5bc6\u7801\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u5b57\u7b26\u4e32T\uff0cT\u4e2d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u603b\u65b9\u6848\u6570\u6a21 109+7 \u540e\u7684\u7ed3\u679c\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226450, 1\u2264N\u226450, 1\u2264|T|\u2264N 1\u2264|T|\u2264N \uff0c|T|\u662fT\u7684\u957f\u5ea6\u3002 \u8f93\u5165\u6837\u4f8b 4 cbc \u8f93\u51fa\u6837\u4f8b 456924","title":"\u4f8b4.\u8bbe\u8ba1\u5bc6\u7801"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_8","text":"\u5bf9\u4e8e\u5355\u6bcd\u4e32\u548c\u5355\u6a21\u5f0f\u4e32\u5339\u914d\uff0c\u5f88\u5bb9\u6613\u8054\u60f3\u5230KMP\uff0c\u5bf9\u4e8e\u672c\u9898\uff0c\u6bcd\u4e32\u4e2d\u4e0d\u542b\u6a21\u5f0f\u4e32\u5176\u5b9e\u5c31\u662fj\u8d70\u4e0d\u5230\u6a21\u5f0f\u4e32\u7684\u7ec8\u70b9\uff0c\u6839\u636eKMP\u7b97\u6cd5\u7684\u7279\u70b9\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21j\u7684\u79fb\u52a8\u90fd\u662f\u4e0e\u6bcd\u4e32\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u4e00\u4e00\u5bf9\u5e94\uff0c\u56e0\u6b64\u82e5\u679a\u4e3e\u6bcd\u4e32\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5b57\u6bcd\u503c\uff0c\u5219j\u670926\u79cd\u8df3\u8dc3\u65b9\u6cd5\u3002\u6839\u636e\u56fe\u8bba\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u6700\u7ec8\u5efa\u51fa\u7684\u56fe\u5e94\u8be5\u662f\u6709m\u4e2a\u9876\u70b9\uff0c\u6bcf\u4e2a\u70b9\u670926\u6761\u8fde\u5411\u5176\u4ed6\u70b9\u7684\u8fb9\u6784\u6210\u7684\u56fe\uff0c\u6700\u7ec8\u7b54\u6848\u4e3aj\u672a\u8df3\u5230\u6a21\u5f0f\u4e32\u672b\u5c3e\u7684\u65b9\u6848\u6570\u4e4b\u548c","title":"\u9898\u89e3"},{"location":"ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E6%9C%BADP/#_9","text":"#include <bits/stdc++.h> using namespace std ; const int N = 55 , mod = 1e9 + 7 ; int f [ N ][ N ]; int ne [ N ]; string s ; int main () { int n ; cin >> n >> s ; int len = s . size (); s = \" \" + s ; for ( int i = 2 , j = 0 ; i <= len ; i ++ ) { while ( j && s [ j + 1 ] != s [ i ]) j = ne [ j ]; if ( s [ j + 1 ] == s [ i ]) j ++ ; ne [ i ] = j ; } // \u6c42next\u6570\u7ec4 f [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { for ( char k = 'a' ; k <= 'z' ; k ++ ) { int u = j ; while ( u && s [ u + 1 ] != k ) u = ne [ u ]; if ( s [ u + 1 ] == k ) u ++ ; if ( u < len ) f [ i ][ u ] = ( f [ i ][ u ] + f [ i - 1 ][ j ]) % mod ; // j\u672a\u8df3\u5230\u7ec8\u70b9\u5219\u72b6\u6001\u8f6c\u79fb } } } int res = 0 ; for ( int i = 0 ; i < len ; i ++ ) { res += f [ n ][ i ]; res %= mod ; } cout << res ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Bellman-Ford%E7%AE%97%E6%B3%95/","text":"\u6982\u8ff0 \u00b6 Dilijkstra\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u4f46\u662f\u5b83\u4e0d\u80fd\u89e3\u51b3\u5e26\u6709\u8d1f\u6743\u8fb9\uff08\u8fb9\u7684\u6743\u503c\u4e3a\u8d1f\u6570\uff09\u7684\u56fe\uff0c\u539f\u56e0\u89c1\ud83d\udc49 Korpse\u7684\u535a\u5ba2 \u800cBellman-Ford\u7b97\u6cd5\u89e3\u51b3\u4e86\u8d1f\u73af\u8fd9\u4e2a\u95ee\u9898\uff0c\u540c\u65f6Bellman-Ford\u7b97\u6cd5\u64c5\u957f\u89e3\u51b3\u6709\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def\u95ee\u9898 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u521d\u59cb\u5316\u6240\u6709d[s],\u6e90\u70b9d[s]=0,\u5176\u4ed6d[s]=INF \u8fdb\u884cn-1\u6b21\u5faa\u73af\uff0c\u5728\u5faa\u73af\u4f53\u4e2d\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u8fdb\u884c\u677e\u5f1b\u8ba1\u7b97\uff08if(d[v]>d[u]+w[u][v]) d[v]=d[u]+w[u][v]\uff09 \u904d\u5386\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u68c0\u9a8c\u662f\u5426\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1ad[v]>d[u]+w[u][v],\u82e5\u51fa\u73b0\u5219\u8fd4\u56defalse,\u6ca1\u6709\u6700\u77ed\u8def \u7ecf\u5178\u95ee\u9898 \u00b6 \u6709\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u8bf7\u4f60\u6c42\u51fa\u4ece 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u591a\u7ecf\u8fc7 k \u6761\u8fb9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u8f93\u51fa impossible \u3002 \u6ce8\u610f\uff1a\u56fe\u4e2d\u53ef\u80fd \u5b58\u5728\u8d1f\u6743\u56de\u8def \u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n,m,k\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u70b9\u7684\u7f16\u53f7\u4e3a 1\u223cn\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u591a\u7ecf\u8fc7 k \u6761\u8fb9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u8303\u56f4 1\u2264n,k\u2264500, 1\u2264n,k\u2264500, 1\u2264m\u226410000, 1\u2264m\u226410000, 1\u2264x,y\u2264n\uff0c 1\u2264x,y\u2264n\uff0c \u4efb\u610f\u8fb9\u957f\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 1 2 1 2 3 1 1 3 3 \u8f93\u51fa\u6837\u4f8b 3 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 ; struct node_ { int from , to , dis ; } node [ N ]; int dis [ N ], last [ N ]; int n , m , k ; void bm_ford ( int s , int t ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { memcpy ( last , dis , sizeof ( dis )); for ( int j = 1 ; j <= m ; j ++ ) { int a = node [ j ]. from ; int b = node [ j ]. to ; int c = node [ j ]. dis ; dis [ b ] = min ( dis [ b ], last [ a ] + c ); } } if ( dis [ t ] > 0x3f3f3f3f / 2 ) cout << \"impossible\" << endl ; else cout << dis [ t ]; } int main () { cin >> n >> m >> k ; for ( int i = 1 ; i <= m ; i ++ ) cin >> node [ i ]. from >> node [ i ]. to >> node [ i ]. dis ; bm_ford ( 1 , n ); return 0 ; }","title":"Bellman-Ford\u7b97\u6cd5"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Bellman-Ford%E7%AE%97%E6%B3%95/#_1","text":"Dilijkstra\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u4f46\u662f\u5b83\u4e0d\u80fd\u89e3\u51b3\u5e26\u6709\u8d1f\u6743\u8fb9\uff08\u8fb9\u7684\u6743\u503c\u4e3a\u8d1f\u6570\uff09\u7684\u56fe\uff0c\u539f\u56e0\u89c1\ud83d\udc49 Korpse\u7684\u535a\u5ba2 \u800cBellman-Ford\u7b97\u6cd5\u89e3\u51b3\u4e86\u8d1f\u73af\u8fd9\u4e2a\u95ee\u9898\uff0c\u540c\u65f6Bellman-Ford\u7b97\u6cd5\u64c5\u957f\u89e3\u51b3\u6709\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def\u95ee\u9898","title":"\u6982\u8ff0"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Bellman-Ford%E7%AE%97%E6%B3%95/#_2","text":"\u521d\u59cb\u5316\u6240\u6709d[s],\u6e90\u70b9d[s]=0,\u5176\u4ed6d[s]=INF \u8fdb\u884cn-1\u6b21\u5faa\u73af\uff0c\u5728\u5faa\u73af\u4f53\u4e2d\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u8fdb\u884c\u677e\u5f1b\u8ba1\u7b97\uff08if(d[v]>d[u]+w[u][v]) d[v]=d[u]+w[u][v]\uff09 \u904d\u5386\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u68c0\u9a8c\u662f\u5426\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1ad[v]>d[u]+w[u][v],\u82e5\u51fa\u73b0\u5219\u8fd4\u56defalse,\u6ca1\u6709\u6700\u77ed\u8def","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Bellman-Ford%E7%AE%97%E6%B3%95/#_3","text":"","title":"\u7ecf\u5178\u95ee\u9898"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Bellman-Ford%E7%AE%97%E6%B3%95/#_4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u8bf7\u4f60\u6c42\u51fa\u4ece 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u591a\u7ecf\u8fc7 k \u6761\u8fb9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u8f93\u51fa impossible \u3002 \u6ce8\u610f\uff1a\u56fe\u4e2d\u53ef\u80fd \u5b58\u5728\u8d1f\u6743\u56de\u8def \u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n,m,k\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u70b9\u7684\u7f16\u53f7\u4e3a 1\u223cn\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u591a\u7ecf\u8fc7 k \u6761\u8fb9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u8303\u56f4 1\u2264n,k\u2264500, 1\u2264n,k\u2264500, 1\u2264m\u226410000, 1\u2264m\u226410000, 1\u2264x,y\u2264n\uff0c 1\u2264x,y\u2264n\uff0c \u4efb\u610f\u8fb9\u957f\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 1 2 1 2 3 1 1 3 3 \u8f93\u51fa\u6837\u4f8b 3","title":"\u6709\u8fb9\u6570\u9650\u5236\u7684\u6700\u77ed\u8def"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Bellman-Ford%E7%AE%97%E6%B3%95/#_5","text":"#include <bits/stdc++.h> using namespace std ; const int N = 1e4 + 5 ; struct node_ { int from , to , dis ; } node [ N ]; int dis [ N ], last [ N ]; int n , m , k ; void bm_ford ( int s , int t ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { memcpy ( last , dis , sizeof ( dis )); for ( int j = 1 ; j <= m ; j ++ ) { int a = node [ j ]. from ; int b = node [ j ]. to ; int c = node [ j ]. dis ; dis [ b ] = min ( dis [ b ], last [ a ] + c ); } } if ( dis [ t ] > 0x3f3f3f3f / 2 ) cout << \"impossible\" << endl ; else cout << dis [ t ]; } int main () { cin >> n >> m >> k ; for ( int i = 1 ; i <= m ; i ++ ) cin >> node [ i ]. from >> node [ i ]. to >> node [ i ]. dis ; bm_ford ( 1 , n ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/","text":"\u6982\u8ff0 \u00b6 \u672c\u7ae0\u8bb2\u89e3Dijkstra\u7b97\u6cd5 \u666e\u901a\u7248Dijkstra \u00b6 \u5f15\u7528\ud83d\udc49 skywang12345\u7684\u535a\u5ba2 \u8fea\u6770\u65af\u7279\u62c9(Dijkstra)\u7b97\u6cd5\u662f\u5178\u578b\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u7528\u4e8e\u8ba1\u7b97\u4e00\u4e2a\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u5b83\u7684\u4e3b\u8981\u7279\u70b9\u662f\u4ee5\u8d77\u59cb\u70b9\u4e3a\u4e2d\u5fc3\u5411\u5916\u5c42\u5c42\u6269\u5c55(\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u601d\u60f3)\uff0c\u76f4\u5230\u6269\u5c55\u5230\u7ec8\u70b9\u4e3a\u6b62\u3002 \u539f\u7406 \u00b6 \u901a\u8fc7Dijkstra\u8ba1\u7b97\u56feG\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u8d77\u70b9s(\u5373\u4ece\u9876\u70b9s\u5f00\u59cb\u8ba1\u7b97)\u3002 \u6b64\u5916\uff0c\u5f15\u8fdb\u4e24\u4e2a\u96c6\u5408S\u548cU\u3002S\u7684\u4f5c\u7528\u662f\u8bb0\u5f55\u5df2\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9(\u4ee5\u53ca\u76f8\u5e94\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6)\uff0c\u800cU\u5219\u662f\u8bb0\u5f55\u8fd8\u672a\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9(\u4ee5\u53ca\u8be5\u9876\u70b9\u5230\u8d77\u70b9s\u7684\u8ddd\u79bb)\u3002 \u521d\u59cb\u65f6\uff0cS\u4e2d\u53ea\u6709\u8d77\u70b9s\uff1bU\u4e2d\u662f\u9664s\u4e4b\u5916\u7684\u9876\u70b9\uff0c\u5e76\u4e14U\u4e2d\u9876\u70b9\u7684\u8def\u5f84\u662f\"\u8d77\u70b9s\u5230\u8be5\u9876\u70b9\u7684\u8def\u5f84\"\u3002\u7136\u540e\uff0c\u4eceU\u4e2d\u627e\u51fa\u8def\u5f84\u6700\u77ed\u7684\u9876\u70b9\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u5230S\u4e2d\uff1b\u63a5\u7740\uff0c\u66f4\u65b0U\u4e2d\u7684\u9876\u70b9\u548c\u9876\u70b9\u5bf9\u5e94\u7684\u8def\u5f84\u3002 \u7136\u540e\uff0c\u518d\u4eceU\u4e2d\u627e\u51fa\u8def\u5f84\u6700\u77ed\u7684\u9876\u70b9\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u5230S\u4e2d\uff1b\u63a5\u7740\uff0c\u66f4\u65b0U\u4e2d\u7684\u9876\u70b9\u548c\u9876\u70b9\u5bf9\u5e94\u7684\u8def\u5f84\u3002 ... \u91cd\u590d\u8be5\u64cd\u4f5c\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u9876\u70b9\u3002 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u521d\u59cb\u65f6\uff0cS\u53ea\u5305\u542b\u8d77\u70b9s\uff1bU\u5305\u542b\u9664s\u5916\u7684\u5176\u4ed6\u9876\u70b9\uff0c\u4e14U\u4e2d\u9876\u70b9\u7684\u8ddd\u79bb\u4e3a\"\u8d77\u70b9s\u5230\u8be5\u9876\u70b9\u7684\u8ddd\u79bb\"[\u4f8b\u5982\uff0cU\u4e2d\u9876\u70b9v\u7684\u8ddd\u79bb\u4e3a(s,v)\u7684\u957f\u5ea6\uff0c\u7136\u540es\u548cv\u4e0d\u76f8\u90bb\uff0c\u5219v\u7684\u8ddd\u79bb\u4e3a\u221e]\u3002 \u4eceU\u4e2d\u9009\u51fa\"\u8ddd\u79bb\u6700\u77ed\u7684\u9876\u70b9k\"\uff0c\u5e76\u5c06\u9876\u70b9k\u52a0\u5165\u5230S\u4e2d\uff1b\u540c\u65f6\uff0c\u4eceU\u4e2d\u79fb\u9664\u9876\u70b9k\u3002 \u66f4\u65b0U\u4e2d\u5404\u4e2a\u9876\u70b9\u5230\u8d77\u70b9s\u7684\u8ddd\u79bb\u3002\u4e4b\u6240\u4ee5\u66f4\u65b0U\u4e2d\u9876\u70b9\u7684\u8ddd\u79bb\uff0c\u662f\u7531\u4e8e\u4e0a\u4e00\u6b65\u4e2d\u786e\u5b9a\u4e86k\u662f\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\uff0c\u4ece\u800c\u53ef\u4ee5\u5229\u7528k\u6765\u66f4\u65b0\u5176\u5b83\u9876\u70b9\u7684\u8ddd\u79bb\uff1b\u4f8b\u5982\uff0c(s,v)\u7684\u8ddd\u79bb\u53ef\u80fd\u5927\u4e8e(s,k)+(k,v)\u7684\u8ddd\u79bb\u3002 \u91cd\u590d\u6b65\u9aa4(2)\u548c(3)\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u9876\u70b9\u3002 \u7ecf\u5178\u95ee\u9898 \u00b6 Dijkstra\u6c42\u6700\u77ed\u8def I \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u6240\u6709\u8fb9\u6743\u5747\u4e3a\u6b63\u503c\u3002 \u8bf7\u4f60\u6c42\u51fa 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264500, 1\u2264n\u2264500, 1\u2264m\u226410^5, 1\u2264m\u226410^5, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u5747\u4e0d\u8d85\u8fc710000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 2 2 3 1 1 3 4 \u8f93\u51fa\u6837\u4f8b 3 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 505 , M = 1e5 + 5 ; int head [ N ], e [ M ], w [ M ], ne [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n , m ; int dis [ N ]; bool vis [ N ]; void djs ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int pos = -1 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( ! vis [ j ] && ( pos == -1 || dis [ pos ] > dis [ j ])) pos = j ; } if ( dis [ pos ] == 0x3f3f3f3f ) { cout << \"-1\" << endl ; return ; } vis [ pos ] = true ; for ( int j = head [ pos ]; j != -1 ; j = ne [ j ]) { int t = e [ j ]; dis [ t ] = min ( dis [ t ], dis [ pos ] + w [ j ]); } } if ( dis [ n ] == 0x3f3f3f3f ) cout << \"-1\" << endl ; else cout << dis [ n ]; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } djs ( 1 ); return 0 ; } \u5806\u4f18\u5316\u7248Dijkstra \u00b6 \u539f\u7406 \u00b6 \u6ca1\u6709\u4f18\u5316\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u666e\u901a\u7248\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u4e3b\u8981\u7f3a\u9677\u662f\uff1a\u6bcf\u5f53\u627e\u5230\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\uff0c\u5982\u679c\u9700\u8981\u627e\u4e0b\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u9700\u8981\u5728\u5b8c\u6210\u677e\u5f1b\u64cd\u4f5c\u4e4b\u540e\uff0c\u904d\u5386dist\u6570\u7ec4\uff0c\u5bfb\u627e\u5176\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u904d\u5386dist\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u5982\u679c\u56fe\u7684\u8fb9\u6570\u4e3an*(n-1)\uff0c\u90a3\u4e48\u6bcf\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u8981\u8fdb\u884c\u7684\u677e\u5f1b\u64cd\u4f5c\u6570\u5c31\u662fn-1\uff0c\u8fd9\u548c\u904d\u5386dist\u6570\u7ec4\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\uff0c\u7b97\u6cd5\u4f18\u5316\u7684\u7a7a\u95f4\u4e0d\u5927\u3002 \u7136\u800c\uff0c\u5982\u679c\u662f\u7a00\u758f\u56fe\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u8981\u8fdb\u884c\u7684\u677e\u5f1b\u64cd\u4f5c\u6570\u5c31\u8fdc\u5c0f\u4e8en-1\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u5bf9\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316\u3002\u4f18\u5316\u7684\u5173\u952e\u662f\u7701\u53bb\u5bf9dist\u7684\u7ebf\u6027\u67e5\u627e\uff0c\u5982\u679c\u6bcf\u6b21\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56dedist\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5806\u4f18\u5316\u540e\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a O(ElogE) O(ElogE) \u7ecf\u5178\u95ee\u9898 \u00b6 Dijkstra\u6c42\u6700\u77ed\u8def II \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u6240\u6709\u8fb9\u6743\u5747\u4e3a\u975e\u8d1f\u503c\u3002 \u8bf7\u4f60\u6c42\u51fa 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u22641.5\u00d710^5, 1\u2264n,m\u22641.5\u00d710^5, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u5747\u4e0d\u5c0f\u4e8e 0\uff0c\u4e14\u4e0d\u8d85\u8fc7 10000\u3002 \u6570\u636e\u4fdd\u8bc1\uff1a\u5982\u679c\u6700\u77ed\u8def\u5b58\u5728\uff0c\u5219\u6700\u77ed\u8def\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 10^9 10^9 \u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 2 2 3 1 1 3 4 \u8f93\u51fa\u6837\u4f8b 3 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef pair < int , int > PII ; const int N = 1e6 + 5 ; int head [ N ], e [ N ], w [ N ], ne [ N ], idx ; int dis [ N ]; bool vis [ N ]; int n , m ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } void djs ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; priority_queue < PII , vector < PII > , greater < PII >> q ; q . push ({ 0 , s }); while ( q . size ()) { auto cur = q . top (); q . pop (); int pos = cur . second ; if ( vis [ pos ]) continue ; vis [ pos ] = true ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; q . push ({ dis [ j ], j }); } } } if ( dis [ n ] == 0x3f3f3f3f ) cout << \"-1\" ; else cout << dis [ n ]; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } djs ( 1 ); return 0 ; }","title":"Dijkstra\u7b97\u6cd5"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_1","text":"\u672c\u7ae0\u8bb2\u89e3Dijkstra\u7b97\u6cd5","title":"\u6982\u8ff0"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#dijkstra","text":"\u5f15\u7528\ud83d\udc49 skywang12345\u7684\u535a\u5ba2 \u8fea\u6770\u65af\u7279\u62c9(Dijkstra)\u7b97\u6cd5\u662f\u5178\u578b\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u7528\u4e8e\u8ba1\u7b97\u4e00\u4e2a\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u5b83\u7684\u4e3b\u8981\u7279\u70b9\u662f\u4ee5\u8d77\u59cb\u70b9\u4e3a\u4e2d\u5fc3\u5411\u5916\u5c42\u5c42\u6269\u5c55(\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u601d\u60f3)\uff0c\u76f4\u5230\u6269\u5c55\u5230\u7ec8\u70b9\u4e3a\u6b62\u3002","title":"\u666e\u901a\u7248Dijkstra"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_2","text":"\u901a\u8fc7Dijkstra\u8ba1\u7b97\u56feG\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u8d77\u70b9s(\u5373\u4ece\u9876\u70b9s\u5f00\u59cb\u8ba1\u7b97)\u3002 \u6b64\u5916\uff0c\u5f15\u8fdb\u4e24\u4e2a\u96c6\u5408S\u548cU\u3002S\u7684\u4f5c\u7528\u662f\u8bb0\u5f55\u5df2\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9(\u4ee5\u53ca\u76f8\u5e94\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6)\uff0c\u800cU\u5219\u662f\u8bb0\u5f55\u8fd8\u672a\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9(\u4ee5\u53ca\u8be5\u9876\u70b9\u5230\u8d77\u70b9s\u7684\u8ddd\u79bb)\u3002 \u521d\u59cb\u65f6\uff0cS\u4e2d\u53ea\u6709\u8d77\u70b9s\uff1bU\u4e2d\u662f\u9664s\u4e4b\u5916\u7684\u9876\u70b9\uff0c\u5e76\u4e14U\u4e2d\u9876\u70b9\u7684\u8def\u5f84\u662f\"\u8d77\u70b9s\u5230\u8be5\u9876\u70b9\u7684\u8def\u5f84\"\u3002\u7136\u540e\uff0c\u4eceU\u4e2d\u627e\u51fa\u8def\u5f84\u6700\u77ed\u7684\u9876\u70b9\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u5230S\u4e2d\uff1b\u63a5\u7740\uff0c\u66f4\u65b0U\u4e2d\u7684\u9876\u70b9\u548c\u9876\u70b9\u5bf9\u5e94\u7684\u8def\u5f84\u3002 \u7136\u540e\uff0c\u518d\u4eceU\u4e2d\u627e\u51fa\u8def\u5f84\u6700\u77ed\u7684\u9876\u70b9\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u5230S\u4e2d\uff1b\u63a5\u7740\uff0c\u66f4\u65b0U\u4e2d\u7684\u9876\u70b9\u548c\u9876\u70b9\u5bf9\u5e94\u7684\u8def\u5f84\u3002 ... \u91cd\u590d\u8be5\u64cd\u4f5c\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u9876\u70b9\u3002","title":"\u539f\u7406"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_3","text":"\u521d\u59cb\u65f6\uff0cS\u53ea\u5305\u542b\u8d77\u70b9s\uff1bU\u5305\u542b\u9664s\u5916\u7684\u5176\u4ed6\u9876\u70b9\uff0c\u4e14U\u4e2d\u9876\u70b9\u7684\u8ddd\u79bb\u4e3a\"\u8d77\u70b9s\u5230\u8be5\u9876\u70b9\u7684\u8ddd\u79bb\"[\u4f8b\u5982\uff0cU\u4e2d\u9876\u70b9v\u7684\u8ddd\u79bb\u4e3a(s,v)\u7684\u957f\u5ea6\uff0c\u7136\u540es\u548cv\u4e0d\u76f8\u90bb\uff0c\u5219v\u7684\u8ddd\u79bb\u4e3a\u221e]\u3002 \u4eceU\u4e2d\u9009\u51fa\"\u8ddd\u79bb\u6700\u77ed\u7684\u9876\u70b9k\"\uff0c\u5e76\u5c06\u9876\u70b9k\u52a0\u5165\u5230S\u4e2d\uff1b\u540c\u65f6\uff0c\u4eceU\u4e2d\u79fb\u9664\u9876\u70b9k\u3002 \u66f4\u65b0U\u4e2d\u5404\u4e2a\u9876\u70b9\u5230\u8d77\u70b9s\u7684\u8ddd\u79bb\u3002\u4e4b\u6240\u4ee5\u66f4\u65b0U\u4e2d\u9876\u70b9\u7684\u8ddd\u79bb\uff0c\u662f\u7531\u4e8e\u4e0a\u4e00\u6b65\u4e2d\u786e\u5b9a\u4e86k\u662f\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\uff0c\u4ece\u800c\u53ef\u4ee5\u5229\u7528k\u6765\u66f4\u65b0\u5176\u5b83\u9876\u70b9\u7684\u8ddd\u79bb\uff1b\u4f8b\u5982\uff0c(s,v)\u7684\u8ddd\u79bb\u53ef\u80fd\u5927\u4e8e(s,k)+(k,v)\u7684\u8ddd\u79bb\u3002 \u91cd\u590d\u6b65\u9aa4(2)\u548c(3)\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u9876\u70b9\u3002","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_4","text":"","title":"\u7ecf\u5178\u95ee\u9898"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#dijkstra-i","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u6240\u6709\u8fb9\u6743\u5747\u4e3a\u6b63\u503c\u3002 \u8bf7\u4f60\u6c42\u51fa 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264500, 1\u2264n\u2264500, 1\u2264m\u226410^5, 1\u2264m\u226410^5, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u5747\u4e0d\u8d85\u8fc710000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 2 2 3 1 1 3 4 \u8f93\u51fa\u6837\u4f8b 3","title":"Dijkstra\u6c42\u6700\u77ed\u8def I"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_5","text":"#include <bits/stdc++.h> using namespace std ; const int N = 505 , M = 1e5 + 5 ; int head [ N ], e [ M ], w [ M ], ne [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n , m ; int dis [ N ]; bool vis [ N ]; void djs ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int pos = -1 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( ! vis [ j ] && ( pos == -1 || dis [ pos ] > dis [ j ])) pos = j ; } if ( dis [ pos ] == 0x3f3f3f3f ) { cout << \"-1\" << endl ; return ; } vis [ pos ] = true ; for ( int j = head [ pos ]; j != -1 ; j = ne [ j ]) { int t = e [ j ]; dis [ t ] = min ( dis [ t ], dis [ pos ] + w [ j ]); } } if ( dis [ n ] == 0x3f3f3f3f ) cout << \"-1\" << endl ; else cout << dis [ n ]; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } djs ( 1 ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#dijkstra_1","text":"","title":"\u5806\u4f18\u5316\u7248Dijkstra"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_6","text":"\u6ca1\u6709\u4f18\u5316\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2) O(n^2) \u3002 \u666e\u901a\u7248\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u4e3b\u8981\u7f3a\u9677\u662f\uff1a\u6bcf\u5f53\u627e\u5230\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\uff0c\u5982\u679c\u9700\u8981\u627e\u4e0b\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u9700\u8981\u5728\u5b8c\u6210\u677e\u5f1b\u64cd\u4f5c\u4e4b\u540e\uff0c\u904d\u5386dist\u6570\u7ec4\uff0c\u5bfb\u627e\u5176\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u904d\u5386dist\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002 \u5982\u679c\u56fe\u7684\u8fb9\u6570\u4e3an*(n-1)\uff0c\u90a3\u4e48\u6bcf\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u8981\u8fdb\u884c\u7684\u677e\u5f1b\u64cd\u4f5c\u6570\u5c31\u662fn-1\uff0c\u8fd9\u548c\u904d\u5386dist\u6570\u7ec4\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\uff0c\u7b97\u6cd5\u4f18\u5316\u7684\u7a7a\u95f4\u4e0d\u5927\u3002 \u7136\u800c\uff0c\u5982\u679c\u662f\u7a00\u758f\u56fe\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u8981\u8fdb\u884c\u7684\u677e\u5f1b\u64cd\u4f5c\u6570\u5c31\u8fdc\u5c0f\u4e8en-1\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u5bf9\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316\u3002\u4f18\u5316\u7684\u5173\u952e\u662f\u7701\u53bb\u5bf9dist\u7684\u7ebf\u6027\u67e5\u627e\uff0c\u5982\u679c\u6bcf\u6b21\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56dedist\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5806\u4f18\u5316\u540e\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a O(ElogE) O(ElogE)","title":"\u539f\u7406"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_7","text":"","title":"\u7ecf\u5178\u95ee\u9898"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#dijkstra-ii","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u6240\u6709\u8fb9\u6743\u5747\u4e3a\u975e\u8d1f\u503c\u3002 \u8bf7\u4f60\u6c42\u51fa 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u22641.5\u00d710^5, 1\u2264n,m\u22641.5\u00d710^5, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u5747\u4e0d\u5c0f\u4e8e 0\uff0c\u4e14\u4e0d\u8d85\u8fc7 10000\u3002 \u6570\u636e\u4fdd\u8bc1\uff1a\u5982\u679c\u6700\u77ed\u8def\u5b58\u5728\uff0c\u5219\u6700\u77ed\u8def\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 10^9 10^9 \u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 2 2 3 1 1 3 4 \u8f93\u51fa\u6837\u4f8b 3","title":"Dijkstra\u6c42\u6700\u77ed\u8def II"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95/#_8","text":"#include <bits/stdc++.h> using namespace std ; typedef pair < int , int > PII ; const int N = 1e6 + 5 ; int head [ N ], e [ N ], w [ N ], ne [ N ], idx ; int dis [ N ]; bool vis [ N ]; int n , m ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } void djs ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; priority_queue < PII , vector < PII > , greater < PII >> q ; q . push ({ 0 , s }); while ( q . size ()) { auto cur = q . top (); q . pop (); int pos = cur . second ; if ( vis [ pos ]) continue ; vis [ pos ] = true ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; q . push ({ dis [ j ], j }); } } } if ( dis [ n ] == 0x3f3f3f3f ) cout << \"-1\" ; else cout << dis [ n ]; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } djs ( 1 ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/","text":"\u6982\u8ff0 \u00b6 \u672c\u7ae0\u8bb2\u89e3Floyd\u7b97\u6cd5 Floyd\u7b97\u6cd5\u53c8\u79f0\u4e3a\u63d2\u70b9\u6cd5\uff0c\u662f\u4e00\u79cd\u5229\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u5bfb\u627e\u7ed9\u5b9a\u7684\u52a0\u6743\u56fe\u4e2d\u591a\u6e90\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5 \u76f8\u6bd4\u4e8eDigkstra\u7b97\u6cd5\u601d\u8def\u66f4\u52a0\u7b80\u5355\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u6548\u7387\u4f1a\u660e\u663e\u4f4e\u5f88\u591a\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u521d\u6b65\u5b66\u4e60\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u5728\u4e3b\u51fd\u6570\u4e2d\u521b\u5efa\u4e00\u4e2a\u77e9\u9635\uff0c\u5b58\u50a8\u8f93\u5165\u7684\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u3002 \u5728Floyd\u51fd\u6570\u4e2d\uff0c\u521d\u59cb\u5316\u8bb0\u5f55\u6700\u77ed\u8ddd\u79bb\u7684\u77e9\u9635\u548c\u8bb0\u5f55\u4e2d\u4ecb\u70b9\u7684\u77e9\u9635\u3002\u521d\u59cb\u5316\u4e4b\u540e\u5c06\u4e3b\u51fd\u6570\u7684\u77e9\u9635\u590d\u5236\u7ed9\u8bb0\u5f55\u6700\u77ed\u8ddd\u79bb\u7684\u77e9\u9635\u3002 \u7528\u4e09\u5c42\u5faa\u73af\u4e0d\u65ad\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb\u3002 \u7ecf\u5178\u95ee\u9898 \u00b6 Floyd\u6c42\u6700\u77ed\u8def \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u518d\u7ed9\u5b9a k \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5305\u542b\u4e24\u4e2a\u6574\u6570 x \u548c y\uff0c\u8868\u793a\u67e5\u8be2\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u4fdd\u8bc1\u56fe\u4e2d\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n,m,k\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u63a5\u4e0b\u6765 k \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 x,y\uff0c\u8868\u793a\u8be2\u95ee\u70b9 x \u5230\u70b9 y \u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u8f93\u51fa\u683c\u5f0f \u5171 k \u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be2\u95ee\u7684\u7ed3\u679c\uff0c\u82e5\u8be2\u95ee\u4e24\u70b9\u95f4\u4e0d\u5b58\u5728\u8def\u5f84\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264200, 1\u2264n\u2264200, 1\u2264k\u2264n^2 1\u2264k\u2264n^2 1\u2264m\u226420000, 1\u2264m\u226420000, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 2 1 2 1 2 3 2 1 3 1 2 1 1 3 \u8f93\u51fa\u6837\u4f8b impossible 1 \u9898\u89e3 \u00b6 Floyd\u6a21\u677f\u9898 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 205 ; int dis [ N ][ N ]; int n , m ; void floyd () { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { dis [ j ][ k ] = min ( dis [ j ][ k ], dis [ j ][ i ] + dis [ i ][ k ]); } } } } signed main () { cin >> n >> m ; int k ; cin >> k ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) dis [ i ][ j ] = 0 ; else dis [ i ][ j ] = 0x3f3f3f3f ; } } while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; dis [ a ][ b ] = min ( dis [ a ][ b ], c ); } floyd (); while ( k -- ) { int a , b ; cin >> a >> b ; if ( dis [ a ][ b ] >= 0x3f3f3f3f / 2 ) { cout << \"impossible\" << '\\n' ; } else { cout << dis [ a ][ b ] << '\\n' ; } } return 0 ; }","title":"Floyd\u7b97\u6cd5"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/#_1","text":"\u672c\u7ae0\u8bb2\u89e3Floyd\u7b97\u6cd5 Floyd\u7b97\u6cd5\u53c8\u79f0\u4e3a\u63d2\u70b9\u6cd5\uff0c\u662f\u4e00\u79cd\u5229\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u5bfb\u627e\u7ed9\u5b9a\u7684\u52a0\u6743\u56fe\u4e2d\u591a\u6e90\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5 \u76f8\u6bd4\u4e8eDigkstra\u7b97\u6cd5\u601d\u8def\u66f4\u52a0\u7b80\u5355\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u6548\u7387\u4f1a\u660e\u663e\u4f4e\u5f88\u591a\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u521d\u6b65\u5b66\u4e60\u7684\u4e00\u79cd\u65b9\u6cd5\u3002","title":"\u6982\u8ff0"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/#_2","text":"\u5728\u4e3b\u51fd\u6570\u4e2d\u521b\u5efa\u4e00\u4e2a\u77e9\u9635\uff0c\u5b58\u50a8\u8f93\u5165\u7684\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u3002 \u5728Floyd\u51fd\u6570\u4e2d\uff0c\u521d\u59cb\u5316\u8bb0\u5f55\u6700\u77ed\u8ddd\u79bb\u7684\u77e9\u9635\u548c\u8bb0\u5f55\u4e2d\u4ecb\u70b9\u7684\u77e9\u9635\u3002\u521d\u59cb\u5316\u4e4b\u540e\u5c06\u4e3b\u51fd\u6570\u7684\u77e9\u9635\u590d\u5236\u7ed9\u8bb0\u5f55\u6700\u77ed\u8ddd\u79bb\u7684\u77e9\u9635\u3002 \u7528\u4e09\u5c42\u5faa\u73af\u4e0d\u65ad\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb\u3002","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/#_3","text":"","title":"\u7ecf\u5178\u95ee\u9898"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/#floyd","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u518d\u7ed9\u5b9a k \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5305\u542b\u4e24\u4e2a\u6574\u6570 x \u548c y\uff0c\u8868\u793a\u67e5\u8be2\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u4fdd\u8bc1\u56fe\u4e2d\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n,m,k\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u63a5\u4e0b\u6765 k \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 x,y\uff0c\u8868\u793a\u8be2\u95ee\u70b9 x \u5230\u70b9 y \u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u8f93\u51fa\u683c\u5f0f \u5171 k \u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be2\u95ee\u7684\u7ed3\u679c\uff0c\u82e5\u8be2\u95ee\u4e24\u70b9\u95f4\u4e0d\u5b58\u5728\u8def\u5f84\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264200, 1\u2264n\u2264200, 1\u2264k\u2264n^2 1\u2264k\u2264n^2 1\u2264m\u226420000, 1\u2264m\u226420000, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 2 1 2 1 2 3 2 1 3 1 2 1 1 3 \u8f93\u51fa\u6837\u4f8b impossible 1","title":"Floyd\u6c42\u6700\u77ed\u8def"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/#_4","text":"Floyd\u6a21\u677f\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/Floyd%E7%AE%97%E6%B3%95/#_5","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 205 ; int dis [ N ][ N ]; int n , m ; void floyd () { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { dis [ j ][ k ] = min ( dis [ j ][ k ], dis [ j ][ i ] + dis [ i ][ k ]); } } } } signed main () { cin >> n >> m ; int k ; cin >> k ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) dis [ i ][ j ] = 0 ; else dis [ i ][ j ] = 0x3f3f3f3f ; } } while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; dis [ a ][ b ] = min ( dis [ a ][ b ], c ); } floyd (); while ( k -- ) { int a , b ; cin >> a >> b ; if ( dis [ a ][ b ] >= 0x3f3f3f3f / 2 ) { cout << \"impossible\" << '\\n' ; } else { cout << dis [ a ][ b ] << '\\n' ; } } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/","text":"\u6982\u8ff0 \u00b6 \u672c\u7ae0\u8bb2\u89e3SPFA\u7b97\u6cd5 \u89e3\u51b3\u5b58\u5728\u8d1f\u73af\u7684\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0cbellman-ford\u7b97\u6cd5\u662f\u6bd4\u8f83\u7ecf\u5178\u7684\u4e00\u4e2a\uff0c(\u4e0d\u6e05\u695a\ud83d\udc49 Bellman-Ford\u7b97\u6cd5 )\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6548\u7387\u5e76\u4e0d\u548b\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u77e5\u9053\u8981\u6c42\u5355\u6e90\u6700\u77ed\u8def\uff0c\u81f3\u591a\u505a|v|\uff08j\u56fe\u7684\u7ed3\u70b9\u6570\uff09\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0cSPFA\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f18\u5316\u4e86bellman-ford\u7b97\u6cd5\u3002\u5b83\u7684\u7cbe\u5999\u4e4b\u5904\u5728\u4e8e\u4e0d\u662f\u76f2\u76ee\u7684\u505a\u677e\u5f1b\u64cd\u4f5c\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u961f\u5217\u4fdd\u5b58\u5f53\u524d\u505a\u4e86\u677e\u5f1b\u64cd\u4f5c\u7684\u7ed3\u70b9\uff0c\u53ea\u8981\u961f\u5217\u4e0d\u7a7a\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4ece\u961f\u5217\u91cc\u9762\u53d6\u70b9\uff0c\u505a\u677e\u5f1b\u64cd\u4f5c\u3002 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u521d\u59cb\u65f6\u5c06\u6e90\u52a0\u5165\u961f\u5217 \u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u5bf9\u6240\u6709\u4e0e\u4ed6\u76f8\u90bb\u7684\u70b9\u8fdb\u884c\u677e\u5f1b \u82e5\u67d0\u4e2a\u76f8\u90bb\u7684\u70b9\u677e\u5f1b\u6210\u529f\uff0c\u5982\u679c\u8be5\u70b9\u6ca1\u6709\u5728\u961f\u5217\u4e2d\uff0c\u5219\u5c06\u5176\u5165\u961f \u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u65f6\u7b97\u6cd5\u7ed3\u675f \u7ecf\u5178\u95ee\u9898 \u00b6 spfa\u6c42\u6700\u77ed\u8def \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u8bf7\u4f60\u6c42\u51fa 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u5219\u8f93\u51fa impossible\u3002 \u6570\u636e\u4fdd\u8bc1\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264105, 1\u2264n,m\u2264105, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 5 2 3 -3 1 3 4 \u8f93\u51fa\u6837\u4f8b 2 \u9898\u89e3 \u00b6 spfa\u6a21\u677f\u9898 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int head [ N ], e [ N ], w [ N ], ne [ N ], idx ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int dis [ N ]; bool vis [ N ]; queue < int > q ; int n , m ; void spfa ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; vis [ s ] = true ; q . push ( s ); while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; if ( ! vis [ j ]) { vis [ j ] = true ; q . push ( j ); } } } } if ( dis [ n ] == 0x3f3f3f3f ) cout << \"impossible\" ; else cout << dis [ n ]; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } spfa ( 1 ); return 0 ; } \u8fdb\u9636\u95ee\u9898 \u00b6 spfa\u5224\u65ad\u8d1f\u73af \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u8bf7\u4f60\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u5219\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u22642000, 1\u2264n\u22642000, 1\u2264m\u226410000, 1\u2264m\u226410000, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 -1 2 3 4 3 1 -4 \u8f93\u51fa\u6837\u4f8b Yes \u9898\u89e3 \u00b6 \u5982\u679c\u4e0d\u5b58\u5728\u8d1f\u73af\u7684\u8bdd\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u8282\u70b9\u4f5c\u4e3a\u4e2d\u95f4\u8282\u70b9\u7136\u540e\u518d\u5230\u8fbe\u8be5\u8282\u70b9\u6765\u8fdb\u884c\u677e\u5f1b\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u677e\u5f1bn\u6b21\uff0c\u56e0\u6b64\u53ea\u8981\u67d0\u4e2a\u8282\u70b9\u8fdb\u5165\u961f\u5217\u4e86\u8d85\u8fc7\u4e86n\u6b21\uff0c\u90a3\u5fc5\u5b9a\u5b58\u5728\u8d1f\u73af\uff0c\u7528cnt\u6570\u7ec4\u8bb0\u5f55\u677e\u5f1b\u6b21\u6570\uff0c\u5224\u65ad\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 2005 , M = 1e4 + 5 ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n , m ; bool vis [ N ]; int dis [ N ]; queue < int > q ; int cnt [ N ]; void spfa () { for ( int i = 1 ; i <= n ; i ++ ) { q . push ( i ); vis [ i ] = true ; } while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; cnt [ j ] = cnt [ pos ] + 1 ; if ( cnt [ j ] >= n ) { cout << \"Yes\" << '\\n' ; return ; } if ( ! vis [ j ]) { vis [ j ] = true ; q . push ( j ); } } } } cout << \"No\" ; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } spfa (); return 0 ; } Link with Game Glitch \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u5927\u610f Link\u6709\u4e00\u4e2a\u98df\u8c31\uff0c\u4ed6\u53ef\u4ee5\u901a\u8fc7\u82e5\u5e72\u4e2a\u4e00\u79cd\u98df\u6750\u5236\u4f5c\u51fa\u82e5\u5e72\u4e2a\u53e6\u4e00\u79cd\u98df\u6750\uff0c\u7531\u4e8e\u98df\u8c31\u6709\u4e9b\u9519\u8bef\uff0c\u53ef\u80fd\u51fa\u73b0\u67d0\u4e9b\u98df\u6750\u88ab\u65e0\u9650\u5236\u9020\u7684\u60c5\u51b5\uff0c\u5148\u52a0\u5165\u4e00\u4e2a\u53c2\u6570w\uff0c\u4f7f\u6bcf\u4e2a\u88ab\u5236\u4f5c\u98df\u6750\u7684\u4ea7\u751f\u6570\u91cf\u53d8\u4e3a w \\times \u539f\u6765\u53ef\u88ab\u4ea7\u751f\u7684\u6570\u91cf w \\times \u539f\u6765\u53ef\u88ab\u4ea7\u751f\u7684\u6570\u91cf \u3002 \u73b0\u95ee\u4f60\u6700\u5927\u7684w\u4e3a\u591a\u5c11 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570n\uff0cm\uff0c\u4ee3\u8868\u98df\u6750\u79cd\u7c7b\u4ee5\u53ca\u98df\u8c31\u6570\u91cf \u63a5\u4e0b\u6765m\u884c\u6bcf\u884c\u56db\u4e2a\u6570 a_i,b_i,c_i,d_i a_i,b_i,c_i,d_i \uff0c\u8868\u793a\u53ef\u4ee5\u7528 a_i a_i \u4e2a b_i b_i \u578b\u98df\u6750\u9020\u51fa c_i c_i \u4e2a d_i d_i \u578b\u98df\u6750 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u5b9e\u6570w\uff0c\u8bef\u5dee\u5728 10^{-6} 10^{-6} \u5185\u7684\u7b54\u6848\u88ab\u8ba4\u4e3a\u6b63\u786e \u6570\u636e\u8303\u56f4 2 \\le n \\le 1000,2 \\le m \\le 2000 2 \\le n \\le 1000,2 \\le m \\le 2000 1 \\le a_i,b_i,c_i,d_i \\le n, b_i \\ne d_i, 1 \\le a_i,c_i \\le 10^3 1 \\le a_i,b_i,c_i,d_i \\le n, b_i \\ne d_i, 1 \\le a_i,c_i \\le 10^3 \u8f93\u5165\u6837\u4f8b 3 3 1 1 2 2 1 2 2 1 1 3 1 1 \u8f93\u51fa\u6837\u4f8b 0.5000000000 \u9898\u89e3 \u00b6 \u6700\u5927\u503c\u8003\u8651\u4e8c\u5206\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u98df\u6750\u4e4b\u95f4\u53ef\u4ee5\u5efa\u56fe\uff0c\u82e5\u67d0\u79cd\u98df\u6750\u80fd\u88ab\u65e0\u9650\u5236\u9020\uff0c\u5219\u5176\u5fc5\u8981\u6761\u4ef6\u4e3a\u67d0\u79cd\u98df\u6750\u5728\u73af\u4e2d\uff0c\u5c06\u4ea7\u751f\u6570\u91cf\u7684\u6bd4\u4f8b\u4f5c\u4e3a\u8fb9\u6743\uff0c\u6211\u4eec\u53d1\u73b0\u82e5\u73af\u4e2d\u957f\u5ea6\u4e4b\u79ef\u5927\u4e8e1\uff0c\u5219\u4f1a\u9020\u6210\u8d44\u6e90\u65e0\u9650\u7684\u60c5\u51b5\uff0c\u4e58\u79ef\u53ef\u80fd\u5f88\u5927\uff0c\u8003\u8651\u53d6\u5bf9\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u53d8\u6210\u4e86\u5224\u6b63\u73af\u95ee\u9898\uff0c\u8d44\u6e90\u6709\u9650\u7b49\u4ef7\u4e8e\u4e0d\u5b58\u5728\u6b63\u73af\uff0c\u4ee3\u7801\u4e0e\u5224\u8d1f\u73af\u7a0d\u6709\u4e0d\u540c\uff0c\u53ea\u9700\u8981\u5c06\u6700\u77ed\u8def\u6539\u6210\u6700\u957f\u8def\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 2005 ; const double eps = 1e-8 ; int head [ N ], e [ N ], ne [ N ], idx = 0 ; int f [ N ]; double dis [ N ]; double w [ N ]; bool vis [ N ]; int n , m ; queue < int > q ; void add ( int a , int b , double c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool check ( double x ) { memset ( vis , false , sizeof ( vis )); memset ( f , 0 , sizeof ( f )); while ( q . size ()) q . pop (); for ( int i = 1 ; i <= n ; i ++ ) { vis [ i ] = true ; dis [ i ] = 0 ; q . push ( i ); } while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] < dis [ pos ] + w [ i ] + x ) { // \u6700\u957f\u8def dis [ j ] = dis [ pos ] + w [ i ] + x ; f [ j ] = f [ pos ] + 1 ; if ( f [ j ] >= n ) return false ; if ( ! vis [ j ]) { q . push ( j ); vis [ j ] = true ; } } } } return true ; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b ; double x , y ; cin >> x >> a >> y >> b ; add ( a , b , log ( y * 1.0 / x )); } double l = 0 , r = 1.0 ; while ( l < r - eps ) { // \u8fd9\u91cc\u4f7f\u7528eps\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u6709\u65f6\u5019\u9700\u8981\u9650\u5236\u5faa\u73af\u6b21\u6570 double mid = ( l + r ) / 2.0 ; if ( check ( log ( mid ))) l = mid ; else r = mid ; } printf ( \"%.8lf\" , l ); return 0 ; }","title":"SPFA\u7b97\u6cd5"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_1","text":"\u672c\u7ae0\u8bb2\u89e3SPFA\u7b97\u6cd5 \u89e3\u51b3\u5b58\u5728\u8d1f\u73af\u7684\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0cbellman-ford\u7b97\u6cd5\u662f\u6bd4\u8f83\u7ecf\u5178\u7684\u4e00\u4e2a\uff0c(\u4e0d\u6e05\u695a\ud83d\udc49 Bellman-Ford\u7b97\u6cd5 )\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6548\u7387\u5e76\u4e0d\u548b\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u77e5\u9053\u8981\u6c42\u5355\u6e90\u6700\u77ed\u8def\uff0c\u81f3\u591a\u505a|v|\uff08j\u56fe\u7684\u7ed3\u70b9\u6570\uff09\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0cSPFA\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f18\u5316\u4e86bellman-ford\u7b97\u6cd5\u3002\u5b83\u7684\u7cbe\u5999\u4e4b\u5904\u5728\u4e8e\u4e0d\u662f\u76f2\u76ee\u7684\u505a\u677e\u5f1b\u64cd\u4f5c\uff0c\u800c\u662f\u7528\u4e00\u4e2a\u961f\u5217\u4fdd\u5b58\u5f53\u524d\u505a\u4e86\u677e\u5f1b\u64cd\u4f5c\u7684\u7ed3\u70b9\uff0c\u53ea\u8981\u961f\u5217\u4e0d\u7a7a\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4ece\u961f\u5217\u91cc\u9762\u53d6\u70b9\uff0c\u505a\u677e\u5f1b\u64cd\u4f5c\u3002","title":"\u6982\u8ff0"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_2","text":"\u521d\u59cb\u65f6\u5c06\u6e90\u52a0\u5165\u961f\u5217 \u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u5bf9\u6240\u6709\u4e0e\u4ed6\u76f8\u90bb\u7684\u70b9\u8fdb\u884c\u677e\u5f1b \u82e5\u67d0\u4e2a\u76f8\u90bb\u7684\u70b9\u677e\u5f1b\u6210\u529f\uff0c\u5982\u679c\u8be5\u70b9\u6ca1\u6709\u5728\u961f\u5217\u4e2d\uff0c\u5219\u5c06\u5176\u5165\u961f \u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u65f6\u7b97\u6cd5\u7ed3\u675f","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_3","text":"","title":"\u7ecf\u5178\u95ee\u9898"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#spfa","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u8bf7\u4f60\u6c42\u51fa 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u65e0\u6cd5\u4ece 1 \u53f7\u70b9\u8d70\u5230 n \u53f7\u70b9\uff0c\u5219\u8f93\u51fa impossible\u3002 \u6570\u636e\u4fdd\u8bc1\u4e0d\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a 1 \u53f7\u70b9\u5230 n \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa impossible \u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264105, 1\u2264n,m\u2264105, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 5 2 3 -3 1 3 4 \u8f93\u51fa\u6837\u4f8b 2","title":"spfa\u6c42\u6700\u77ed\u8def"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_4","text":"spfa\u6a21\u677f\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_5","text":"#include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int head [ N ], e [ N ], w [ N ], ne [ N ], idx ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int dis [ N ]; bool vis [ N ]; queue < int > q ; int n , m ; void spfa ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; vis [ s ] = true ; q . push ( s ); while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; if ( ! vis [ j ]) { vis [ j ] = true ; q . push ( j ); } } } } if ( dis [ n ] == 0x3f3f3f3f ) cout << \"impossible\" ; else cout << dis [ n ]; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } spfa ( 1 ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_6","text":"","title":"\u8fdb\u9636\u95ee\u9898"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#spfa_1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u8bf7\u4f60\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u6743\u56de\u8def\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x,y,z\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece\u70b9 x \u5230\u70b9 y \u7684\u6709\u5411\u8fb9\uff0c\u8fb9\u957f\u4e3a z\u3002 \u8f93\u51fa\u683c\u5f0f \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u5219\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u22642000, 1\u2264n\u22642000, 1\u2264m\u226410000, 1\u2264m\u226410000, \u56fe\u4e2d\u6d89\u53ca\u8fb9\u957f\u7edd\u5bf9\u503c\u5747\u4e0d\u8d85\u8fc7 10000\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 2 -1 2 3 4 3 1 -4 \u8f93\u51fa\u6837\u4f8b Yes","title":"spfa\u5224\u65ad\u8d1f\u73af"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_7","text":"\u5982\u679c\u4e0d\u5b58\u5728\u8d1f\u73af\u7684\u8bdd\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u8282\u70b9\u4f5c\u4e3a\u4e2d\u95f4\u8282\u70b9\u7136\u540e\u518d\u5230\u8fbe\u8be5\u8282\u70b9\u6765\u8fdb\u884c\u677e\u5f1b\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u677e\u5f1bn\u6b21\uff0c\u56e0\u6b64\u53ea\u8981\u67d0\u4e2a\u8282\u70b9\u8fdb\u5165\u961f\u5217\u4e86\u8d85\u8fc7\u4e86n\u6b21\uff0c\u90a3\u5fc5\u5b9a\u5b58\u5728\u8d1f\u73af\uff0c\u7528cnt\u6570\u7ec4\u8bb0\u5f55\u677e\u5f1b\u6b21\u6570\uff0c\u5224\u65ad\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_8","text":"#include <bits/stdc++.h> using namespace std ; const int N = 2005 , M = 1e4 + 5 ; int head [ N ], e [ M ], ne [ M ], w [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n , m ; bool vis [ N ]; int dis [ N ]; queue < int > q ; int cnt [ N ]; void spfa () { for ( int i = 1 ; i <= n ; i ++ ) { q . push ( i ); vis [ i ] = true ; } while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; cnt [ j ] = cnt [ pos ] + 1 ; if ( cnt [ j ] >= n ) { cout << \"Yes\" << '\\n' ; return ; } if ( ! vis [ j ]) { vis [ j ] = true ; q . push ( j ); } } } } cout << \"No\" ; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } spfa (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#link-with-game-glitch","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u5927\u610f Link\u6709\u4e00\u4e2a\u98df\u8c31\uff0c\u4ed6\u53ef\u4ee5\u901a\u8fc7\u82e5\u5e72\u4e2a\u4e00\u79cd\u98df\u6750\u5236\u4f5c\u51fa\u82e5\u5e72\u4e2a\u53e6\u4e00\u79cd\u98df\u6750\uff0c\u7531\u4e8e\u98df\u8c31\u6709\u4e9b\u9519\u8bef\uff0c\u53ef\u80fd\u51fa\u73b0\u67d0\u4e9b\u98df\u6750\u88ab\u65e0\u9650\u5236\u9020\u7684\u60c5\u51b5\uff0c\u5148\u52a0\u5165\u4e00\u4e2a\u53c2\u6570w\uff0c\u4f7f\u6bcf\u4e2a\u88ab\u5236\u4f5c\u98df\u6750\u7684\u4ea7\u751f\u6570\u91cf\u53d8\u4e3a w \\times \u539f\u6765\u53ef\u88ab\u4ea7\u751f\u7684\u6570\u91cf w \\times \u539f\u6765\u53ef\u88ab\u4ea7\u751f\u7684\u6570\u91cf \u3002 \u73b0\u95ee\u4f60\u6700\u5927\u7684w\u4e3a\u591a\u5c11 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570n\uff0cm\uff0c\u4ee3\u8868\u98df\u6750\u79cd\u7c7b\u4ee5\u53ca\u98df\u8c31\u6570\u91cf \u63a5\u4e0b\u6765m\u884c\u6bcf\u884c\u56db\u4e2a\u6570 a_i,b_i,c_i,d_i a_i,b_i,c_i,d_i \uff0c\u8868\u793a\u53ef\u4ee5\u7528 a_i a_i \u4e2a b_i b_i \u578b\u98df\u6750\u9020\u51fa c_i c_i \u4e2a d_i d_i \u578b\u98df\u6750 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u5b9e\u6570w\uff0c\u8bef\u5dee\u5728 10^{-6} 10^{-6} \u5185\u7684\u7b54\u6848\u88ab\u8ba4\u4e3a\u6b63\u786e \u6570\u636e\u8303\u56f4 2 \\le n \\le 1000,2 \\le m \\le 2000 2 \\le n \\le 1000,2 \\le m \\le 2000 1 \\le a_i,b_i,c_i,d_i \\le n, b_i \\ne d_i, 1 \\le a_i,c_i \\le 10^3 1 \\le a_i,b_i,c_i,d_i \\le n, b_i \\ne d_i, 1 \\le a_i,c_i \\le 10^3 \u8f93\u5165\u6837\u4f8b 3 3 1 1 2 2 1 2 2 1 1 3 1 1 \u8f93\u51fa\u6837\u4f8b 0.5000000000","title":"Link with Game Glitch"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_9","text":"\u6700\u5927\u503c\u8003\u8651\u4e8c\u5206\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u98df\u6750\u4e4b\u95f4\u53ef\u4ee5\u5efa\u56fe\uff0c\u82e5\u67d0\u79cd\u98df\u6750\u80fd\u88ab\u65e0\u9650\u5236\u9020\uff0c\u5219\u5176\u5fc5\u8981\u6761\u4ef6\u4e3a\u67d0\u79cd\u98df\u6750\u5728\u73af\u4e2d\uff0c\u5c06\u4ea7\u751f\u6570\u91cf\u7684\u6bd4\u4f8b\u4f5c\u4e3a\u8fb9\u6743\uff0c\u6211\u4eec\u53d1\u73b0\u82e5\u73af\u4e2d\u957f\u5ea6\u4e4b\u79ef\u5927\u4e8e1\uff0c\u5219\u4f1a\u9020\u6210\u8d44\u6e90\u65e0\u9650\u7684\u60c5\u51b5\uff0c\u4e58\u79ef\u53ef\u80fd\u5f88\u5927\uff0c\u8003\u8651\u53d6\u5bf9\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u53d8\u6210\u4e86\u5224\u6b63\u73af\u95ee\u9898\uff0c\u8d44\u6e90\u6709\u9650\u7b49\u4ef7\u4e8e\u4e0d\u5b58\u5728\u6b63\u73af\uff0c\u4ee3\u7801\u4e0e\u5224\u8d1f\u73af\u7a0d\u6709\u4e0d\u540c\uff0c\u53ea\u9700\u8981\u5c06\u6700\u77ed\u8def\u6539\u6210\u6700\u957f\u8def\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/SPFA%E7%AE%97%E6%B3%95/#_10","text":"#include <bits/stdc++.h> using namespace std ; const int N = 2005 ; const double eps = 1e-8 ; int head [ N ], e [ N ], ne [ N ], idx = 0 ; int f [ N ]; double dis [ N ]; double w [ N ]; bool vis [ N ]; int n , m ; queue < int > q ; void add ( int a , int b , double c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } bool check ( double x ) { memset ( vis , false , sizeof ( vis )); memset ( f , 0 , sizeof ( f )); while ( q . size ()) q . pop (); for ( int i = 1 ; i <= n ; i ++ ) { vis [ i ] = true ; dis [ i ] = 0 ; q . push ( i ); } while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] < dis [ pos ] + w [ i ] + x ) { // \u6700\u957f\u8def dis [ j ] = dis [ pos ] + w [ i ] + x ; f [ j ] = f [ pos ] + 1 ; if ( f [ j ] >= n ) return false ; if ( ! vis [ j ]) { q . push ( j ); vis [ j ] = true ; } } } } return true ; } int main () { cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b ; double x , y ; cin >> x >> a >> y >> b ; add ( a , b , log ( y * 1.0 / x )); } double l = 0 , r = 1.0 ; while ( l < r - eps ) { // \u8fd9\u91cc\u4f7f\u7528eps\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u6709\u65f6\u5019\u9700\u8981\u9650\u5236\u5faa\u73af\u6b21\u6570 double mid = ( l + r ) / 2.0 ; if ( check ( log ( mid ))) l = mid ; else r = mid ; } printf ( \"%.8lf\" , l ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/","text":"\u6982\u8ff0 \u00b6 \u4ece\u56fe\u4e2d\u7684\u67d0\u4e2a\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\uff0c\u79f0\u4e3a\u6700\u77ed\u8def\u5f84 \u89e3\u51b3\u95ee\u9898\u6709\u4ee5\u4e0b\u7b97\u6cd5: \u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5(Dijkstra\u7b97\u6cd5) \u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5(Floyd\u7b97\u6cd5) Bellman-Ford\u7b97\u6cd5 SPFA\u7b97\u6cd5 \u672c\u7ae0\u8bb2\u89e3\u6700\u77ed\u8def\u7684\u4f8b\u9898 \u4f8b1.\u9009\u62e9\u6700\u4f73\u7ebf\u8def \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u6709\u4e00\u5929\uff0c\u742a\u742a\u60f3\u4e58\u5750\u516c\u4ea4\u8f66\u53bb\u62dc\u8bbf\u5979\u7684\u4e00\u4f4d\u670b\u53cb\u3002 \u7531\u4e8e\u742a\u742a\u975e\u5e38\u5bb9\u6613\u6655\u8f66\uff0c\u6240\u4ee5\u5979\u60f3\u5c3d\u5feb\u5230\u8fbe\u670b\u53cb\u5bb6\u3002 \u73b0\u5728\u7ed9\u5b9a\u4f60\u4e00\u5f20\u57ce\u5e02\u4ea4\u901a\u8def\u7ebf\u56fe\uff0c\u4e0a\u9762\u5305\u542b\u57ce\u5e02\u7684\u516c\u4ea4\u7ad9\u53f0\u4ee5\u53ca\u516c\u4ea4\u7ebf\u8def\u7684\u5177\u4f53\u5206\u5e03\u3002 \u5df2\u77e5\u57ce\u5e02\u4e2d\u5171\u5305\u542b n \u4e2a\u8f66\u7ad9\uff08\u7f16\u53f71~n\uff09\u4ee5\u53ca m \u6761\u516c\u4ea4\u7ebf\u8def\u3002 \u6bcf\u6761\u516c\u4ea4\u7ebf\u8def\u90fd\u662f \u5355\u5411\u7684\uff0c\u4ece\u4e00\u4e2a\u8f66\u7ad9\u51fa\u53d1\u76f4\u63a5\u5230\u8fbe\u53e6\u4e00\u4e2a\u8f66\u7ad9\uff0c\u4e24\u4e2a\u8f66\u7ad9\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u591a\u6761\u516c\u4ea4\u7ebf\u8def\u3002 \u742a\u742a\u7684\u670b\u53cb\u4f4f\u5728 s \u53f7\u8f66\u7ad9\u9644\u8fd1\u3002 \u742a\u742a\u53ef\u4ee5\u5728\u4efb\u4f55\u8f66\u7ad9\u9009\u62e9\u6362\u4e58\u5176\u5b83\u516c\u5171\u6c7d\u8f66\u3002 \u8bf7\u627e\u51fa\u742a\u742a\u5230\u8fbe\u5979\u7684\u670b\u53cb\u5bb6\uff08\u9644\u8fd1\u7684\u516c\u4ea4\u8f66\u7ad9\uff09\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n,m,s\uff0c\u5206\u522b\u8868\u793a\u8f66\u7ad9\u6570\u91cf\uff0c\u516c\u4ea4\u7ebf\u8def\u6570\u91cf\u4ee5\u53ca\u670b\u53cb\u5bb6\u9644\u8fd1\u8f66\u7ad9\u7684\u7f16\u53f7\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 p,q,t\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u7ebf\u8def\u4ece\u8f66\u7ad9 p \u5230\u8fbe\u8f66\u7ad9 q\uff0c\u7528\u65f6\u4e3a t\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570 w\uff0c\u8868\u793a\u742a\u742a\u5bb6\u9644\u8fd1\u5171\u6709 w \u4e2a\u8f66\u7ad9\uff0c\u5979\u53ef\u4ee5\u5728\u8fd9 w \u4e2a\u8f66\u7ad9\u4e2d\u9009\u62e9\u4e00\u4e2a\u8f66\u7ad9\u4f5c\u4e3a\u59cb\u53d1\u7ad9\u3002 \u518d\u4e00\u884c\uff0c\u5305\u542b w \u4e2a\u6574\u6570\uff0c\u8868\u793a\u742a\u742a\u5bb6\u9644\u8fd1\u7684 w \u4e2a\u8f66\u7ad9\u7684\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u7ed3\u679c\uff0c\u8868\u793a\u6240\u9700\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u3002 \u5982\u679c\u65e0\u6cd5\u8fbe\u5230\u670b\u53cb\u5bb6\u7684\u8f66\u7ad9\uff0c\u5219\u8f93\u51fa -1\u3002 \u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002 \u6570\u636e\u8303\u56f4 n\u22641000,m\u226420000, n\u22641000,m\u226420000, 1\u2264s\u2264n, 1\u2264s\u2264n, 0<w<n, 0<w<n, 0<t\u22641000 0<t\u22641000 \u8f93\u5165\u6837\u4f8b 5 8 5 1 2 2 1 5 3 1 3 4 2 4 7 2 5 6 2 3 5 3 5 1 4 5 1 2 2 3 4 3 4 1 2 3 1 3 4 2 3 2 1 1 \u8f93\u51fa\u6837\u4f8b 1 -1 \u9898\u89e3 \u00b6 \u5bf9\u4e8e\u591a\u8d77\u70b9\u5230\u4efb\u610f\u7ec8\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u7684\u8d85\u7ea7\u6e90\u70b9\uff0c\u8fd9\u4e2a\u70b9\u4e0e\u6240\u6709\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff0c\u6700\u540e\u53ea\u9700\u8981\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; int n , m , s ; const int N = 1005 , M = 4e4 + 5 ; int head [ N ], e [ M ], w [ M ], ne [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int dis [ N ]; bool vis [ N ]; typedef pair < int , int > PII ; priority_queue < PII , vector < PII > , greater < PII > > heap ; void djs ( int s , int t ) { while ( heap . size ()) heap . pop (); memset ( vis , false , sizeof ( vis )); memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; heap . push ({ 0 , s }); while ( heap . size ()) { auto cur = heap . top (); heap . pop (); int pos = cur . second ; if ( vis [ pos ]) continue ; vis [ pos ] = true ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; heap . push ({ dis [ j ], j }); } } } if ( dis [ t ] == 0x3f3f3f3f ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; } int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); while ( cin >> n >> m >> s ) { idx = 0 ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } int w ; cin >> w ; for ( int i = 1 ; i <= w ; i ++ ) // \u8d85\u7ea7\u6e90\u70b9 { int a ; cin >> a ; add ( 0 , a , 0 ); } djs ( 0 , s ); } return 0 ; } \u4f8b2.\u62ef\u6551\u5927\u5175\u745e\u6069 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 1944 \u5e74\uff0c\u7279\u79cd\u5175\u9ea6\u514b\u63a5\u5230\u56fd\u9632\u90e8\u7684\u547d\u4ee4\uff0c\u8981\u6c42\u7acb\u5373\u8d76\u8d74\u592a\u5e73\u6d0b\u4e0a\u7684\u4e00\u4e2a\u5b64\u5c9b\uff0c\u8425\u6551\u88ab\u654c\u519b\u4fd8\u864f\u7684\u5927\u5175\u745e\u6069\u3002 \u745e\u6069\u88ab\u5173\u62bc\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\uff0c\u8ff7\u5bab\u5730\u5f62\u590d\u6742\uff0c\u4f46\u5e78\u597d\u9ea6\u514b\u5f97\u5230\u4e86\u8ff7\u5bab\u7684\u5730\u5f62\u56fe\u3002 \u8ff7\u5bab\u7684\u5916\u5f62\u662f\u4e00\u4e2a\u957f\u65b9\u5f62\uff0c\u5176\u5357\u5317\u65b9\u5411\u88ab\u5212\u5206\u4e3a N \u884c\uff0c\u4e1c\u897f\u65b9\u5411\u88ab\u5212\u5206\u4e3a M \u5217\uff0c \u4e8e\u662f\u6574\u4e2a\u8ff7\u5bab\u88ab\u5212\u5206\u4e3a N\u00d7M \u4e2a\u5355\u5143\u3002 \u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u4f4d\u7f6e\u53ef\u7528\u4e00\u4e2a\u6709\u5e8f\u6570\u5bf9 (\u5355\u5143\u7684\u884c\u53f7, \u5355\u5143\u7684\u5217\u53f7) \u6765\u8868\u793a\u3002 \u5357\u5317\u6216\u4e1c\u897f\u65b9\u5411\u76f8\u90bb\u7684 2 \u4e2a\u5355\u5143\u4e4b\u95f4\u53ef\u80fd\u4e92\u901a\uff0c\u4e5f\u53ef\u80fd\u6709\u4e00\u6247\u9501\u7740\u7684\u95e8\uff0c\u6216\u8005\u662f\u4e00\u5835\u4e0d\u53ef\u903e\u8d8a\u7684\u5899\u3002 \u6ce8\u610f\uff1a \u95e8\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u5411\u7a7f\u8fc7\uff0c\u5373\u53ef\u4ee5\u770b\u6210\u4e00\u6761\u65e0\u5411\u8fb9\u3002 \u8ff7\u5bab\u4e2d\u6709\u4e00\u4e9b\u5355\u5143\u5b58\u653e\u7740\u94a5\u5319\uff0c\u540c\u4e00\u4e2a\u5355\u5143\u53ef\u80fd\u5b58\u653e \u591a\u628a\u94a5\u5319\uff0c\u5e76\u4e14\u6240\u6709\u7684\u95e8\u88ab\u5206\u6210 P \u7c7b\uff0c\u6253\u5f00\u540c\u4e00\u7c7b\u7684\u95e8\u7684\u94a5\u5319\u76f8\u540c\uff0c\u4e0d\u540c\u7c7b\u95e8\u7684\u94a5\u5319\u4e0d\u540c\u3002 \u5927\u5175\u745e\u6069\u88ab\u5173\u62bc\u5728\u8ff7\u5bab\u7684\u4e1c\u5357\u89d2\uff0c\u5373 (N,M) \u5355\u5143\u91cc\uff0c\u5e76\u5df2\u7ecf\u660f\u8ff7\u3002 \u8ff7\u5bab\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u5728\u897f\u5317\u89d2\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u9ea6\u514b\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165 (1,1) \u5355\u5143\u3002 \u53e6\u5916\uff0c\u9ea6\u514b\u4ece\u4e00\u4e2a\u5355\u5143\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u76f8\u90bb\u5355\u5143\u7684\u65f6\u95f4\u4e3a 1\uff0c\u62ff\u53d6\u6240\u5728\u5355\u5143\u7684\u94a5\u5319\u7684\u65f6\u95f4\u4ee5\u53ca\u7528\u94a5\u5319\u5f00\u95e8\u7684\u65f6\u95f4\u53ef\u5ffd\u7565\u4e0d\u8ba1\u3002 \u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5e2e\u52a9\u9ea6\u514b\u4ee5\u6700\u5feb\u7684\u65b9\u5f0f\u5230\u8fbe\u745e\u6069\u6240\u5728\u5355\u5143\uff0c\u8425\u6551\u5927\u5175\u745e\u6069\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6574\u6570,\u5206\u522b\u8868\u793a N,M,P \u7684\u503c\u3002 \u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u6574\u6570 k\uff0c\u8868\u793a\u8ff7\u5bab\u4e2d\u95e8\u548c\u5899\u7684\u603b\u6570\u3002 \u63a5\u4e0b\u6765 k \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e94\u4e2a\u6574\u6570\uff0cXi1,Yi1,Xi2,Yi2,Gi\uff1a\u5f53 Gi\u22651 \u65f6\uff0c\u8868\u793a (Xi1,Yi1) \u5355\u5143\u4e0e (Xi2,Yi2) \u5355\u5143\u4e4b\u95f4\u6709\u4e00\u6247\u7b2c Gi \u7c7b\u7684\u95e8\uff0c\u5f53 Gi=0 \u65f6\uff0c\u8868\u793a (Xi1,Yi1) \u5355\u5143\u4e0e (Xi2,Yi2) \u5355\u5143\u4e4b\u95f4\u6709\u4e00\u9762\u4e0d\u53ef\u903e\u8d8a\u7684\u5899\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570 S\uff0c\u8868\u793a\u8ff7\u5bab\u4e2d\u5b58\u653e\u7684\u94a5\u5319\u7684\u603b\u6570\u3002 \u63a5\u4e0b\u6765 S \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 Xi1,Yi1,Qi\uff0c\u8868\u793a (Xi1,Yi1) \u5355\u5143\u91cc\u5b58\u5728\u4e00\u4e2a\u80fd\u5f00\u542f\u7b2c Qi \u7c7b\u95e8\u7684\u94a5\u5319\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u9ea6\u514b\u8425\u6551\u5230\u5927\u5175\u745e\u6069\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u5982\u679c\u95ee\u9898\u65e0\u89e3\uff0c\u5219\u8f93\u51fa -1\u3002 \u6570\u636e\u8303\u56f4 |Xi1\u2212Xi2|+|Yi1\u2212Yi2|=1, |Xi1\u2212Xi2|+|Yi1\u2212Yi2|=1, 0\u2264Gi\u2264P, 0\u2264Gi\u2264P, 1\u2264Qi\u2264P, 1\u2264Qi\u2264P, 1\u2264N,M,P\u226410, 1\u2264N,M,P\u226410, 1\u2264k\u2264150 1\u2264k\u2264150 \u8f93\u5165\u6837\u4f8b 4 4 9 9 1 2 1 3 2 1 2 2 2 0 2 1 2 2 0 2 1 3 1 0 2 3 3 3 0 2 4 3 4 1 3 2 3 3 0 3 3 4 3 0 4 3 4 4 0 2 2 1 2 4 2 1 \u8f93\u51fa\u6837\u4f8b 14 \u6837\u4f8b\u89e3\u91ca \u9898\u89e3 \u00b6 \u82e5\u6ca1\u6709\u94a5\u5319\u7684\u9650\u5236\uff0c\u90a3\u8fd9\u9898\u5c31\u662f\u666e\u901a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u73b0\u5728\u52a0\u4e0a\u4e86\u94a5\u5319\uff0c\u539f\u6765\u7684f[i]\u5df2\u7ecf\u4e0d\u8db3\u4ee5\u8868\u793a\u72b6\u6001\u4e86\uff0c\u9700\u8981\u65b0\u5f00\u4e00\u7ef4\u7528\u6765\u8868\u793a\u94a5\u5319\uff0c\u6ce8\u610f\u5230\u94a5\u5319\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u56e0\u6b64\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u72b6\u6001\u538b\u7f29\uff0c\u5c06\u4e8c\u7ef4\u5750\u6807\u6620\u5c04\u6210\u4e00\u7ef4\u4e4b\u540e\uff0cf[i][j]\u5c31\u8868\u793a\u8fbe\u5230\u5f53\u524d\u5728i\uff0c\u94a5\u5319\u72b6\u6001\u4e3aj\u65f6\u7684\u64cd\u4f5c\u6b65\u6570\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f\u4ecef[s][0]\u5230f[n*m][...]\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u94a5\u5319\u72b6\u6001\u672a\u77e5\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u5230\u8fbe\u7ec8\u70b9\u5373\u53ef\uff0c\u8f6c\u79fb\u8fc7\u7a0b\u5982\u4e0b: \u6709\u5899\uff1a\u4e0d\u8f6c\u79fb \u6709\u95e8\u65e0\u94a5\u5319\uff1a\u4e0d\u8f6c\u79fb \u6709\u95e8\u6709\u94a5\u5319\uff1a\u6b63\u5e38\u8f6c\u79fb \u65e0\u95e8\u65e0\u5899\uff1a\u6b63\u5e38\u8f6c\u79fb \u662f\u94a5\u5319\uff1a\u8f6c\u79fb\u65f6\u6b65\u6570\u4e0d\u53d8 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 11 , M = 360 , K = 1 << 10 ; // \u5bf9\u94a5\u5319\u8fdb\u884c\u72b6\u6001\u538b\u7f29 int n , m , p ; int head [ N * N ], e [ M ], w [ M ], ne [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } typedef pair < int , int > PII ; int g [ N ][ N ]; int dis [ N * N ][ K ]; bool vis [ N * N ][ K ]; struct node_ { int x ; int dis ; int key ; friend bool operator < ( const node_ x , const node_ y ) { return x . dis > y . dis ; } }; priority_queue < node_ > heap ; set < PII > edge ; int key [ N * N ]; void init () { memset ( head , -1 , sizeof ( head )); for ( int i = 1 , t = 0 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) g [ i ][ j ] =++ t ; // \u4e8c\u7ef4\u6620\u5c04\u6210\u4e00\u7ef4 } int dir [ 4 ][ 2 ] = { 0 , 1 , 0 , -1 , 1 , 0 , -1 , 0 }; void bulid () { for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) for ( int kk = 0 ; kk <= 3 ; kk ++ ) { int a = i + dir [ kk ][ 0 ]; int b = j + dir [ kk ][ 1 ]; if ( a < 1 || b < 1 || a > n || b > m ) continue ; int ga = g [ a ][ b ], gb = g [ i ][ j ]; if ( ! edge . count ({ ga , gb })) add ( ga , gb , 0 ); //\u6ca1\u6709\u5899\u5219\u5efa\u957f\u5ea6\u4e3a0\u7684\u8fb9,\u56e0\u4e3a\u679a\u4e3e\u4e0a\u4e0b\u5de6\u53f3\uff0c\u6240\u4ee5\u662f\u6709\u5411\u8fb9 } } void djs ( int sx , int sy ) { while ( heap . size ()) heap . pop (); memset ( dis , 0x3f , sizeof ( dis )); dis [ 1 ][ 0 ] = 0 ; heap . push ({ 1 , 0 , 0 }); while ( heap . size ()) { auto cur = heap . top (); heap . pop (); int pos = cur . x , k = cur . key ; if ( vis [ pos ][ k ]) continue ; vis [ pos ][ k ] = true ; if ( pos == n * m ) { cout << dis [ pos ][ k ] << endl ; return ; } if ( key [ pos ]) // \u5f53\u524d\u662f\u94a5\u5319\uff0c\u8f6c\u79fb\u65f6\u6b65\u6570\u4e0d\u53d8 { int state = k | key [ pos ]; if ( dis [ pos ][ state ] > dis [ pos ][ k ]) { dis [ pos ][ state ] = dis [ pos ][ k ]; heap . push ({ pos , dis [ pos ][ state ], state }); } } for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int t = e [ i ]; if ( w [ i ] && ! (( k >> w [ i ] - 1 ) & 1 )) continue ; // \u6709\u95e8\u65e0\u94a5\u5319\u4e0d\u8f6c\u79fb if ( dis [ t ][ k ] > dis [ pos ][ k ] + 1 ) // \u6709\u95e8\u6709\u94a5\u5319\u6216\u65e0\u95e8\u65e0\u5899\u8f6c\u79fb { dis [ t ][ k ] = dis [ pos ][ k ] + 1 ; heap . push ({ t , dis [ t ][ k ], k }); } } } cout << \"-1\" << endl ; } int main () { cin >> n >> m >> p ; int k ; cin >> k ; init (); for ( int i = 1 ; i <= k ; i ++ ) { int x1 , y1 , x2 , y2 , gg ; cin >> x1 >> y1 >> x2 >> y2 >> gg ; int a = g [ x1 ][ y1 ], b = g [ x2 ][ y2 ]; edge . insert ({ a , b }); // \u5899\u6216\u95e8\u7684\u96c6\u5408 edge . insert ({ b , a }); if ( gg ) // \u662f\u95e8\u7684\u8bdd\u5b58\u4e0b\u6765 { add ( a , b , gg ); add ( b , a , gg ); } } bulid (); // \u5b58\u6ca1\u6709\u95e8\u6216\u5899\u7684\u4e24\u4e2a\u683c int s ; cin >> s ; for ( int i = 1 ; i <= s ; i ++ ) { int x , y , gg ; cin >> x >> y >> gg ; key [ g [ x ][ y ]] |= ( 1 << gg - 1 ); // \u4e00\u7ef4\u72b6\u6001\u5b58\u4e0b\u94a5\u5319 } djs ( 1 , 1 ); return 0 ; } \u4f8b3.\u6700\u77ed\u8def\u8ba1\u6570 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a N \u4e2a\u9876\u70b9 M \u6761\u8fb9\u7684\u65e0\u5411\u65e0\u6743\u56fe\uff0c\u9876\u70b9\u7f16\u53f7\u4e3a 1 \u5230 N\u3002 \u95ee\u4ece\u9876\u70b9 1 \u5f00\u59cb\uff0c\u5230\u5176\u4ed6\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u51e0\u6761\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b 2 \u4e2a\u6b63\u6574\u6570 N,M\uff0c\u4e3a\u56fe\u7684\u9876\u70b9\u6570\u4e0e\u8fb9\u6570\u3002 \u63a5\u4e0b\u6765 M \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 x,y\uff0c\u8868\u793a\u6709\u4e00\u6761\u9876\u70b9 x \u8fde\u5411\u9876\u70b9 y \u7684\u8fb9\uff0c\u8bf7\u6ce8\u610f\u53ef\u80fd\u6709\u81ea\u73af\u4e0e\u91cd\u8fb9\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa N \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7b2c i \u884c\u8f93\u51fa\u4ece\u9876\u70b9 1 \u5230\u9876\u70b9 i \u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u6700\u77ed\u8def\uff0c\u7531\u4e8e\u7b54\u6848\u6709\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9 100003 \u53d6\u6a21\u540e\u7684\u7ed3\u679c\u5373\u53ef\u3002 \u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u9876\u70b9 i \u5219\u8f93\u51fa 0\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226410^5, 1\u2264N\u226410^5, 1\u2264M\u22642\u00d710^5 1\u2264M\u22642\u00d710^5 \u8f93\u5165\u6837\u4f8b 5 7 1 2 1 3 2 4 3 4 2 3 4 5 4 5 \u8f93\u51fa\u6837\u4f8b 1 1 1 2 4 \u9898\u89e3 \u00b6 f[i]\u8868\u793a\u4ece\u8d77\u59cb\u70b9\u5230i\u7684\u6700\u77ed\u8def\u5f84\u7684\u6761\u6570\uff0c\u8f6c\u79fb\u72b6\u6001\u5982\u4e0b\uff1a \u5f53 dis[j] > dis[u] + 1 dis[j] > dis[u] + 1 \u65f6\uff1af[j] = f[u] \u5f53 dis[j] == dis[u] + 1 dis[j] == dis[u] + 1 \u65f6\uff1af[j] += f[u] \u5f53 dis[j] < dis[u] + 1 dis[j] < dis[u] + 1 \u65f6\uff1a\u4e0d\u66f4\u65b0 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 , M = 4e5 + 5 , mod = 1e5 + 3 ; int head [ N ], e [ M ], ne [ M ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int dis [ N ]; bool vis [ N ]; int cnt [ N ]; // \u8bb0\u5f55\u6761\u6570 queue < int > q ; void djs ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; vis [ s ] = true ; cnt [ s ] = 1 ; q . push ( s ); while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int t = e [ i ]; if ( dis [ t ] >= dis [ pos ] + 1 ) { if ( dis [ t ] > dis [ pos ] + 1 ) { dis [ t ] = dis [ pos ] + 1 ; cnt [ t ] = cnt [ pos ]; if ( ! vis [ t ]) { vis [ t ] = true ; q . push ( t ); } } else { cnt [ t ] += cnt [ pos ]; cnt [ t ] %= mod ; } } } } } int main () { int n , m ; cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b ; cin >> a >> b ; add ( a , b ); add ( b , a ); } djs ( 1 ); for ( int i = 1 ; i <= n ; i ++ ) cout << cnt [ i ] << endl ; return 0 ; }","title":"\u5355\u6e90\u6700\u77ed\u8def\u5e94\u7528"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_1","text":"\u4ece\u56fe\u4e2d\u7684\u67d0\u4e2a\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\uff0c\u79f0\u4e3a\u6700\u77ed\u8def\u5f84 \u89e3\u51b3\u95ee\u9898\u6709\u4ee5\u4e0b\u7b97\u6cd5: \u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5(Dijkstra\u7b97\u6cd5) \u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5(Floyd\u7b97\u6cd5) Bellman-Ford\u7b97\u6cd5 SPFA\u7b97\u6cd5 \u672c\u7ae0\u8bb2\u89e3\u6700\u77ed\u8def\u7684\u4f8b\u9898","title":"\u6982\u8ff0"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u6709\u4e00\u5929\uff0c\u742a\u742a\u60f3\u4e58\u5750\u516c\u4ea4\u8f66\u53bb\u62dc\u8bbf\u5979\u7684\u4e00\u4f4d\u670b\u53cb\u3002 \u7531\u4e8e\u742a\u742a\u975e\u5e38\u5bb9\u6613\u6655\u8f66\uff0c\u6240\u4ee5\u5979\u60f3\u5c3d\u5feb\u5230\u8fbe\u670b\u53cb\u5bb6\u3002 \u73b0\u5728\u7ed9\u5b9a\u4f60\u4e00\u5f20\u57ce\u5e02\u4ea4\u901a\u8def\u7ebf\u56fe\uff0c\u4e0a\u9762\u5305\u542b\u57ce\u5e02\u7684\u516c\u4ea4\u7ad9\u53f0\u4ee5\u53ca\u516c\u4ea4\u7ebf\u8def\u7684\u5177\u4f53\u5206\u5e03\u3002 \u5df2\u77e5\u57ce\u5e02\u4e2d\u5171\u5305\u542b n \u4e2a\u8f66\u7ad9\uff08\u7f16\u53f71~n\uff09\u4ee5\u53ca m \u6761\u516c\u4ea4\u7ebf\u8def\u3002 \u6bcf\u6761\u516c\u4ea4\u7ebf\u8def\u90fd\u662f \u5355\u5411\u7684\uff0c\u4ece\u4e00\u4e2a\u8f66\u7ad9\u51fa\u53d1\u76f4\u63a5\u5230\u8fbe\u53e6\u4e00\u4e2a\u8f66\u7ad9\uff0c\u4e24\u4e2a\u8f66\u7ad9\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u591a\u6761\u516c\u4ea4\u7ebf\u8def\u3002 \u742a\u742a\u7684\u670b\u53cb\u4f4f\u5728 s \u53f7\u8f66\u7ad9\u9644\u8fd1\u3002 \u742a\u742a\u53ef\u4ee5\u5728\u4efb\u4f55\u8f66\u7ad9\u9009\u62e9\u6362\u4e58\u5176\u5b83\u516c\u5171\u6c7d\u8f66\u3002 \u8bf7\u627e\u51fa\u742a\u742a\u5230\u8fbe\u5979\u7684\u670b\u53cb\u5bb6\uff08\u9644\u8fd1\u7684\u516c\u4ea4\u8f66\u7ad9\uff09\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n,m,s\uff0c\u5206\u522b\u8868\u793a\u8f66\u7ad9\u6570\u91cf\uff0c\u516c\u4ea4\u7ebf\u8def\u6570\u91cf\u4ee5\u53ca\u670b\u53cb\u5bb6\u9644\u8fd1\u8f66\u7ad9\u7684\u7f16\u53f7\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 p,q,t\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u7ebf\u8def\u4ece\u8f66\u7ad9 p \u5230\u8fbe\u8f66\u7ad9 q\uff0c\u7528\u65f6\u4e3a t\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570 w\uff0c\u8868\u793a\u742a\u742a\u5bb6\u9644\u8fd1\u5171\u6709 w \u4e2a\u8f66\u7ad9\uff0c\u5979\u53ef\u4ee5\u5728\u8fd9 w \u4e2a\u8f66\u7ad9\u4e2d\u9009\u62e9\u4e00\u4e2a\u8f66\u7ad9\u4f5c\u4e3a\u59cb\u53d1\u7ad9\u3002 \u518d\u4e00\u884c\uff0c\u5305\u542b w \u4e2a\u6574\u6570\uff0c\u8868\u793a\u742a\u742a\u5bb6\u9644\u8fd1\u7684 w \u4e2a\u8f66\u7ad9\u7684\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u7ed3\u679c\uff0c\u8868\u793a\u6240\u9700\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u3002 \u5982\u679c\u65e0\u6cd5\u8fbe\u5230\u670b\u53cb\u5bb6\u7684\u8f66\u7ad9\uff0c\u5219\u8f93\u51fa -1\u3002 \u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002 \u6570\u636e\u8303\u56f4 n\u22641000,m\u226420000, n\u22641000,m\u226420000, 1\u2264s\u2264n, 1\u2264s\u2264n, 0<w<n, 0<w<n, 0<t\u22641000 0<t\u22641000 \u8f93\u5165\u6837\u4f8b 5 8 5 1 2 2 1 5 3 1 3 4 2 4 7 2 5 6 2 3 5 3 5 1 4 5 1 2 2 3 4 3 4 1 2 3 1 3 4 2 3 2 1 1 \u8f93\u51fa\u6837\u4f8b 1 -1","title":"\u4f8b1.\u9009\u62e9\u6700\u4f73\u7ebf\u8def"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_2","text":"\u5bf9\u4e8e\u591a\u8d77\u70b9\u5230\u4efb\u610f\u7ec8\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u7684\u8d85\u7ea7\u6e90\u70b9\uff0c\u8fd9\u4e2a\u70b9\u4e0e\u6240\u6709\u8d77\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff0c\u6700\u540e\u53ea\u9700\u8981\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_3","text":"#include <bits/stdc++.h> using namespace std ; int n , m , s ; const int N = 1005 , M = 4e4 + 5 ; int head [ N ], e [ M ], w [ M ], ne [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int dis [ N ]; bool vis [ N ]; typedef pair < int , int > PII ; priority_queue < PII , vector < PII > , greater < PII > > heap ; void djs ( int s , int t ) { while ( heap . size ()) heap . pop (); memset ( vis , false , sizeof ( vis )); memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; heap . push ({ 0 , s }); while ( heap . size ()) { auto cur = heap . top (); heap . pop (); int pos = cur . second ; if ( vis [ pos ]) continue ; vis [ pos ] = true ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int j = e [ i ]; if ( dis [ j ] > dis [ pos ] + w [ i ]) { dis [ j ] = dis [ pos ] + w [ i ]; heap . push ({ dis [ j ], j }); } } } if ( dis [ t ] == 0x3f3f3f3f ) cout << \"-1\" << endl ; else cout << dis [ t ] << endl ; } int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); while ( cin >> n >> m >> s ) { idx = 0 ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b , c ; cin >> a >> b >> c ; add ( a , b , c ); } int w ; cin >> w ; for ( int i = 1 ; i <= w ; i ++ ) // \u8d85\u7ea7\u6e90\u70b9 { int a ; cin >> a ; add ( 0 , a , 0 ); } djs ( 0 , s ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 1944 \u5e74\uff0c\u7279\u79cd\u5175\u9ea6\u514b\u63a5\u5230\u56fd\u9632\u90e8\u7684\u547d\u4ee4\uff0c\u8981\u6c42\u7acb\u5373\u8d76\u8d74\u592a\u5e73\u6d0b\u4e0a\u7684\u4e00\u4e2a\u5b64\u5c9b\uff0c\u8425\u6551\u88ab\u654c\u519b\u4fd8\u864f\u7684\u5927\u5175\u745e\u6069\u3002 \u745e\u6069\u88ab\u5173\u62bc\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\uff0c\u8ff7\u5bab\u5730\u5f62\u590d\u6742\uff0c\u4f46\u5e78\u597d\u9ea6\u514b\u5f97\u5230\u4e86\u8ff7\u5bab\u7684\u5730\u5f62\u56fe\u3002 \u8ff7\u5bab\u7684\u5916\u5f62\u662f\u4e00\u4e2a\u957f\u65b9\u5f62\uff0c\u5176\u5357\u5317\u65b9\u5411\u88ab\u5212\u5206\u4e3a N \u884c\uff0c\u4e1c\u897f\u65b9\u5411\u88ab\u5212\u5206\u4e3a M \u5217\uff0c \u4e8e\u662f\u6574\u4e2a\u8ff7\u5bab\u88ab\u5212\u5206\u4e3a N\u00d7M \u4e2a\u5355\u5143\u3002 \u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u4f4d\u7f6e\u53ef\u7528\u4e00\u4e2a\u6709\u5e8f\u6570\u5bf9 (\u5355\u5143\u7684\u884c\u53f7, \u5355\u5143\u7684\u5217\u53f7) \u6765\u8868\u793a\u3002 \u5357\u5317\u6216\u4e1c\u897f\u65b9\u5411\u76f8\u90bb\u7684 2 \u4e2a\u5355\u5143\u4e4b\u95f4\u53ef\u80fd\u4e92\u901a\uff0c\u4e5f\u53ef\u80fd\u6709\u4e00\u6247\u9501\u7740\u7684\u95e8\uff0c\u6216\u8005\u662f\u4e00\u5835\u4e0d\u53ef\u903e\u8d8a\u7684\u5899\u3002 \u6ce8\u610f\uff1a \u95e8\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u5411\u7a7f\u8fc7\uff0c\u5373\u53ef\u4ee5\u770b\u6210\u4e00\u6761\u65e0\u5411\u8fb9\u3002 \u8ff7\u5bab\u4e2d\u6709\u4e00\u4e9b\u5355\u5143\u5b58\u653e\u7740\u94a5\u5319\uff0c\u540c\u4e00\u4e2a\u5355\u5143\u53ef\u80fd\u5b58\u653e \u591a\u628a\u94a5\u5319\uff0c\u5e76\u4e14\u6240\u6709\u7684\u95e8\u88ab\u5206\u6210 P \u7c7b\uff0c\u6253\u5f00\u540c\u4e00\u7c7b\u7684\u95e8\u7684\u94a5\u5319\u76f8\u540c\uff0c\u4e0d\u540c\u7c7b\u95e8\u7684\u94a5\u5319\u4e0d\u540c\u3002 \u5927\u5175\u745e\u6069\u88ab\u5173\u62bc\u5728\u8ff7\u5bab\u7684\u4e1c\u5357\u89d2\uff0c\u5373 (N,M) \u5355\u5143\u91cc\uff0c\u5e76\u5df2\u7ecf\u660f\u8ff7\u3002 \u8ff7\u5bab\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u5728\u897f\u5317\u89d2\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u9ea6\u514b\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165 (1,1) \u5355\u5143\u3002 \u53e6\u5916\uff0c\u9ea6\u514b\u4ece\u4e00\u4e2a\u5355\u5143\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u76f8\u90bb\u5355\u5143\u7684\u65f6\u95f4\u4e3a 1\uff0c\u62ff\u53d6\u6240\u5728\u5355\u5143\u7684\u94a5\u5319\u7684\u65f6\u95f4\u4ee5\u53ca\u7528\u94a5\u5319\u5f00\u95e8\u7684\u65f6\u95f4\u53ef\u5ffd\u7565\u4e0d\u8ba1\u3002 \u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5e2e\u52a9\u9ea6\u514b\u4ee5\u6700\u5feb\u7684\u65b9\u5f0f\u5230\u8fbe\u745e\u6069\u6240\u5728\u5355\u5143\uff0c\u8425\u6551\u5927\u5175\u745e\u6069\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6574\u6570,\u5206\u522b\u8868\u793a N,M,P \u7684\u503c\u3002 \u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u6574\u6570 k\uff0c\u8868\u793a\u8ff7\u5bab\u4e2d\u95e8\u548c\u5899\u7684\u603b\u6570\u3002 \u63a5\u4e0b\u6765 k \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e94\u4e2a\u6574\u6570\uff0cXi1,Yi1,Xi2,Yi2,Gi\uff1a\u5f53 Gi\u22651 \u65f6\uff0c\u8868\u793a (Xi1,Yi1) \u5355\u5143\u4e0e (Xi2,Yi2) \u5355\u5143\u4e4b\u95f4\u6709\u4e00\u6247\u7b2c Gi \u7c7b\u7684\u95e8\uff0c\u5f53 Gi=0 \u65f6\uff0c\u8868\u793a (Xi1,Yi1) \u5355\u5143\u4e0e (Xi2,Yi2) \u5355\u5143\u4e4b\u95f4\u6709\u4e00\u9762\u4e0d\u53ef\u903e\u8d8a\u7684\u5899\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570 S\uff0c\u8868\u793a\u8ff7\u5bab\u4e2d\u5b58\u653e\u7684\u94a5\u5319\u7684\u603b\u6570\u3002 \u63a5\u4e0b\u6765 S \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 Xi1,Yi1,Qi\uff0c\u8868\u793a (Xi1,Yi1) \u5355\u5143\u91cc\u5b58\u5728\u4e00\u4e2a\u80fd\u5f00\u542f\u7b2c Qi \u7c7b\u95e8\u7684\u94a5\u5319\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u9ea6\u514b\u8425\u6551\u5230\u5927\u5175\u745e\u6069\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u5982\u679c\u95ee\u9898\u65e0\u89e3\uff0c\u5219\u8f93\u51fa -1\u3002 \u6570\u636e\u8303\u56f4 |Xi1\u2212Xi2|+|Yi1\u2212Yi2|=1, |Xi1\u2212Xi2|+|Yi1\u2212Yi2|=1, 0\u2264Gi\u2264P, 0\u2264Gi\u2264P, 1\u2264Qi\u2264P, 1\u2264Qi\u2264P, 1\u2264N,M,P\u226410, 1\u2264N,M,P\u226410, 1\u2264k\u2264150 1\u2264k\u2264150 \u8f93\u5165\u6837\u4f8b 4 4 9 9 1 2 1 3 2 1 2 2 2 0 2 1 2 2 0 2 1 3 1 0 2 3 3 3 0 2 4 3 4 1 3 2 3 3 0 3 3 4 3 0 4 3 4 4 0 2 2 1 2 4 2 1 \u8f93\u51fa\u6837\u4f8b 14 \u6837\u4f8b\u89e3\u91ca","title":"\u4f8b2.\u62ef\u6551\u5927\u5175\u745e\u6069"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_4","text":"\u82e5\u6ca1\u6709\u94a5\u5319\u7684\u9650\u5236\uff0c\u90a3\u8fd9\u9898\u5c31\u662f\u666e\u901a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u73b0\u5728\u52a0\u4e0a\u4e86\u94a5\u5319\uff0c\u539f\u6765\u7684f[i]\u5df2\u7ecf\u4e0d\u8db3\u4ee5\u8868\u793a\u72b6\u6001\u4e86\uff0c\u9700\u8981\u65b0\u5f00\u4e00\u7ef4\u7528\u6765\u8868\u793a\u94a5\u5319\uff0c\u6ce8\u610f\u5230\u94a5\u5319\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u56e0\u6b64\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u72b6\u6001\u538b\u7f29\uff0c\u5c06\u4e8c\u7ef4\u5750\u6807\u6620\u5c04\u6210\u4e00\u7ef4\u4e4b\u540e\uff0cf[i][j]\u5c31\u8868\u793a\u8fbe\u5230\u5f53\u524d\u5728i\uff0c\u94a5\u5319\u72b6\u6001\u4e3aj\u65f6\u7684\u64cd\u4f5c\u6b65\u6570\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f\u4ecef[s][0]\u5230f[n*m][...]\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u94a5\u5319\u72b6\u6001\u672a\u77e5\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u5230\u8fbe\u7ec8\u70b9\u5373\u53ef\uff0c\u8f6c\u79fb\u8fc7\u7a0b\u5982\u4e0b: \u6709\u5899\uff1a\u4e0d\u8f6c\u79fb \u6709\u95e8\u65e0\u94a5\u5319\uff1a\u4e0d\u8f6c\u79fb \u6709\u95e8\u6709\u94a5\u5319\uff1a\u6b63\u5e38\u8f6c\u79fb \u65e0\u95e8\u65e0\u5899\uff1a\u6b63\u5e38\u8f6c\u79fb \u662f\u94a5\u5319\uff1a\u8f6c\u79fb\u65f6\u6b65\u6570\u4e0d\u53d8","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_5","text":"#include <bits/stdc++.h> using namespace std ; const int N = 11 , M = 360 , K = 1 << 10 ; // \u5bf9\u94a5\u5319\u8fdb\u884c\u72b6\u6001\u538b\u7f29 int n , m , p ; int head [ N * N ], e [ M ], w [ M ], ne [ M ], idx = 0 ; void add ( int a , int b , int c ) { e [ idx ] = b ; w [ idx ] = c ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } typedef pair < int , int > PII ; int g [ N ][ N ]; int dis [ N * N ][ K ]; bool vis [ N * N ][ K ]; struct node_ { int x ; int dis ; int key ; friend bool operator < ( const node_ x , const node_ y ) { return x . dis > y . dis ; } }; priority_queue < node_ > heap ; set < PII > edge ; int key [ N * N ]; void init () { memset ( head , -1 , sizeof ( head )); for ( int i = 1 , t = 0 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) g [ i ][ j ] =++ t ; // \u4e8c\u7ef4\u6620\u5c04\u6210\u4e00\u7ef4 } int dir [ 4 ][ 2 ] = { 0 , 1 , 0 , -1 , 1 , 0 , -1 , 0 }; void bulid () { for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) for ( int kk = 0 ; kk <= 3 ; kk ++ ) { int a = i + dir [ kk ][ 0 ]; int b = j + dir [ kk ][ 1 ]; if ( a < 1 || b < 1 || a > n || b > m ) continue ; int ga = g [ a ][ b ], gb = g [ i ][ j ]; if ( ! edge . count ({ ga , gb })) add ( ga , gb , 0 ); //\u6ca1\u6709\u5899\u5219\u5efa\u957f\u5ea6\u4e3a0\u7684\u8fb9,\u56e0\u4e3a\u679a\u4e3e\u4e0a\u4e0b\u5de6\u53f3\uff0c\u6240\u4ee5\u662f\u6709\u5411\u8fb9 } } void djs ( int sx , int sy ) { while ( heap . size ()) heap . pop (); memset ( dis , 0x3f , sizeof ( dis )); dis [ 1 ][ 0 ] = 0 ; heap . push ({ 1 , 0 , 0 }); while ( heap . size ()) { auto cur = heap . top (); heap . pop (); int pos = cur . x , k = cur . key ; if ( vis [ pos ][ k ]) continue ; vis [ pos ][ k ] = true ; if ( pos == n * m ) { cout << dis [ pos ][ k ] << endl ; return ; } if ( key [ pos ]) // \u5f53\u524d\u662f\u94a5\u5319\uff0c\u8f6c\u79fb\u65f6\u6b65\u6570\u4e0d\u53d8 { int state = k | key [ pos ]; if ( dis [ pos ][ state ] > dis [ pos ][ k ]) { dis [ pos ][ state ] = dis [ pos ][ k ]; heap . push ({ pos , dis [ pos ][ state ], state }); } } for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int t = e [ i ]; if ( w [ i ] && ! (( k >> w [ i ] - 1 ) & 1 )) continue ; // \u6709\u95e8\u65e0\u94a5\u5319\u4e0d\u8f6c\u79fb if ( dis [ t ][ k ] > dis [ pos ][ k ] + 1 ) // \u6709\u95e8\u6709\u94a5\u5319\u6216\u65e0\u95e8\u65e0\u5899\u8f6c\u79fb { dis [ t ][ k ] = dis [ pos ][ k ] + 1 ; heap . push ({ t , dis [ t ][ k ], k }); } } } cout << \"-1\" << endl ; } int main () { cin >> n >> m >> p ; int k ; cin >> k ; init (); for ( int i = 1 ; i <= k ; i ++ ) { int x1 , y1 , x2 , y2 , gg ; cin >> x1 >> y1 >> x2 >> y2 >> gg ; int a = g [ x1 ][ y1 ], b = g [ x2 ][ y2 ]; edge . insert ({ a , b }); // \u5899\u6216\u95e8\u7684\u96c6\u5408 edge . insert ({ b , a }); if ( gg ) // \u662f\u95e8\u7684\u8bdd\u5b58\u4e0b\u6765 { add ( a , b , gg ); add ( b , a , gg ); } } bulid (); // \u5b58\u6ca1\u6709\u95e8\u6216\u5899\u7684\u4e24\u4e2a\u683c int s ; cin >> s ; for ( int i = 1 ; i <= s ; i ++ ) { int x , y , gg ; cin >> x >> y >> gg ; key [ g [ x ][ y ]] |= ( 1 << gg - 1 ); // \u4e00\u7ef4\u72b6\u6001\u5b58\u4e0b\u94a5\u5319 } djs ( 1 , 1 ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a N \u4e2a\u9876\u70b9 M \u6761\u8fb9\u7684\u65e0\u5411\u65e0\u6743\u56fe\uff0c\u9876\u70b9\u7f16\u53f7\u4e3a 1 \u5230 N\u3002 \u95ee\u4ece\u9876\u70b9 1 \u5f00\u59cb\uff0c\u5230\u5176\u4ed6\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u51e0\u6761\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b 2 \u4e2a\u6b63\u6574\u6570 N,M\uff0c\u4e3a\u56fe\u7684\u9876\u70b9\u6570\u4e0e\u8fb9\u6570\u3002 \u63a5\u4e0b\u6765 M \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 x,y\uff0c\u8868\u793a\u6709\u4e00\u6761\u9876\u70b9 x \u8fde\u5411\u9876\u70b9 y \u7684\u8fb9\uff0c\u8bf7\u6ce8\u610f\u53ef\u80fd\u6709\u81ea\u73af\u4e0e\u91cd\u8fb9\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa N \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7b2c i \u884c\u8f93\u51fa\u4ece\u9876\u70b9 1 \u5230\u9876\u70b9 i \u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u6700\u77ed\u8def\uff0c\u7531\u4e8e\u7b54\u6848\u6709\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9 100003 \u53d6\u6a21\u540e\u7684\u7ed3\u679c\u5373\u53ef\u3002 \u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u9876\u70b9 i \u5219\u8f93\u51fa 0\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226410^5, 1\u2264N\u226410^5, 1\u2264M\u22642\u00d710^5 1\u2264M\u22642\u00d710^5 \u8f93\u5165\u6837\u4f8b 5 7 1 2 1 3 2 4 3 4 2 3 4 5 4 5 \u8f93\u51fa\u6837\u4f8b 1 1 1 2 4","title":"\u4f8b3.\u6700\u77ed\u8def\u8ba1\u6570"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_6","text":"f[i]\u8868\u793a\u4ece\u8d77\u59cb\u70b9\u5230i\u7684\u6700\u77ed\u8def\u5f84\u7684\u6761\u6570\uff0c\u8f6c\u79fb\u72b6\u6001\u5982\u4e0b\uff1a \u5f53 dis[j] > dis[u] + 1 dis[j] > dis[u] + 1 \u65f6\uff1af[j] = f[u] \u5f53 dis[j] == dis[u] + 1 dis[j] == dis[u] + 1 \u65f6\uff1af[j] += f[u] \u5f53 dis[j] < dis[u] + 1 dis[j] < dis[u] + 1 \u65f6\uff1a\u4e0d\u66f4\u65b0","title":"\u9898\u89e3"},{"location":"ACM/%E5%9B%BE%E8%AE%BA/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BA%94%E7%94%A8/#_7","text":"#include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 , M = 4e5 + 5 , mod = 1e5 + 3 ; int head [ N ], e [ M ], ne [ M ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int dis [ N ]; bool vis [ N ]; int cnt [ N ]; // \u8bb0\u5f55\u6761\u6570 queue < int > q ; void djs ( int s ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; vis [ s ] = true ; cnt [ s ] = 1 ; q . push ( s ); while ( q . size ()) { int pos = q . front (); q . pop (); vis [ pos ] = false ; for ( int i = head [ pos ]; i != -1 ; i = ne [ i ]) { int t = e [ i ]; if ( dis [ t ] >= dis [ pos ] + 1 ) { if ( dis [ t ] > dis [ pos ] + 1 ) { dis [ t ] = dis [ pos ] + 1 ; cnt [ t ] = cnt [ pos ]; if ( ! vis [ t ]) { vis [ t ] = true ; q . push ( t ); } } else { cnt [ t ] += cnt [ pos ]; cnt [ t ] %= mod ; } } } } } int main () { int n , m ; cin >> n >> m ; memset ( head , -1 , sizeof ( head )); for ( int i = 1 ; i <= m ; i ++ ) { int a , b ; cin >> a >> b ; add ( a , b ); add ( b , a ); } djs ( 1 ); for ( int i = 1 ; i <= n ; i ++ ) cout << cnt [ i ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/","text":"\u6982\u8ff0 \u00b6 NTT\u7528\u6765\u52a0\u901f\u591a\u9879\u5f0f\u4e58\u6cd5\uff0c\u6700\u5927\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u53d6\u6a21\uff0c\u662fFFT\u53d6\u6a21\u5347\u7ea7\u7248 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u9636 \u00b6 \u82e5 (a, m) == 1 (a, m) == 1 , \u4f7f\u5f97 a^d \\equiv 1(mod\\ m) a^d \\equiv 1(mod\\ m) \u7684\u6700\u5c0f\u6b63\u6574\u6570d\uff0c\u79f0\u4e3aa\u5bf9\u6a21m\u7684\u9636\uff0c\u8bb0\u4f5c \\delta_m^a \\delta_m^a \u539f\u6839 \u00b6 \u6982\u5ff5: \u8bbe m m \u4e3a\u6b63\u6574\u6570\uff0ca\u4e3a\u6574\u6570\uff0c\u82e5 \\delta_m^a=\\phi(m) \\delta_m^a=\\phi(m) \uff0c\u5219\u79f0a\u4e3a\u6a21m\u7684\u4e00\u4e2a\u539f\u6839\uff0c\u5176\u4e2d \\phi(m) \\phi(m) \u4e3am\u7684\u6b27\u62c9\u51fd\u6570 \u6027\u8d28: \u82e5 g g \u5bf9\u4e8e P P \u662f\u539f\u6839\uff0c\u5219 g^i\\ mod\\ p \\ne g^j \\ mod\\ (p\u4e3a\u8d28\u6570,\u4e14i\\ne j,1\\le i,j\\le p - 1) g^i\\ mod\\ p \\ne g^j \\ mod\\ (p\u4e3a\u8d28\u6570,\u4e14i\\ne j,1\\le i,j\\le p - 1) \u6c42\u89e3\u65b9\u6cd5 \u539f\u6839\u4e00\u822c\u6bd4\u8f83\u5c0f\uff0c\u6c42\u539f\u6839\u7684\u65b9\u6cd5\u4e00\u822c\u662f\u4ece2\u5f00\u59cb\u679a\u4e3e\uff0c\u7136\u540e\u66b4\u529b\u5224\u65ad g^{P-1} \\equiv 1\\ (mod\\ p)(p \u4e3a\u7d20\u6570) g^{P-1} \\equiv 1\\ (mod\\ p)(p \u4e3a\u7d20\u6570) \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5e38\u89c1\u6a21\u6570998244353 , 1004535809 , 469762049\u7684\u539f\u6839\u90fd\u662f3 \u4f8b1.\u6311\u9009\u961f\u53cb \u00b6 \u9898\u76ee\u94fe\u63a5 \u8f93\u5165\u6837\u4f8b 5 3 4 1 2 2 \u8f93\u51fa\u6837\u4f8b 4 \u9898\u89e3 \u00b6 \u5bf9\u4e8e\u7b2ci\u4e2a\u7fa4\uff0c\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570\u662f F_i(x) = \\sum_{j=1}^{s[i]}C_{s_i}^jx^j F_i(x) = \\sum_{j=1}^{s[i]}C_{s_i}^jx^j \u5219\u4ee4 G(x)=\\prod_{i=1}^{n} F(x) G(x)=\\prod_{i=1}^{n} F(x) \u5957NTT\u6a21\u677f\u540e [x^k]G(x) [x^k]G(x) \u5373\u4e3a\u7b54\u6848 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long #define poly vector<int> using namespace std ; const int N = 3e5 + 5 , p = 998244353 , G = 3 ; int v ; int lim = 1 , RR [ N ], L ; poly f [ N ]; int fac [ N ], infac [ N ]; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int invf ( int x ) { return qpow ( x , p - 2 , p );} void init ( int n , int mod ) { infac [ 0 ] = fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % mod ; infac [ n ] = qpow ( fac [ n ], mod - 2 , mod ); for ( int j = n ; j >= 1 ; j -- ) { infac [ j - 1 ] = infac [ j ] * j % mod ; } } int C ( int a , int b , int mod ) { if ( a < b ) return 0 ; return fac [ a ] * infac [ b ] % mod * infac [ a - b ] % mod ; } void NTT ( poly & A , int type ) { for ( int i = 0 ; i < lim ; ++ i ) if ( i < RR [ i ]) swap ( A [ i ], A [ RR [ i ]]); for ( int mid = 1 ; mid < lim ; mid <<= 1 ) { int wn = qpow ( G ,( p -1 ) / ( mid << 1 ), p ); if ( type == -1 ) wn = qpow ( wn , p -2 , p ); for ( int len = mid << 1 , pos = 0 ; pos < lim ; pos += len ) { int w = 1 ; for ( int k = 0 ; k < mid ; ++ k , w = w * wn % p ) { int x = A [ pos + k ], y = w * A [ pos + mid + k ] % p ; A [ pos + k ] = ( x + y ) % p ; A [ pos + k + mid ] = ( x - y - p ) % p ; } } } if ( type == -1 ) { int inv_n = invf ( lim ); for ( int i = 0 ; i < lim ; ++ i ) A [ i ] = A [ i ] * inv_n % p ; } } poly operator * ( poly f , poly g ) { int deg = f . size () + g . size () -1 ; for ( lim = 1 , L = 0 ; lim <= deg ; lim <<= 1 ) L ++ ; for ( int i = 0 ; i < lim ; i ++ ) RR [ i ] = ( RR [ i >> 1 ] >> 1 ) | (( i & 1 ) << L -1 ); f . resize ( lim ); g . resize ( lim ); NTT ( f , 1 ); NTT ( g , 1 ); for ( int i = 0 ; i < lim ; i ++ ) f [ i ] = f [ i ] * g [ i ] % p ; NTT ( f , -1 ); f . resize ( deg ); return f ; } poly dfs ( int l , int r ) { if ( l == r ) return f [ l ]; int mid = l + r >> 1 ; return dfs ( l , mid ) * dfs ( mid + 1 , r ); } signed main () { int n , m , k ; scanf ( \"%lld%lld%lld\" , & n , & m , & k ); init ( 1e5 + 5 , p ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%lld\" , & v ); f [ i ]. resize ( v + 1 ); for ( int j = 1 ; j <= v ; j ++ ) { f [ i ][ j ] = C ( v , j , p ); } } poly res = dfs ( 1 , m ); cout << ( res [ k ] % p + p ) % p << '\\n' ; return 0 ; } \u4f8b2.tokitsukaze and Another Protoss and Zerg \u00b6 \u9898\u76ee\u94fe\u63a5 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u9898\u89e3 \u00b6 \u5bf9\u4e8e\u7b2ci\u573a: \u4e0d\u9009\u661f\u7075:\u6709 2^{b[i]}-1 2^{b[i]}-1 \u79cd\u9009\u6cd5 \u4e0d\u9009\u866b\u65cf:\u5219\u5bf9\u4e8e\u9009j\u4e2a\u661f\u7075\u6709 C_{a[i]}^j C_{a[i]}^j \u79cd\u9009\u6cd5 \u5219\u7b2ci\u573a\u7684\u751f\u6210\u51fd\u6570\u4e3a F_i(x)=2^{b[i]}-1+\\sum_{j=1}{a[i]}C_{a[i],j}x^j F_i(x)=2^{b[i]}-1+\\sum_{j=1}{a[i]}C_{a[i],j}x^j \u4ee4 G(x)=\\prod_{i=1}^{n}F_i(x) G(x)=\\prod_{i=1}^{n}F_i(x) \u5957NTT\u677f\u5b50\u5373\u53ef\u6c42\u51fa\u6bcf\u4e00\u9879 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long #define poly vector<int> using namespace std ; const int N = 2e5 + 5 , p = 998244353 , G = 3 ; poly f [ N ]; int lim = 1 , L ; int RR [ N ]; int a [ N ], b [ N ]; int fac [ N ], infac [ N ]; int qpow ( int a , int n , int p ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % p ; a = a * a % p ; n >>= 1 ; } return res ; } int invf ( int x ) { return qpow ( x , p - 2 , p ); } void init ( int n ) { fac [ 0 ] = infac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; infac [ n ] = qpow ( fac [ n ], p - 2 , p ); for ( int i = n ; i >= 1 ; i -- ) infac [ i - 1 ] = infac [ i ] * i % p ; } int C ( int a , int b ) { if ( a < b ) return 0 ; return fac [ a ] * infac [ a - b ] % p * infac [ b ] % p ; } void NTT ( poly & A , int type ) { for ( int i = 0 ; i < lim ; ++ i ) if ( i < RR [ i ]) swap ( A [ i ], A [ RR [ i ]]); for ( int mid = 1 ; mid < lim ; mid <<= 1 ) { int wn = qpow ( G ,( p -1 ) / ( mid << 1 ), p ); if ( type == -1 ) wn = qpow ( wn , p -2 , p ); for ( int len = mid << 1 , pos = 0 ; pos < lim ; pos += len ) { int w = 1 ; for ( int k = 0 ; k < mid ; ++ k , w = w * wn % p ) { int x = A [ pos + k ], y = w * A [ pos + mid + k ] % p ; A [ pos + k ] = ( x + y ) % p ; A [ pos + k + mid ] = ( x - y - p ) % p ; } } } if ( type == -1 ) { int inv_n = invf ( lim ); for ( int i = 0 ; i < lim ; ++ i ) A [ i ] = A [ i ] * inv_n % p ; } } poly operator * ( poly f , poly g ) { int deg = f . size () + g . size () -1 ; for ( lim = 1 , L = 0 ; lim <= deg ; lim <<= 1 ) L ++ ; for ( int i = 0 ; i < lim ; i ++ ) RR [ i ] = ( RR [ i >> 1 ] >> 1 ) | (( i & 1 ) << L -1 ); f . resize ( lim ); g . resize ( lim ); NTT ( f , 1 ); NTT ( g , 1 ); for ( int i = 0 ; i < lim ; i ++ ) f [ i ] = f [ i ] * g [ i ] % p ; NTT ( f , -1 ); f . resize ( deg ); return f ; } poly dfs ( int l , int r ) { if ( l == r ) return f [ l ]; int mid = l + r >> 1 ; return dfs ( l , mid ) * dfs ( mid + 1 , r ); } signed main () { int n ; cin >> n ; int sum = 0 ; init ( 2e5 + 1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & a [ i ]); sum += a [ i ]; } sum ++ ; for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ]. resize ( a [ i ] + 2 ); for ( int j = 0 ; j <= a [ i ]; j ++ ) { if ( j == 0 ) f [ i ][ j ] = (( qpow ( 2 , b [ i ], p ) - 1 ) % p + p ) % p ; else f [ i ][ j ] = C ( a [ i ], j ); } } poly res = dfs ( 1 , n ); for ( int i = 0 ; i < sum ; i ++ ) { if ( i != sum ) printf ( \"%lld \" , ( res [ i ] % p + p ) % p ); else printf ( \"%lld\" , ( res [ i ] % p + p ) % p ); } return 0 ; } \u4f8b3.Count Set \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 p\\{1,2,3,..,n\\} p\\{1,2,3,..,n\\} \u548c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570k\uff0c\u8981\u6c42\u8ba1\u7b97 p p \u7684\u5b50\u96c6 T T \u7684\u6570\u91cf\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28: |T|=k |T|=k |P(T) \\cap T|=0 |P(T) \\cap T|=0 \u6ce8: P(T) P(T) \u8868\u793a P(T)=\\{y|y=p_x,x\\in T\\} P(T)=\\{y|y=p_x,x\\in T\\} \u8f93\u5165\u683c\u5f0f T T \u7ec4\u8f93\u5165 \u6bcf\u7ec4\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 n,k n,k \u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6574\u6570 P1,P2...Pn P1,P2...Pn \u8868\u793a\u7ed9\u5b9a\u7684\u6392\u5217 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\u8868\u793a\u7b54\u6848\u5bf9 998244353 998244353 \u53d6\u4f59\u7684\u7ed3\u679c \u6570\u636e\u8303\u56f4 1\\le T \\le 15 1\\le T \\le 15 1 \\le n \\le 5\\times 10^5,0\\le k \\le n 1 \\le n \\le 5\\times 10^5,0\\le k \\le n \u6240\u6709\u7684\u6837\u4f8b\u4fdd\u8bc1 \\sum n \\le 5 \\times 10^6 \\sum n \\le 5 \\times 10^6 \u8f93\u5165\u6837\u4f8b 3 5 1 5 3 2 1 4 5 2 2 5 1 3 4 10 3 10 9 3 8 6 4 5 7 2 1 \u8f93\u51fa\u6837\u4f8b 5 5 40 \u9898\u89e3 \u00b6 \u6211\u4eec\u53d1\u73b0\u7b2c i i \u4e2a\u6570\u4e0e\u7b2c p[i] p[i] \u4e2a\u6570\u663e\u7136\u4e0d\u80fd\u540c\u65f6\u9009\u62e9\uff0c\u82e5\u5c06\u6240\u6709\u7684\u9650\u5236\u6761\u4ef6\u5efa\u56fe\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u6837\u5f62\u6210\u4e86\u4e00\u4e2a\u4e00\u4e2a\u7684\u73af(\u5355\u4e2a\u70b9\u4e3a\u81ea\u73af)\uff0c\u4e0a\u8ff0\u9650\u5236\u6761\u4ef6\u4e5f\u88ab\u8f6c\u5316\u6210\u6bcf\u4e2a\u73af\u4e2d\u4e0d\u80fd\u9009\u62e9\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9 \u8981\u6c42\u5728\u6240\u6709\u7684\u73af\u4e2d\u9009 k k \u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651\u4ed6\u7684\u5b50\u95ee\u9898 \u5982\u4f55\u6c42\u5728\u4e00\u4e2a\u5927\u5c0f\u4e3am\u7684\u73af\u79cd\u9009 k k \u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff1f \u6211\u4eec\u53d1\u73b0\u9650\u5236\u6761\u4ef6\u662f\u76f8\u90bb\uff0c\u82e5\u5c06\u9009\u51fa\u7684\u70b9\u5360\u7528\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u9009\u51fa\u7684\u8fd9\u4e9b\u70b9\u4e24\u4e24\u4e0d\u76f8\u90bb\uff0c\u6ce8\u610f\u5230\u662f\u73af\uff0c\u7834\u73af\u6210\u94fe\u540e\u6211\u4eec\u5bf9\u65ad\u5f00\u5904\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba \u82e5\u65ad\u5f00\u5904\u4e0d\u662f\u9009\u4e2d\u7684\u70b9:\u6b64\u65f6\u76f8\u5f53\u4e8e\u5728 m-k m-k \u4e2a\u76f8\u540c\u7269\u4f53\u4e2d\u9009 k k \u4e2a,\u7b54\u6848\u4e3a C_{m-k}^k C_{m-k}^k \u82e5\u65ad\u5f00\u5904\u662f\u9009\u4e2d\u7684\u70b9:\u6b64\u65f6\u76f8\u5f53\u4e8e\u5728 m-2-(k-1) m-2-(k-1) \u4e2a\u76f8\u540c\u7269\u4f53\u4e2d\u9009 k-1 k-1 \u4e2a,\u7b54\u6848\u4e3a C_{m-k-1}^{k-1} C_{m-k-1}^{k-1} \u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u51fa\u6bcf\u4e2a\u73af\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570 F_i(x)=\\sum_{j=1}^{size[i]}(C_{size[i]-j-1}^{j-1}+C_{size[i]-j}^j)x^j F_i(x)=\\sum_{j=1}^{size[i]}(C_{size[i]-j-1}^{j-1}+C_{size[i]-j}^j)x^j \u7d2f\u4e58\u540e\u5f97\u5230 G(x)=\\prod_{i=1}^{cnt}F_i(x) G(x)=\\prod_{i=1}^{cnt}F_i(x) \u5219 [x^k]G(x) [x^k]G(x) \u5373\u4e3a\u7b54\u6848 \u5206\u6cbbNTT\u52a0\u901f\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define fp(i, a, b) for (int i = (a), i##_ = (b) + 1; i < i##_; ++i) #define fd(i, a, b) for (int i = (a), i##_ = (b) - 1; i > i##_; --i) #define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout) using namespace std ; const int N = 5e5 + 5 , P = 998244353 ; using arr = int [ N ]; using ll = int64_t ; /*---------------------------------------------------------------------------*/ class Cipolla { int P , I2 {}; using pll = pair < ll , ll > ; #define X first #define Y second ll mul ( ll a , ll b ) const { return a * b % P ; } pll mul ( pll a , pll b ) const { return {( a . X * b . X + I2 * a . Y % P * b . Y ) % P , ( a . X * b . Y + a . Y * b . X ) % P }; } template < class T > T POW ( T a , int b , T x ) { for (; b ; b >>= 1 , a = mul ( a , a )) if ( b & 1 ) x = mul ( x , a ); return x ; } public : Cipolla ( int p = 0 ) : P ( p ) {} pair < int , int > sqrt ( int n ) { int a = rand (), x ; if ( ! ( n %= P )) return { 0 , 0 }; if ( POW ( n , ( P - 1 ) >> 1 , 1 ) == P - 1 ) return { -1 , -1 }; while ( POW ( I2 = (( ll ) a * a - n + P ) % P , ( P - 1 ) >> 1 , 1 ) == 1 ) a = rand (); x = ( int ) POW ( pll { a , 1 }, ( P + 1 ) >> 1 , { 1 , 0 }). X ; if ( 2 * x > P ) x = P - x ; return { x , P - x }; } #undef X #undef Y }; /*---------------------------------------------------------------------------*/ #define ADD(a, b) (((a) += (b)) >= P ? (a) -=P : 0) // (a += b) %= P #define SUB(a, b) (((a) -= (b)) < 0 ? (a) += P: 0) // ((a -= b) += P) %= P #define MUL(a, b) ((ll) (a) * (b) % P) //vector<int> getInv(int L) { // vector<int> inv(L); inv[1] = 1; // fp(i, 1, L - 1) inv[i] = MUL((P - P / i), inv[P % i]); // return inv; //} //auto inv = getInv(N); // NOLINT int POW ( ll a , int b = P - 2 , ll x = 1 ) { for (; b ; b >>= 1 , a = a * a % P ) if ( b & 1 ) x = x * a % P ; return x ; } //int INV(int a) { return a < N ? inv[a] : POW(a); } namespace NTT { const int g = 3 ; vector < int > Omega ( int L ) { int wn = POW ( g , P / L ); vector < int > w ( L ); w [ L >> 1 ] = 1 ; fp ( i , L / 2 + 1 , L - 1 ) w [ i ] = MUL ( w [ i - 1 ], wn ); fd ( i , L / 2 - 1 , 1 ) w [ i ] = w [ i << 1 ]; return w ; } auto W = Omega ( 1 << 21 ); // NOLINT void DIF ( int * a , int n ) { for ( int k = n >> 1 ; k ; k >>= 1 ) for ( int i = 0 , y ; i < n ; i += k << 1 ) fp ( j , 0 , k - 1 ) y = a [ i + j + k ], a [ i + j + k ] = MUL ( a [ i + j ] - y + P , W [ k + j ]), ADD ( a [ i + j ], y ); } void IDIT ( int * a , int n ) { for ( int k = 1 ; k < n ; k <<= 1 ) for ( int i = 0 , x , y ; i < n ; i += k << 1 ) fp ( j , 0 , k - 1 ) x = a [ i + j ], y = MUL ( a [ i + j + k ], W [ k + j ]), a [ i + j + k ] = x - y < 0 ? x - y + P : x - y , ADD ( a [ i + j ], y ); int Inv = P - ( P - 1 ) / n ; fp ( i , 0 , n - 1 ) a [ i ] = MUL ( a [ i ], Inv ); reverse ( a + 1 , a + n ); } } namespace Polynomial { using Poly = std :: vector < int > ; // mul/div int Poly & operator *= ( Poly & a , int b ) { for ( auto & x : a ) x = MUL ( x , b ); return a ; } Poly operator * ( Poly a , int b ) { return a *= b ; } Poly operator * ( int a , Poly b ) { return b * a ; } Poly & operator /= ( Poly & a , int b ) { return a *= POW ( b ); } Poly operator / ( Poly a , int b ) { return a /= b ; } // Poly add/sub Poly & operator += ( Poly & a , Poly b ) { a . resize ( max ( a . size (), b . size ())); fp ( i , 0 , b . size () - 1 ) ADD ( a [ i ], b [ i ]); return a ; } Poly operator + ( Poly a , Poly b ) { return a += b ; } Poly & operator -= ( Poly & a , Poly b ) { a . resize ( max ( a . size (), b . size ())); fp ( i , 0 , b . size () - 1 ) SUB ( a [ i ], b [ i ]); return a ; } Poly operator - ( Poly a , Poly b ) { return a -= b ; } // Poly mul void DFT ( Poly & a ) { NTT :: DIF ( a . data (), a . size ()); } void IDFT ( Poly & a ) { NTT :: IDIT ( a . data (), a . size ()); } int norm ( int n ) { return 1 << ( 32 - __builtin_clz ( n - 1 )); } void norm ( Poly & a ) { if ( ! a . empty ()) a . resize ( norm ( a . size ()), 0 ); } Poly & dot ( Poly & a , Poly & b ) { fp ( i , 0 , a . size () - 1 ) a [ i ] = MUL ( a [ i ], b [ i ]); return a ; } Poly operator * ( Poly a , Poly b ) { int n = a . size () + b . size () - 1 , L = norm ( n ); if ( a . size () <= 8 || b . size () <= 8 ) { Poly c ( n ); fp ( i , 0 , a . size () - 1 ) fp ( j , 0 , b . size () - 1 ) c [ i + j ] = ( c [ i + j ] + ( ll ) a [ i ] * b [ j ]) % P ; return c ; } a . resize ( L ), b . resize ( L ); DFT ( a ), DFT ( b ), dot ( a , b ), IDFT ( a ); return a . resize ( n ), a ; } // Poly inv Poly Inv2k ( Poly a ) { // a.size() = 2^k int n = a . size (), m = n >> 1 ; if ( n == 1 ) return { POW ( a [ 0 ])}; Poly b = Inv2k ( Poly ( a . begin (), a . begin () + m )), c = b ; b . resize ( n ), DFT ( a ), DFT ( b ), dot ( a , b ), IDFT ( a ); fp ( i , 0 , n - 1 ) a [ i ] = i < m ? 0 : P - a [ i ]; DFT ( a ), dot ( a , b ), IDFT ( a ); return move ( c . begin (), c . end (), a . begin ()), a ; } Poly Inv ( Poly a ) { int n = a . size (); norm ( a ), a = Inv2k ( a ); return a . resize ( n ), a ; } // Poly div/mod Poly operator / ( Poly a , Poly b ){ int k = a . size () - b . size () + 1 ; if ( k < 0 ) return { 0 }; reverse ( a . begin (), a . end ()); reverse ( b . begin (), b . end ()); b . resize ( k ), a = a * Inv ( b ); a . resize ( k ), reverse ( a . begin (), a . end ()); return a ; } pair < Poly , Poly > operator % ( Poly a , const Poly & b ) { Poly c = a / b ; a -= b * c , a . resize ( b . size () - 1 ); return { c , a }; } // Poly sqrt Poly Sqrt ( Poly a ) { int n = a . size (), k = norm ( n ); Poly b = {( new Cipolla ( P )) -> sqrt ( a [ 0 ]). first }, c ; a . resize ( k * 2 , 0 ); for ( int L = 2 ; L <= k ; L <<= 1 ) { b . resize ( 2 * L , 0 ), c = Poly ( a . begin (), a . begin () + L ) * Inv ( b ); fp ( i , 0 , 2 * L - 1 ) b [ i ] = MUL ( b [ i ] + c [ i ], ( P + 1 ) / 2 ); } return b . resize ( n ), b ; } // Poly calculus void Derivative ( Poly & a ) { fp ( i , 1 , a . size () - 1 ) a [ i - 1 ] = MUL ( i , a [ i ]); a . pop_back (); } } using namespace Polynomial ; long long fac [ N + 5 ], invfac [ N + 5 ]; long long th [ N + 5 ]; long long C ( int n , int m ) { if ( n < 0 || n < m ) return 0 ; else return fac [ n ] * invfac [ m ] % P * invfac [ n - m ] % P ; } long long a [ N + 5 ], b [ N + 5 ]; Poly p [ N + 5 ]; bool vis [ N + 5 ]; int num [ N + 5 ]; int cnt = 0 ; int main () { th [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) th [ i ] = th [ i - 1 ] * 2 % P ; fac [ 0 ] = fac [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % P ; invfac [ N ] = POW ( fac [ N ]); for ( int i = N - 1 ; i >= 1 ; i -- ) invfac [ i ] = invfac [ i + 1 ] * ( i + 1 ) % P ; invfac [ 0 ] = invfac [ 1 ] = 1 ; int n , m = 0 ; int ttt ; scanf ( \"%d\" , & ttt ); while ( ttt -- ) { int k ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); memset ( vis , false , sizeof ( vis )); cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! vis [ i ]) { vis [ i ] = true ; num [ cnt ] = 1 ; long long t = a [ i ]; while ( ! vis [ t ]) { vis [ t ] = true ; num [ cnt ] ++ ; t = a [ t ]; } if ( num [ cnt ] > 1 ) cnt ++ ; } } for ( int i = 0 ; i < cnt ; i ++ ) { long long sz = num [ i ]; p [ i ]. resize ( sz + 1 ); for ( long long j = 0 ; j <= sz ; j ++ ) { p [ i ][ j ] = ( C ( sz - j - 1L L , j - 1L L ) + C ( sz - j , j )) % P ; // p[i]\u8868\u793ai\u7684\u751f\u6210\u51fd\u6570 } } function < Poly ( int , int ) > calc = [ & ]( int L , int R ) { if ( L == R ) return p [ L ]; int mid = ( L + R ) >> 1 ; return calc ( L , mid ) * calc ( mid + 1 , R ); }; auto now = calc ( 0 , cnt - 1 ); printf ( \"%d \\n \" , now [ k ]); } return 0 ; }","title":"\u5206\u6cbbNTT"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_1","text":"NTT\u7528\u6765\u52a0\u901f\u591a\u9879\u5f0f\u4e58\u6cd5\uff0c\u6700\u5927\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u53d6\u6a21\uff0c\u662fFFT\u53d6\u6a21\u5347\u7ea7\u7248","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_2","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_3","text":"\u82e5 (a, m) == 1 (a, m) == 1 , \u4f7f\u5f97 a^d \\equiv 1(mod\\ m) a^d \\equiv 1(mod\\ m) \u7684\u6700\u5c0f\u6b63\u6574\u6570d\uff0c\u79f0\u4e3aa\u5bf9\u6a21m\u7684\u9636\uff0c\u8bb0\u4f5c \\delta_m^a \\delta_m^a","title":"\u9636"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_4","text":"\u6982\u5ff5: \u8bbe m m \u4e3a\u6b63\u6574\u6570\uff0ca\u4e3a\u6574\u6570\uff0c\u82e5 \\delta_m^a=\\phi(m) \\delta_m^a=\\phi(m) \uff0c\u5219\u79f0a\u4e3a\u6a21m\u7684\u4e00\u4e2a\u539f\u6839\uff0c\u5176\u4e2d \\phi(m) \\phi(m) \u4e3am\u7684\u6b27\u62c9\u51fd\u6570 \u6027\u8d28: \u82e5 g g \u5bf9\u4e8e P P \u662f\u539f\u6839\uff0c\u5219 g^i\\ mod\\ p \\ne g^j \\ mod\\ (p\u4e3a\u8d28\u6570,\u4e14i\\ne j,1\\le i,j\\le p - 1) g^i\\ mod\\ p \\ne g^j \\ mod\\ (p\u4e3a\u8d28\u6570,\u4e14i\\ne j,1\\le i,j\\le p - 1) \u6c42\u89e3\u65b9\u6cd5 \u539f\u6839\u4e00\u822c\u6bd4\u8f83\u5c0f\uff0c\u6c42\u539f\u6839\u7684\u65b9\u6cd5\u4e00\u822c\u662f\u4ece2\u5f00\u59cb\u679a\u4e3e\uff0c\u7136\u540e\u66b4\u529b\u5224\u65ad g^{P-1} \\equiv 1\\ (mod\\ p)(p \u4e3a\u7d20\u6570) g^{P-1} \\equiv 1\\ (mod\\ p)(p \u4e3a\u7d20\u6570) \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5e38\u89c1\u6a21\u6570998244353 , 1004535809 , 469762049\u7684\u539f\u6839\u90fd\u662f3","title":"\u539f\u6839"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#1","text":"\u9898\u76ee\u94fe\u63a5 \u8f93\u5165\u6837\u4f8b 5 3 4 1 2 2 \u8f93\u51fa\u6837\u4f8b 4","title":"\u4f8b1.\u6311\u9009\u961f\u53cb"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_5","text":"\u5bf9\u4e8e\u7b2ci\u4e2a\u7fa4\uff0c\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570\u662f F_i(x) = \\sum_{j=1}^{s[i]}C_{s_i}^jx^j F_i(x) = \\sum_{j=1}^{s[i]}C_{s_i}^jx^j \u5219\u4ee4 G(x)=\\prod_{i=1}^{n} F(x) G(x)=\\prod_{i=1}^{n} F(x) \u5957NTT\u6a21\u677f\u540e [x^k]G(x) [x^k]G(x) \u5373\u4e3a\u7b54\u6848","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_6","text":"#include <bits/stdc++.h> #define int long long #define poly vector<int> using namespace std ; const int N = 3e5 + 5 , p = 998244353 , G = 3 ; int v ; int lim = 1 , RR [ N ], L ; poly f [ N ]; int fac [ N ], infac [ N ]; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int invf ( int x ) { return qpow ( x , p - 2 , p );} void init ( int n , int mod ) { infac [ 0 ] = fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % mod ; infac [ n ] = qpow ( fac [ n ], mod - 2 , mod ); for ( int j = n ; j >= 1 ; j -- ) { infac [ j - 1 ] = infac [ j ] * j % mod ; } } int C ( int a , int b , int mod ) { if ( a < b ) return 0 ; return fac [ a ] * infac [ b ] % mod * infac [ a - b ] % mod ; } void NTT ( poly & A , int type ) { for ( int i = 0 ; i < lim ; ++ i ) if ( i < RR [ i ]) swap ( A [ i ], A [ RR [ i ]]); for ( int mid = 1 ; mid < lim ; mid <<= 1 ) { int wn = qpow ( G ,( p -1 ) / ( mid << 1 ), p ); if ( type == -1 ) wn = qpow ( wn , p -2 , p ); for ( int len = mid << 1 , pos = 0 ; pos < lim ; pos += len ) { int w = 1 ; for ( int k = 0 ; k < mid ; ++ k , w = w * wn % p ) { int x = A [ pos + k ], y = w * A [ pos + mid + k ] % p ; A [ pos + k ] = ( x + y ) % p ; A [ pos + k + mid ] = ( x - y - p ) % p ; } } } if ( type == -1 ) { int inv_n = invf ( lim ); for ( int i = 0 ; i < lim ; ++ i ) A [ i ] = A [ i ] * inv_n % p ; } } poly operator * ( poly f , poly g ) { int deg = f . size () + g . size () -1 ; for ( lim = 1 , L = 0 ; lim <= deg ; lim <<= 1 ) L ++ ; for ( int i = 0 ; i < lim ; i ++ ) RR [ i ] = ( RR [ i >> 1 ] >> 1 ) | (( i & 1 ) << L -1 ); f . resize ( lim ); g . resize ( lim ); NTT ( f , 1 ); NTT ( g , 1 ); for ( int i = 0 ; i < lim ; i ++ ) f [ i ] = f [ i ] * g [ i ] % p ; NTT ( f , -1 ); f . resize ( deg ); return f ; } poly dfs ( int l , int r ) { if ( l == r ) return f [ l ]; int mid = l + r >> 1 ; return dfs ( l , mid ) * dfs ( mid + 1 , r ); } signed main () { int n , m , k ; scanf ( \"%lld%lld%lld\" , & n , & m , & k ); init ( 1e5 + 5 , p ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%lld\" , & v ); f [ i ]. resize ( v + 1 ); for ( int j = 1 ; j <= v ; j ++ ) { f [ i ][ j ] = C ( v , j , p ); } } poly res = dfs ( 1 , m ); cout << ( res [ k ] % p + p ) % p << '\\n' ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#2tokitsukaze-and-another-protoss-and-zerg","text":"\u9898\u76ee\u94fe\u63a5 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0","title":"\u4f8b2.tokitsukaze and Another Protoss and Zerg"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_7","text":"\u5bf9\u4e8e\u7b2ci\u573a: \u4e0d\u9009\u661f\u7075:\u6709 2^{b[i]}-1 2^{b[i]}-1 \u79cd\u9009\u6cd5 \u4e0d\u9009\u866b\u65cf:\u5219\u5bf9\u4e8e\u9009j\u4e2a\u661f\u7075\u6709 C_{a[i]}^j C_{a[i]}^j \u79cd\u9009\u6cd5 \u5219\u7b2ci\u573a\u7684\u751f\u6210\u51fd\u6570\u4e3a F_i(x)=2^{b[i]}-1+\\sum_{j=1}{a[i]}C_{a[i],j}x^j F_i(x)=2^{b[i]}-1+\\sum_{j=1}{a[i]}C_{a[i],j}x^j \u4ee4 G(x)=\\prod_{i=1}^{n}F_i(x) G(x)=\\prod_{i=1}^{n}F_i(x) \u5957NTT\u677f\u5b50\u5373\u53ef\u6c42\u51fa\u6bcf\u4e00\u9879","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_8","text":"#include <bits/stdc++.h> #define int long long #define poly vector<int> using namespace std ; const int N = 2e5 + 5 , p = 998244353 , G = 3 ; poly f [ N ]; int lim = 1 , L ; int RR [ N ]; int a [ N ], b [ N ]; int fac [ N ], infac [ N ]; int qpow ( int a , int n , int p ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % p ; a = a * a % p ; n >>= 1 ; } return res ; } int invf ( int x ) { return qpow ( x , p - 2 , p ); } void init ( int n ) { fac [ 0 ] = infac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; infac [ n ] = qpow ( fac [ n ], p - 2 , p ); for ( int i = n ; i >= 1 ; i -- ) infac [ i - 1 ] = infac [ i ] * i % p ; } int C ( int a , int b ) { if ( a < b ) return 0 ; return fac [ a ] * infac [ a - b ] % p * infac [ b ] % p ; } void NTT ( poly & A , int type ) { for ( int i = 0 ; i < lim ; ++ i ) if ( i < RR [ i ]) swap ( A [ i ], A [ RR [ i ]]); for ( int mid = 1 ; mid < lim ; mid <<= 1 ) { int wn = qpow ( G ,( p -1 ) / ( mid << 1 ), p ); if ( type == -1 ) wn = qpow ( wn , p -2 , p ); for ( int len = mid << 1 , pos = 0 ; pos < lim ; pos += len ) { int w = 1 ; for ( int k = 0 ; k < mid ; ++ k , w = w * wn % p ) { int x = A [ pos + k ], y = w * A [ pos + mid + k ] % p ; A [ pos + k ] = ( x + y ) % p ; A [ pos + k + mid ] = ( x - y - p ) % p ; } } } if ( type == -1 ) { int inv_n = invf ( lim ); for ( int i = 0 ; i < lim ; ++ i ) A [ i ] = A [ i ] * inv_n % p ; } } poly operator * ( poly f , poly g ) { int deg = f . size () + g . size () -1 ; for ( lim = 1 , L = 0 ; lim <= deg ; lim <<= 1 ) L ++ ; for ( int i = 0 ; i < lim ; i ++ ) RR [ i ] = ( RR [ i >> 1 ] >> 1 ) | (( i & 1 ) << L -1 ); f . resize ( lim ); g . resize ( lim ); NTT ( f , 1 ); NTT ( g , 1 ); for ( int i = 0 ; i < lim ; i ++ ) f [ i ] = f [ i ] * g [ i ] % p ; NTT ( f , -1 ); f . resize ( deg ); return f ; } poly dfs ( int l , int r ) { if ( l == r ) return f [ l ]; int mid = l + r >> 1 ; return dfs ( l , mid ) * dfs ( mid + 1 , r ); } signed main () { int n ; cin >> n ; int sum = 0 ; init ( 2e5 + 1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & a [ i ]); sum += a [ i ]; } sum ++ ; for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ]. resize ( a [ i ] + 2 ); for ( int j = 0 ; j <= a [ i ]; j ++ ) { if ( j == 0 ) f [ i ][ j ] = (( qpow ( 2 , b [ i ], p ) - 1 ) % p + p ) % p ; else f [ i ][ j ] = C ( a [ i ], j ); } } poly res = dfs ( 1 , n ); for ( int i = 0 ; i < sum ; i ++ ) { if ( i != sum ) printf ( \"%lld \" , ( res [ i ] % p + p ) % p ); else printf ( \"%lld\" , ( res [ i ] % p + p ) % p ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#3count-set","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 p\\{1,2,3,..,n\\} p\\{1,2,3,..,n\\} \u548c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570k\uff0c\u8981\u6c42\u8ba1\u7b97 p p \u7684\u5b50\u96c6 T T \u7684\u6570\u91cf\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28: |T|=k |T|=k |P(T) \\cap T|=0 |P(T) \\cap T|=0 \u6ce8: P(T) P(T) \u8868\u793a P(T)=\\{y|y=p_x,x\\in T\\} P(T)=\\{y|y=p_x,x\\in T\\} \u8f93\u5165\u683c\u5f0f T T \u7ec4\u8f93\u5165 \u6bcf\u7ec4\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 n,k n,k \u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6574\u6570 P1,P2...Pn P1,P2...Pn \u8868\u793a\u7ed9\u5b9a\u7684\u6392\u5217 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\u8868\u793a\u7b54\u6848\u5bf9 998244353 998244353 \u53d6\u4f59\u7684\u7ed3\u679c \u6570\u636e\u8303\u56f4 1\\le T \\le 15 1\\le T \\le 15 1 \\le n \\le 5\\times 10^5,0\\le k \\le n 1 \\le n \\le 5\\times 10^5,0\\le k \\le n \u6240\u6709\u7684\u6837\u4f8b\u4fdd\u8bc1 \\sum n \\le 5 \\times 10^6 \\sum n \\le 5 \\times 10^6 \u8f93\u5165\u6837\u4f8b 3 5 1 5 3 2 1 4 5 2 2 5 1 3 4 10 3 10 9 3 8 6 4 5 7 2 1 \u8f93\u51fa\u6837\u4f8b 5 5 40","title":"\u4f8b3.Count Set"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_9","text":"\u6211\u4eec\u53d1\u73b0\u7b2c i i \u4e2a\u6570\u4e0e\u7b2c p[i] p[i] \u4e2a\u6570\u663e\u7136\u4e0d\u80fd\u540c\u65f6\u9009\u62e9\uff0c\u82e5\u5c06\u6240\u6709\u7684\u9650\u5236\u6761\u4ef6\u5efa\u56fe\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u6837\u5f62\u6210\u4e86\u4e00\u4e2a\u4e00\u4e2a\u7684\u73af(\u5355\u4e2a\u70b9\u4e3a\u81ea\u73af)\uff0c\u4e0a\u8ff0\u9650\u5236\u6761\u4ef6\u4e5f\u88ab\u8f6c\u5316\u6210\u6bcf\u4e2a\u73af\u4e2d\u4e0d\u80fd\u9009\u62e9\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9 \u8981\u6c42\u5728\u6240\u6709\u7684\u73af\u4e2d\u9009 k k \u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651\u4ed6\u7684\u5b50\u95ee\u9898 \u5982\u4f55\u6c42\u5728\u4e00\u4e2a\u5927\u5c0f\u4e3am\u7684\u73af\u79cd\u9009 k k \u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff1f \u6211\u4eec\u53d1\u73b0\u9650\u5236\u6761\u4ef6\u662f\u76f8\u90bb\uff0c\u82e5\u5c06\u9009\u51fa\u7684\u70b9\u5360\u7528\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u9009\u51fa\u7684\u8fd9\u4e9b\u70b9\u4e24\u4e24\u4e0d\u76f8\u90bb\uff0c\u6ce8\u610f\u5230\u662f\u73af\uff0c\u7834\u73af\u6210\u94fe\u540e\u6211\u4eec\u5bf9\u65ad\u5f00\u5904\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba \u82e5\u65ad\u5f00\u5904\u4e0d\u662f\u9009\u4e2d\u7684\u70b9:\u6b64\u65f6\u76f8\u5f53\u4e8e\u5728 m-k m-k \u4e2a\u76f8\u540c\u7269\u4f53\u4e2d\u9009 k k \u4e2a,\u7b54\u6848\u4e3a C_{m-k}^k C_{m-k}^k \u82e5\u65ad\u5f00\u5904\u662f\u9009\u4e2d\u7684\u70b9:\u6b64\u65f6\u76f8\u5f53\u4e8e\u5728 m-2-(k-1) m-2-(k-1) \u4e2a\u76f8\u540c\u7269\u4f53\u4e2d\u9009 k-1 k-1 \u4e2a,\u7b54\u6848\u4e3a C_{m-k-1}^{k-1} C_{m-k-1}^{k-1} \u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u51fa\u6bcf\u4e2a\u73af\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570 F_i(x)=\\sum_{j=1}^{size[i]}(C_{size[i]-j-1}^{j-1}+C_{size[i]-j}^j)x^j F_i(x)=\\sum_{j=1}^{size[i]}(C_{size[i]-j-1}^{j-1}+C_{size[i]-j}^j)x^j \u7d2f\u4e58\u540e\u5f97\u5230 G(x)=\\prod_{i=1}^{cnt}F_i(x) G(x)=\\prod_{i=1}^{cnt}F_i(x) \u5219 [x^k]G(x) [x^k]G(x) \u5373\u4e3a\u7b54\u6848 \u5206\u6cbbNTT\u52a0\u901f\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E5%88%86%E6%B2%BBNTT/#_10","text":"#include <bits/stdc++.h> #define fp(i, a, b) for (int i = (a), i##_ = (b) + 1; i < i##_; ++i) #define fd(i, a, b) for (int i = (a), i##_ = (b) - 1; i > i##_; --i) #define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout) using namespace std ; const int N = 5e5 + 5 , P = 998244353 ; using arr = int [ N ]; using ll = int64_t ; /*---------------------------------------------------------------------------*/ class Cipolla { int P , I2 {}; using pll = pair < ll , ll > ; #define X first #define Y second ll mul ( ll a , ll b ) const { return a * b % P ; } pll mul ( pll a , pll b ) const { return {( a . X * b . X + I2 * a . Y % P * b . Y ) % P , ( a . X * b . Y + a . Y * b . X ) % P }; } template < class T > T POW ( T a , int b , T x ) { for (; b ; b >>= 1 , a = mul ( a , a )) if ( b & 1 ) x = mul ( x , a ); return x ; } public : Cipolla ( int p = 0 ) : P ( p ) {} pair < int , int > sqrt ( int n ) { int a = rand (), x ; if ( ! ( n %= P )) return { 0 , 0 }; if ( POW ( n , ( P - 1 ) >> 1 , 1 ) == P - 1 ) return { -1 , -1 }; while ( POW ( I2 = (( ll ) a * a - n + P ) % P , ( P - 1 ) >> 1 , 1 ) == 1 ) a = rand (); x = ( int ) POW ( pll { a , 1 }, ( P + 1 ) >> 1 , { 1 , 0 }). X ; if ( 2 * x > P ) x = P - x ; return { x , P - x }; } #undef X #undef Y }; /*---------------------------------------------------------------------------*/ #define ADD(a, b) (((a) += (b)) >= P ? (a) -=P : 0) // (a += b) %= P #define SUB(a, b) (((a) -= (b)) < 0 ? (a) += P: 0) // ((a -= b) += P) %= P #define MUL(a, b) ((ll) (a) * (b) % P) //vector<int> getInv(int L) { // vector<int> inv(L); inv[1] = 1; // fp(i, 1, L - 1) inv[i] = MUL((P - P / i), inv[P % i]); // return inv; //} //auto inv = getInv(N); // NOLINT int POW ( ll a , int b = P - 2 , ll x = 1 ) { for (; b ; b >>= 1 , a = a * a % P ) if ( b & 1 ) x = x * a % P ; return x ; } //int INV(int a) { return a < N ? inv[a] : POW(a); } namespace NTT { const int g = 3 ; vector < int > Omega ( int L ) { int wn = POW ( g , P / L ); vector < int > w ( L ); w [ L >> 1 ] = 1 ; fp ( i , L / 2 + 1 , L - 1 ) w [ i ] = MUL ( w [ i - 1 ], wn ); fd ( i , L / 2 - 1 , 1 ) w [ i ] = w [ i << 1 ]; return w ; } auto W = Omega ( 1 << 21 ); // NOLINT void DIF ( int * a , int n ) { for ( int k = n >> 1 ; k ; k >>= 1 ) for ( int i = 0 , y ; i < n ; i += k << 1 ) fp ( j , 0 , k - 1 ) y = a [ i + j + k ], a [ i + j + k ] = MUL ( a [ i + j ] - y + P , W [ k + j ]), ADD ( a [ i + j ], y ); } void IDIT ( int * a , int n ) { for ( int k = 1 ; k < n ; k <<= 1 ) for ( int i = 0 , x , y ; i < n ; i += k << 1 ) fp ( j , 0 , k - 1 ) x = a [ i + j ], y = MUL ( a [ i + j + k ], W [ k + j ]), a [ i + j + k ] = x - y < 0 ? x - y + P : x - y , ADD ( a [ i + j ], y ); int Inv = P - ( P - 1 ) / n ; fp ( i , 0 , n - 1 ) a [ i ] = MUL ( a [ i ], Inv ); reverse ( a + 1 , a + n ); } } namespace Polynomial { using Poly = std :: vector < int > ; // mul/div int Poly & operator *= ( Poly & a , int b ) { for ( auto & x : a ) x = MUL ( x , b ); return a ; } Poly operator * ( Poly a , int b ) { return a *= b ; } Poly operator * ( int a , Poly b ) { return b * a ; } Poly & operator /= ( Poly & a , int b ) { return a *= POW ( b ); } Poly operator / ( Poly a , int b ) { return a /= b ; } // Poly add/sub Poly & operator += ( Poly & a , Poly b ) { a . resize ( max ( a . size (), b . size ())); fp ( i , 0 , b . size () - 1 ) ADD ( a [ i ], b [ i ]); return a ; } Poly operator + ( Poly a , Poly b ) { return a += b ; } Poly & operator -= ( Poly & a , Poly b ) { a . resize ( max ( a . size (), b . size ())); fp ( i , 0 , b . size () - 1 ) SUB ( a [ i ], b [ i ]); return a ; } Poly operator - ( Poly a , Poly b ) { return a -= b ; } // Poly mul void DFT ( Poly & a ) { NTT :: DIF ( a . data (), a . size ()); } void IDFT ( Poly & a ) { NTT :: IDIT ( a . data (), a . size ()); } int norm ( int n ) { return 1 << ( 32 - __builtin_clz ( n - 1 )); } void norm ( Poly & a ) { if ( ! a . empty ()) a . resize ( norm ( a . size ()), 0 ); } Poly & dot ( Poly & a , Poly & b ) { fp ( i , 0 , a . size () - 1 ) a [ i ] = MUL ( a [ i ], b [ i ]); return a ; } Poly operator * ( Poly a , Poly b ) { int n = a . size () + b . size () - 1 , L = norm ( n ); if ( a . size () <= 8 || b . size () <= 8 ) { Poly c ( n ); fp ( i , 0 , a . size () - 1 ) fp ( j , 0 , b . size () - 1 ) c [ i + j ] = ( c [ i + j ] + ( ll ) a [ i ] * b [ j ]) % P ; return c ; } a . resize ( L ), b . resize ( L ); DFT ( a ), DFT ( b ), dot ( a , b ), IDFT ( a ); return a . resize ( n ), a ; } // Poly inv Poly Inv2k ( Poly a ) { // a.size() = 2^k int n = a . size (), m = n >> 1 ; if ( n == 1 ) return { POW ( a [ 0 ])}; Poly b = Inv2k ( Poly ( a . begin (), a . begin () + m )), c = b ; b . resize ( n ), DFT ( a ), DFT ( b ), dot ( a , b ), IDFT ( a ); fp ( i , 0 , n - 1 ) a [ i ] = i < m ? 0 : P - a [ i ]; DFT ( a ), dot ( a , b ), IDFT ( a ); return move ( c . begin (), c . end (), a . begin ()), a ; } Poly Inv ( Poly a ) { int n = a . size (); norm ( a ), a = Inv2k ( a ); return a . resize ( n ), a ; } // Poly div/mod Poly operator / ( Poly a , Poly b ){ int k = a . size () - b . size () + 1 ; if ( k < 0 ) return { 0 }; reverse ( a . begin (), a . end ()); reverse ( b . begin (), b . end ()); b . resize ( k ), a = a * Inv ( b ); a . resize ( k ), reverse ( a . begin (), a . end ()); return a ; } pair < Poly , Poly > operator % ( Poly a , const Poly & b ) { Poly c = a / b ; a -= b * c , a . resize ( b . size () - 1 ); return { c , a }; } // Poly sqrt Poly Sqrt ( Poly a ) { int n = a . size (), k = norm ( n ); Poly b = {( new Cipolla ( P )) -> sqrt ( a [ 0 ]). first }, c ; a . resize ( k * 2 , 0 ); for ( int L = 2 ; L <= k ; L <<= 1 ) { b . resize ( 2 * L , 0 ), c = Poly ( a . begin (), a . begin () + L ) * Inv ( b ); fp ( i , 0 , 2 * L - 1 ) b [ i ] = MUL ( b [ i ] + c [ i ], ( P + 1 ) / 2 ); } return b . resize ( n ), b ; } // Poly calculus void Derivative ( Poly & a ) { fp ( i , 1 , a . size () - 1 ) a [ i - 1 ] = MUL ( i , a [ i ]); a . pop_back (); } } using namespace Polynomial ; long long fac [ N + 5 ], invfac [ N + 5 ]; long long th [ N + 5 ]; long long C ( int n , int m ) { if ( n < 0 || n < m ) return 0 ; else return fac [ n ] * invfac [ m ] % P * invfac [ n - m ] % P ; } long long a [ N + 5 ], b [ N + 5 ]; Poly p [ N + 5 ]; bool vis [ N + 5 ]; int num [ N + 5 ]; int cnt = 0 ; int main () { th [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) th [ i ] = th [ i - 1 ] * 2 % P ; fac [ 0 ] = fac [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % P ; invfac [ N ] = POW ( fac [ N ]); for ( int i = N - 1 ; i >= 1 ; i -- ) invfac [ i ] = invfac [ i + 1 ] * ( i + 1 ) % P ; invfac [ 0 ] = invfac [ 1 ] = 1 ; int n , m = 0 ; int ttt ; scanf ( \"%d\" , & ttt ); while ( ttt -- ) { int k ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); memset ( vis , false , sizeof ( vis )); cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! vis [ i ]) { vis [ i ] = true ; num [ cnt ] = 1 ; long long t = a [ i ]; while ( ! vis [ t ]) { vis [ t ] = true ; num [ cnt ] ++ ; t = a [ t ]; } if ( num [ cnt ] > 1 ) cnt ++ ; } } for ( int i = 0 ; i < cnt ; i ++ ) { long long sz = num [ i ]; p [ i ]. resize ( sz + 1 ); for ( long long j = 0 ; j <= sz ; j ++ ) { p [ i ][ j ] = ( C ( sz - j - 1L L , j - 1L L ) + C ( sz - j , j )) % P ; // p[i]\u8868\u793ai\u7684\u751f\u6210\u51fd\u6570 } } function < Poly ( int , int ) > calc = [ & ]( int L , int R ) { if ( L == R ) return p [ L ]; int mid = ( L + R ) >> 1 ; return calc ( L , mid ) * calc ( mid + 1 , R ); }; auto now = calc ( 0 , cnt - 1 ); printf ( \"%d \\n \" , now [ k ]); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/","text":"\u6982\u8ff0 \u00b6 \u5728\u6570\u5b66\u4e2d\uff0c\u67d0\u4e2a\u5e8f\u5217 a_n a_n \u7684\u6bcd\u51fd\u6570\uff08\u53c8\u79f0\u751f\u6210\u51fd\u6570\uff09\u662f\u4e00\u79cd\u5f62\u5f0f\u5e42\u7ea7\u6570\uff0c\u5176\u6bcf\u4e00\u9879\u7684\u7cfb\u6570\u53ef\u4ee5\u63d0\u4f9b\u5173\u4e8e\u8fd9\u4e2a\u5e8f\u5217\u7684\u4fe1\u606f\u3002\u4f7f\u7528\u6bcd\u51fd\u6570\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u79f0\u4e3a\u6bcd\u51fd\u6570\u65b9\u6cd5\u3002 \u5e8f\u5217 a a \u5b9a\u4e49\u4e3a\u5f62\u5f0f\u5e42\u7ea7\u6570\u6709\u4ee5\u4e0b\u5f62\u5f0f F(x)=\\sum_{n}a_nx^n F(x)=\\sum_{n}a_nx^n \u4f8b\u5982: \u5e8f\u5217 a = <1, 2, 3> a = <1, 2, 3> \u7684\u5e38\u751f\u6210\u51fd\u6570\u662f 1 + 2x + 3x^3 1 + 2x + 3x^3 \u5e8f\u5217 a = <1,1,1,1...> a = <1,1,1,1...> \u7684\u5e38\u751f\u6210\u51fd\u6570\u662f \\sum_{n \\ge 0}x^n \\sum_{n \\ge 0}x^n \u5e8f\u5217 a = <1, 3, 5, 7...> a = <1, 3, 5, 7...> \u7684\u5e38\u751f\u6210\u51fd\u6570\u662f \\sum_{n \\ge 0}(2n+1)x^n \\sum_{n \\ge 0}(2n+1)x^n \u5e38\u751f\u6210\u51fd\u6570\u5e38\u7528\u4e8e\u591a\u91cd\u96c6\u9009\u62e9\u7ec4\u5408\u95ee\u9898 \u5e94\u7528 \u00b6 \u5e38\u751f\u6210\u51fd\u6570\u901a\u5e38\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898: \u7ed9\u5b9a\u975e\u8d1f\u6574\u6570 x_1,x_2,x_3...,x_k x_1,x_2,x_3...,x_k \uff0c\u6c42 x_1+x_2+x_3...+x_k=n x_1+x_2+x_3...+x_k=n \u6709\u591a\u5c11\u7ec4\u89e3 \u4ee5\u4e0a\u8ff0\u95ee\u9898\u4e3a\u4f8b\uff0c\u6211\u4eec\u9690\u5f0f\u89c4\u5b9a\u4e86 0\\le x_i \\le n 0\\le x_i \\le n \uff0c\u82e5\u6211\u4eec\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u6784\u9020\u4e00\u4e2a\u751f\u6210\u51fd\u6570\uff0c\u5219\u5bf9\u4e8e\u7b2ci\u4e2a\u6570\uff0c\u5b83\u7684\u751f\u6210\u51fd\u6570\u4e3a f(x)=1+x+x^2+x^3...+x^n f(x)=1+x+x^2+x^3...+x^n \uff0c \u82e5\u5c06\u6240\u6709\u7684\u751f\u6210\u51fd\u6570\u76f8\u4e58\uff0c\u5219 g(x)=(1+x+x^2+...+x^n)^k g(x)=(1+x+x^2+...+x^n)^k \u7684 x^n x^n \u7684\u7cfb\u6570\u5c31\u662f\u6240\u6c42\u7b54\u6848 \u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u66ff\u6362\u5f0f: 1+x+x^2+x^3...+x^n=\\frac{1}{1-x} 1+x+x^2+x^3...+x^n=\\frac{1}{1-x} \\frac{1}{(1-x)^k}=\\sum_{n\\ge0}C_{n+k-1}^{k-1}x^n \\frac{1}{(1-x)^k}=\\sum_{n\\ge0}C_{n+k-1}^{k-1}x^n \u4f8b1.\u80cc\u5305 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 tacmon\u51c6\u5907\u5e26\u5927\u5bb6\u53bbYZ\u4e00\u65e5\u6e38\uff0c\u4ed6\u8981\u5e26\u5f88\u591a\u4e1c\u897f\uff0c\u4e00\u5171\u6709\u4ee5\u4e0b8\u79cd\uff1a \u80a5\u5b85\u5feb\u4e50\u6c34\uff0c\u9e21\u817f\uff0c\u9e21\u7fc5\uff0c\u9e21\u5757\uff0c\u9e21\u6c64\uff0c\u9e21\u86cb\uff0c\u5927\u76d8\u9e21\uff0c\u5564\u9152\u9e21 ...emm...\u771f\u9999\u3002 \u4ed6\u8981\u5e26\u5f97\u4e1c\u897f\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u4f60\u7406\u6240\u5f53\u7136\u7684\u8981\u5e2e\u4ed6\u7b97\u5e26N\u4e2a\u4e1c\u897f\u7684\u65b9\u6848\u6570\u5566\u3002 \u53e6\u5916\uff0c\u5728tacmon\u7684\u773c\u91cc\uff0c\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u4ee5\u201c\u4e2a\u201d\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u4e14\u6bcf\u4e00\u79cd\u7269\u54c1\u90fd\u6709\u4e00\u4e9b\u5947\u602a\u7684\u9650\u5236\u3002 tacmon\u6700\u591a\u4f1a\u5e261\u4e2a\u80a5\u5b85\u5feb\u4e50\u6c34\uff08\u5f53\u7136\u53ef\u4ee5\u4e0d\u5e26\uff09 \u4ed6\u4e5f\u8ba4\u4e3a\u5927\u76d8\u9e21\u548c\u5564\u9152\u9e21\u592a\u8d35\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u4e1c\u897f\u4ed6\u5206\u522b\u6700\u591a\u5e262\u4e2a\u548c3\u4e2a \u603b\u6240\u5468\u77e5\uff0c\u9e21\u7fc5\u603b\u662f\u8981\u6210\u5bf9\u51fa\u73b0\u7684 tacmon\u8ba4\u4e3a\u5076\u6570\u4e2a\u9e21\u6c64\u4e0d\u597d\u5206\uff0c\u6240\u4ee5\u4ed6\u51c6\u5907\u5e26\u5947\u6570\u4e2a \u9e21\u5757\u5b9e\u5728\u592a\u597d\u5403\u4e86\uff0ctacmon\u8ba4\u4e3a\u4e00\u4e2a\u4eba\u4e00\u5b9a\u4f1a\u54034\u4e2a\uff0c\u6240\u4ee5\u4ed6\u4e00\u5b9a\u4f1a\u5e264\u7684\u500d\u6570\u4e2a\u9e21\u5757 tacmon\u6700\u8ba8\u538c\u5403\u9e21\u817f\u4e86\uff0c\u6240\u4ee5\u4ed6\u6700\u591a\u5e26\u4e00\u4e2a\u9e21\u817f \u800c\u9e21\u86cb\uff0c\u4ed6\u51c6\u5907\u5e26\u4e09\u7684\u500d\u6570\u4e2a... \u826f\u5fc3\u7684tacmon\u89c9\u5f97\u4ed6\u7684\u9650\u5236\u6709\u70b9\u5c0f\u591a\uff0c\u6240\u4ee5\u4ed6\u8981\u597d\u5fc3\u7684\u544a\u8bc9\u5927\u5bb6\uff0c\u9664\u4e86\u9e21\u6c64\uff0c\u5176\u4ed6\u7684\u4e1c\u897f\u4e0d\u5e26\u4e5f\u662f\u7b26\u5408\u8981\u6c42\u7684\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793atacmon\u8981\u5e26\u7684\u7269\u54c1\u4e2a\u6570 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u7b54\u6848\u5bf9 10^9+7 10^9+7 \u53d6\u6a21\u7684\u7ed3\u679c\u3002 \u6570\u636e\u8303\u56f4 1 \\le N \\le 10^{18} 1 \\le N \\le 10^{18} \u8f93\u5165\u6837\u4f8b 5 \u8f93\u51fa\u6837\u4f8b 35 \u9898\u89e3 \u00b6 \u672c\u9898\u4f7f\u7528\u5bb9\u65a5\u4e5f\u80fd\u901a\u8fc7\uff0c\u8fd9\u91cc\u8bb2\u89e3\u751f\u6210\u51fd\u6570\u7684\u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u98df\u7269\uff0c\u53ef\u4ee5\u6784\u9020\u5176\u751f\u6210\u51fd\u6570\uff0c\u5c06\u516b\u79cd\u98df\u7269\u7d2f\u4e58\u5f97\u5230\u591a\u9879\u5f0f G(x) G(x) \uff0c [x^n]G(x) [x^n]G(x) \u5c31\u662f\u7b54\u6848\uff0c\u63a5\u4e0b\u6765\u662f\u5404\u7c7b\u98df\u7269\u5bf9\u5e94\u751f\u6210\u51fd\u6570\u7684\u5316\u7b80: \u80a5\u5b85\u5feb\u4e50\u6c34: 1+x=\\frac{1-x^2}{1-x} 1+x=\\frac{1-x^2}{1-x} \u5927\u76d8\u9e21: 1+x+x^2=\\frac{1-x^3}{1-x} 1+x+x^2=\\frac{1-x^3}{1-x} \u5564\u9152\u9e21: 1+x+x^2+x^3=\\frac{1-x^4}{1-x} 1+x+x^2+x^3=\\frac{1-x^4}{1-x} \u9e21\u7fc5: 1+x^2+x^4+...=\\frac{1}{1-x^2} 1+x^2+x^4+...=\\frac{1}{1-x^2} \u9e21\u6c64: x+x^3+x^5...=\\frac{x}{1-x^2} x+x^3+x^5...=\\frac{x}{1-x^2} \u9e21\u5757: 1+x^4+x^8...=\\frac{1}{1-x^4} 1+x^4+x^8...=\\frac{1}{1-x^4} \u9e21\u817f: 1+x=\\frac{1-x^2}{1-x} 1+x=\\frac{1-x^2}{1-x} \u9e21\u86cb: 1+x^3+x^6...=\\frac{1}{1-x^3} 1+x^3+x^6...=\\frac{1}{1-x^3} \u56e0\u6b64 G(x)=\\frac{x}{(1-x)^4}=x\\times\\sum_{n\\ge0}C_{n+3}^{3}x^n=\\sum_{n\\ge 1}C_{n+2}^{3}x^n G(x)=\\frac{x}{(1-x)^4}=x\\times\\sum_{n\\ge0}C_{n+3}^{3}x^n=\\sum_{n\\ge 1}C_{n+2}^{3}x^n \u4e8e\u662f [x^n]G(x)=C_{n+2}^{3}=\\frac{(n+2)(n+1)(n)}{6} [x^n]G(x)=C_{n+2}^{3}=\\frac{(n+2)(n+1)(n)}{6} \u6ce8\u610f\u53d6\u6a21\u5c31\u80fd\u901a\u8fc7\u672c\u9898 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 1e9 + 7 ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } signed main () { int n ; cin >> n ; cout << (( n + 2 ) % mod ) * (( n + 1 ) % mod ) % mod * ( n % mod ) % mod * qpow ( 6 , mod - 2 , mod ) % mod ; return 0 ; } \u4f8b2.Devu and Flowers \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u89e3 \u00b6 \u6784\u9020\u51fa\u6bcf\u79cd\u82b1\u7684\u751f\u6210\u51fd\u6570 F^i(x)=1+x+x^2...+x^{f(i)}=\\frac{1-x^{f(i)+1}}{1-x} F^i(x)=1+x+x^2...+x^{f(i)}=\\frac{1-x^{f(i)+1}}{1-x} \u7d2f\u4e58\u540e G(x)=\\prod_{i\\le n}F(i)=\\frac{\\prod_{i\\le n}(1-x^{f(i)+1})}{(1-x)^n} G(x)=\\prod_{i\\le n}F(i)=\\frac{\\prod_{i\\le n}(1-x^{f(i)+1})}{(1-x)^n} \u6700\u540e\u7b54\u6848\u4e3a [x^s]G(x) [x^s]G(x) \u82e5\u4ee4 A(x)=\\prod_{i\\le n}(1-x^{f(i)+1}) A(x)=\\prod_{i\\le n}(1-x^{f(i)+1}) \uff0c B(x)=\\frac{1}{(1-x)^n}=\\sum_{i\\ge 0}C_{i+n-1}^{n-1}x^i B(x)=\\frac{1}{(1-x)^n}=\\sum_{i\\ge 0}C_{i+n-1}^{n-1}x^i \u5219\u7b54\u6848\u662f\u7531 A(x)\u548cB(x) A(x)\u548cB(x) \u5171\u540c\u5f97\u51fa \u53d1\u73b0n\u5f88\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e8c\u8fdb\u5236\u679a\u4e3e A(x) A(x) \u7684\u6bcf\u4e00\u9879\uff0c\u590d\u6742\u5ea6\u4e3a O(2^n) O(2^n) \uff0c\u82e5\u6b64\u65f6\u679a\u4e3e\u5230\u7684\u6307\u6570\u4e3a k k \uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u6c42 [x^{s-k}]B(x) [x^{s-k}]B(x) \u5373\u53ef\uff0c\u5bb9\u6613\u5f97\u5230\u8fd9\u4e00\u9879\u7684\u503c\u4e3a C_{s-k+n-1}^{n-1} C_{s-k+n-1}^{n-1} \u5bf9\u4e8e\u53d6\u6a21\u4e14 a,b a,b \u5f88\u5927\u65f6\uff0c\u6211\u4eec\u8003\u8651lucas\u5b9a\u7406 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 1e9 + 7 , N = 25 ; int a [ N ]; map < int , int > mp ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = ( res % mod ) * ( a % mod ) % mod ; a = ( a % mod ) * ( a % mod ) % mod ; n >>= 1 ; } return res ; } int C ( int a , int b , int mod ) { int fz = 1 , fm = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { fm *= ( i % mod ); fm %= mod ; fz *= ( j % mod ); fz %= mod ; } return fz * qpow ( fm , mod - 2 , mod ) % mod ; } int lucas ( int a , int b , int mod ) { if ( a < b ) return 0 ; if ( a < mod && b < mod ) return C ( a , b , mod ); return lucas ( a % mod , b % mod , mod ) * lucas ( a / mod , b / mod , mod ) % mod ; } signed main () { int n , s ; cin >> n >> s ; //cout << C(10, 3) << endl << C(5, 3) << endl; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; for ( int i = 0 ; i < ( 1 << n ); i ++ ) { int sum = 0 ; int k = 1 ; for ( int j = 0 ; j < n ; j ++ ) { if (( i >> j ) & 1 ) { sum += ( a [ j ] + 1 ); k = - k ; } } mp [ sum ] += k ; } int res = 0 ; for ( auto t : mp ) { int k = t . first ; int v = t . second ; //cout << k << \" \" << v << endl; if ( k > s ) continue ; res += v * ( lucas ( s - k + n - 1 , n - 1 , mod ) % mod ) % mod ; res %= mod ; } cout << (( res % mod ) + mod ) % mod ; return 0 ; } \u4f8b3.[CEOI2004] Sweets \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u89e3 \u00b6 \u672c\u9898\u548c\u4e0a\u4e00\u9898\u5f88\u76f8\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\u603b\u6570\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u82e5\u679a\u4e3e\u603b\u6570\u5219\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 O((b-a)n2^n) O((b-a)n2^n) \uff0c\u663e\u7136\u8d85\u65f6\uff0c\u56e0\u6b64\u9700\u8981\u4f18\u5316 res = \\sum_{i=a}^{i=b}\\sum_{j}([x^j]A(x))C_{i-j+n-1}^{n-1} res = \\sum_{i=a}^{i=b}\\sum_{j}([x^j]A(x))C_{i-j+n-1}^{n-1} res res \u7684\u5f97\u51fa\u540c\u4e0a\u9898 \u63a5\u4e0b\u6765\u8bb2\u8bb2\u600e\u4e48\u4f18\u5316 \u53d8\u66f4\u8ba1\u7b97\u987a\u5e8f\uff0c\u5c06\u679a\u4e3ei\u53d8\u4e3a\u679a\u4e3ej res=\\sum_{j}([x^j]A(x))\\sum_{i=a}^{i=b}C_{i-j+n-1}^{n-1} res=\\sum_{j}([x^j]A(x))\\sum_{i=a}^{i=b}C_{i-j+n-1}^{n-1} \u6211\u4eec\u77e5\u9053 C_{a+1}^{b+1}=C_{a}^{b+1}+C_{a}^{b} C_{a+1}^{b+1}=C_{a}^{b+1}+C_{a}^{b} \u56e0\u6b64\u539f\u5f0f\u53ef\u5316\u7b80\u4e3a res=\\sum_{j}([x^j]A(x))(C_{b-j+n}^{n}-C_{max(a,j)-j+n-1}^{n}) res=\\sum_{j}([x^j]A(x))(C_{b-j+n}^{n}-C_{max(a,j)-j+n-1}^{n}) max(a,j) max(a,j) \u662f\u56e0\u4e3a\u5f53 j>a j>a \u65f6\u5e76\u672a\u662f\u65e0\u610f\u4e49\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u7b54\u6848\u4e5f\u8981\u88ab\u8bb0\u5f55 \u63a5\u4e0b\u6765\u5c31\u662f\u53e6\u4e00\u4e2a\u95ee\u9898\u4e86 \u672c\u9898\u7684\u6a21\u6570\u662f2004\uff0c\u6ca1\u6709\u9006\u5143\uff0c\u6269\u5c55\u5362\u5361\u65af\u5b9a\u7406\u53ef\u4ee5\u505a\uff0c\u4f46\u8fd9\u91cc\u6709\u4e2a\u5c0f\u6280\u5de7 \u6211\u4eec\u53d1\u73b0 n n \u53ea\u670910\uff0c\u800c\u7ec4\u5408\u6570\u8ba1\u7b97\u65f6\u7684\u5206\u6bcd\u662f n! n! \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u6c42\u7ec4\u5408\u6570\u65f6\u4ee4\u5206\u5b50\u8ba1\u7b97\u65f6\u5bf9 2004 \\times n! 2004 \\times n! \u53d6\u6a21\uff0c\u6700\u540e\u5728\u9664\u4ee5\u5206\u6bcd \u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u88ab\u5b8c\u7f8e\u89e3\u51b3\u4e86 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 2004 , N = 15 ; int n , a , b ; int ab [ N ]; map < int , int > mp ; int fac [ N ]; void init ( int n ) { fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i ; } } int C ( int a , int b , int p ) { int fz = 1 , fm = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { fz *= j ; fz %= p ; } //cout << fz << \" \" << fm << endl; return ( fz / fac [ n ]) % mod ; } signed main () { cin >> n >> a >> b ; for ( int i = 0 ; i < n ; i ++ ) cin >> ab [ i ]; init ( n + 1 ); for ( int i = 0 ; i < ( 1 << n ); i ++ ) { int sum = 0 ; int k = 1 ; for ( int j = 0 ; j < n ; j ++ ) { if (( i >> j ) & 1 ) { sum += ( ab [ j ] + 1 ); k = - k ; } } mp [ sum ] += k ; } int res = 0 ; for ( auto [ k , v ] : mp ) { if ( k > b ) break ; int kk = max ( k , a ); res += v % mod * ( C ( b - k + n , n , mod * fac [ n ]) - C ( kk - k + n - 1 , n , mod * fac [ n ])) % mod ; res %= mod ; } cout << ( res % mod + mod ) % mod << endl ; return 0 ; }","title":"\u5e38\u751f\u6210\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_1","text":"\u5728\u6570\u5b66\u4e2d\uff0c\u67d0\u4e2a\u5e8f\u5217 a_n a_n \u7684\u6bcd\u51fd\u6570\uff08\u53c8\u79f0\u751f\u6210\u51fd\u6570\uff09\u662f\u4e00\u79cd\u5f62\u5f0f\u5e42\u7ea7\u6570\uff0c\u5176\u6bcf\u4e00\u9879\u7684\u7cfb\u6570\u53ef\u4ee5\u63d0\u4f9b\u5173\u4e8e\u8fd9\u4e2a\u5e8f\u5217\u7684\u4fe1\u606f\u3002\u4f7f\u7528\u6bcd\u51fd\u6570\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u79f0\u4e3a\u6bcd\u51fd\u6570\u65b9\u6cd5\u3002 \u5e8f\u5217 a a \u5b9a\u4e49\u4e3a\u5f62\u5f0f\u5e42\u7ea7\u6570\u6709\u4ee5\u4e0b\u5f62\u5f0f F(x)=\\sum_{n}a_nx^n F(x)=\\sum_{n}a_nx^n \u4f8b\u5982: \u5e8f\u5217 a = <1, 2, 3> a = <1, 2, 3> \u7684\u5e38\u751f\u6210\u51fd\u6570\u662f 1 + 2x + 3x^3 1 + 2x + 3x^3 \u5e8f\u5217 a = <1,1,1,1...> a = <1,1,1,1...> \u7684\u5e38\u751f\u6210\u51fd\u6570\u662f \\sum_{n \\ge 0}x^n \\sum_{n \\ge 0}x^n \u5e8f\u5217 a = <1, 3, 5, 7...> a = <1, 3, 5, 7...> \u7684\u5e38\u751f\u6210\u51fd\u6570\u662f \\sum_{n \\ge 0}(2n+1)x^n \\sum_{n \\ge 0}(2n+1)x^n \u5e38\u751f\u6210\u51fd\u6570\u5e38\u7528\u4e8e\u591a\u91cd\u96c6\u9009\u62e9\u7ec4\u5408\u95ee\u9898","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_2","text":"\u5e38\u751f\u6210\u51fd\u6570\u901a\u5e38\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898: \u7ed9\u5b9a\u975e\u8d1f\u6574\u6570 x_1,x_2,x_3...,x_k x_1,x_2,x_3...,x_k \uff0c\u6c42 x_1+x_2+x_3...+x_k=n x_1+x_2+x_3...+x_k=n \u6709\u591a\u5c11\u7ec4\u89e3 \u4ee5\u4e0a\u8ff0\u95ee\u9898\u4e3a\u4f8b\uff0c\u6211\u4eec\u9690\u5f0f\u89c4\u5b9a\u4e86 0\\le x_i \\le n 0\\le x_i \\le n \uff0c\u82e5\u6211\u4eec\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u6784\u9020\u4e00\u4e2a\u751f\u6210\u51fd\u6570\uff0c\u5219\u5bf9\u4e8e\u7b2ci\u4e2a\u6570\uff0c\u5b83\u7684\u751f\u6210\u51fd\u6570\u4e3a f(x)=1+x+x^2+x^3...+x^n f(x)=1+x+x^2+x^3...+x^n \uff0c \u82e5\u5c06\u6240\u6709\u7684\u751f\u6210\u51fd\u6570\u76f8\u4e58\uff0c\u5219 g(x)=(1+x+x^2+...+x^n)^k g(x)=(1+x+x^2+...+x^n)^k \u7684 x^n x^n \u7684\u7cfb\u6570\u5c31\u662f\u6240\u6c42\u7b54\u6848 \u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u66ff\u6362\u5f0f: 1+x+x^2+x^3...+x^n=\\frac{1}{1-x} 1+x+x^2+x^3...+x^n=\\frac{1}{1-x} \\frac{1}{(1-x)^k}=\\sum_{n\\ge0}C_{n+k-1}^{k-1}x^n \\frac{1}{(1-x)^k}=\\sum_{n\\ge0}C_{n+k-1}^{k-1}x^n","title":"\u5e94\u7528"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 tacmon\u51c6\u5907\u5e26\u5927\u5bb6\u53bbYZ\u4e00\u65e5\u6e38\uff0c\u4ed6\u8981\u5e26\u5f88\u591a\u4e1c\u897f\uff0c\u4e00\u5171\u6709\u4ee5\u4e0b8\u79cd\uff1a \u80a5\u5b85\u5feb\u4e50\u6c34\uff0c\u9e21\u817f\uff0c\u9e21\u7fc5\uff0c\u9e21\u5757\uff0c\u9e21\u6c64\uff0c\u9e21\u86cb\uff0c\u5927\u76d8\u9e21\uff0c\u5564\u9152\u9e21 ...emm...\u771f\u9999\u3002 \u4ed6\u8981\u5e26\u5f97\u4e1c\u897f\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u4f60\u7406\u6240\u5f53\u7136\u7684\u8981\u5e2e\u4ed6\u7b97\u5e26N\u4e2a\u4e1c\u897f\u7684\u65b9\u6848\u6570\u5566\u3002 \u53e6\u5916\uff0c\u5728tacmon\u7684\u773c\u91cc\uff0c\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u4ee5\u201c\u4e2a\u201d\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u4e14\u6bcf\u4e00\u79cd\u7269\u54c1\u90fd\u6709\u4e00\u4e9b\u5947\u602a\u7684\u9650\u5236\u3002 tacmon\u6700\u591a\u4f1a\u5e261\u4e2a\u80a5\u5b85\u5feb\u4e50\u6c34\uff08\u5f53\u7136\u53ef\u4ee5\u4e0d\u5e26\uff09 \u4ed6\u4e5f\u8ba4\u4e3a\u5927\u76d8\u9e21\u548c\u5564\u9152\u9e21\u592a\u8d35\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u4e1c\u897f\u4ed6\u5206\u522b\u6700\u591a\u5e262\u4e2a\u548c3\u4e2a \u603b\u6240\u5468\u77e5\uff0c\u9e21\u7fc5\u603b\u662f\u8981\u6210\u5bf9\u51fa\u73b0\u7684 tacmon\u8ba4\u4e3a\u5076\u6570\u4e2a\u9e21\u6c64\u4e0d\u597d\u5206\uff0c\u6240\u4ee5\u4ed6\u51c6\u5907\u5e26\u5947\u6570\u4e2a \u9e21\u5757\u5b9e\u5728\u592a\u597d\u5403\u4e86\uff0ctacmon\u8ba4\u4e3a\u4e00\u4e2a\u4eba\u4e00\u5b9a\u4f1a\u54034\u4e2a\uff0c\u6240\u4ee5\u4ed6\u4e00\u5b9a\u4f1a\u5e264\u7684\u500d\u6570\u4e2a\u9e21\u5757 tacmon\u6700\u8ba8\u538c\u5403\u9e21\u817f\u4e86\uff0c\u6240\u4ee5\u4ed6\u6700\u591a\u5e26\u4e00\u4e2a\u9e21\u817f \u800c\u9e21\u86cb\uff0c\u4ed6\u51c6\u5907\u5e26\u4e09\u7684\u500d\u6570\u4e2a... \u826f\u5fc3\u7684tacmon\u89c9\u5f97\u4ed6\u7684\u9650\u5236\u6709\u70b9\u5c0f\u591a\uff0c\u6240\u4ee5\u4ed6\u8981\u597d\u5fc3\u7684\u544a\u8bc9\u5927\u5bb6\uff0c\u9664\u4e86\u9e21\u6c64\uff0c\u5176\u4ed6\u7684\u4e1c\u897f\u4e0d\u5e26\u4e5f\u662f\u7b26\u5408\u8981\u6c42\u7684\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793atacmon\u8981\u5e26\u7684\u7269\u54c1\u4e2a\u6570 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u7b54\u6848\u5bf9 10^9+7 10^9+7 \u53d6\u6a21\u7684\u7ed3\u679c\u3002 \u6570\u636e\u8303\u56f4 1 \\le N \\le 10^{18} 1 \\le N \\le 10^{18} \u8f93\u5165\u6837\u4f8b 5 \u8f93\u51fa\u6837\u4f8b 35","title":"\u4f8b1.\u80cc\u5305"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_3","text":"\u672c\u9898\u4f7f\u7528\u5bb9\u65a5\u4e5f\u80fd\u901a\u8fc7\uff0c\u8fd9\u91cc\u8bb2\u89e3\u751f\u6210\u51fd\u6570\u7684\u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u98df\u7269\uff0c\u53ef\u4ee5\u6784\u9020\u5176\u751f\u6210\u51fd\u6570\uff0c\u5c06\u516b\u79cd\u98df\u7269\u7d2f\u4e58\u5f97\u5230\u591a\u9879\u5f0f G(x) G(x) \uff0c [x^n]G(x) [x^n]G(x) \u5c31\u662f\u7b54\u6848\uff0c\u63a5\u4e0b\u6765\u662f\u5404\u7c7b\u98df\u7269\u5bf9\u5e94\u751f\u6210\u51fd\u6570\u7684\u5316\u7b80: \u80a5\u5b85\u5feb\u4e50\u6c34: 1+x=\\frac{1-x^2}{1-x} 1+x=\\frac{1-x^2}{1-x} \u5927\u76d8\u9e21: 1+x+x^2=\\frac{1-x^3}{1-x} 1+x+x^2=\\frac{1-x^3}{1-x} \u5564\u9152\u9e21: 1+x+x^2+x^3=\\frac{1-x^4}{1-x} 1+x+x^2+x^3=\\frac{1-x^4}{1-x} \u9e21\u7fc5: 1+x^2+x^4+...=\\frac{1}{1-x^2} 1+x^2+x^4+...=\\frac{1}{1-x^2} \u9e21\u6c64: x+x^3+x^5...=\\frac{x}{1-x^2} x+x^3+x^5...=\\frac{x}{1-x^2} \u9e21\u5757: 1+x^4+x^8...=\\frac{1}{1-x^4} 1+x^4+x^8...=\\frac{1}{1-x^4} \u9e21\u817f: 1+x=\\frac{1-x^2}{1-x} 1+x=\\frac{1-x^2}{1-x} \u9e21\u86cb: 1+x^3+x^6...=\\frac{1}{1-x^3} 1+x^3+x^6...=\\frac{1}{1-x^3} \u56e0\u6b64 G(x)=\\frac{x}{(1-x)^4}=x\\times\\sum_{n\\ge0}C_{n+3}^{3}x^n=\\sum_{n\\ge 1}C_{n+2}^{3}x^n G(x)=\\frac{x}{(1-x)^4}=x\\times\\sum_{n\\ge0}C_{n+3}^{3}x^n=\\sum_{n\\ge 1}C_{n+2}^{3}x^n \u4e8e\u662f [x^n]G(x)=C_{n+2}^{3}=\\frac{(n+2)(n+1)(n)}{6} [x^n]G(x)=C_{n+2}^{3}=\\frac{(n+2)(n+1)(n)}{6} \u6ce8\u610f\u53d6\u6a21\u5c31\u80fd\u901a\u8fc7\u672c\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_4","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 1e9 + 7 ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } signed main () { int n ; cin >> n ; cout << (( n + 2 ) % mod ) * (( n + 1 ) % mod ) % mod * ( n % mod ) % mod * qpow ( 6 , mod - 2 , mod ) % mod ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#2devu-and-flowers","text":"\u9898\u76ee\u94fe\u63a5","title":"\u4f8b2.Devu and Flowers"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_5","text":"\u6784\u9020\u51fa\u6bcf\u79cd\u82b1\u7684\u751f\u6210\u51fd\u6570 F^i(x)=1+x+x^2...+x^{f(i)}=\\frac{1-x^{f(i)+1}}{1-x} F^i(x)=1+x+x^2...+x^{f(i)}=\\frac{1-x^{f(i)+1}}{1-x} \u7d2f\u4e58\u540e G(x)=\\prod_{i\\le n}F(i)=\\frac{\\prod_{i\\le n}(1-x^{f(i)+1})}{(1-x)^n} G(x)=\\prod_{i\\le n}F(i)=\\frac{\\prod_{i\\le n}(1-x^{f(i)+1})}{(1-x)^n} \u6700\u540e\u7b54\u6848\u4e3a [x^s]G(x) [x^s]G(x) \u82e5\u4ee4 A(x)=\\prod_{i\\le n}(1-x^{f(i)+1}) A(x)=\\prod_{i\\le n}(1-x^{f(i)+1}) \uff0c B(x)=\\frac{1}{(1-x)^n}=\\sum_{i\\ge 0}C_{i+n-1}^{n-1}x^i B(x)=\\frac{1}{(1-x)^n}=\\sum_{i\\ge 0}C_{i+n-1}^{n-1}x^i \u5219\u7b54\u6848\u662f\u7531 A(x)\u548cB(x) A(x)\u548cB(x) \u5171\u540c\u5f97\u51fa \u53d1\u73b0n\u5f88\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e8c\u8fdb\u5236\u679a\u4e3e A(x) A(x) \u7684\u6bcf\u4e00\u9879\uff0c\u590d\u6742\u5ea6\u4e3a O(2^n) O(2^n) \uff0c\u82e5\u6b64\u65f6\u679a\u4e3e\u5230\u7684\u6307\u6570\u4e3a k k \uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u6c42 [x^{s-k}]B(x) [x^{s-k}]B(x) \u5373\u53ef\uff0c\u5bb9\u6613\u5f97\u5230\u8fd9\u4e00\u9879\u7684\u503c\u4e3a C_{s-k+n-1}^{n-1} C_{s-k+n-1}^{n-1} \u5bf9\u4e8e\u53d6\u6a21\u4e14 a,b a,b \u5f88\u5927\u65f6\uff0c\u6211\u4eec\u8003\u8651lucas\u5b9a\u7406","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_6","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 1e9 + 7 , N = 25 ; int a [ N ]; map < int , int > mp ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = ( res % mod ) * ( a % mod ) % mod ; a = ( a % mod ) * ( a % mod ) % mod ; n >>= 1 ; } return res ; } int C ( int a , int b , int mod ) { int fz = 1 , fm = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { fm *= ( i % mod ); fm %= mod ; fz *= ( j % mod ); fz %= mod ; } return fz * qpow ( fm , mod - 2 , mod ) % mod ; } int lucas ( int a , int b , int mod ) { if ( a < b ) return 0 ; if ( a < mod && b < mod ) return C ( a , b , mod ); return lucas ( a % mod , b % mod , mod ) * lucas ( a / mod , b / mod , mod ) % mod ; } signed main () { int n , s ; cin >> n >> s ; //cout << C(10, 3) << endl << C(5, 3) << endl; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; for ( int i = 0 ; i < ( 1 << n ); i ++ ) { int sum = 0 ; int k = 1 ; for ( int j = 0 ; j < n ; j ++ ) { if (( i >> j ) & 1 ) { sum += ( a [ j ] + 1 ); k = - k ; } } mp [ sum ] += k ; } int res = 0 ; for ( auto t : mp ) { int k = t . first ; int v = t . second ; //cout << k << \" \" << v << endl; if ( k > s ) continue ; res += v * ( lucas ( s - k + n - 1 , n - 1 , mod ) % mod ) % mod ; res %= mod ; } cout << (( res % mod ) + mod ) % mod ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#3ceoi2004-sweets","text":"\u9898\u76ee\u94fe\u63a5","title":"\u4f8b3.[CEOI2004] Sweets"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_7","text":"\u672c\u9898\u548c\u4e0a\u4e00\u9898\u5f88\u76f8\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\u603b\u6570\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u82e5\u679a\u4e3e\u603b\u6570\u5219\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 O((b-a)n2^n) O((b-a)n2^n) \uff0c\u663e\u7136\u8d85\u65f6\uff0c\u56e0\u6b64\u9700\u8981\u4f18\u5316 res = \\sum_{i=a}^{i=b}\\sum_{j}([x^j]A(x))C_{i-j+n-1}^{n-1} res = \\sum_{i=a}^{i=b}\\sum_{j}([x^j]A(x))C_{i-j+n-1}^{n-1} res res \u7684\u5f97\u51fa\u540c\u4e0a\u9898 \u63a5\u4e0b\u6765\u8bb2\u8bb2\u600e\u4e48\u4f18\u5316 \u53d8\u66f4\u8ba1\u7b97\u987a\u5e8f\uff0c\u5c06\u679a\u4e3ei\u53d8\u4e3a\u679a\u4e3ej res=\\sum_{j}([x^j]A(x))\\sum_{i=a}^{i=b}C_{i-j+n-1}^{n-1} res=\\sum_{j}([x^j]A(x))\\sum_{i=a}^{i=b}C_{i-j+n-1}^{n-1} \u6211\u4eec\u77e5\u9053 C_{a+1}^{b+1}=C_{a}^{b+1}+C_{a}^{b} C_{a+1}^{b+1}=C_{a}^{b+1}+C_{a}^{b} \u56e0\u6b64\u539f\u5f0f\u53ef\u5316\u7b80\u4e3a res=\\sum_{j}([x^j]A(x))(C_{b-j+n}^{n}-C_{max(a,j)-j+n-1}^{n}) res=\\sum_{j}([x^j]A(x))(C_{b-j+n}^{n}-C_{max(a,j)-j+n-1}^{n}) max(a,j) max(a,j) \u662f\u56e0\u4e3a\u5f53 j>a j>a \u65f6\u5e76\u672a\u662f\u65e0\u610f\u4e49\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u7b54\u6848\u4e5f\u8981\u88ab\u8bb0\u5f55 \u63a5\u4e0b\u6765\u5c31\u662f\u53e6\u4e00\u4e2a\u95ee\u9898\u4e86 \u672c\u9898\u7684\u6a21\u6570\u662f2004\uff0c\u6ca1\u6709\u9006\u5143\uff0c\u6269\u5c55\u5362\u5361\u65af\u5b9a\u7406\u53ef\u4ee5\u505a\uff0c\u4f46\u8fd9\u91cc\u6709\u4e2a\u5c0f\u6280\u5de7 \u6211\u4eec\u53d1\u73b0 n n \u53ea\u670910\uff0c\u800c\u7ec4\u5408\u6570\u8ba1\u7b97\u65f6\u7684\u5206\u6bcd\u662f n! n! \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u6c42\u7ec4\u5408\u6570\u65f6\u4ee4\u5206\u5b50\u8ba1\u7b97\u65f6\u5bf9 2004 \\times n! 2004 \\times n! \u53d6\u6a21\uff0c\u6700\u540e\u5728\u9664\u4ee5\u5206\u6bcd \u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u88ab\u5b8c\u7f8e\u89e3\u51b3\u4e86","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E5%B8%B8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_8","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 2004 , N = 15 ; int n , a , b ; int ab [ N ]; map < int , int > mp ; int fac [ N ]; void init ( int n ) { fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i ; } } int C ( int a , int b , int p ) { int fz = 1 , fm = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { fz *= j ; fz %= p ; } //cout << fz << \" \" << fm << endl; return ( fz / fac [ n ]) % mod ; } signed main () { cin >> n >> a >> b ; for ( int i = 0 ; i < n ; i ++ ) cin >> ab [ i ]; init ( n + 1 ); for ( int i = 0 ; i < ( 1 << n ); i ++ ) { int sum = 0 ; int k = 1 ; for ( int j = 0 ; j < n ; j ++ ) { if (( i >> j ) & 1 ) { sum += ( ab [ j ] + 1 ); k = - k ; } } mp [ sum ] += k ; } int res = 0 ; for ( auto [ k , v ] : mp ) { if ( k > b ) break ; int kk = max ( k , a ); res += v % mod * ( C ( b - k + n , n , mod * fac [ n ]) - C ( kk - k + n - 1 , n , mod * fac [ n ])) % mod ; res %= mod ; } cout << ( res % mod + mod ) % mod << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/","text":"\u6982\u8ff0 \u00b6 \u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u9002\u7528\u4e8e\u89e3\u51b3\u591a\u91cd\u96c6\u9009\u62e9\u6392\u5217\u95ee\u9898\u3002 \u5e8f\u5217 a_n a_n \u5b9a\u4e49\u4e3a\u5f62\u5f0f\u5e42\u7ea7\u6570\u6709\u4ee5\u4e0b\u5f62\u5f0f: F(x)=\\sum a_n\\frac{x^n}{n!} F(x)=\\sum a_n\\frac{x^n}{n!} \u5e94\u7528 \u00b6 \u901a\u5e38\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898: \u591a\u91cd\u96c6\u79cd\u6709 n n \u79cd\u4e0d\u540c\u5143\u7d20\uff0c\u6bcf\u79cd\u6709 a_1,a_2...a_n a_1,a_2...a_n \u4e2a\uff0c\u6c42\u4ece\u4e2d\u9009 m m \u4e2a\u5e76\u6392\u5217\u7684\u65b9\u6848\u6570 \u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u66ff\u6362\u5f0f: \\sum_{i\\ge0}\\frac{x^n}{n!}=e^x \\sum_{i\\ge0}\\frac{x^n}{n!}=e^x 1+\\frac{x^2}{2!}+\\frac{x^4}{4!}=\\frac{e^x+e^{-x}}{2} 1+\\frac{x^2}{2!}+\\frac{x^4}{4!}=\\frac{e^x+e^{-x}}{2} \u4f8b1.Blocks \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u89e3 \u00b6 \u6784\u9020\u51fa\u7ea2\u3001\u7eff\u7816\u7684\u6307\u6570\u751f\u6210\u51fd\u6570 F(x)=1+\\frac{x^2}{2!}+\\frac{x^4}{4!}...=\\frac{e^x+e^{-x}}{2} F(x)=1+\\frac{x^2}{2!}+\\frac{x^4}{4!}...=\\frac{e^x+e^{-x}}{2} \u9ec4\u3001\u84dd\u7816\u7684\u6307\u6570\u751f\u6210\u51fd\u6570 G(x)=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}...=e^x G(x)=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}...=e^x \u5219 H(x)=F^2(x)G^2(x)=\\frac{e^{4x}+2e^{2e} + 1}{4}=\\frac{1}{4}\\sum_{n\\ge0}\\frac{(4x)^n+2(2x)^n}{n!}+\\frac{1}{4} H(x)=F^2(x)G^2(x)=\\frac{e^{4x}+2e^{2e} + 1}{4}=\\frac{1}{4}\\sum_{n\\ge0}\\frac{(4x)^n+2(2x)^n}{n!}+\\frac{1}{4} \u4e3a\u7b54\u6848\u7684\u6307\u6570\u751f\u6210\u51fd\u6570 \u56e0\u6b64\u7ed3\u679c\u4e3a n![x^n]H(x)=n!\\frac{1}{4}(\\frac{4^n+2^{n+1}}{n!})=4^{n-1}+2^{n-1} n![x^n]H(x)=n!\\frac{1}{4}(\\frac{4^n+2^{n+1}}{n!})=4^{n-1}+2^{n-1} \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int mod = 10007 ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int main () { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; cout << ( qpow ( 4 , n - 1 , mod ) + qpow ( 2 , n - 1 , mod )) % mod << endl ; } return 0 ; }","title":"\u6307\u6570\u751f\u6210\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_1","text":"\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u9002\u7528\u4e8e\u89e3\u51b3\u591a\u91cd\u96c6\u9009\u62e9\u6392\u5217\u95ee\u9898\u3002 \u5e8f\u5217 a_n a_n \u5b9a\u4e49\u4e3a\u5f62\u5f0f\u5e42\u7ea7\u6570\u6709\u4ee5\u4e0b\u5f62\u5f0f: F(x)=\\sum a_n\\frac{x^n}{n!} F(x)=\\sum a_n\\frac{x^n}{n!}","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_2","text":"\u901a\u5e38\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898: \u591a\u91cd\u96c6\u79cd\u6709 n n \u79cd\u4e0d\u540c\u5143\u7d20\uff0c\u6bcf\u79cd\u6709 a_1,a_2...a_n a_1,a_2...a_n \u4e2a\uff0c\u6c42\u4ece\u4e2d\u9009 m m \u4e2a\u5e76\u6392\u5217\u7684\u65b9\u6848\u6570 \u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u66ff\u6362\u5f0f: \\sum_{i\\ge0}\\frac{x^n}{n!}=e^x \\sum_{i\\ge0}\\frac{x^n}{n!}=e^x 1+\\frac{x^2}{2!}+\\frac{x^4}{4!}=\\frac{e^x+e^{-x}}{2} 1+\\frac{x^2}{2!}+\\frac{x^4}{4!}=\\frac{e^x+e^{-x}}{2}","title":"\u5e94\u7528"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#1blocks","text":"\u9898\u76ee\u94fe\u63a5","title":"\u4f8b1.Blocks"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_3","text":"\u6784\u9020\u51fa\u7ea2\u3001\u7eff\u7816\u7684\u6307\u6570\u751f\u6210\u51fd\u6570 F(x)=1+\\frac{x^2}{2!}+\\frac{x^4}{4!}...=\\frac{e^x+e^{-x}}{2} F(x)=1+\\frac{x^2}{2!}+\\frac{x^4}{4!}...=\\frac{e^x+e^{-x}}{2} \u9ec4\u3001\u84dd\u7816\u7684\u6307\u6570\u751f\u6210\u51fd\u6570 G(x)=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}...=e^x G(x)=1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}...=e^x \u5219 H(x)=F^2(x)G^2(x)=\\frac{e^{4x}+2e^{2e} + 1}{4}=\\frac{1}{4}\\sum_{n\\ge0}\\frac{(4x)^n+2(2x)^n}{n!}+\\frac{1}{4} H(x)=F^2(x)G^2(x)=\\frac{e^{4x}+2e^{2e} + 1}{4}=\\frac{1}{4}\\sum_{n\\ge0}\\frac{(4x)^n+2(2x)^n}{n!}+\\frac{1}{4} \u4e3a\u7b54\u6848\u7684\u6307\u6570\u751f\u6210\u51fd\u6570 \u56e0\u6b64\u7ed3\u679c\u4e3a n![x^n]H(x)=n!\\frac{1}{4}(\\frac{4^n+2^{n+1}}{n!})=4^{n-1}+2^{n-1} n![x^n]H(x)=n!\\frac{1}{4}(\\frac{4^n+2^{n+1}}{n!})=4^{n-1}+2^{n-1}","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E5%A4%9A%E9%A1%B9%E5%BC%8F/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/#_4","text":"#include <bits/stdc++.h> using namespace std ; const int mod = 10007 ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int main () { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; cout << ( qpow ( 4 , n - 1 , mod ) + qpow ( 2 , n - 1 , mod )) % mod << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/","text":"\u6982\u8ff0 \u00b6 \u4e3b\u8981\u7528\u4e8e\u89e3\u51b3 a^n=b(mod \\ p) a^n=b(mod \\ p) \u95ee\u9898\uff0c\u6c42\u89e3\u6700\u5c0f\u975e\u8d1f\u6574\u6570n\uff0c\u4f7f\u5176\u6ee1\u8db3\u5de6\u5f0f\uff0c\u666e\u901aBSGS\u6c42\u89e3 a a \u4e0e p p \u4e92\u8d28\u7684\u60c5\u51b5\uff0c\u6269\u5c55BSGS\u53ef\u6c42\u89e3\u4e0d\u4e92\u8d28\u60c5\u51b5 \u666e\u901aBSGS \u00b6 \u89e3\u9898\u6b65\u9aa4 \u00b6 1.\u53d6 m=ceil(sqrt(p)) m=ceil(sqrt(p)) (\u5411\u4e0a\u53d6\u6574)\uff0c\u82e5\u89e3\u5b58\u5728\uff0c\u53ef\u4ee4 n=i*m-j n=i*m-j \uff0c\u5373\u6570\u5bf9 (i,j) (i,j) \u5b58\u5728 2. a^n = b ( mod \\ p ) => a^{i*m-j} = b( mod \\ p ) -> a_{i*m} = b*aj ( mod \\ p ) a^n = b ( mod \\ p ) => a^{i*m-j} = b( mod \\ p ) -> a_{i*m} = b*aj ( mod \\ p ) 3.\u5728 0-m 0-m \u8303\u56f4\u5185\u679a\u4e3e b*aj b*aj \u7684\u503c\uff0c\u5e76\u7528hash\u8868\u5b58\u50a8 j j 4.\u5728 1-m 1-m \u8303\u56f4\u5185\u679a\u4e3e a_i*m a_i*m \u7684\u503c\uff0c\u5728hash\u8868\u4e2d\u67e5\u627e\uff0c\u82e5\u627e\u5230\uff0c\u5219\u8f93\u51fa i*m-j i*m-j \uff0c\u53cd\u4e4b\u65e0\u7b54\u6848 \u4ee3\u7801\u6a21\u677f \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; int a , p , b ; unordered_map < int , int > mp ; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } int bsgs ( int a , int b , int p ) { a %= p ; b %= p ; if ( 1 == b % p ) return 0 ; //\u7279\u5224\u7ed3\u679c\u4e3a0\u7684\u60c5\u51b5 int m = ceil ( sqrt ( p )); int baj = 1 ; for ( int i = 0 ; i <= m ; i ++ ) { if ( i == 0 ) { baj = b % p ; mp [ baj ] = i ; continue ; } baj *= a ; baj %= p ; mp [ baj ] = i ; } int am = qpow ( a , m , p ); int tmp = 1 ; for ( int i = 1 ; i <= m ; i ++ ) //\u7531\u4e8e\u5047\u8bben\u4e3ai*m-j\uff0c\u82e5i\u4ece0\u5f00\u59cb\u679a\u4e3e\u5219\u6709\u53ef\u80fd\u8f93\u6570 { tmp *= am ; tmp %= p ; if ( mp . count ( tmp )) return i * m - mp [ tmp ]; } return -1 ; } signed main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); while ( cin >> a >> p >> b ) { mp . clear (); if ( a == 0 && p == 0 && b == 0 ) break ; int ans = bsgs ( a , b , p ); if ( ans == -1 ) cout << \"No Solution\" << endl ; else cout << ans << endl ; } return 0 ; } \u6269\u5c55BSGS \u00b6 \u89e3\u9898\u6b65\u9aa4 \u00b6 1.\u5f53 a a \u4e0e p p \u4e92\u8d28\u65f6\uff0c\u5957\u7528\u666e\u901aBSGS\u5373\u53ef 2.\u5f53 a a \u4e0e p p \u4e0d\u4e92\u8d28\u65f6\uff0c\u8bbe gcd gcd \u4e3a a a \u4e0e p p \u7684\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5bf9\u4e8e\u65b9\u7a0b a^n=b ( mod \\ p ) \uff0c\u4e00\u5b9a\u6709 a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 \uff0c\u4e00\u5b9a\u6709 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd )</span><script type=\"math/tex\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 bb a^n=b ( mod \\ p ) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\uff0c\u4e00\u5b9a\u6709 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd )</span><script type=\"math/tex\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 \uff0c\u4e00\u5b9a\u6709 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd )</span><script type=\"math/tex\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 bb \u4e0d\u4e3a gcd gcd \u7684\u500d\u6570\uff0c\u5219\u65b9\u7a0b\u65e0\u89e3 3.\u5bf9\u4e8e\u65b0\u65b9\u7a0b \u4ee4 b/ gcd /( a / gcd) = b\u2019 b/ gcd /( a / gcd) = b\u2019 , p/gcd = p\u2019 p/gcd = p\u2019 , \u7528\u9006\u5143\u5904\u7406 b\u2019 b\u2019 , \u9012\u5f52\u6c42\u89e3\u5373\u53ef \u4ee3\u7801\u6a21\u677f \u00b6 #include <bits/stdc++.h> using namespace std ; #define int long long const int inf = 1e8 ; int a , p , b , x , y ; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } int exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } unordered_map < int , int > mp ; int bsgs ( int a , int b , int p ) { mp . clear (); a = a % p ; //b=(b%p+p)%p; if ( 1 % p == b % p ) return 0 ; //\u7279\u5224\u7ed3\u679c\u4e3a0\u7684\u60c5\u51b5 int m = ceil ( sqrt ( p )); int baj = 1 ; for ( int i = 0 ; i <= m ; i ++ ) { if ( i == 0 ) { baj = b % p ; mp [ baj ] = i ; continue ; } baj *= a ; baj %= p ; mp [ baj ] = i ; } int am = qpow ( a , m , p ); int tmp = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { tmp *= am ; tmp %= p ; if ( mp . count ( tmp )) return i * m - mp [ tmp ]; } return -1 ; } int exbsgs ( int a , int b , int p ) { b = ( b % p + p ) % p ; //\u4ee4b\u4e3a\u6b63 if ( 1 % p == b % p ) return 0 ; int gcd = exgcd ( a , p , x , y ); if ( gcd > 1 ) { if ( b % gcd ) return - inf ; exgcd ( a / gcd , p / gcd , x , y ); int a2 = a ; int b2 = b / gcd * x % ( p / gcd ); int p2 = p / gcd ; return exbsgs ( a2 , b2 , p2 ) + 1 ; } return bsgs ( a , b , p ); } signed main () { ios :: sync_with_stdio ( 0 ); while ( cin >> a >> p >> b ) { if ( ! a &&! b &&! p ) break ; int ans = exbsgs ( a , b , p ); if ( ans < 0 ) cout << \"No Solution\" << endl ; else cout << ans << endl ; } return 0 ; } \u4f8b1.\u6d1b\u8c37P4861 \u6309\u94ae \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u76ee\u63cf\u8ff0 Ada\u88ab\u5173\u5728\u4e86\u4e00\u4e2a\u623f\u95f4\u91cc\u3002\u623f\u95f4\u7684\u94c1\u95e8\u4e0a\u6709\u4e00\u4e2a\u6309\u94ae\uff0c\u8fd8\u6709\u4e00\u4e2a\u663e\u793a\u5c4f\u663e\u793a\u7740\u201c1\u201d\u3002 \u65c1\u8fb9\u8fd8\u6709\u4e00\u884c\u5c0f\u5b57\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7cbe\u5ea6M\u8fdb\u5236\u8ba1\u7b97\u5668\uff0c\u6bcf\u6309\u4e00\u6b21\u6309\u94ae\uff0c\u5c4f\u5e55\u4e0a\u7684\u6570\u4fbf\u4f1a\u4e58\u4ee5K\u3002\u5f53\u4e2a\u4f4d\u6570\u518d\u6b21\u53d8\u4e3a1\u65f6\uff0c\u95e8\u5c31\u5f00\u4e86\u3002\u201d \u7531\u4e8eAda\u6025\u4e8e\u51fa\u53bb\uff0c\u6240\u4ee5\u4f60\u8981\u57281s\u4e4b\u5185\u6c42\u51fa\u5979\u7684\u6700\u5c0f\u6309\u952e\u6b21\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570m\u548ck \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6700\u5c0f\u6309\u952e\u6b21\u6570\u3002 \u5982\u679c\u65e0\u8bbaAda\u6309\u591a\u5c11\u6b21\u90fd\u65e0\u6cd5\u8ba9\u95e8\u6253\u5f00\uff0c\u8f93\u51fa\"Let's go Blue Jays!\"\uff08\u4e0d\u542b\u5f15\u53f7\uff09\u3002 \u8f93\u5165\u6837\u4f8b1 11 2 \u8f93\u51fa\u6837\u4f8b1 10 \u8f93\u5165\u6837\u4f8b2 6 26 \u8f93\u51fa\u6837\u4f8b2 Let's go Blue Jays! \u9898\u89e3 \u00b6 \u82e5\u6700\u540e\u7b54\u6848\u5b58\u5728\uff0c\u5219\u6709\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\uff0c k^n k^n \u548c m*x+1 m*x+1 \uff0c\u4e8e\u662f\u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b\uff0c k^n = 1 ( mod\\ m ) k^n = 1 ( mod\\ m ) ,\u5957\u7528\u7531\u4e8e\u7b54\u6848\u4e0d\u80fd\u4e3a 0 0 \uff0c\u4e8e\u662f\u7279\u5224\u4e00\u4e0b\u539f\u6a21\u677f\u4e2d\u8f93\u51fa 0 0 \u7684\u60c5\u51b5\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; #define int long long int m , k ; unordered_map < int , int > mp ; int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans % mod * a % mod ; a = a % mod * a % mod ; n >>= 1 ; } return ans ; } int bsgs ( int a , int b , int p ) { a %= p ; b %= p ; int m = ceil ( sqrt ( p )); int tmp ; for ( int i = 0 ; i <= m ; i ++ ) { if ( i == 0 ) { tmp = b % p ; mp [ tmp ] = i ; continue ; } tmp *= a ; tmp %= p ; mp [ tmp ] = i ; } int am = qpow ( a , m , p ); int now = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { now *= am ; now %= p ; //cout<<\"now=\"<<now<<endl; if ( mp . count ( now ) && i * m - mp [ now ] == 0 ) continue ; //\u7279\u5224\u7ed3\u679c\u4e3a0\u7684 else if ( mp . count ( now )) return i * m - mp [ now ]; } return -1 ; } int x , y ; signed main () { cin >> m >> k ; int gcd = exgcd ( m , k , x , y ); if ( gcd != 1 ) { cout << \"Let's go Blue Jays!\" << endl ; return 0 ; } int ans = bsgs ( k , 1 , m ); if ( ans == -1 ) cout << \"Let's go Blue Jays!\" << endl ; else cout << ans << endl ; return 0 ; }","title":"BSGS\u548c\u6269\u5c55BSGS"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_1","text":"\u4e3b\u8981\u7528\u4e8e\u89e3\u51b3 a^n=b(mod \\ p) a^n=b(mod \\ p) \u95ee\u9898\uff0c\u6c42\u89e3\u6700\u5c0f\u975e\u8d1f\u6574\u6570n\uff0c\u4f7f\u5176\u6ee1\u8db3\u5de6\u5f0f\uff0c\u666e\u901aBSGS\u6c42\u89e3 a a \u4e0e p p \u4e92\u8d28\u7684\u60c5\u51b5\uff0c\u6269\u5c55BSGS\u53ef\u6c42\u89e3\u4e0d\u4e92\u8d28\u60c5\u51b5","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#bsgs","text":"","title":"\u666e\u901aBSGS"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_2","text":"1.\u53d6 m=ceil(sqrt(p)) m=ceil(sqrt(p)) (\u5411\u4e0a\u53d6\u6574)\uff0c\u82e5\u89e3\u5b58\u5728\uff0c\u53ef\u4ee4 n=i*m-j n=i*m-j \uff0c\u5373\u6570\u5bf9 (i,j) (i,j) \u5b58\u5728 2. a^n = b ( mod \\ p ) => a^{i*m-j} = b( mod \\ p ) -> a_{i*m} = b*aj ( mod \\ p ) a^n = b ( mod \\ p ) => a^{i*m-j} = b( mod \\ p ) -> a_{i*m} = b*aj ( mod \\ p ) 3.\u5728 0-m 0-m \u8303\u56f4\u5185\u679a\u4e3e b*aj b*aj \u7684\u503c\uff0c\u5e76\u7528hash\u8868\u5b58\u50a8 j j 4.\u5728 1-m 1-m \u8303\u56f4\u5185\u679a\u4e3e a_i*m a_i*m \u7684\u503c\uff0c\u5728hash\u8868\u4e2d\u67e5\u627e\uff0c\u82e5\u627e\u5230\uff0c\u5219\u8f93\u51fa i*m-j i*m-j \uff0c\u53cd\u4e4b\u65e0\u7b54\u6848","title":"\u89e3\u9898\u6b65\u9aa4"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_3","text":"#include <bits/stdc++.h> #define int long long using namespace std ; int a , p , b ; unordered_map < int , int > mp ; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } int bsgs ( int a , int b , int p ) { a %= p ; b %= p ; if ( 1 == b % p ) return 0 ; //\u7279\u5224\u7ed3\u679c\u4e3a0\u7684\u60c5\u51b5 int m = ceil ( sqrt ( p )); int baj = 1 ; for ( int i = 0 ; i <= m ; i ++ ) { if ( i == 0 ) { baj = b % p ; mp [ baj ] = i ; continue ; } baj *= a ; baj %= p ; mp [ baj ] = i ; } int am = qpow ( a , m , p ); int tmp = 1 ; for ( int i = 1 ; i <= m ; i ++ ) //\u7531\u4e8e\u5047\u8bben\u4e3ai*m-j\uff0c\u82e5i\u4ece0\u5f00\u59cb\u679a\u4e3e\u5219\u6709\u53ef\u80fd\u8f93\u6570 { tmp *= am ; tmp %= p ; if ( mp . count ( tmp )) return i * m - mp [ tmp ]; } return -1 ; } signed main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); while ( cin >> a >> p >> b ) { mp . clear (); if ( a == 0 && p == 0 && b == 0 ) break ; int ans = bsgs ( a , b , p ); if ( ans == -1 ) cout << \"No Solution\" << endl ; else cout << ans << endl ; } return 0 ; }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#bsgs_1","text":"","title":"\u6269\u5c55BSGS"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_4","text":"1.\u5f53 a a \u4e0e p p \u4e92\u8d28\u65f6\uff0c\u5957\u7528\u666e\u901aBSGS\u5373\u53ef 2.\u5f53 a a \u4e0e p p \u4e0d\u4e92\u8d28\u65f6\uff0c\u8bbe gcd gcd \u4e3a a a \u4e0e p p \u7684\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5bf9\u4e8e\u65b9\u7a0b a^n=b ( mod \\ p ) \uff0c\u4e00\u5b9a\u6709 a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 \uff0c\u4e00\u5b9a\u6709 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd )</span><script type=\"math/tex\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 bb a^n=b ( mod \\ p ) <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\uff0c\u4e00\u5b9a\u6709 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd )</span><script type=\"math/tex\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 \uff0c\u4e00\u5b9a\u6709 <span class=\"arithmatex\"><span class=\"MathJax_Preview\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd )</span><script type=\"math/tex\">a/gcd * a^{n-1} = b/gcd ( mod\\ p/gcd ) \u5b58\u5728\uff0c\u56e0\u6b64\u82e5\u5b58\u5728\uff0c\u56e0\u6b64\u82e5 bb \u4e0d\u4e3a gcd gcd \u7684\u500d\u6570\uff0c\u5219\u65b9\u7a0b\u65e0\u89e3 3.\u5bf9\u4e8e\u65b0\u65b9\u7a0b \u4ee4 b/ gcd /( a / gcd) = b\u2019 b/ gcd /( a / gcd) = b\u2019 , p/gcd = p\u2019 p/gcd = p\u2019 , \u7528\u9006\u5143\u5904\u7406 b\u2019 b\u2019 , \u9012\u5f52\u6c42\u89e3\u5373\u53ef","title":"\u89e3\u9898\u6b65\u9aa4"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_5","text":"#include <bits/stdc++.h> using namespace std ; #define int long long const int inf = 1e8 ; int a , p , b , x , y ; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } int exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } unordered_map < int , int > mp ; int bsgs ( int a , int b , int p ) { mp . clear (); a = a % p ; //b=(b%p+p)%p; if ( 1 % p == b % p ) return 0 ; //\u7279\u5224\u7ed3\u679c\u4e3a0\u7684\u60c5\u51b5 int m = ceil ( sqrt ( p )); int baj = 1 ; for ( int i = 0 ; i <= m ; i ++ ) { if ( i == 0 ) { baj = b % p ; mp [ baj ] = i ; continue ; } baj *= a ; baj %= p ; mp [ baj ] = i ; } int am = qpow ( a , m , p ); int tmp = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { tmp *= am ; tmp %= p ; if ( mp . count ( tmp )) return i * m - mp [ tmp ]; } return -1 ; } int exbsgs ( int a , int b , int p ) { b = ( b % p + p ) % p ; //\u4ee4b\u4e3a\u6b63 if ( 1 % p == b % p ) return 0 ; int gcd = exgcd ( a , p , x , y ); if ( gcd > 1 ) { if ( b % gcd ) return - inf ; exgcd ( a / gcd , p / gcd , x , y ); int a2 = a ; int b2 = b / gcd * x % ( p / gcd ); int p2 = p / gcd ; return exbsgs ( a2 , b2 , p2 ) + 1 ; } return bsgs ( a , b , p ); } signed main () { ios :: sync_with_stdio ( 0 ); while ( cin >> a >> p >> b ) { if ( ! a &&! b &&! p ) break ; int ans = exbsgs ( a , b , p ); if ( ans < 0 ) cout << \"No Solution\" << endl ; else cout << ans << endl ; } return 0 ; }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#1p4861","text":"\u9898\u76ee\u5165\u53e3 \u9898\u76ee\u63cf\u8ff0 Ada\u88ab\u5173\u5728\u4e86\u4e00\u4e2a\u623f\u95f4\u91cc\u3002\u623f\u95f4\u7684\u94c1\u95e8\u4e0a\u6709\u4e00\u4e2a\u6309\u94ae\uff0c\u8fd8\u6709\u4e00\u4e2a\u663e\u793a\u5c4f\u663e\u793a\u7740\u201c1\u201d\u3002 \u65c1\u8fb9\u8fd8\u6709\u4e00\u884c\u5c0f\u5b57\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7cbe\u5ea6M\u8fdb\u5236\u8ba1\u7b97\u5668\uff0c\u6bcf\u6309\u4e00\u6b21\u6309\u94ae\uff0c\u5c4f\u5e55\u4e0a\u7684\u6570\u4fbf\u4f1a\u4e58\u4ee5K\u3002\u5f53\u4e2a\u4f4d\u6570\u518d\u6b21\u53d8\u4e3a1\u65f6\uff0c\u95e8\u5c31\u5f00\u4e86\u3002\u201d \u7531\u4e8eAda\u6025\u4e8e\u51fa\u53bb\uff0c\u6240\u4ee5\u4f60\u8981\u57281s\u4e4b\u5185\u6c42\u51fa\u5979\u7684\u6700\u5c0f\u6309\u952e\u6b21\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570m\u548ck \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6700\u5c0f\u6309\u952e\u6b21\u6570\u3002 \u5982\u679c\u65e0\u8bbaAda\u6309\u591a\u5c11\u6b21\u90fd\u65e0\u6cd5\u8ba9\u95e8\u6253\u5f00\uff0c\u8f93\u51fa\"Let's go Blue Jays!\"\uff08\u4e0d\u542b\u5f15\u53f7\uff09\u3002 \u8f93\u5165\u6837\u4f8b1 11 2 \u8f93\u51fa\u6837\u4f8b1 10 \u8f93\u5165\u6837\u4f8b2 6 26 \u8f93\u51fa\u6837\u4f8b2 Let's go Blue Jays!","title":"\u4f8b1.\u6d1b\u8c37P4861 \u6309\u94ae"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_6","text":"\u82e5\u6700\u540e\u7b54\u6848\u5b58\u5728\uff0c\u5219\u6709\u4e24\u79cd\u8868\u8fbe\u65b9\u5f0f\uff0c k^n k^n \u548c m*x+1 m*x+1 \uff0c\u4e8e\u662f\u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b\uff0c k^n = 1 ( mod\\ m ) k^n = 1 ( mod\\ m ) ,\u5957\u7528\u7531\u4e8e\u7b54\u6848\u4e0d\u80fd\u4e3a 0 0 \uff0c\u4e8e\u662f\u7279\u5224\u4e00\u4e0b\u539f\u6a21\u677f\u4e2d\u8f93\u51fa 0 0 \u7684\u60c5\u51b5\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/BSGS/#_7","text":"#include <bits/stdc++.h> using namespace std ; #define int long long int m , k ; unordered_map < int , int > mp ; int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans % mod * a % mod ; a = a % mod * a % mod ; n >>= 1 ; } return ans ; } int bsgs ( int a , int b , int p ) { a %= p ; b %= p ; int m = ceil ( sqrt ( p )); int tmp ; for ( int i = 0 ; i <= m ; i ++ ) { if ( i == 0 ) { tmp = b % p ; mp [ tmp ] = i ; continue ; } tmp *= a ; tmp %= p ; mp [ tmp ] = i ; } int am = qpow ( a , m , p ); int now = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { now *= am ; now %= p ; //cout<<\"now=\"<<now<<endl; if ( mp . count ( now ) && i * m - mp [ now ] == 0 ) continue ; //\u7279\u5224\u7ed3\u679c\u4e3a0\u7684 else if ( mp . count ( now )) return i * m - mp [ now ]; } return -1 ; } int x , y ; signed main () { cin >> m >> k ; int gcd = exgcd ( m , k , x , y ); if ( gcd != 1 ) { cout << \"Let's go Blue Jays!\" << endl ; return 0 ; } int ans = bsgs ( k , 1 , m ); if ( ans == -1 ) cout << \"Let's go Blue Jays!\" << endl ; else cout << ans << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/","text":"\u6982\u8ff0 \u00b6 \u7528\u4e8e\u6c42\u89e3\u6a21\u6570\u4e92\u8d28\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4 \u89e3\u9898\u65b9\u6cd5 \u00b6 \u4ee3\u7801\u6a21\u677f \u00b6 int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } int crt ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x , y ; exgcd ( MOD / mod [ i ], mod [ i ], x , y ); ans = ( ans + MOD / mod [ i ] * x * yu [ i ]) % MOD ; } return ( ans % MOD + MOD ) % MOD ; } \u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u6982\u8ff0 \u00b6 \u7528\u4e8e\u6c42\u89e3\u6a21\u6570\u4e0d\u4e92\u8d28\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4 \u89e3\u9898\u65b9\u6cd5 \u00b6 \u4ee3\u7801\u6a21\u677f \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int x , y ; int n ; int mod [ N ], yu [ N ]; int qmul ( int a , int n , int mod ) { int res = 0 ; while ( n ) { if ( n & 1 ) res = ( res + a ) % mod ; a = ( a + a ) % mod ; n >>= 1 ; } return res ; } int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } int ex_crt ( int * mod , int * yu ) { int ans = yu [ 1 ]; int m = mod [ 1 ]; for ( int i = 2 ; i <= n ; i ++ ) { int tmp = ( yu [ i ] % mod [ i ] - ans % mod [ i ] + mod [ i ]) % mod [ i ]; //yu[i]-x=t*m(mod mod[i]) \u6c42t int gcd = exgcd ( m , mod [ i ], x , y ); if ( tmp % gcd ) return -1 ; int times = tmp / gcd ; int bg = mod [ i ] / gcd ; x = qmul ( x , times , bg ); //\u8fd9\u91cc\u4e58\u6cd5\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u5199\u4e2a\u5feb\u901f\u52a0\u6cd5 ans = ans + m * x ; m = m / gcd * mod [ i ]; ans = ( ans % m + m ) % m ; } return ( ans % m + m ) % m ; } signed main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> mod [ i ] >> yu [ i ]; cout << ex_crt ( mod , yu ) << endl ; return 0 ; } \u4f8b1.\u6d1b\u8c37P1495 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u81ea\u4ece\u66f9\u51b2\u641e\u5b9a\u4e86\u5927\u8c61\u4ee5\u540e\uff0c\u66f9\u64cd\u5c31\u5f00\u59cb\u6349\u6478\u8ba9\u513f\u5b50\u5e72\u4e9b\u4e8b\u4e1a\uff0c\u4e8e\u662f\u6d3e\u4ed6\u5230\u4e2d\u539f\u517b\u732a\u573a\u517b\u732a\uff0c\u53ef\u662f\u66f9\u51b2\u6ee1\u4e0d\u9ad8\u5174\uff0c\u4e8e\u662f\u5728\u5de5\u4f5c\u4e2d\u9a6c\u9a6c\u864e\u864e\uff0c\u6709\u4e00\u6b21\u66f9\u64cd\u60f3\u77e5\u9053\u6bcd\u732a\u7684\u6570\u91cf\uff0c\u4e8e\u662f\u66f9\u51b2\u60f3\u72e0\u72e0\u800d\u66f9\u64cd\u4e00\u628a\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6709 1616 \u5934\u6bcd\u732a\uff0c\u5982\u679c\u5efa\u4e86 33 \u4e2a\u732a\u5708\uff0c\u5269\u4e0b 11 \u5934\u732a\u5c31\u6ca1\u6709\u5730\u65b9\u5b89\u5bb6\u4e86\u3002\u5982\u679c\u5efa\u9020\u4e86 55 \u4e2a\u732a\u5708\uff0c\u4f46\u662f\u4ecd\u7136\u6709 11 \u5934\u732a\u6ca1\u6709\u5730\u65b9\u53bb\uff0c\u7136\u540e\u5982\u679c\u5efa\u9020\u4e86 77 \u4e2a\u732a\u5708\uff0c\u8fd8\u6709 22 \u5934\u6ca1\u6709\u5730\u65b9\u53bb\u3002\u4f60\u4f5c\u4e3a\u66f9\u603b\u7684\u79c1\u4eba\u79d8\u4e66\u7406\u6240\u5f53\u7136\u8981\u5c06\u51c6\u786e\u7684\u732a\u6570\u62a5\u7ed9\u66f9\u603b\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n\u4e3a\u5efa\u7acb\u732a\u5708\u7684\u6b21\u6570\uff0c\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570ai\uff0cbi\u8868\u793a\u5efa\u7acb\u4e86ai\u4e2a\u732a\u5708\uff0c\u6709bi\u5934\u732a\u6ca1\u6709\u53bb\u5904\uff0c\u89c4\u5b9aai\uff0caj\u4e92\u8d28 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5373\u4e3a\u66f9\u51b2\u81f3\u5c11\u517b\u6bcd\u732a\u7684\u6570\u76ee\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 5 1 7 2 \u8f93\u51fa\u6837\u4f8b 16 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; ll mod [ 15 ]; ll yu [ 15 ]; ll MOD = 1 ; ll exgcd ( ll a , ll b , ll & x , ll & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } ll ans = exgcd ( b , a % b , x , y ); ll tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } ll crt ( int n ) { ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ll x , y ; exgcd ( MOD / mod [ i ], mod [ i ], x , y ); ans = ( ans + MOD / mod [ i ] * x * yu [ i ]) % MOD ; } return ans ; } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> mod [ i ] >> yu [ i ]; } for ( int i = 1 ; i <= n ; i ++ ) MOD *= mod [ i ]; cout << ( crt ( n ) + MOD ) % MOD ; return 0 ; } \u4f8b2.HDU3579 Hello Kiki \u00b6 \u9898\u76ee\u80cc\u666f One day I was shopping in the supermarket. There was a cashier counting coins seriously when a little kid running and singing \"\u95e8\u524d\u5927\u6865\u4e0b\u6e38\u8fc7\u4e00\u7fa4\u9e2d\uff0c\u5feb\u6765\u5feb\u6765 \u6570\u4e00\u6570\uff0c\u4e8c\u56db\u516d\u4e03\u516b\". And then the cashier put the counted coins back morosely and count again... Hello Kiki is such a lovely girl that she loves doing counting in a different way. For example, when she is counting X coins, she count them N times. Each time she divide the coins into several same sized groups and write down the group size Mi and the number of the remaining coins Ai on her note. One day Kiki's father found her note and he wanted to know how much coins Kiki was counting. \u8f93\u5165\u683c\u5f0f The first line is T indicating the number of test cases. Each case contains N on the first line, Mi(1 <= i <= N) on the second line, and corresponding Ai(1 <= i <= N) on the third line. All numbers in the input and output are integers. 1 <= T <= 100, 1 <= N <= 6, 1 <= Mi <= 50, 0 <= Ai < Mi \u8f93\u51fa\u683c\u5f0f For each case output the least positive integer X which Kiki was counting in the sample output format. If there is no solution then output -1. \u8f93\u5165\u6837\u4f8b 2 2 14 57 5 56 5 19 54 40 24 80 11 2 36 20 76 \u8f93\u51fa\u6837\u4f8b Case 1: 341 Case 2: 5996 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> typedef long long ll ; using namespace std ; ll M [ 10 ]; ll A [ 10 ]; ll ex_gcd ( ll a , ll b , ll & x , ll & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } ll ans = ex_gcd ( b , a % b , x , y ); ll tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } ll ex_crt ( ll * yu , ll * mod , ll n ) { ll ans = yu [ 1 ]; ll m = mod [ 1 ]; ll x , y ; ll now ; for ( ll i = 2 ; i <= n ; i ++ ) { now = ( yu [ i ] % mod [ i ] - ans % mod [ i ] + mod [ i ]) % mod [ i ]; //t*m=ak-x(mod m) //now=ak-x \u6ee1\u8db3 now<m ll gcd = ex_gcd ( m , mod [ i ], x , y ); //\u6269\u6b27\u6c42\u65b9\u7a0b\u7684\u89e3 if ( now % gcd ) return -1 ; //\u5224\u65adt\u662f\u5426\u5b58\u5728 ll k = now / gcd ; x *= k ; //\u6c42\u7684t'\u4e3at'*m=gcd (mod m)\u7684\u89e3\uff0c\u9700\u8981\u4e58\u4ee5\u500d\u6570 int s = mod [ i ] / gcd ; x = ( x % s + mod [ i ] / gcd ) % ( mod [ i ] / gcd ); //x=x+t*m\u66f4\u65b0x ans = ans + x * m ; // m = m * mod [ i ] / gcd ; } return ( ans + m ) % m ? ( ans + m ) % m : m ; } int main () { ll t ; cin >> t ; for ( ll i = 1 ; i <= t ; i ++ ) { memset ( A , 0 , sizeof ( A )); memset ( M , 0 , sizeof ( M )); ll n ; cin >> n ; for ( ll j = 1 ; j <= n ; j ++ ) cin >> M [ j ]; for ( ll j = 1 ; j <= n ; j ++ ) cin >> A [ j ]; cout << \"Case \" << i << \": \" << ex_crt ( A , M , n ) << endl ; } return 0 ; }","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_1","text":"\u7528\u4e8e\u6c42\u89e3\u6a21\u6570\u4e92\u8d28\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_2","text":"","title":"\u89e3\u9898\u65b9\u6cd5"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_3","text":"int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } int crt ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x , y ; exgcd ( MOD / mod [ i ], mod [ i ], x , y ); ans = ( ans + MOD / mod [ i ] * x * yu [ i ]) % MOD ; } return ( ans % MOD + MOD ) % MOD ; }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_4","text":"","title":"\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_5","text":"\u7528\u4e8e\u6c42\u89e3\u6a21\u6570\u4e0d\u4e92\u8d28\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_6","text":"","title":"\u89e3\u9898\u65b9\u6cd5"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_7","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int x , y ; int n ; int mod [ N ], yu [ N ]; int qmul ( int a , int n , int mod ) { int res = 0 ; while ( n ) { if ( n & 1 ) res = ( res + a ) % mod ; a = ( a + a ) % mod ; n >>= 1 ; } return res ; } int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } int ex_crt ( int * mod , int * yu ) { int ans = yu [ 1 ]; int m = mod [ 1 ]; for ( int i = 2 ; i <= n ; i ++ ) { int tmp = ( yu [ i ] % mod [ i ] - ans % mod [ i ] + mod [ i ]) % mod [ i ]; //yu[i]-x=t*m(mod mod[i]) \u6c42t int gcd = exgcd ( m , mod [ i ], x , y ); if ( tmp % gcd ) return -1 ; int times = tmp / gcd ; int bg = mod [ i ] / gcd ; x = qmul ( x , times , bg ); //\u8fd9\u91cc\u4e58\u6cd5\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u5199\u4e2a\u5feb\u901f\u52a0\u6cd5 ans = ans + m * x ; m = m / gcd * mod [ i ]; ans = ( ans % m + m ) % m ; } return ( ans % m + m ) % m ; } signed main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> mod [ i ] >> yu [ i ]; cout << ex_crt ( mod , yu ) << endl ; return 0 ; }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#1p1495","text":"\u9898\u76ee\u63cf\u8ff0 \u81ea\u4ece\u66f9\u51b2\u641e\u5b9a\u4e86\u5927\u8c61\u4ee5\u540e\uff0c\u66f9\u64cd\u5c31\u5f00\u59cb\u6349\u6478\u8ba9\u513f\u5b50\u5e72\u4e9b\u4e8b\u4e1a\uff0c\u4e8e\u662f\u6d3e\u4ed6\u5230\u4e2d\u539f\u517b\u732a\u573a\u517b\u732a\uff0c\u53ef\u662f\u66f9\u51b2\u6ee1\u4e0d\u9ad8\u5174\uff0c\u4e8e\u662f\u5728\u5de5\u4f5c\u4e2d\u9a6c\u9a6c\u864e\u864e\uff0c\u6709\u4e00\u6b21\u66f9\u64cd\u60f3\u77e5\u9053\u6bcd\u732a\u7684\u6570\u91cf\uff0c\u4e8e\u662f\u66f9\u51b2\u60f3\u72e0\u72e0\u800d\u66f9\u64cd\u4e00\u628a\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6709 1616 \u5934\u6bcd\u732a\uff0c\u5982\u679c\u5efa\u4e86 33 \u4e2a\u732a\u5708\uff0c\u5269\u4e0b 11 \u5934\u732a\u5c31\u6ca1\u6709\u5730\u65b9\u5b89\u5bb6\u4e86\u3002\u5982\u679c\u5efa\u9020\u4e86 55 \u4e2a\u732a\u5708\uff0c\u4f46\u662f\u4ecd\u7136\u6709 11 \u5934\u732a\u6ca1\u6709\u5730\u65b9\u53bb\uff0c\u7136\u540e\u5982\u679c\u5efa\u9020\u4e86 77 \u4e2a\u732a\u5708\uff0c\u8fd8\u6709 22 \u5934\u6ca1\u6709\u5730\u65b9\u53bb\u3002\u4f60\u4f5c\u4e3a\u66f9\u603b\u7684\u79c1\u4eba\u79d8\u4e66\u7406\u6240\u5f53\u7136\u8981\u5c06\u51c6\u786e\u7684\u732a\u6570\u62a5\u7ed9\u66f9\u603b\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570n\u4e3a\u5efa\u7acb\u732a\u5708\u7684\u6b21\u6570\uff0c\u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570ai\uff0cbi\u8868\u793a\u5efa\u7acb\u4e86ai\u4e2a\u732a\u5708\uff0c\u6709bi\u5934\u732a\u6ca1\u6709\u53bb\u5904\uff0c\u89c4\u5b9aai\uff0caj\u4e92\u8d28 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5373\u4e3a\u66f9\u51b2\u81f3\u5c11\u517b\u6bcd\u732a\u7684\u6570\u76ee\u3002 \u8f93\u5165\u6837\u4f8b 3 3 1 5 1 7 2 \u8f93\u51fa\u6837\u4f8b 16","title":"\u4f8b1.\u6d1b\u8c37P1495 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_8","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; ll mod [ 15 ]; ll yu [ 15 ]; ll MOD = 1 ; ll exgcd ( ll a , ll b , ll & x , ll & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } ll ans = exgcd ( b , a % b , x , y ); ll tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } ll crt ( int n ) { ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ll x , y ; exgcd ( MOD / mod [ i ], mod [ i ], x , y ); ans = ( ans + MOD / mod [ i ] * x * yu [ i ]) % MOD ; } return ans ; } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> mod [ i ] >> yu [ i ]; } for ( int i = 1 ; i <= n ; i ++ ) MOD *= mod [ i ]; cout << ( crt ( n ) + MOD ) % MOD ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#2hdu3579-hello-kiki","text":"\u9898\u76ee\u80cc\u666f One day I was shopping in the supermarket. There was a cashier counting coins seriously when a little kid running and singing \"\u95e8\u524d\u5927\u6865\u4e0b\u6e38\u8fc7\u4e00\u7fa4\u9e2d\uff0c\u5feb\u6765\u5feb\u6765 \u6570\u4e00\u6570\uff0c\u4e8c\u56db\u516d\u4e03\u516b\". And then the cashier put the counted coins back morosely and count again... Hello Kiki is such a lovely girl that she loves doing counting in a different way. For example, when she is counting X coins, she count them N times. Each time she divide the coins into several same sized groups and write down the group size Mi and the number of the remaining coins Ai on her note. One day Kiki's father found her note and he wanted to know how much coins Kiki was counting. \u8f93\u5165\u683c\u5f0f The first line is T indicating the number of test cases. Each case contains N on the first line, Mi(1 <= i <= N) on the second line, and corresponding Ai(1 <= i <= N) on the third line. All numbers in the input and output are integers. 1 <= T <= 100, 1 <= N <= 6, 1 <= Mi <= 50, 0 <= Ai < Mi \u8f93\u51fa\u683c\u5f0f For each case output the least positive integer X which Kiki was counting in the sample output format. If there is no solution then output -1. \u8f93\u5165\u6837\u4f8b 2 2 14 57 5 56 5 19 54 40 24 80 11 2 36 20 76 \u8f93\u51fa\u6837\u4f8b Case 1: 341 Case 2: 5996","title":"\u4f8b2.HDU3579 Hello Kiki"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/crt/#_9","text":"#include <bits/stdc++.h> typedef long long ll ; using namespace std ; ll M [ 10 ]; ll A [ 10 ]; ll ex_gcd ( ll a , ll b , ll & x , ll & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } ll ans = ex_gcd ( b , a % b , x , y ); ll tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } ll ex_crt ( ll * yu , ll * mod , ll n ) { ll ans = yu [ 1 ]; ll m = mod [ 1 ]; ll x , y ; ll now ; for ( ll i = 2 ; i <= n ; i ++ ) { now = ( yu [ i ] % mod [ i ] - ans % mod [ i ] + mod [ i ]) % mod [ i ]; //t*m=ak-x(mod m) //now=ak-x \u6ee1\u8db3 now<m ll gcd = ex_gcd ( m , mod [ i ], x , y ); //\u6269\u6b27\u6c42\u65b9\u7a0b\u7684\u89e3 if ( now % gcd ) return -1 ; //\u5224\u65adt\u662f\u5426\u5b58\u5728 ll k = now / gcd ; x *= k ; //\u6c42\u7684t'\u4e3at'*m=gcd (mod m)\u7684\u89e3\uff0c\u9700\u8981\u4e58\u4ee5\u500d\u6570 int s = mod [ i ] / gcd ; x = ( x % s + mod [ i ] / gcd ) % ( mod [ i ] / gcd ); //x=x+t*m\u66f4\u65b0x ans = ans + x * m ; // m = m * mod [ i ] / gcd ; } return ( ans + m ) % m ? ( ans + m ) % m : m ; } int main () { ll t ; cin >> t ; for ( ll i = 1 ; i <= t ; i ++ ) { memset ( A , 0 , sizeof ( A )); memset ( M , 0 , sizeof ( M )); ll n ; cin >> n ; for ( ll j = 1 ; j <= n ; j ++ ) cin >> M [ j ]; for ( ll j = 1 ; j <= n ; j ++ ) cin >> A [ j ]; cout << \"Case \" << i << \": \" << ex_crt ( A , M , n ) << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/","text":"\u4f8b1.\u6c99\u62c9\u516c\u4e3b\u7684\u56f0\u60d1 \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u00b6 \u6211\u4eec\u77e5\u9053 gcd(m!+k,m!)=gcd(k,m!) gcd(m!+k,m!)=gcd(k,m!) \u82e5 k>m! k>m! \u4e0d\u59a8\u4ee4 k=m!+c k=m!+c \u4e8e\u662f gcd(k,m!)=gcd(c,m!) gcd(k,m!)=gcd(c,m!) \u6211\u4eec\u76ee\u6807\u6c42 1-n! 1-n! \u4e2d gcd(i,m!)==1 gcd(i,m!)==1 \u7684\u4e2a\u6570 \u53ef\u4ee5\u5c06 n! n! \u5206\u6210 n!/m! n!/m! \u4efd \u6bcf\u4e00\u4efd\u4e3a m! m! \u5176\u4e2d\u4e0e m! m! \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u4e3a \\phi(m!) \\phi(m!) \u5f53m\u4e3a\u8d28\u6570\u65f6 \\phi(m!)=\\phi((m-1)!)*(m-1) \\phi(m!)=\\phi((m-1)!)*(m-1) \u5f53m\u4e0d\u4e3a\u8d28\u6570\u65f6 \\phi(m!)=\\phi((m-1)!)*m \\phi(m!)=\\phi((m-1)!)*m \u6240\u4ee5\u7b54\u6848\u4e3a \\frac{n!}{m!\\phi(m!)} \\frac{n!}{m!\\phi(m!)} \u6ce8\u610f\u672c\u9898\u53c8\u6a21\u6570\u4e0e\u9664\u6570\u975e\u4e92\u8d28\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f r|m! r|m! ,\u6b64\u65f6\u91cd\u65b0\u5904\u7406\u9636\u4e58\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e7 + 5 ; int prime [ N ], phi [ N ], cnt ; bool vis [ N ]; int fac [ N ]; int x , y ; int exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 ; y = 0 ; return a ; } int res = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return res ; } void init ( int n , int mod ) { phi [ 1 ] = 1 ; fac [ 0 ] = fac [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { fac [ i ] = fac [ i -1 ] * i % mod ; if ( ! vis [ i ]) prime [ ++ cnt ] = i , phi [ i ] = phi [ i -1 ] * ( i -1 ) % mod ; else phi [ i ] = phi [ i -1 ] * i % mod ; for ( int j = 1 ; prime [ j ] * i <= n ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) break ; } } } int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } signed main () { int t , mod ; cin >> t >> mod ; init ( N -4 , mod ); while ( t -- ) { int n , m ; cin >> n >> m ; if ( m % mod ) cout << fac [ n ] * phi [ m ] % mod * qpow ( fac [ m ], mod -2 , mod ) % mod << endl ; else { int tmp = 1 ; for ( int i = m + 1 ; i <= n ; i ++ ) ( tmp *= i ) %= mod ; cout << tmp * phi [ m ] % mod << endl ; } } return 0 ; } \u4f8b2.Domino(easy version) \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u00b6 \u8bbe a=p_1 ^ {a_1} * p_2 ^ {a_2} * p_3 ^ {a_3}...p_n ^ {a_n} a=p_1 ^ {a_1} * p_2 ^ {a_2} * p_3 ^ {a_3}...p_n ^ {a_n} ( p_1,p_2... p_1,p_2... \u4e3a a a \u7684\u8d28\u56e0\u6570\uff0c b=k_1 ^ {b_1} * k_2 ^ {b_2} * k_3 ^ {b_3}...k_n ^ {b_n} ( ( k_1,k_2...k_1,k_2... b=k_1 ^ {b_1} * k_2 ^ {b_2} * k_3 ^ {b_3}...k_n ^ {b_n} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(</span><script type=\"math/tex\">( k_1,k_2...k_1,k_2... \u4e3a b b \u7684\u8d28\u56e0\u6570\uff09\uff0c\u5219 a a \u53ef\u4ee5\u5728 cnt1=a_1+a_2+a_3...a_n cnt1=a_1+a_2+a_3...a_n \u7684\u6b21\u6570\u5185\u53d8\u6210 1 1 \uff0cb\u80fd\u591f\u5728 cnt2=b_1+b_2+b_3...+b_n cnt2=b_1+b_2+b_3...+b_n \u7684\u6b21\u6570\u5185\u53d8\u6210 1 1 \uff0c\u4e8e\u662f\u53ef\u4ee5\u53d1\u73b0\uff0c\u82e5 k>cnt1+cnt2 k>cnt1+cnt2 \uff0c\u4e24\u4e2a\u6570\u5728 cnt1+cnt2 cnt1+cnt2 \u64cd\u4f5c\u540e\u65e0\u6cd5\u64cd\u4f5c\uff0c\u8f93\u51fa NO \uff0c\u5728 k<cnt1+cnt2 k<cnt1+cnt2 \u65f6\uff0c\u7279\u5224 k=1 k=1 \u7684\u60c5\u51b5\u5373\u53ef\u3002\u672c\u9898\u5206\u89e3\u8d28\u56e0\u6570\u53ef\u7528\u6b27\u62c9\u7b5b\u9884\u5904\u7406\u3002 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e7 + 5 ; int prime [ N ]; bool vis [ N ]; void euler () { vis [ 1 ] = true ; int cnt = 0 ; for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i ; for ( int j = 1 ; i * prime [ j ] <= N -5 ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) break ; } } } signed main () { int t ; cin >> t ; euler (); while ( t -- ) { int a , b , k ; scanf ( \"%lld %lld %lld\" , & a , & b , & k ); int tmpa = a , tmpb = b ; int cnt1 = 0 , cnt2 = 0 ; if ( a > N -5 || vis [ a ]) for ( register int j = 1 ; prime [ j ] * prime [ j ] <= a ; j ++ ) { if ( a % prime [ j ] == 0 ) { while ( a % prime [ j ] == 0 ) { a /= prime [ j ]; cnt1 ++ ; } } } if ( a > 1 ) cnt1 ++ ; if ( b > N -5 || vis [ b ]) for ( register int j = 1 ; prime [ j ] * prime [ j ] <= b ; j ++ ) { if ( b % prime [ j ] == 0 ) { while ( b % prime [ j ] == 0 ) { b /= prime [ j ]; cnt2 ++ ; } } } if ( b > 1 ) cnt2 ++ ; if ( cnt1 + cnt2 < k ) printf ( \"No \\n \" ); else if ( k == 1 ) { if (( tmpa % tmpb == 0 || tmpb % tmpa == 0 ) && tmpa != tmpb ) printf ( \"Yes \\n \" ); else if ( tmpa == tmpb ) printf ( \"No \\n \" ); else printf ( \"No \\n \" ); } else printf ( \"Yes \\n \" ); } return 0 ; } \u4f8b3.Strange Function \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u00b6 f[x] f[x] \u8868\u793a\u4e0d\u88ab x x \u6574\u9664\u7684\u6700\u5c0f\u7684\u6570\uff0c\u8bbe\u5176\u4e3a a a \uff0c\u5219\u5bf9 x x \u5fc5\u5b58\u5728\u56e0\u5b50 1,2....a-1 1,2....a-1 ,\u4e5f\u5c31\u662f\u8bf4 x x \u5b58\u5728\u7ea6\u6570 a_1=lcm(1,2,3,...a-1) a_1=lcm(1,2,3,...a-1) \uff0c\u7531\u4e8e a a \u4e0d\u88ab\u6574\u9664\uff0c\u6240\u4ee5 x x \u4e0d\u5b58\u5728\u7ea6\u6570 a_2=lcm(1,2,...a) a_2=lcm(1,2,...a) \uff0c\u5728 1-n 1-n \u4e2d a_1 a_1 \u7684\u500d\u6570\u6709 n/a_1 n/a_1 \u4e2a\uff0c a_2 a_2 \u7684\u500d\u6570\u6709 n/a_2 n/a_2 \u4e2a\uff0c\u7531\u4e8e a_1|a_2 a_1|a_2 \uff0c\u6240\u4ee5\u662f a_1 a_1 \u500d\u6570\u4f46\u4e0d\u662f a_2 a_2 \u500d\u6570\u7684\u6709 n/a_1-n/a_2 n/a_1-n/a_2 \u4e2a\uff0c\u4e14\u8fd9\u4e9b\u6570\u7684\u5927\u5c0f\u4e3a a a \uff0c\u5faa\u73af\u5230 lcm lcm \u5927\u4e8e n n \u7684\u65f6\u5019\u505c\u6b62\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long const int mod = 1e9 + 7 ; using namespace std ; int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } int lcm ( int a , int b ) { return a / gcd ( a , b ) * b ; } void solve () { int t , n ; cin >> t ; while ( t -- ) { cin >> n ; int lcmm = 1 ; int tmp = 2 ; int res = 0 ; while ( lcmm <= n ) { int k1 = n / lcmm ; lcmm = lcm ( lcmm , tmp ); tmp ++ ; int k2 = n / lcmm ; res += ( k1 - k2 ) * ( tmp -1 ); res %= mod ; } cout << res << endl ; } } signed main () { solve (); return 0 ; } \u501f\u9274\u535a\u5ba2https://blog.csdn.net/jziwjxjd/article/details/118558335?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163184074316780271543979%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163184074316780271543979&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-118558335.pc_search_ecpm_flag&utm_term=C.+Strange+Function&spm=1018.2226.3001.4187 \u4f8b4.\u7ea6\u6570\u548c \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u76ee\u63cf\u8ff0 \u5bf9\u4e8e\u4e00\u4e2a\u6570 XX\uff0c\u51fd\u6570 f(X)f(X) \u8868\u793a XX \u6240\u6709\u7ea6\u6570\u7684\u548c\u3002\u4f8b\u5982\uff1af(6)=1+2+3+6=12f(6)=1+2+3+6=12\u3002\u5bf9\u4e8e\u4e00\u4e2a XX\uff0cSmart \u53ef\u4ee5\u5f88\u5feb\u7684\u7b97\u51fa f(X)f(X)\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 X,Y(X<Y)X,Y(X<Y)\uff0cSmart \u5e0c\u671b\u5c3d\u5feb\u5730\u7b97\u51fa f(X)+f(X+1)+\u2026\u2026+f(Y)f(X)+f(X+1)+\u2026\u2026+f(Y)\u7684\u503c\uff0c\u4f60\u80fd\u5e2e\u52a9 Smart \u7b97\u51fa\u8fd9\u4e2a\u503c\u5417\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6587\u4ef6\u4ec5\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 XX \u548c Y(X<Y)Y(X<Y)\uff0c\u8868\u793a\u9700\u8981\u8ba1\u7b97 f(X)+f(X+1)+\\dots +f(Y)f(X)+f(X+1)+\u22ef+f(Y)\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u4e3a f(X)+f(X+1)+\\dots+f(Y)f(X)+f(X+1)+\u22ef+f(Y) \u7684\u503c\u3002 \u8f93\u5165 #1 2 4 \u8f93\u51fa #1 14 \u8f93\u5165 #2 123 321 \u8f93\u51fa #2 72543 \u9898\u89e3 \u00b6 \u6211\u4eec\u77e5\u9053\uff0c\u5728 1-n 1-n \u4e2d\uff0c\u82e5 a<n a<n \uff0c\u5219 a a \u7684\u500d\u6570\u6709 n/a n/a \u4e2a\uff0c\u56e0\u6b64\u4e00\u79cd\u66b4\u529b\u7684\u505a\u6cd5\u4fbf\u662f\u679a\u4e3e\u7ea6\u6570 1-y 1-y \u5728 x-y x-y \u7684\u500d\u6570\uff0c\u590d\u6742\u5ea6 O(y) O(y) \uff0c\u8d85\u65f6\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u60f3\u65b0\u65b9\u6cd5\u3002\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u53ea\u662f\u4ee5 1-y 1-y \u4e3a\u7ea6\u6570\u7684\u6570\u6709\u591a\u5c11\u4e2a\uff0c\u800c\u5927\u90e8\u5206\u6570\u7684\u4e2a\u6570\u76f8\u540c\uff0c\u5982 1-100 1-100 \u5185\u4ee5 51\uff0c52\uff0c53\u2026\u2026100 51\uff0c52\uff0c53\u2026\u2026100 \u4e3a\u7ea6\u6570\u7684\u4e2a\u6570\u90fd\u53ea\u6709\u4e00\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u6574\u9664\u5206\u5757\u3002\u6613\u5f97\u7b54\u6848\u4e3a \u2211_1^y( y / i - x-1 / i ) * i \u2211_1^y( y / i - x-1 / i ) * i \u3002 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; int x , y ; signed main () { cin >> x >> y ; int res = 0 ; for ( int l = 1 , r ; l <= y ; l = r + 1 ) { if ( y / l ) r = y / ( y / l ); else break ; res += ( y / l ) * ( r - l + 1 ) * ( l + r ) / 2 ; } for ( int l = 1 , r ; l <= y ; l = r + 1 ) { if (( x -1 ) / l ) r = ( x -1 ) / (( x -1 ) / l ); else break ; res -= ( x -1 ) / l * ( r - l + 1 ) * ( l + r ) / 2 ; } cout << res << endl ; return 0 ; }","title":"\u4f8b\u9898"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#1","text":"\u9898\u76ee\u5165\u53e3","title":"\u4f8b1.\u6c99\u62c9\u516c\u4e3b\u7684\u56f0\u60d1"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_1","text":"\u6211\u4eec\u77e5\u9053 gcd(m!+k,m!)=gcd(k,m!) gcd(m!+k,m!)=gcd(k,m!) \u82e5 k>m! k>m! \u4e0d\u59a8\u4ee4 k=m!+c k=m!+c \u4e8e\u662f gcd(k,m!)=gcd(c,m!) gcd(k,m!)=gcd(c,m!) \u6211\u4eec\u76ee\u6807\u6c42 1-n! 1-n! \u4e2d gcd(i,m!)==1 gcd(i,m!)==1 \u7684\u4e2a\u6570 \u53ef\u4ee5\u5c06 n! n! \u5206\u6210 n!/m! n!/m! \u4efd \u6bcf\u4e00\u4efd\u4e3a m! m! \u5176\u4e2d\u4e0e m! m! \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u4e3a \\phi(m!) \\phi(m!) \u5f53m\u4e3a\u8d28\u6570\u65f6 \\phi(m!)=\\phi((m-1)!)*(m-1) \\phi(m!)=\\phi((m-1)!)*(m-1) \u5f53m\u4e0d\u4e3a\u8d28\u6570\u65f6 \\phi(m!)=\\phi((m-1)!)*m \\phi(m!)=\\phi((m-1)!)*m \u6240\u4ee5\u7b54\u6848\u4e3a \\frac{n!}{m!\\phi(m!)} \\frac{n!}{m!\\phi(m!)} \u6ce8\u610f\u672c\u9898\u53c8\u6a21\u6570\u4e0e\u9664\u6570\u975e\u4e92\u8d28\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f r|m! r|m! ,\u6b64\u65f6\u91cd\u65b0\u5904\u7406\u9636\u4e58\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_2","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e7 + 5 ; int prime [ N ], phi [ N ], cnt ; bool vis [ N ]; int fac [ N ]; int x , y ; int exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 ; y = 0 ; return a ; } int res = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return res ; } void init ( int n , int mod ) { phi [ 1 ] = 1 ; fac [ 0 ] = fac [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { fac [ i ] = fac [ i -1 ] * i % mod ; if ( ! vis [ i ]) prime [ ++ cnt ] = i , phi [ i ] = phi [ i -1 ] * ( i -1 ) % mod ; else phi [ i ] = phi [ i -1 ] * i % mod ; for ( int j = 1 ; prime [ j ] * i <= n ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) break ; } } } int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } signed main () { int t , mod ; cin >> t >> mod ; init ( N -4 , mod ); while ( t -- ) { int n , m ; cin >> n >> m ; if ( m % mod ) cout << fac [ n ] * phi [ m ] % mod * qpow ( fac [ m ], mod -2 , mod ) % mod << endl ; else { int tmp = 1 ; for ( int i = m + 1 ; i <= n ; i ++ ) ( tmp *= i ) %= mod ; cout << tmp * phi [ m ] % mod << endl ; } } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#2dominoeasy-version","text":"\u9898\u76ee\u5165\u53e3","title":"\u4f8b2.Domino(easy version)"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_3","text":"\u8bbe a=p_1 ^ {a_1} * p_2 ^ {a_2} * p_3 ^ {a_3}...p_n ^ {a_n} a=p_1 ^ {a_1} * p_2 ^ {a_2} * p_3 ^ {a_3}...p_n ^ {a_n} ( p_1,p_2... p_1,p_2... \u4e3a a a \u7684\u8d28\u56e0\u6570\uff0c b=k_1 ^ {b_1} * k_2 ^ {b_2} * k_3 ^ {b_3}...k_n ^ {b_n} ( ( k_1,k_2...k_1,k_2... b=k_1 ^ {b_1} * k_2 ^ {b_2} * k_3 ^ {b_3}...k_n ^ {b_n} <span class=\"arithmatex\"><span class=\"MathJax_Preview\">(</span><script type=\"math/tex\">( k_1,k_2...k_1,k_2... \u4e3a b b \u7684\u8d28\u56e0\u6570\uff09\uff0c\u5219 a a \u53ef\u4ee5\u5728 cnt1=a_1+a_2+a_3...a_n cnt1=a_1+a_2+a_3...a_n \u7684\u6b21\u6570\u5185\u53d8\u6210 1 1 \uff0cb\u80fd\u591f\u5728 cnt2=b_1+b_2+b_3...+b_n cnt2=b_1+b_2+b_3...+b_n \u7684\u6b21\u6570\u5185\u53d8\u6210 1 1 \uff0c\u4e8e\u662f\u53ef\u4ee5\u53d1\u73b0\uff0c\u82e5 k>cnt1+cnt2 k>cnt1+cnt2 \uff0c\u4e24\u4e2a\u6570\u5728 cnt1+cnt2 cnt1+cnt2 \u64cd\u4f5c\u540e\u65e0\u6cd5\u64cd\u4f5c\uff0c\u8f93\u51fa NO \uff0c\u5728 k<cnt1+cnt2 k<cnt1+cnt2 \u65f6\uff0c\u7279\u5224 k=1 k=1 \u7684\u60c5\u51b5\u5373\u53ef\u3002\u672c\u9898\u5206\u89e3\u8d28\u56e0\u6570\u53ef\u7528\u6b27\u62c9\u7b5b\u9884\u5904\u7406\u3002","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_4","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e7 + 5 ; int prime [ N ]; bool vis [ N ]; void euler () { vis [ 1 ] = true ; int cnt = 0 ; for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i ; for ( int j = 1 ; i * prime [ j ] <= N -5 ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) break ; } } } signed main () { int t ; cin >> t ; euler (); while ( t -- ) { int a , b , k ; scanf ( \"%lld %lld %lld\" , & a , & b , & k ); int tmpa = a , tmpb = b ; int cnt1 = 0 , cnt2 = 0 ; if ( a > N -5 || vis [ a ]) for ( register int j = 1 ; prime [ j ] * prime [ j ] <= a ; j ++ ) { if ( a % prime [ j ] == 0 ) { while ( a % prime [ j ] == 0 ) { a /= prime [ j ]; cnt1 ++ ; } } } if ( a > 1 ) cnt1 ++ ; if ( b > N -5 || vis [ b ]) for ( register int j = 1 ; prime [ j ] * prime [ j ] <= b ; j ++ ) { if ( b % prime [ j ] == 0 ) { while ( b % prime [ j ] == 0 ) { b /= prime [ j ]; cnt2 ++ ; } } } if ( b > 1 ) cnt2 ++ ; if ( cnt1 + cnt2 < k ) printf ( \"No \\n \" ); else if ( k == 1 ) { if (( tmpa % tmpb == 0 || tmpb % tmpa == 0 ) && tmpa != tmpb ) printf ( \"Yes \\n \" ); else if ( tmpa == tmpb ) printf ( \"No \\n \" ); else printf ( \"No \\n \" ); } else printf ( \"Yes \\n \" ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#3strange-function","text":"\u9898\u76ee\u5165\u53e3","title":"\u4f8b3.Strange Function"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_5","text":"f[x] f[x] \u8868\u793a\u4e0d\u88ab x x \u6574\u9664\u7684\u6700\u5c0f\u7684\u6570\uff0c\u8bbe\u5176\u4e3a a a \uff0c\u5219\u5bf9 x x \u5fc5\u5b58\u5728\u56e0\u5b50 1,2....a-1 1,2....a-1 ,\u4e5f\u5c31\u662f\u8bf4 x x \u5b58\u5728\u7ea6\u6570 a_1=lcm(1,2,3,...a-1) a_1=lcm(1,2,3,...a-1) \uff0c\u7531\u4e8e a a \u4e0d\u88ab\u6574\u9664\uff0c\u6240\u4ee5 x x \u4e0d\u5b58\u5728\u7ea6\u6570 a_2=lcm(1,2,...a) a_2=lcm(1,2,...a) \uff0c\u5728 1-n 1-n \u4e2d a_1 a_1 \u7684\u500d\u6570\u6709 n/a_1 n/a_1 \u4e2a\uff0c a_2 a_2 \u7684\u500d\u6570\u6709 n/a_2 n/a_2 \u4e2a\uff0c\u7531\u4e8e a_1|a_2 a_1|a_2 \uff0c\u6240\u4ee5\u662f a_1 a_1 \u500d\u6570\u4f46\u4e0d\u662f a_2 a_2 \u500d\u6570\u7684\u6709 n/a_1-n/a_2 n/a_1-n/a_2 \u4e2a\uff0c\u4e14\u8fd9\u4e9b\u6570\u7684\u5927\u5c0f\u4e3a a a \uff0c\u5faa\u73af\u5230 lcm lcm \u5927\u4e8e n n \u7684\u65f6\u5019\u505c\u6b62\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_6","text":"#include <bits/stdc++.h> #define int long long const int mod = 1e9 + 7 ; using namespace std ; int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } int lcm ( int a , int b ) { return a / gcd ( a , b ) * b ; } void solve () { int t , n ; cin >> t ; while ( t -- ) { cin >> n ; int lcmm = 1 ; int tmp = 2 ; int res = 0 ; while ( lcmm <= n ) { int k1 = n / lcmm ; lcmm = lcm ( lcmm , tmp ); tmp ++ ; int k2 = n / lcmm ; res += ( k1 - k2 ) * ( tmp -1 ); res %= mod ; } cout << res << endl ; } } signed main () { solve (); return 0 ; } \u501f\u9274\u535a\u5ba2https://blog.csdn.net/jziwjxjd/article/details/118558335?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163184074316780271543979%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163184074316780271543979&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-118558335.pc_search_ecpm_flag&utm_term=C.+Strange+Function&spm=1018.2226.3001.4187","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#4","text":"\u9898\u76ee\u5165\u53e3 \u9898\u76ee\u63cf\u8ff0 \u5bf9\u4e8e\u4e00\u4e2a\u6570 XX\uff0c\u51fd\u6570 f(X)f(X) \u8868\u793a XX \u6240\u6709\u7ea6\u6570\u7684\u548c\u3002\u4f8b\u5982\uff1af(6)=1+2+3+6=12f(6)=1+2+3+6=12\u3002\u5bf9\u4e8e\u4e00\u4e2a XX\uff0cSmart \u53ef\u4ee5\u5f88\u5feb\u7684\u7b97\u51fa f(X)f(X)\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 X,Y(X<Y)X,Y(X<Y)\uff0cSmart \u5e0c\u671b\u5c3d\u5feb\u5730\u7b97\u51fa f(X)+f(X+1)+\u2026\u2026+f(Y)f(X)+f(X+1)+\u2026\u2026+f(Y)\u7684\u503c\uff0c\u4f60\u80fd\u5e2e\u52a9 Smart \u7b97\u51fa\u8fd9\u4e2a\u503c\u5417\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6587\u4ef6\u4ec5\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 XX \u548c Y(X<Y)Y(X<Y)\uff0c\u8868\u793a\u9700\u8981\u8ba1\u7b97 f(X)+f(X+1)+\\dots +f(Y)f(X)+f(X+1)+\u22ef+f(Y)\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u4e3a f(X)+f(X+1)+\\dots+f(Y)f(X)+f(X+1)+\u22ef+f(Y) \u7684\u503c\u3002 \u8f93\u5165 #1 2 4 \u8f93\u51fa #1 14 \u8f93\u5165 #2 123 321 \u8f93\u51fa #2 72543","title":"\u4f8b4.\u7ea6\u6570\u548c"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_7","text":"\u6211\u4eec\u77e5\u9053\uff0c\u5728 1-n 1-n \u4e2d\uff0c\u82e5 a<n a<n \uff0c\u5219 a a \u7684\u500d\u6570\u6709 n/a n/a \u4e2a\uff0c\u56e0\u6b64\u4e00\u79cd\u66b4\u529b\u7684\u505a\u6cd5\u4fbf\u662f\u679a\u4e3e\u7ea6\u6570 1-y 1-y \u5728 x-y x-y \u7684\u500d\u6570\uff0c\u590d\u6742\u5ea6 O(y) O(y) \uff0c\u8d85\u65f6\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u60f3\u65b0\u65b9\u6cd5\u3002\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u53ea\u662f\u4ee5 1-y 1-y \u4e3a\u7ea6\u6570\u7684\u6570\u6709\u591a\u5c11\u4e2a\uff0c\u800c\u5927\u90e8\u5206\u6570\u7684\u4e2a\u6570\u76f8\u540c\uff0c\u5982 1-100 1-100 \u5185\u4ee5 51\uff0c52\uff0c53\u2026\u2026100 51\uff0c52\uff0c53\u2026\u2026100 \u4e3a\u7ea6\u6570\u7684\u4e2a\u6570\u90fd\u53ea\u6709\u4e00\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u6574\u9664\u5206\u5757\u3002\u6613\u5f97\u7b54\u6848\u4e3a \u2211_1^y( y / i - x-1 / i ) * i \u2211_1^y( y / i - x-1 / i ) * i \u3002","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E4%BE%8B%E9%A2%98/#_8","text":"#include <bits/stdc++.h> #define int long long using namespace std ; int x , y ; signed main () { cin >> x >> y ; int res = 0 ; for ( int l = 1 , r ; l <= y ; l = r + 1 ) { if ( y / l ) r = y / ( y / l ); else break ; res += ( y / l ) * ( r - l + 1 ) * ( l + r ) / 2 ; } for ( int l = 1 , r ; l <= y ; l = r + 1 ) { if (( x -1 ) / l ) r = ( x -1 ) / (( x -1 ) / l ); else break ; res -= ( x -1 ) / l * ( r - l + 1 ) * ( l + r ) / 2 ; } cout << res << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/","text":"\u6982\u8ff0 \u00b6 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7528\u6765\u6c42\u89e3\u6709\u5173\u65b9\u7a0b ax+by=m ax+by=m \u7684\u95ee\u9898 \u6269\u6b27\u6a21\u677f \u00b6 int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } \u5224\u65ad\u65b9\u7a0b ax+by=m ax+by=m \u6216 ax\u2261m(mod\\ b) ax\u2261m(mod\\ b) \u662f\u5426\u6709\u89e3 **\u601d\u8def:**\u5f53 gcd(a,b)|m gcd(a,b)|m \u65f6 \u65b9\u7a0b\u6709\u89e3\uff0c\u53cd\u4e4b\u5219\u65e0\u89e3 \u6c42\u89e3\u65b9\u7a0b ax+by=m( ax\u2261m(mod\\ b) ) ax+by=m( ax\u2261m(mod\\ b) ) \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3 \u601d\u8def 1.\u9996\u5148\u5224\u65ad\u65b9\u7a0b\u662f\u5426\u6709\u89e3\uff0c\u65e0\u89e3\u5219\u76f4\u63a5\u9000\u51fa 2.\u6269\u6b27\u6c42 x x \uff0c\u4ee4 bg=m/gcd(a,b),\u5219x=(x\\%bg+bg)\\%bg bg=m/gcd(a,b),\u5219x=(x\\%bg+bg)\\%bg \u4f8b1.\u6d1b\u8c37 P1082 \u540c\u4f59\u65b9\u7a0b \u00b6 \u9898\u76ee\u63cf\u8ff0 \u6c42\u5173\u4e8ex\u7684\u540c\u4f59\u65b9\u7a0bax\u22611(mod b)\u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570a,b,\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6b63\u6574\u6570x0\uff0c\u5373\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002 \u8f93\u5165\u6837\u4f8b 3 10 \u8f93\u51fa\u6837\u4f8b 7 \u9898\u89e3 \u00b6 \u6a21\u677f\u9898\uff0c\u7531\u4e8e\u9898\u76ee\u89c4\u5b9a\u4e00\u5b9a\u6709\u89e3\uff0c\u56e0\u6b64 a\u22a5b\uff08a\u4e0eb\u4e92\u8d28\uff09 a\u22a5b\uff08a\u4e0eb\u4e92\u8d28\uff09 \uff0c\u6b64\u65f6\u65e2\u53ef\u4ee5\u7528\u6269\u6b27\u6c42\u89e3\uff0c\u4e5f\u53ef\u7528\u6b27\u62c9\u5b9a\u7406\u6c42\u89e3 \u5728\u8fd9\u79d1\u666e\u4e00\u4e0b\u6b27\u62c9\u5b9a\u7406\uff1a a^\u03c6(n) \u22611(mod\\ n)(\u5176\u4e2d\uff0ca\u4e0en\u5747\u4e3a\u6b63\u6574\u6570\uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002) a^\u03c6(n) \u22611(mod\\ n)(\u5176\u4e2d\uff0ca\u4e0en\u5747\u4e3a\u6b63\u6574\u6570\uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002) \u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e3a\u6b27\u62c9\u5b9a\u7406\u7684\u7279\u6b8a\u5f62\u5f0f \u4ee3\u7801 \u00b6 \u6269\u6b27\u7248 #include <bits/stdc++.h> using namespace std ; #define int long long int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } signed main () { int a , b ; int x , y ; cin >> a >> b ; exgcd ( a , b , x , y ); x = ( x % b + b ) % b ; cout << x << endl ; return 0 ; } \u6b27\u62c9\u5b9a\u7406\u7248 #include <bits/stdc++.h> using namespace std ; #define int long long int qpow ( int a , int n , int b ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans % b * a % b ; a = a % b * a % b ; n >>= 1 ; } return ans ; } int euler ( int n ) { int ans = n ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) ans -= ans / i ; while ( n % i == 0 ) n /= i ; } if ( n > 1 ) ans -= ans / n ; return ans ; } signed main () { int a , b ; cin >> a >> b ; cout << qpow ( a , euler ( b ) -1 , b ) << endl ; return 0 ; } \u4f8b2.\u6d1b\u8c37P5656 \u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b \u00b6 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e0d\u5b9a\u65b9\u7a0bax+by=c \u82e5\u8be5\u65b9\u7a0b\u65e0\u6574\u6570\u89e3\uff0c\u8f93\u51fa-1\u3002 \u82e5\u8be5\u65b9\u7a0b\u6709\u6574\u6570\u89e3\uff0c\u4e14\u6709\u6b63\u6574\u6570\u89e3\uff0c\u5219\u8f93\u51fa\u5176\u6b63\u6574\u6570\u89e3\u7684\u6570\u91cf\uff0c\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5c0f\u503c\uff0c\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dy\u7684\u6700\u5c0f\u503c\uff0c\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dy \u7684\u6700\u5927\u503c\u3002 \u82e5\u65b9\u7a0b\u6709\u6574\u6570\u89e3\uff0c\u4f46\u6ca1\u6709\u6b63\u6574\u6570\u89e3\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u6240\u6709\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\uff0cy\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\u3002 \u6b63\u6574\u6570\u89e3\u5373\u4e3a x, y \u5747\u4e3a\u6b63\u6574\u6570\u7684\u89e3\uff0c 0 \u4e0d\u662f\u6b63\u6574\u6570\u3002 \u6574\u6570\u89e3\u5373\u4e3a x,y \u5747\u4e3a\u6574\u6570\u7684\u89e3\u3002 x\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\u5373\u6240\u6709x\u4e3a\u6b63\u6574\u6570\u7684\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5c0f\u503c\uff0cy\u540c\u7406\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 T\uff0c\u4ee3\u8868\u6570\u636e\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765 T \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570a,b,c\u3002 \u8f93\u51fa\u683c\u5f0f T \u884c\u3002 \u82e5\u8be5\u884c\u5bf9\u5e94\u7684\u8be2\u95ee\u65e0\u6574\u6570\u89e3\uff0c\u4e00\u4e2a\u6570\u5b57 -1\u3002 \u82e5\u8be5\u884c\u5bf9\u5e94\u7684\u8be2\u95ee\u6709\u6574\u6570\u89e3\u4f46\u65e0\u6b63\u6574\u6570\u89e3\uff0c\u5305\u542b 2\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6570\u5b57\uff0c\u4f9d\u6b21\u4ee3\u8868\u6574\u6570\u89e3\u4e2d\uff0cx\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\uff0cy \u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\u3002 \u5426\u5219\u5305\u542b5\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6570\u5b57\uff0c\u4f9d\u6b21\u4ee3\u8868\u6b63\u6574\u6570\u89e3\u7684\u6570\u91cf\uff0c\u6b63\u6574\u6570\u89e3\u4e2d\uff0cx\u7684\u6700\u5c0f\u503c\uff0cy\u7684\u6700\u5c0f\u503c\uff0cx\u7684\u6700\u5927\u503c\uff0cy\u7684\u6700\u5927\u503c\u3002 \u8f93\u5165\u6837\u4f8b 7 2 11 100 3 18 6 192 608 17 19 2 60817 11 45 14 19 19 810 98 76 5432 \u8f93\u51fa\u6837\u4f8b 4 6 2 39 8 2 1 -1 1600 1 18 3199 30399 34 3 -1 2 12 7 50 56 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; #define int long long int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } signed main () { int t , a , b , c ; int x , y ; int minx , miny ; int maxx , maxy ; int cnt = 1 ; scanf ( \"%lld\" , & t ); bool flag = false ; while ( t -- ) { flag = false ; cnt = 0 ; scanf ( \"%lld %lld %lld\" , & a , & b , & c ); int gcd = exgcd ( a , b , x , y ); if ( c % gcd ) { cout << \"-1\" << endl ; continue ; } int bg = b / gcd ; int cg = c / gcd ; int ag = a / gcd ; int tmp ; x *= cg ; y *= cg ; //cout<<\"x= \"<<x<<\"y=\"<<y<<endl; tmp = x ; x = ( x % bg + bg -1 ) % bg + 1 ; //\u6700\u5c0f\u6b63\u6574\u6570\u89e3 \u82e5\u662f\u6700\u5c0f\u6574\u6570\u89e3\u5219\u4e0d\u7528-1 int ansy = ( y % ag + ag -1 ) % ag + 1 ; int t = ( x - tmp ) / bg ; y -= t * ag ; if ( x > 0 && y > 0 ) { minx = x ; maxy = y ; flag = true ; cnt = 1 ; int k = y / ag ; if ( y % ag == 0 ) { cnt += k -1 ; miny = ag ; maxx = x + ( k -1 ) * bg ; } else { cnt += k ; miny = y - k * ag ; maxx = x + k * bg ; } } if ( flag ) printf ( \"%lld %lld %lld %lld %lld \\n \" , cnt , minx , miny , maxx , maxy ); else printf ( \"%lld %lld \\n \" , x , ansy ); } return 0 ; }","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u548c\u8d1d\u7956\u5b9a\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#_1","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7528\u6765\u6c42\u89e3\u6709\u5173\u65b9\u7a0b ax+by=m ax+by=m \u7684\u95ee\u9898","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#_2","text":"int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } \u5224\u65ad\u65b9\u7a0b ax+by=m ax+by=m \u6216 ax\u2261m(mod\\ b) ax\u2261m(mod\\ b) \u662f\u5426\u6709\u89e3 **\u601d\u8def:**\u5f53 gcd(a,b)|m gcd(a,b)|m \u65f6 \u65b9\u7a0b\u6709\u89e3\uff0c\u53cd\u4e4b\u5219\u65e0\u89e3 \u6c42\u89e3\u65b9\u7a0b ax+by=m( ax\u2261m(mod\\ b) ) ax+by=m( ax\u2261m(mod\\ b) ) \u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3 \u601d\u8def 1.\u9996\u5148\u5224\u65ad\u65b9\u7a0b\u662f\u5426\u6709\u89e3\uff0c\u65e0\u89e3\u5219\u76f4\u63a5\u9000\u51fa 2.\u6269\u6b27\u6c42 x x \uff0c\u4ee4 bg=m/gcd(a,b),\u5219x=(x\\%bg+bg)\\%bg bg=m/gcd(a,b),\u5219x=(x\\%bg+bg)\\%bg","title":"\u6269\u6b27\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#1-p1082","text":"\u9898\u76ee\u63cf\u8ff0 \u6c42\u5173\u4e8ex\u7684\u540c\u4f59\u65b9\u7a0bax\u22611(mod b)\u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570a,b,\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6b63\u6574\u6570x0\uff0c\u5373\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002 \u8f93\u5165\u6837\u4f8b 3 10 \u8f93\u51fa\u6837\u4f8b 7","title":"\u4f8b1.\u6d1b\u8c37 P1082 \u540c\u4f59\u65b9\u7a0b"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#_3","text":"\u6a21\u677f\u9898\uff0c\u7531\u4e8e\u9898\u76ee\u89c4\u5b9a\u4e00\u5b9a\u6709\u89e3\uff0c\u56e0\u6b64 a\u22a5b\uff08a\u4e0eb\u4e92\u8d28\uff09 a\u22a5b\uff08a\u4e0eb\u4e92\u8d28\uff09 \uff0c\u6b64\u65f6\u65e2\u53ef\u4ee5\u7528\u6269\u6b27\u6c42\u89e3\uff0c\u4e5f\u53ef\u7528\u6b27\u62c9\u5b9a\u7406\u6c42\u89e3 \u5728\u8fd9\u79d1\u666e\u4e00\u4e0b\u6b27\u62c9\u5b9a\u7406\uff1a a^\u03c6(n) \u22611(mod\\ n)(\u5176\u4e2d\uff0ca\u4e0en\u5747\u4e3a\u6b63\u6574\u6570\uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002) a^\u03c6(n) \u22611(mod\\ n)(\u5176\u4e2d\uff0ca\u4e0en\u5747\u4e3a\u6b63\u6574\u6570\uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002) \u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e3a\u6b27\u62c9\u5b9a\u7406\u7684\u7279\u6b8a\u5f62\u5f0f","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#_4","text":"\u6269\u6b27\u7248 #include <bits/stdc++.h> using namespace std ; #define int long long int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } signed main () { int a , b ; int x , y ; cin >> a >> b ; exgcd ( a , b , x , y ); x = ( x % b + b ) % b ; cout << x << endl ; return 0 ; } \u6b27\u62c9\u5b9a\u7406\u7248 #include <bits/stdc++.h> using namespace std ; #define int long long int qpow ( int a , int n , int b ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans % b * a % b ; a = a % b * a % b ; n >>= 1 ; } return ans ; } int euler ( int n ) { int ans = n ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) ans -= ans / i ; while ( n % i == 0 ) n /= i ; } if ( n > 1 ) ans -= ans / n ; return ans ; } signed main () { int a , b ; cin >> a >> b ; cout << qpow ( a , euler ( b ) -1 , b ) << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#2p5656","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e0d\u5b9a\u65b9\u7a0bax+by=c \u82e5\u8be5\u65b9\u7a0b\u65e0\u6574\u6570\u89e3\uff0c\u8f93\u51fa-1\u3002 \u82e5\u8be5\u65b9\u7a0b\u6709\u6574\u6570\u89e3\uff0c\u4e14\u6709\u6b63\u6574\u6570\u89e3\uff0c\u5219\u8f93\u51fa\u5176\u6b63\u6574\u6570\u89e3\u7684\u6570\u91cf\uff0c\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5c0f\u503c\uff0c\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dy\u7684\u6700\u5c0f\u503c\uff0c\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u6240\u6709\u6b63\u6574\u6570\u89e3\u4e2dy \u7684\u6700\u5927\u503c\u3002 \u82e5\u65b9\u7a0b\u6709\u6574\u6570\u89e3\uff0c\u4f46\u6ca1\u6709\u6b63\u6574\u6570\u89e3\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u6240\u6709\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\uff0cy\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\u3002 \u6b63\u6574\u6570\u89e3\u5373\u4e3a x, y \u5747\u4e3a\u6b63\u6574\u6570\u7684\u89e3\uff0c 0 \u4e0d\u662f\u6b63\u6574\u6570\u3002 \u6574\u6570\u89e3\u5373\u4e3a x,y \u5747\u4e3a\u6574\u6570\u7684\u89e3\u3002 x\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\u5373\u6240\u6709x\u4e3a\u6b63\u6574\u6570\u7684\u6574\u6570\u89e3\u4e2dx\u7684\u6700\u5c0f\u503c\uff0cy\u540c\u7406\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 T\uff0c\u4ee3\u8868\u6570\u636e\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765 T \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570a,b,c\u3002 \u8f93\u51fa\u683c\u5f0f T \u884c\u3002 \u82e5\u8be5\u884c\u5bf9\u5e94\u7684\u8be2\u95ee\u65e0\u6574\u6570\u89e3\uff0c\u4e00\u4e2a\u6570\u5b57 -1\u3002 \u82e5\u8be5\u884c\u5bf9\u5e94\u7684\u8be2\u95ee\u6709\u6574\u6570\u89e3\u4f46\u65e0\u6b63\u6574\u6570\u89e3\uff0c\u5305\u542b 2\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6570\u5b57\uff0c\u4f9d\u6b21\u4ee3\u8868\u6574\u6570\u89e3\u4e2d\uff0cx\u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\uff0cy \u7684\u6700\u5c0f\u6b63\u6574\u6570\u503c\u3002 \u5426\u5219\u5305\u542b5\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6570\u5b57\uff0c\u4f9d\u6b21\u4ee3\u8868\u6b63\u6574\u6570\u89e3\u7684\u6570\u91cf\uff0c\u6b63\u6574\u6570\u89e3\u4e2d\uff0cx\u7684\u6700\u5c0f\u503c\uff0cy\u7684\u6700\u5c0f\u503c\uff0cx\u7684\u6700\u5927\u503c\uff0cy\u7684\u6700\u5927\u503c\u3002 \u8f93\u5165\u6837\u4f8b 7 2 11 100 3 18 6 192 608 17 19 2 60817 11 45 14 19 19 810 98 76 5432 \u8f93\u51fa\u6837\u4f8b 4 6 2 39 8 2 1 -1 1600 1 18 3199 30399 34 3 -1 2 12 7 50 56","title":"\u4f8b2.\u6d1b\u8c37P5656 \u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%89%A9%E6%AC%A7/#_5","text":"#include <bits/stdc++.h> using namespace std ; #define int long long int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 ; y = 0 ; return a ; } int ans = exgcd ( b , a % b , x , y ); int tmp = x ; x = y ; y = tmp - ( a / b ) * y ; return ans ; } signed main () { int t , a , b , c ; int x , y ; int minx , miny ; int maxx , maxy ; int cnt = 1 ; scanf ( \"%lld\" , & t ); bool flag = false ; while ( t -- ) { flag = false ; cnt = 0 ; scanf ( \"%lld %lld %lld\" , & a , & b , & c ); int gcd = exgcd ( a , b , x , y ); if ( c % gcd ) { cout << \"-1\" << endl ; continue ; } int bg = b / gcd ; int cg = c / gcd ; int ag = a / gcd ; int tmp ; x *= cg ; y *= cg ; //cout<<\"x= \"<<x<<\"y=\"<<y<<endl; tmp = x ; x = ( x % bg + bg -1 ) % bg + 1 ; //\u6700\u5c0f\u6b63\u6574\u6570\u89e3 \u82e5\u662f\u6700\u5c0f\u6574\u6570\u89e3\u5219\u4e0d\u7528-1 int ansy = ( y % ag + ag -1 ) % ag + 1 ; int t = ( x - tmp ) / bg ; y -= t * ag ; if ( x > 0 && y > 0 ) { minx = x ; maxy = y ; flag = true ; cnt = 1 ; int k = y / ag ; if ( y % ag == 0 ) { cnt += k -1 ; miny = ag ; maxx = x + ( k -1 ) * bg ; } else { cnt += k ; miny = y - k * ag ; maxx = x + k * bg ; } } if ( flag ) printf ( \"%lld %lld %lld %lld %lld \\n \" , cnt , minx , miny , maxx , maxy ); else printf ( \"%lld %lld \\n \" , x , ansy ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/","text":"\u6982\u8ff0 \u00b6 \u6b27\u62c9\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff0c\u5c0f\u4e8e n n \u4e14\u548c n n \u4e92\u8d28\u7684\u6b63\u6574\u6570(\u5305\u62ec1)\u7684\u4e2a\u6570\uff0c\u8bb0\u4f5c \u03c6(n) \u03c6(n) \u3002 \u6b27\u62c9\u51fd\u6570\u7684\u901a\u5f0f: \u03c6(n)=n*(1-1/p1)(1-1/p2)(1-1/p3)*(1-1/p4)\u2026\u2026(1-1/pn) \u03c6(n)=n*(1-1/p1)(1-1/p2)(1-1/p3)*(1-1/p4)\u2026\u2026(1-1/pn) \u5176\u4e2d p_1, p_2,...,p_n p_1, p_2,...,p_n \u4e3a n n \u7684\u6240\u6709\u8d28\u56e0\u6570\uff0c n n \u662f\u4e0d\u4e3a 0 0 \u7684\u6574\u6570\u3002 \u03c6(1)=1 \u03c6(1)=1 (\u552f\u4e00\u548c1\u4e92\u8d28\u7684\u6570\u5c31\u662f1\u672c\u8eab)\u3002 \u6027\u8d28 \u00b6 \u5f53 m,n m,n \u4e92\u8d28\u65f6\uff0c\u6709 \\phi(m \\times n)= \\phi(m)* \\phi(n) \\phi(m \\times n)= \\phi(m)* \\phi(n) \uff1b \u82e5 i%p==0 i%p==0 \uff0c\u6709 \\phi(i \\times p) = p \\times \\phi(i) \\phi(i \\times p) = p \\times \\phi(i) \uff1b \u5bf9\u4e8e\u4e92\u8d28 x x \u4e0e p p \uff0c\u6709 x^{\\phi(p)}\u22611\uff08mod \\ p) x^{\\phi(p)}\u22611\uff08mod \\ p) ,\u56e0\u6b64x\u7684\u9006\u5143\u4e3a x^{\\phi(p)-1} x^{\\phi(p)-1} \uff0c\u5373\u6b27\u62c9\u5b9a\u7406\u3002 \uff08\u7279\u522b\u5730\uff0c\u5f53p\u4e3a\u8d28\u6570\u65f6\uff0c \\phi(p)=p-1 \\phi(p)=p-1 ,\u6b64\u65f6\u9006\u5143\u4e3a x^{p-2} x^{p-2} \uff0c\u5373\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff09 \u5f53 n n \u4e3a\u5947\u6570\u65f6\uff0c \\phi(2n)=\\phi(n) \\phi(2n)=\\phi(n) \u82e5 x x \u4e0e p p \u4e92\u8d28\uff0c\u5219 p-x p-x \u4e5f\u4e0e p p \u4e92\u8d28\uff0c\u56e0\u6b64\u5c0f\u4e8e p p \u4e14\u4e0e p p \u4e92\u8d28\u7684\u6570\u4e4b\u548c\u4e3a \\phi(x) \\times x/2 \\phi(x) \\times x/2 ; N>1 N>1 \uff0c\u4e0d\u5927\u4e8e N N \u4e14\u548c N N \u4e92\u7d20\u7684\u6240\u6709\u6b63\u6574\u6570\u7684\u548c\u662f 1/2 \\times N \\times eular(N) 1/2 \\times N \\times eular(N) \u3002 \u6b27\u62c9\u7b5b\u6a21\u677f \u00b6 void eular_ () //\u6b27\u62c9\u7b5b\u6a21\u677f { memset ( vis , true , sizeof ( vis )); int cnt = 1 ; vis [ 1 ] = false ; for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( vis [ i ]) prime [ cnt ++ ] = I ; for ( int j = 1 ; j < cnt && prime [ j ] * i <= N -5 ; j ++ ) { vis [ prime [ j ] * i ] = false ; if ( i % prime [ j ] == 0 ) { break ; } //\u82e5i\u4e3ap[j]\u7684\u500d\u6570\uff0c\u5219i=k*p[j]\uff0c //\u5728\u548cp[j+1]\u76f8\u4e58\u540e\u5f97\u51fa\u7684x=i*p[j+1]=p[j]*k*p[j+1] //\u5219\u5728i=k*p[j+1]\u65f6\uff0c\u7531\u4e8ej\u4ece\u5c0f\u5230\u5927\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e4b\u524d\u7684p[j]\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97 } } } \u6b27\u62c9\u51fd\u6570\u6a21\u677f \u00b6 int euler ( int x ) { int ans = x ; for ( int i = 2 ; i * i <= x ; i ++ ) //\u6a21\u62df\uff081-p1\uff09*\uff081-p2\uff09\u2026\u2026\u8fc7\u7a0b\uff0cpi\u4e3ax\u7684\u8d28\u56e0\u6570 { if ( x % i == 0 ) { ans = ans - ans / i ; } while ( x % i == 0 ) { x /= i ; } } if ( x > 1 ) ans = ans - ans / x ; //\u82e5x\u4e0d\u4e3a1\uff0c\u8bf4\u660e\u4ecd\u6709\u4e00\u4e2a\u8d28\u56e0\u6570\u6ca1\u6709\u4e58 return ans ; } \u7ebf\u6027\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 void euler_ () { memset ( vis , true , sizeof ( vis )); memset ( phi , 0 , sizeof ( phi )); int cnt = 1 ; vis [ 1 ] = false ; phi [ 1 ] = 1 ; //\u7279\u52241,gcd(1,1)=1 for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( vis [ i ]) { prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= N -5 ; j ++ ) { vis [ prime [ j ] * i ] = false ; if ( i % prime [ j ] == 0 ) { phi [ prime [ j ] * i ] = phi [ i ] * prime [ j ]; break ; } phi [ prime [ j ] * i ] = phi [ i ] * phi [ prime [ j ]]; //\u82e5i\u4e3ap[j]\u7684\u500d\u6570\uff0c\u5219i=k*p[j]\uff0c //\u5728\u548cp[j+1]\u76f8\u4e58\u540e\u5f97\u51fa\u7684x=i*p[j+1]=p[j]*k*p[j+1] //\u5219\u5728i=k*p[j+1]\u65f6\uff0c\u7531\u4e8ej\u4ece\u5c0f\u5230\u5927\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e4b\u524d\u7684p[j]\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97 } } } \u4f8b1.HDU2824 The Euler function \u00b6 \u9898\u76ee\u63cf\u8ff0 The Euler function phi is an important kind of function in number theory, (n) represents the amount of the numbers which are smaller than n and coprime to n, and this function has a lot of beautiful characteristics. Here comes a very easy question: suppose you are given a, b, try to calculate (a)+ (a+1)+....+ (b) \u8f93\u5165\u683c\u5f0f There are several test cases. Each line has two integers a, b (2<a<b<3000000). \u8f93\u51fa\u683c\u5f0f Output the result of (a)+ (a+1)+....+ (b) \u8f93\u5165\u6837\u4f8b 3 100 \u8f93\u51fa\u6837\u4f8b 3042 \u9898\u89e3 \u00b6 \u7ebf\u6027\u6c42\u6b27\u62c9\u51fd\u6570\u6a21\u677f\u9898 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 3e6 + 10 ; int phi [ N ]; bool vis [ N ]; int prime [ N ]; int sum [ N ]; void eular_ () //\u6b27\u62c9\u7b5b\u6a21\u677f { memset ( vis , true , sizeof ( vis )); memset ( phi , 0 , sizeof ( phi )); int cnt = 1 ; vis [ 1 ] = false ; phi [ 1 ] = 1 ; //\u7279\u52241,gcd(1,1)=1 for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( vis [ i ]) { prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= N -5 ; j ++ ) { vis [ prime [ j ] * i ] = false ; if ( i % prime [ j ] == 0 ) { phi [ prime [ j ] * i ] = phi [ i ] * prime [ j ]; break ; } phi [ prime [ j ] * i ] = phi [ i ] * phi [ prime [ j ]]; //\u82e5i\u4e3ap[j]\u7684\u500d\u6570\uff0c\u5219i=k*p[j]\uff0c\u5728\u548cp[j+1]\u76f8\u4e58\u540e\u5f97\u51fa\u7684*p[j+1]=p[j]*k*p[j+1] //\u5219\u5728i=k*p[j+1]\u65f6\uff0c\u7531\u4e8ej\u4ece\u5c0f\u5230\u5927\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e4b\u524d\u7684p[j]\uff0c\u4f1a\u91cd\u590d\u8ba1 } } } int main () { int a , b ; eular_ (); while ( cin >> a >> b ) { ll ans = 0 ; for ( int i = a ; i <= b ; i ++ ) ans += phi [ i ]; cout << ans << endl ; } return 0 ; } \u4f8b2.HDU 2588 GCD \u00b6 \u9898\u76ee\u63cf\u8ff0 The greatest common divisor GCD(a,b) of two positive integers a and b,sometimes written (a,b),is the largest divisor common to a and b,For example,(1,2)=1,(12,18)=6. (a,b) can be easily found by the Euclidean algorithm. Now Carp is considering a little more difficult problem: Given integers N and M, how many integer X satisfies 1<=X<=N and (X,N)>=M. \u8f93\u5165\u683c\u5f0f The first line of input is an integer T(T<=100) representing the number of test cases. The following T lines each contains two numbers N and M (2<=N<=1000000000, 1<=M<=N), representing a test case. \u8f93\u51fa\u683c\u5f0f For each test case,output the answer on a single line. \u8f93\u5165\u6837\u4f8b 3 1 1 10 2 10000 72 \u8f93\u51fa\u6837\u4f8b 1 6 260 \u9898\u89e3 \u00b6 \u5f53 M M \u4e3a 1 1 \u65f6\uff0c\u6613\u77e5\u7b54\u6848\u4e3a N N \uff0c\u5f53 M>1 M>1 \u65f6\uff0c\u53ef\u4ee5\u786e\u5b9a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u4e00\u5b9a\u65f6 N N \u5927\u4e8e M M \u7684\u7ea6\u6570\uff0c\u5982\u679c x x \u4e0d\u80fd\u6574\u9664 N N \uff0c\u5219 gcd(x,N)=1<M gcd(x,N)=1<M \uff0c\u6211\u4eec\u77e5\u9053 N N \u7684\u7ea6\u6570(\u8bbe\u4e3a x x )\u548c N N \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a x x \uff0c\u90a3\u662f\u5426\u672c\u9898\u53ea\u6709N\u7684\u7ea6\u6570\u6ee1\u8db3\u6761\u4ef6\u5462\uff1f\u663e\u7136\u4e0d\u662f\uff0c\u6570 x*k x*k ( k k \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u67d0\u4e9b\u6570)\u4e0e N N \u7684\u7ea6\u6570\u540c\u6837\u4e3a x x \uff0c\u5012\u63a8\u4e00\u4e0b\uff0c\u5f53 gcd(N\uff0cx \\times k)=x gcd(N\uff0cx \\times k)=x \u65f6\uff0c\u6709 gcd(N/x\uff0ck)=1 gcd(N/x\uff0ck)=1 \uff0c\u5373 k k \u6ee1\u8db3\u4e0e N/x N/x \u4e92\u8d28\u65f6\u6ee1\u8db3 N N \u4e0e x \\times k x \\times k \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a x x \uff0c\u4e8e\u662f\u672c\u9898\u5c31\u53d8\u6210\u4e86\u5c31 1-N/x 1-N/x \u5185\uff0c\u4e0e N/x N/x \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7528\u6b27\u62c9\u51fd\u6570\u6c42\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 1e5 ; ll eular ( ll x ) { ll ans = x ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { ans = ans - ans / i ; } while ( x % i == 0 ) { x /= i ; } } if ( x > 1 ) ans = ans - ans / x ; return ans ; } int main () { int t ; cin >> t ; while ( t -- ) { ll ans = 0 ; ll n , m ; cin >> n >> m ; int i ; for ( i = 1 ; i * i < n ; i ++ ) { if ( n % i == 0 ) { if ( i >= m ) { ans += eular ( n / i ); } if ( n / i >= m ) { ans += eular ( i ); } } } if ( i * i == n && i >= m ) ans += eular ( i ); cout << ans << endl ; } return 0 ; } \u4f8b3.HDU phi \u00b6 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u82e5\u5e72\u4e2a\u6b63\u6574\u6570n\uff0c\u8bf7\u4f60\u6c42\u51fa\u6700\u5c0f\u7684m\uff0c\u4f7f\u5f97\u03c6(m)\u2265n\u3002 \u8f93\u5165\u683c\u5f0f \u672c\u9898\u6709\u591a\u7ec4\u8f93\u5165\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570 \u63a5\u4e0b\u6765T\u884c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570n \u6570\u636e\u4fdd\u8bc1 1\u2264T\u2264104,1\u2264n\u2264106 1\u2264T\u2264104,1\u2264n\u2264106 \u3002 \u8f93\u51fa\u683c\u5f0f \u5171T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\u4ee3\u8868\u5bf9\u5e94\u7684\u7b54\u6848 \u8f93\u5165\u6837\u4f8b 5 1 2 3 4 5 \u8f93\u51fa\u6837\u4f8b 1 3 5 5 7 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const ll N = 5e6 + 10 ; int phi [ N -5 ]; bool vis [ N -5 ]; int prime [ N -5 ]; struct node { int pos ; int val ; friend bool operator < ( const node x , const node y ) //\u5bf9\u8f93\u5165\u8fdb\u884c\u5904\u4f18\u5148\u5904\u7406n\u5c0f\u7684\u8f93\u5165\u5e76\u8bb0\u5f55 { return x . val < y . val ; } } node [ 10005 ]; int ans [ 10005 ]; int t ; void euler () { int now = 1 ; memset ( vis , false , sizeof ( vis )); memset ( phi , 0 , sizeof ( phi )); vis [ 1 ] = true ; phi [ 1 ] = 1 ; int cnt = 0 ; for ( int i = 1 ; i <= N -10 ; i ++ ) { if ( ! vis [ i ]) { prime [ ++ cnt ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j <= cnt && prime [ j ] * i <= N -10 ; j ++ ) { vis [ prime [ j ] * i ] = true ; if ( i % prime [ j ] == 0 ) { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ] -1 ]; } while ( phi [ i ] >= node [ now ]. val & now <= t ) { ans [ node [ now ]. pos ] = i ; now ++ ; } if ( now > t ) return ; } } int main () { euler (); cin >> t ; for ( int i = 1 ; i <= t ; i ++ ) { cin >> node [ i ]. val ; node [ i ]. pos = i ; } sort ( node + 1 , node + t + 1 ); euler (); for ( int i = 1 ; i <= t ; i ++ ) cout << ans [ i ] << endl ; return 0 ; }","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_1","text":"\u6b27\u62c9\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff0c\u5c0f\u4e8e n n \u4e14\u548c n n \u4e92\u8d28\u7684\u6b63\u6574\u6570(\u5305\u62ec1)\u7684\u4e2a\u6570\uff0c\u8bb0\u4f5c \u03c6(n) \u03c6(n) \u3002 \u6b27\u62c9\u51fd\u6570\u7684\u901a\u5f0f: \u03c6(n)=n*(1-1/p1)(1-1/p2)(1-1/p3)*(1-1/p4)\u2026\u2026(1-1/pn) \u03c6(n)=n*(1-1/p1)(1-1/p2)(1-1/p3)*(1-1/p4)\u2026\u2026(1-1/pn) \u5176\u4e2d p_1, p_2,...,p_n p_1, p_2,...,p_n \u4e3a n n \u7684\u6240\u6709\u8d28\u56e0\u6570\uff0c n n \u662f\u4e0d\u4e3a 0 0 \u7684\u6574\u6570\u3002 \u03c6(1)=1 \u03c6(1)=1 (\u552f\u4e00\u548c1\u4e92\u8d28\u7684\u6570\u5c31\u662f1\u672c\u8eab)\u3002","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_2","text":"\u5f53 m,n m,n \u4e92\u8d28\u65f6\uff0c\u6709 \\phi(m \\times n)= \\phi(m)* \\phi(n) \\phi(m \\times n)= \\phi(m)* \\phi(n) \uff1b \u82e5 i%p==0 i%p==0 \uff0c\u6709 \\phi(i \\times p) = p \\times \\phi(i) \\phi(i \\times p) = p \\times \\phi(i) \uff1b \u5bf9\u4e8e\u4e92\u8d28 x x \u4e0e p p \uff0c\u6709 x^{\\phi(p)}\u22611\uff08mod \\ p) x^{\\phi(p)}\u22611\uff08mod \\ p) ,\u56e0\u6b64x\u7684\u9006\u5143\u4e3a x^{\\phi(p)-1} x^{\\phi(p)-1} \uff0c\u5373\u6b27\u62c9\u5b9a\u7406\u3002 \uff08\u7279\u522b\u5730\uff0c\u5f53p\u4e3a\u8d28\u6570\u65f6\uff0c \\phi(p)=p-1 \\phi(p)=p-1 ,\u6b64\u65f6\u9006\u5143\u4e3a x^{p-2} x^{p-2} \uff0c\u5373\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff09 \u5f53 n n \u4e3a\u5947\u6570\u65f6\uff0c \\phi(2n)=\\phi(n) \\phi(2n)=\\phi(n) \u82e5 x x \u4e0e p p \u4e92\u8d28\uff0c\u5219 p-x p-x \u4e5f\u4e0e p p \u4e92\u8d28\uff0c\u56e0\u6b64\u5c0f\u4e8e p p \u4e14\u4e0e p p \u4e92\u8d28\u7684\u6570\u4e4b\u548c\u4e3a \\phi(x) \\times x/2 \\phi(x) \\times x/2 ; N>1 N>1 \uff0c\u4e0d\u5927\u4e8e N N \u4e14\u548c N N \u4e92\u7d20\u7684\u6240\u6709\u6b63\u6574\u6570\u7684\u548c\u662f 1/2 \\times N \\times eular(N) 1/2 \\times N \\times eular(N) \u3002","title":"\u6027\u8d28"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_3","text":"void eular_ () //\u6b27\u62c9\u7b5b\u6a21\u677f { memset ( vis , true , sizeof ( vis )); int cnt = 1 ; vis [ 1 ] = false ; for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( vis [ i ]) prime [ cnt ++ ] = I ; for ( int j = 1 ; j < cnt && prime [ j ] * i <= N -5 ; j ++ ) { vis [ prime [ j ] * i ] = false ; if ( i % prime [ j ] == 0 ) { break ; } //\u82e5i\u4e3ap[j]\u7684\u500d\u6570\uff0c\u5219i=k*p[j]\uff0c //\u5728\u548cp[j+1]\u76f8\u4e58\u540e\u5f97\u51fa\u7684x=i*p[j+1]=p[j]*k*p[j+1] //\u5219\u5728i=k*p[j+1]\u65f6\uff0c\u7531\u4e8ej\u4ece\u5c0f\u5230\u5927\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e4b\u524d\u7684p[j]\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97 } } }","title":"\u6b27\u62c9\u7b5b\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_4","text":"int euler ( int x ) { int ans = x ; for ( int i = 2 ; i * i <= x ; i ++ ) //\u6a21\u62df\uff081-p1\uff09*\uff081-p2\uff09\u2026\u2026\u8fc7\u7a0b\uff0cpi\u4e3ax\u7684\u8d28\u56e0\u6570 { if ( x % i == 0 ) { ans = ans - ans / i ; } while ( x % i == 0 ) { x /= i ; } } if ( x > 1 ) ans = ans - ans / x ; //\u82e5x\u4e0d\u4e3a1\uff0c\u8bf4\u660e\u4ecd\u6709\u4e00\u4e2a\u8d28\u56e0\u6570\u6ca1\u6709\u4e58 return ans ; }","title":"\u6b27\u62c9\u51fd\u6570\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_5","text":"void euler_ () { memset ( vis , true , sizeof ( vis )); memset ( phi , 0 , sizeof ( phi )); int cnt = 1 ; vis [ 1 ] = false ; phi [ 1 ] = 1 ; //\u7279\u52241,gcd(1,1)=1 for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( vis [ i ]) { prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= N -5 ; j ++ ) { vis [ prime [ j ] * i ] = false ; if ( i % prime [ j ] == 0 ) { phi [ prime [ j ] * i ] = phi [ i ] * prime [ j ]; break ; } phi [ prime [ j ] * i ] = phi [ i ] * phi [ prime [ j ]]; //\u82e5i\u4e3ap[j]\u7684\u500d\u6570\uff0c\u5219i=k*p[j]\uff0c //\u5728\u548cp[j+1]\u76f8\u4e58\u540e\u5f97\u51fa\u7684x=i*p[j+1]=p[j]*k*p[j+1] //\u5219\u5728i=k*p[j+1]\u65f6\uff0c\u7531\u4e8ej\u4ece\u5c0f\u5230\u5927\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e4b\u524d\u7684p[j]\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97 } } }","title":"\u7ebf\u6027\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#1hdu2824-the-euler-function","text":"\u9898\u76ee\u63cf\u8ff0 The Euler function phi is an important kind of function in number theory, (n) represents the amount of the numbers which are smaller than n and coprime to n, and this function has a lot of beautiful characteristics. Here comes a very easy question: suppose you are given a, b, try to calculate (a)+ (a+1)+....+ (b) \u8f93\u5165\u683c\u5f0f There are several test cases. Each line has two integers a, b (2<a<b<3000000). \u8f93\u51fa\u683c\u5f0f Output the result of (a)+ (a+1)+....+ (b) \u8f93\u5165\u6837\u4f8b 3 100 \u8f93\u51fa\u6837\u4f8b 3042","title":"\u4f8b1.HDU2824 The Euler function"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_6","text":"\u7ebf\u6027\u6c42\u6b27\u62c9\u51fd\u6570\u6a21\u677f\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_7","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 3e6 + 10 ; int phi [ N ]; bool vis [ N ]; int prime [ N ]; int sum [ N ]; void eular_ () //\u6b27\u62c9\u7b5b\u6a21\u677f { memset ( vis , true , sizeof ( vis )); memset ( phi , 0 , sizeof ( phi )); int cnt = 1 ; vis [ 1 ] = false ; phi [ 1 ] = 1 ; //\u7279\u52241,gcd(1,1)=1 for ( int i = 2 ; i <= N -5 ; i ++ ) { if ( vis [ i ]) { prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= N -5 ; j ++ ) { vis [ prime [ j ] * i ] = false ; if ( i % prime [ j ] == 0 ) { phi [ prime [ j ] * i ] = phi [ i ] * prime [ j ]; break ; } phi [ prime [ j ] * i ] = phi [ i ] * phi [ prime [ j ]]; //\u82e5i\u4e3ap[j]\u7684\u500d\u6570\uff0c\u5219i=k*p[j]\uff0c\u5728\u548cp[j+1]\u76f8\u4e58\u540e\u5f97\u51fa\u7684*p[j+1]=p[j]*k*p[j+1] //\u5219\u5728i=k*p[j+1]\u65f6\uff0c\u7531\u4e8ej\u4ece\u5c0f\u5230\u5927\uff0c\u5fc5\u5b9a\u7ecf\u8fc7\u4e4b\u524d\u7684p[j]\uff0c\u4f1a\u91cd\u590d\u8ba1 } } } int main () { int a , b ; eular_ (); while ( cin >> a >> b ) { ll ans = 0 ; for ( int i = a ; i <= b ; i ++ ) ans += phi [ i ]; cout << ans << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#2hdu-2588-gcd","text":"\u9898\u76ee\u63cf\u8ff0 The greatest common divisor GCD(a,b) of two positive integers a and b,sometimes written (a,b),is the largest divisor common to a and b,For example,(1,2)=1,(12,18)=6. (a,b) can be easily found by the Euclidean algorithm. Now Carp is considering a little more difficult problem: Given integers N and M, how many integer X satisfies 1<=X<=N and (X,N)>=M. \u8f93\u5165\u683c\u5f0f The first line of input is an integer T(T<=100) representing the number of test cases. The following T lines each contains two numbers N and M (2<=N<=1000000000, 1<=M<=N), representing a test case. \u8f93\u51fa\u683c\u5f0f For each test case,output the answer on a single line. \u8f93\u5165\u6837\u4f8b 3 1 1 10 2 10000 72 \u8f93\u51fa\u6837\u4f8b 1 6 260","title":"\u4f8b2.HDU 2588 GCD"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_8","text":"\u5f53 M M \u4e3a 1 1 \u65f6\uff0c\u6613\u77e5\u7b54\u6848\u4e3a N N \uff0c\u5f53 M>1 M>1 \u65f6\uff0c\u53ef\u4ee5\u786e\u5b9a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u4e00\u5b9a\u65f6 N N \u5927\u4e8e M M \u7684\u7ea6\u6570\uff0c\u5982\u679c x x \u4e0d\u80fd\u6574\u9664 N N \uff0c\u5219 gcd(x,N)=1<M gcd(x,N)=1<M \uff0c\u6211\u4eec\u77e5\u9053 N N \u7684\u7ea6\u6570(\u8bbe\u4e3a x x )\u548c N N \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a x x \uff0c\u90a3\u662f\u5426\u672c\u9898\u53ea\u6709N\u7684\u7ea6\u6570\u6ee1\u8db3\u6761\u4ef6\u5462\uff1f\u663e\u7136\u4e0d\u662f\uff0c\u6570 x*k x*k ( k k \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u67d0\u4e9b\u6570)\u4e0e N N \u7684\u7ea6\u6570\u540c\u6837\u4e3a x x \uff0c\u5012\u63a8\u4e00\u4e0b\uff0c\u5f53 gcd(N\uff0cx \\times k)=x gcd(N\uff0cx \\times k)=x \u65f6\uff0c\u6709 gcd(N/x\uff0ck)=1 gcd(N/x\uff0ck)=1 \uff0c\u5373 k k \u6ee1\u8db3\u4e0e N/x N/x \u4e92\u8d28\u65f6\u6ee1\u8db3 N N \u4e0e x \\times k x \\times k \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a x x \uff0c\u4e8e\u662f\u672c\u9898\u5c31\u53d8\u6210\u4e86\u5c31 1-N/x 1-N/x \u5185\uff0c\u4e0e N/x N/x \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u7528\u6b27\u62c9\u51fd\u6570\u6c42\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_9","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 1e5 ; ll eular ( ll x ) { ll ans = x ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { ans = ans - ans / i ; } while ( x % i == 0 ) { x /= i ; } } if ( x > 1 ) ans = ans - ans / x ; return ans ; } int main () { int t ; cin >> t ; while ( t -- ) { ll ans = 0 ; ll n , m ; cin >> n >> m ; int i ; for ( i = 1 ; i * i < n ; i ++ ) { if ( n % i == 0 ) { if ( i >= m ) { ans += eular ( n / i ); } if ( n / i >= m ) { ans += eular ( i ); } } } if ( i * i == n && i >= m ) ans += eular ( i ); cout << ans << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#3hdu-phi","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u82e5\u5e72\u4e2a\u6b63\u6574\u6570n\uff0c\u8bf7\u4f60\u6c42\u51fa\u6700\u5c0f\u7684m\uff0c\u4f7f\u5f97\u03c6(m)\u2265n\u3002 \u8f93\u5165\u683c\u5f0f \u672c\u9898\u6709\u591a\u7ec4\u8f93\u5165\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570T\u8868\u793a\u6570\u636e\u7ec4\u6570 \u63a5\u4e0b\u6765T\u884c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570n \u6570\u636e\u4fdd\u8bc1 1\u2264T\u2264104,1\u2264n\u2264106 1\u2264T\u2264104,1\u2264n\u2264106 \u3002 \u8f93\u51fa\u683c\u5f0f \u5171T\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\u4ee3\u8868\u5bf9\u5e94\u7684\u7b54\u6848 \u8f93\u5165\u6837\u4f8b 5 1 2 3 4 5 \u8f93\u51fa\u6837\u4f8b 1 3 5 5 7","title":"\u4f8b3.HDU phi"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_10","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const ll N = 5e6 + 10 ; int phi [ N -5 ]; bool vis [ N -5 ]; int prime [ N -5 ]; struct node { int pos ; int val ; friend bool operator < ( const node x , const node y ) //\u5bf9\u8f93\u5165\u8fdb\u884c\u5904\u4f18\u5148\u5904\u7406n\u5c0f\u7684\u8f93\u5165\u5e76\u8bb0\u5f55 { return x . val < y . val ; } } node [ 10005 ]; int ans [ 10005 ]; int t ; void euler () { int now = 1 ; memset ( vis , false , sizeof ( vis )); memset ( phi , 0 , sizeof ( phi )); vis [ 1 ] = true ; phi [ 1 ] = 1 ; int cnt = 0 ; for ( int i = 1 ; i <= N -10 ; i ++ ) { if ( ! vis [ i ]) { prime [ ++ cnt ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j <= cnt && prime [ j ] * i <= N -10 ; j ++ ) { vis [ prime [ j ] * i ] = true ; if ( i % prime [ j ] == 0 ) { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ] -1 ]; } while ( phi [ i ] >= node [ now ]. val & now <= t ) { ans [ node [ now ]. pos ] = i ; now ++ ; } if ( now > t ) return ; } } int main () { euler (); cin >> t ; for ( int i = 1 ; i <= t ; i ++ ) { cin >> node [ i ]. val ; node [ i ]. pos = i ; } sort ( node + 1 , node + t + 1 ); euler (); for ( int i = 1 ; i <= t ; i ++ ) cout << ans [ i ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/","text":"\u5b9a\u4e49 \u00b6 \u5bf9\u4e8e\u51fd\u6570 f(x) f(x) \uff0c\u82e5\u6ee1\u8db3 (p, q) = 1 (p, q) = 1 \uff0c\u4e14 f(p \\times q) = f(p) \\times f(q) f(p \\times q) = f(p) \\times f(q) \uff0c\u5219\u79f0 f(x) f(x) \u4e3a\u5b8c\u5168\u79ef\u6027\u51fd\u6570 \u5e38\u89c1\u79ef\u6027\u51fd\u6570 \u00b6 \u6b63\u56e0\u5b50\u4e2a\u6570\u51fd\u6570\uff1a d(x) d(x) \u6b27\u62c9\u51fd\u6570(1 - n\u5185\u4e0en\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570)\uff1a phi(x) phi(x) \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\uff1a u(x) u(x) \u7ebf\u6027\u6c42\u79ef\u6027\u51fd\u6570\u6a21\u677f\u9898 \u00b6 \u7ebf\u6027\u6c42\u6b63\u56e0\u5b50\u4e2a\u6570d(x) \u00b6 void init ( int n ) { vis [ 1 ] = true ; d [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , d [ i ] = 2 ; for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { int tmp = i ; while ( tmp % prime [ j ] == 0 ) { tmp /= prime [ j ]; } d [ i * prime [ j ]] = d [ i ] + d [ tmp ]; break ; } d [ i * prime [ j ]] = d [ i ] * d [ prime [ j ]]; } } } \u7ebf\u6027\u6c42\u6b27\u62c9\u51fd\u6570\u03a6(x) \u00b6 void init ( int n ) { vis [ 1 ] = true ; phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , phi [ i ] = i - 1 ; for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; } } } \u7ebf\u6027\u6c42\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u03bc(x) \u00b6 u(x) = \\begin{cases} 1, x = 1\\\\ (-1)^k, x = a_1^{p1}\\times a_2^{p2}\\times a_3^{p3} ... \\times a_k^{pk}\\\\ 0, \u5176\u4ed6\u60c5\u51b5\\\\ \\end{cases} u(x) = \\begin{cases} 1, x = 1\\\\ (-1)^k, x = a_1^{p1}\\times a_2^{p2}\\times a_3^{p3} ... \\times a_k^{pk}\\\\ 0, \u5176\u4ed6\u60c5\u51b5\\\\ \\end{cases} void init ( int n ) { u [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , u [ i ] = -1 ; for ( int j = 1 ; prime [ j ] * i <= n ; j ++ ) { vis [ prime [ j ] * i ] = true ; if ( i % prime [ j ] == 0 ) { u [ prime [ j ] * i ] = 0 ; break ; } u [ prime [ j ] * i ] = u [ i ] * ( -1 ); } } } \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u00b6 \u4f7f\u7528\u5230\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u6027\u8d28 \u00b6 \\sum_{d|n}u(d) = \\begin{cases} 1, n = 1\\\\ 0, n \\neq 1\\\\ \\end{cases} \\sum_{d|n}u(d) = \\begin{cases} 1, n = 1\\\\ 0, n \\neq 1\\\\ \\end{cases} \u8bc1\u660e \u5047\u8bbe n = a_1^{p1}\\times a_2^{p2} ... \\times a_k^{pk} (a1,a2...ak\u5747\u4e3a\u8d28\u56e0\u5b50) n = a_1^{p1}\\times a_2^{p2} ... \\times a_k^{pk} (a1,a2...ak\u5747\u4e3a\u8d28\u56e0\u5b50) \u4ee4 n' = a_1\\times a_2 ... \\times a_k n' = a_1\\times a_2 ... \\times a_k \u5219 \\sum_{d|n}u(d) = \\sum_{d|n'}u(d) = \\sum_{i}^{k} C_k^i * (-1)^i = 0 \\sum_{d|n}u(d) = \\sum_{d|n'}u(d) = \\sum_{i}^{k} C_k^i * (-1)^i = 0 \u5f53n=1\u65f6,\u6709 \\sum_{d|1}u(d)=u(1)=1 \\sum_{d|1}u(d)=u(1)=1 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u00b6 \u82e5 F(n) = \\sum_{d|n}f(d) F(n) = \\sum_{d|n}f(d) \uff0c\u90a3\u4e48 f(n) = \\sum_{d|n}u(d)F(\\frac{n}{d}) f(n) = \\sum_{d|n}u(d)F(\\frac{n}{d}) \u82e5 F(n) = \\sum_{n|d}f(d) F(n) = \\sum_{n|d}f(d) \uff0c\u90a3\u4e48 f(n) = \\sum_{n|d}u(\\frac{d}{n})F(d) f(n) = \\sum_{n|d}u(\\frac{d}{n})F(d) \u4e00\u5f0f\u8bc1\u660e \u4e8c\u5f0f\u8bc1\u660e \u4f8b1.ZAP-Queries \u00b6 \u9898\u76ee\u610f\u601d\u53ef\u5316\u7b80\u4e3a\uff1a \u6c42\\sum_{x = 1}^{a}\\sum_{y=1}^{b}[gcd(x, y) == 1] \u6c42\\sum_{x = 1}^{a}\\sum_{y=1}^{b}[gcd(x, y) == 1] \u9898\u89e3 \u00b6 \u8bbe f(n) f(n) \u4e3a\u4ee5\u4e0a\u5f0f\u5b50\u7684\u503c\uff0c\u6211\u4eec\u5047\u8bbe F(n) F(n) \u662f\u5728\u6b64\u8303\u56f4\u5185 gcd(x, y) gcd(x, y) \u4e3a n\u6216n\u7684\u500d\u6570 n\u6216n\u7684\u500d\u6570 \u7684\u4e2a\u6570\uff0c\u5219\u6709 F(n) = \\sum_{n|d}f(d) F(n) = \\sum_{n|d}f(d) ,\u5df2\u77e5\u6b64\u65f6 F(n)=\\lfloor\\frac{a}{n}\\rfloor\\times\\lfloor\\frac{b}{n}\\rfloor F(n)=\\lfloor\\frac{a}{n}\\rfloor\\times\\lfloor\\frac{b}{n}\\rfloor ,\u5747\u5411\u4e0b\u53d6\u6574\uff0c\u7531\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u53ef\u4ee5\u5f97\u51fa f(n)=\\sum_{n|d}u(\\frac{d}{n})F(d) f(n)=\\sum_{n|d}u(\\frac{d}{n})F(d) \uff0c\u7b54\u6848\u7ee7\u4e3a f(n) f(n) ,\u6b64\u65f6\u6211\u4eec\u679a\u4e3e \\frac{d}{n} \\frac{d}{n} \u7684\u503c\uff0c\u4ee4\u5176\u4e3a t t \uff0c\u5219 d=t\\times n d=t\\times n \uff0c\u539f\u5f0f\u53ef\u5316\u4e3a f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times \\frac{a}{d}\\times \\frac{b}{d}=\\sum_{t=1}^{min(a, b)}u(t)\\times \\frac{a}{nt}\\times \\frac{b}{nt} f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times \\frac{a}{d}\\times \\frac{b}{d}=\\sum_{t=1}^{min(a, b)}u(t)\\times \\frac{a}{nt}\\times \\frac{b}{nt} \uff0c\u6700\u540e\u5229\u7528\u6570\u8bba\u5206\u5757\u8fdb\u884c\u4f18\u5316\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 5e4 + 5 ; int prime [ N ], cnt = 0 ; bool vis [ N ]; int u [ N ]; int sum [ N ]; void init ( int n ) { // \u9884\u5904\u7406mobius\u51fd\u6570\u7684\u524d\u7f00\u548c vis [ 1 ] = true ; u [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , u [ i ] = -1 ; for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { u [ i * prime [ j ]] = 0 ; break ; } u [ i * prime [ j ]] = u [ i ] * ( -1 ); } } for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + u [ i ]; } int cal ( int a , int b , int n ) { int res = 0 ; for ( int l = 1 , r ; l <= min ( a , b ); l = r + 1 ) { // \u6570\u8bba\u5206\u5757 r = min ( a / ( a / l ), b / ( b / l )); res += ( sum [ r ] - sum [ l - 1 ]) * ( a / ( n * l )) * ( b / ( n * l )); } return res ; } signed main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int t ; cin >> t ; init ( N - 4 ); while ( t -- ) { int a , b , d ; cin >> a >> b >> d ; int res = cal ( a , b , d ); cout << res << endl ; } return 0 ; } \u4f8b2.YY\u7684GCD \u00b6 \u9898\u76ee\u53ef\u7b80\u5316\u4e3a\uff1a \u6c42\\sum_{P}^{P\\le min(n, m)}\\sum_{x = 1}^{N}\\sum_{y = 1}^{M}[gcd(x, y) == P] \u6c42\\sum_{P}^{P\\le min(n, m)}\\sum_{x = 1}^{N}\\sum_{y = 1}^{M}[gcd(x, y) == P] \u9898\u89e3 \u00b6 \u82e5\u60f3\u5316\u4e3a\u4e0a\u4e00\u9898\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u6539\u53d8\u679a\u4e3e\u53d8\u91cf\uff0c\u5c06\u679a\u4e3e x, y x, y \u6539\u53d8\u4e3a\u679a\u4e3e x,y x,y \u7684\u500d\u6570\uff0c\u5373\u540e\u9762\u4e24\u4e2a \\sum \\sum \u53d8\u4e3a \\sum_{x=1}^{\\frac{N}{P}}\\sum_{y=1}^{\\frac{M}{P}}[gcd(x,y)==1] \\sum_{x=1}^{\\frac{N}{P}}\\sum_{y=1}^{\\frac{M}{P}}[gcd(x,y)==1] \uff0c\u540c\u4e0a\u9898\u4e00\u6837\u7684\u5957\u8def\u8fdb\u884c\u5316\u7b80\uff0c f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times \\lfloor\\frac{M}{Pd}\\rfloor f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times \\lfloor\\frac{M}{Pd}\\rfloor \u6211\u4eec\u9700\u8981\u7684\u662f res = \\sum_{P}^{P\\le min(N, M)}f(1)=\\sum_{P}^{P\\le min(N,M)}\\sum_{d}u(d)\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times\\lfloor\\frac{M}{Pd}\\rfloor res = \\sum_{P}^{P\\le min(N, M)}f(1)=\\sum_{P}^{P\\le min(N,M)}\\sum_{d}u(d)\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times\\lfloor\\frac{M}{Pd}\\rfloor \u6211\u4eec\u53d1\u73b0\u82e5\u76f4\u63a5\u8ba1\u7b97\u53ea\u80fd\u5f97\u5230\u4e00\u534a\u7684\u5206\u6570\uff0c\u4e8e\u662f\u8003\u8651\u4f18\u5316\uff0c\u7531\u4e8e Pd Pd \u5341\u5206\u4e11\u964b\uff0c\u5c06 Pd Pd \u8bbe\u4e3a t t \uff0c\u679a\u4e3e d d \u53d8\u4e3a\u679a\u4e3e t t \uff0c\u5e76\u4e92\u6362\u679a\u4e3e\u987a\u5e8f\uff0c\u6b64\u65f6 P P \u7684\u8303\u56f4\u53d8\u6210\u4e86 P|t P|t res = \\sum_{t=1}^{min(N,M)}\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P})\\times\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor=\\sum_{t=1}^{min(N,M)}\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) res = \\sum_{t=1}^{min(N,M)}\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P})\\times\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor=\\sum_{t=1}^{min(N,M)}\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) \u5bf9\u4e8e \\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) \\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) \uff0c\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u4ed6\u7684\u524d\u7f00\u548c\uff0c\u5728\u914d\u5408\u6574\u9664\u5206\u5757\uff0c\u5c31\u80fd\u8fc7\u4e86 \u63a5\u4e0b\u6765\u8bb2\u8bb2\u600e\u4e48\u6c42\u524d\u7f00\u548c\uff0c\u8003\u8651\u7ebf\u6027\u7b5b\uff0c\u6211\u4eec\u8bbe\u5176\u4e3a f(n) f(n) \u5728\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u82e5 n n \u4e3a prime prime \uff0c\u6613\u5f97 f(n)=u(1)=1 f(n)=u(1)=1 \u82e5 n n \u975e\u8d28\u6570\uff0c\u8003\u8651 n=i\\times p n=i\\times p \u82e5 i\\%p=0 i\\%p=0 \u65f6 i=p_1^{a1}\\times p_{2}^{a2}...\\times p_{k}^{ak} i=p_1^{a1}\\times p_{2}^{a2}...\\times p_{k}^{ak} \u82e5 a1,a2...ak a1,a2...ak \u5747\u4e3a1\uff0c\u5219\u6211\u4eec\u53d1\u73b0\u4ec5\u5f53 P P \u53d6p\u65f6\uff0c u(\\frac{n}{p})=u(i) u(\\frac{n}{p})=u(i) \u4e0d\u4e3a0 \u82e5\u5b58\u5728\u67d0\u4e2a a_k\\ge2 a_k\\ge2 \uff0c\u5219 P P \u65e0\u8bba\u53d6\u8c01\uff0c\u90fd\u5b58\u5728\u4e00\u4e2a a_i\\ge2 a_i\\ge2 \uff0c u(\\frac{n}{p})=0=u(i) u(\\frac{n}{p})=0=u(i) \u6240\u4ee5 f(n)=u(i) f(n)=u(i) \u82e5 i\\%p\\ne0 i\\%p\\ne0 \u65f6 f(i)=\\sum u(\\frac{i}{P}),f(n)=\\sum u(\\frac{ip}{P}) f(i)=\\sum u(\\frac{i}{P}),f(n)=\\sum u(\\frac{ip}{P}) \u800c u(\\frac{ip}{P})=u(\\frac{i}{P})\\times(-1) u(\\frac{ip}{P})=u(\\frac{i}{P})\\times(-1) \u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u9664\u4e86 p p \uff0c\u5176\u4ed6\u90fd\u5728 f(i) f(i) \u4e2d\u51fa\u73b0\u8fc7\u7c7b\u4f3c\u7684\u9879 \u6240\u4ee5 f(n)=-f(i)+u(\\frac{ip}{p})=-f(i)+u(i) f(n)=-f(i)+u(\\frac{ip}{p})=-f(i)+u(i) \u5230\u8fd9\u91cc\u5c31\u80fd\u7ebf\u6027\u9000\u51fa f(x) f(x) \u7684\u6bcf\u4e00\u9879\uff0c\u6700\u540e\u5904\u7406\u51fa\u524d\u7f00\u548c\u5c31\u597d\u5566\uff0c\u6ce8\u610f\u8fd9\u9898\u82e5 #define int long long \u4f1a\u8d85\u65f6\u4e00\u4e2a\u70b9 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long LL ; const int N = 1e7 + 5 ; int prime [ N ], cnt = 0 ; bool vis [ N ]; int u [ N ]; int f [ N ]; LL sum [ N ]; void init ( int n ) { vis [ 1 ] = true ; u [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) { prime [ ++ cnt ] = i , u [ i ] = -1 ; f [ i ] = 1 ; } for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { u [ i * prime [ j ]] = 0 ; f [ i * prime [ j ]] = u [ i ]; break ; } u [ i * prime [ j ]] = u [ i ] * ( -1 ); f [ i * prime [ j ]] = - f [ i ] + u [ i ]; } } for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + f [ i ]; } LL cal ( int a , int b ) { LL res = 0 ; for ( int l = 1 , r ; l <= min ( a , b ); l = r + 1 ) { r = min ( a / ( a / l ), b / ( b / l )); res += ( sum [ r ] - sum [ l - 1 ]) * ( a / l ) * ( b / l ); } //cout << res << endl; return res ; } signed main () { int t ; scanf ( \"%d\" , & t ); init ( 1e7 + 1 ); while ( t -- ) { int n , m ; scanf ( \"%d %d\" , & n , & m ); LL res = 0 ; res = cal ( n , m ); printf ( \"%lld \\n \" , res ); } return 0 ; } \u8865\u5145\u77e5\u8bc6 \u00b6 \u6b27\u62c9\u51fd\u6570\u4e0e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5173\u7cfb \u00b6 phi(x)=\\sum_{d|x}u(\\frac{x}{d})d phi(x)=\\sum_{d|x}u(\\frac{x}{d})d [gcd(i, j)=1]\u7684\u66ff\u6362 \u00b6 [gcd(i,j)=1]=\\sum_{d|gcd(i,j)}u(d) [gcd(i,j)=1]=\\sum_{d|gcd(i,j)}u(d) \u5728\u6b64\u611f\u8c22 ShadyPi\u7684\u535a\u5ba2","title":"\u79ef\u6027\u51fd\u6570\u4e0e\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_1","text":"\u5bf9\u4e8e\u51fd\u6570 f(x) f(x) \uff0c\u82e5\u6ee1\u8db3 (p, q) = 1 (p, q) = 1 \uff0c\u4e14 f(p \\times q) = f(p) \\times f(q) f(p \\times q) = f(p) \\times f(q) \uff0c\u5219\u79f0 f(x) f(x) \u4e3a\u5b8c\u5168\u79ef\u6027\u51fd\u6570","title":"\u5b9a\u4e49"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_2","text":"\u6b63\u56e0\u5b50\u4e2a\u6570\u51fd\u6570\uff1a d(x) d(x) \u6b27\u62c9\u51fd\u6570(1 - n\u5185\u4e0en\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570)\uff1a phi(x) phi(x) \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\uff1a u(x) u(x)","title":"\u5e38\u89c1\u79ef\u6027\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_3","text":"","title":"\u7ebf\u6027\u6c42\u79ef\u6027\u51fd\u6570\u6a21\u677f\u9898"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#dx","text":"void init ( int n ) { vis [ 1 ] = true ; d [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , d [ i ] = 2 ; for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { int tmp = i ; while ( tmp % prime [ j ] == 0 ) { tmp /= prime [ j ]; } d [ i * prime [ j ]] = d [ i ] + d [ tmp ]; break ; } d [ i * prime [ j ]] = d [ i ] * d [ prime [ j ]]; } } }","title":"\u7ebf\u6027\u6c42\u6b63\u56e0\u5b50\u4e2a\u6570d(x)"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#x","text":"void init ( int n ) { vis [ 1 ] = true ; phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , phi [ i ] = i - 1 ; for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; } } }","title":"\u7ebf\u6027\u6c42\u6b27\u62c9\u51fd\u6570\u03a6(x)"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#x_1","text":"u(x) = \\begin{cases} 1, x = 1\\\\ (-1)^k, x = a_1^{p1}\\times a_2^{p2}\\times a_3^{p3} ... \\times a_k^{pk}\\\\ 0, \u5176\u4ed6\u60c5\u51b5\\\\ \\end{cases} u(x) = \\begin{cases} 1, x = 1\\\\ (-1)^k, x = a_1^{p1}\\times a_2^{p2}\\times a_3^{p3} ... \\times a_k^{pk}\\\\ 0, \u5176\u4ed6\u60c5\u51b5\\\\ \\end{cases} void init ( int n ) { u [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , u [ i ] = -1 ; for ( int j = 1 ; prime [ j ] * i <= n ; j ++ ) { vis [ prime [ j ] * i ] = true ; if ( i % prime [ j ] == 0 ) { u [ prime [ j ] * i ] = 0 ; break ; } u [ prime [ j ] * i ] = u [ i ] * ( -1 ); } } }","title":"\u7ebf\u6027\u6c42\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u03bc(x)"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_4","text":"","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_5","text":"\\sum_{d|n}u(d) = \\begin{cases} 1, n = 1\\\\ 0, n \\neq 1\\\\ \\end{cases} \\sum_{d|n}u(d) = \\begin{cases} 1, n = 1\\\\ 0, n \\neq 1\\\\ \\end{cases} \u8bc1\u660e \u5047\u8bbe n = a_1^{p1}\\times a_2^{p2} ... \\times a_k^{pk} (a1,a2...ak\u5747\u4e3a\u8d28\u56e0\u5b50) n = a_1^{p1}\\times a_2^{p2} ... \\times a_k^{pk} (a1,a2...ak\u5747\u4e3a\u8d28\u56e0\u5b50) \u4ee4 n' = a_1\\times a_2 ... \\times a_k n' = a_1\\times a_2 ... \\times a_k \u5219 \\sum_{d|n}u(d) = \\sum_{d|n'}u(d) = \\sum_{i}^{k} C_k^i * (-1)^i = 0 \\sum_{d|n}u(d) = \\sum_{d|n'}u(d) = \\sum_{i}^{k} C_k^i * (-1)^i = 0 \u5f53n=1\u65f6,\u6709 \\sum_{d|1}u(d)=u(1)=1 \\sum_{d|1}u(d)=u(1)=1","title":"\u4f7f\u7528\u5230\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u6027\u8d28"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_6","text":"\u82e5 F(n) = \\sum_{d|n}f(d) F(n) = \\sum_{d|n}f(d) \uff0c\u90a3\u4e48 f(n) = \\sum_{d|n}u(d)F(\\frac{n}{d}) f(n) = \\sum_{d|n}u(d)F(\\frac{n}{d}) \u82e5 F(n) = \\sum_{n|d}f(d) F(n) = \\sum_{n|d}f(d) \uff0c\u90a3\u4e48 f(n) = \\sum_{n|d}u(\\frac{d}{n})F(d) f(n) = \\sum_{n|d}u(\\frac{d}{n})F(d) \u4e00\u5f0f\u8bc1\u660e \u4e8c\u5f0f\u8bc1\u660e","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#1zap-queries","text":"\u9898\u76ee\u610f\u601d\u53ef\u5316\u7b80\u4e3a\uff1a \u6c42\\sum_{x = 1}^{a}\\sum_{y=1}^{b}[gcd(x, y) == 1] \u6c42\\sum_{x = 1}^{a}\\sum_{y=1}^{b}[gcd(x, y) == 1]","title":"\u4f8b1.ZAP-Queries"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_7","text":"\u8bbe f(n) f(n) \u4e3a\u4ee5\u4e0a\u5f0f\u5b50\u7684\u503c\uff0c\u6211\u4eec\u5047\u8bbe F(n) F(n) \u662f\u5728\u6b64\u8303\u56f4\u5185 gcd(x, y) gcd(x, y) \u4e3a n\u6216n\u7684\u500d\u6570 n\u6216n\u7684\u500d\u6570 \u7684\u4e2a\u6570\uff0c\u5219\u6709 F(n) = \\sum_{n|d}f(d) F(n) = \\sum_{n|d}f(d) ,\u5df2\u77e5\u6b64\u65f6 F(n)=\\lfloor\\frac{a}{n}\\rfloor\\times\\lfloor\\frac{b}{n}\\rfloor F(n)=\\lfloor\\frac{a}{n}\\rfloor\\times\\lfloor\\frac{b}{n}\\rfloor ,\u5747\u5411\u4e0b\u53d6\u6574\uff0c\u7531\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u53ef\u4ee5\u5f97\u51fa f(n)=\\sum_{n|d}u(\\frac{d}{n})F(d) f(n)=\\sum_{n|d}u(\\frac{d}{n})F(d) \uff0c\u7b54\u6848\u7ee7\u4e3a f(n) f(n) ,\u6b64\u65f6\u6211\u4eec\u679a\u4e3e \\frac{d}{n} \\frac{d}{n} \u7684\u503c\uff0c\u4ee4\u5176\u4e3a t t \uff0c\u5219 d=t\\times n d=t\\times n \uff0c\u539f\u5f0f\u53ef\u5316\u4e3a f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times \\frac{a}{d}\\times \\frac{b}{d}=\\sum_{t=1}^{min(a, b)}u(t)\\times \\frac{a}{nt}\\times \\frac{b}{nt} f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times \\frac{a}{d}\\times \\frac{b}{d}=\\sum_{t=1}^{min(a, b)}u(t)\\times \\frac{a}{nt}\\times \\frac{b}{nt} \uff0c\u6700\u540e\u5229\u7528\u6570\u8bba\u5206\u5757\u8fdb\u884c\u4f18\u5316\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_8","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 5e4 + 5 ; int prime [ N ], cnt = 0 ; bool vis [ N ]; int u [ N ]; int sum [ N ]; void init ( int n ) { // \u9884\u5904\u7406mobius\u51fd\u6570\u7684\u524d\u7f00\u548c vis [ 1 ] = true ; u [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) prime [ ++ cnt ] = i , u [ i ] = -1 ; for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { u [ i * prime [ j ]] = 0 ; break ; } u [ i * prime [ j ]] = u [ i ] * ( -1 ); } } for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + u [ i ]; } int cal ( int a , int b , int n ) { int res = 0 ; for ( int l = 1 , r ; l <= min ( a , b ); l = r + 1 ) { // \u6570\u8bba\u5206\u5757 r = min ( a / ( a / l ), b / ( b / l )); res += ( sum [ r ] - sum [ l - 1 ]) * ( a / ( n * l )) * ( b / ( n * l )); } return res ; } signed main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int t ; cin >> t ; init ( N - 4 ); while ( t -- ) { int a , b , d ; cin >> a >> b >> d ; int res = cal ( a , b , d ); cout << res << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#2yygcd","text":"\u9898\u76ee\u53ef\u7b80\u5316\u4e3a\uff1a \u6c42\\sum_{P}^{P\\le min(n, m)}\\sum_{x = 1}^{N}\\sum_{y = 1}^{M}[gcd(x, y) == P] \u6c42\\sum_{P}^{P\\le min(n, m)}\\sum_{x = 1}^{N}\\sum_{y = 1}^{M}[gcd(x, y) == P]","title":"\u4f8b2.YY\u7684GCD"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_9","text":"\u82e5\u60f3\u5316\u4e3a\u4e0a\u4e00\u9898\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u6539\u53d8\u679a\u4e3e\u53d8\u91cf\uff0c\u5c06\u679a\u4e3e x, y x, y \u6539\u53d8\u4e3a\u679a\u4e3e x,y x,y \u7684\u500d\u6570\uff0c\u5373\u540e\u9762\u4e24\u4e2a \\sum \\sum \u53d8\u4e3a \\sum_{x=1}^{\\frac{N}{P}}\\sum_{y=1}^{\\frac{M}{P}}[gcd(x,y)==1] \\sum_{x=1}^{\\frac{N}{P}}\\sum_{y=1}^{\\frac{M}{P}}[gcd(x,y)==1] \uff0c\u540c\u4e0a\u9898\u4e00\u6837\u7684\u5957\u8def\u8fdb\u884c\u5316\u7b80\uff0c f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times \\lfloor\\frac{M}{Pd}\\rfloor f(n)=\\sum_{n|d}u(\\frac{d}{n})\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times \\lfloor\\frac{M}{Pd}\\rfloor \u6211\u4eec\u9700\u8981\u7684\u662f res = \\sum_{P}^{P\\le min(N, M)}f(1)=\\sum_{P}^{P\\le min(N,M)}\\sum_{d}u(d)\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times\\lfloor\\frac{M}{Pd}\\rfloor res = \\sum_{P}^{P\\le min(N, M)}f(1)=\\sum_{P}^{P\\le min(N,M)}\\sum_{d}u(d)\\times\\lfloor\\frac{N}{Pd}\\rfloor\\times\\lfloor\\frac{M}{Pd}\\rfloor \u6211\u4eec\u53d1\u73b0\u82e5\u76f4\u63a5\u8ba1\u7b97\u53ea\u80fd\u5f97\u5230\u4e00\u534a\u7684\u5206\u6570\uff0c\u4e8e\u662f\u8003\u8651\u4f18\u5316\uff0c\u7531\u4e8e Pd Pd \u5341\u5206\u4e11\u964b\uff0c\u5c06 Pd Pd \u8bbe\u4e3a t t \uff0c\u679a\u4e3e d d \u53d8\u4e3a\u679a\u4e3e t t \uff0c\u5e76\u4e92\u6362\u679a\u4e3e\u987a\u5e8f\uff0c\u6b64\u65f6 P P \u7684\u8303\u56f4\u53d8\u6210\u4e86 P|t P|t res = \\sum_{t=1}^{min(N,M)}\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P})\\times\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor=\\sum_{t=1}^{min(N,M)}\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) res = \\sum_{t=1}^{min(N,M)}\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P})\\times\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor=\\sum_{t=1}^{min(N,M)}\\lfloor\\frac{N}{t}\\rfloor\\times\\lfloor\\frac{M}{t}\\rfloor\\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) \u5bf9\u4e8e \\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) \\sum_{P|t}^{P\u2208prime}u(\\frac{t}{P}) \uff0c\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u4ed6\u7684\u524d\u7f00\u548c\uff0c\u5728\u914d\u5408\u6574\u9664\u5206\u5757\uff0c\u5c31\u80fd\u8fc7\u4e86 \u63a5\u4e0b\u6765\u8bb2\u8bb2\u600e\u4e48\u6c42\u524d\u7f00\u548c\uff0c\u8003\u8651\u7ebf\u6027\u7b5b\uff0c\u6211\u4eec\u8bbe\u5176\u4e3a f(n) f(n) \u5728\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u82e5 n n \u4e3a prime prime \uff0c\u6613\u5f97 f(n)=u(1)=1 f(n)=u(1)=1 \u82e5 n n \u975e\u8d28\u6570\uff0c\u8003\u8651 n=i\\times p n=i\\times p \u82e5 i\\%p=0 i\\%p=0 \u65f6 i=p_1^{a1}\\times p_{2}^{a2}...\\times p_{k}^{ak} i=p_1^{a1}\\times p_{2}^{a2}...\\times p_{k}^{ak} \u82e5 a1,a2...ak a1,a2...ak \u5747\u4e3a1\uff0c\u5219\u6211\u4eec\u53d1\u73b0\u4ec5\u5f53 P P \u53d6p\u65f6\uff0c u(\\frac{n}{p})=u(i) u(\\frac{n}{p})=u(i) \u4e0d\u4e3a0 \u82e5\u5b58\u5728\u67d0\u4e2a a_k\\ge2 a_k\\ge2 \uff0c\u5219 P P \u65e0\u8bba\u53d6\u8c01\uff0c\u90fd\u5b58\u5728\u4e00\u4e2a a_i\\ge2 a_i\\ge2 \uff0c u(\\frac{n}{p})=0=u(i) u(\\frac{n}{p})=0=u(i) \u6240\u4ee5 f(n)=u(i) f(n)=u(i) \u82e5 i\\%p\\ne0 i\\%p\\ne0 \u65f6 f(i)=\\sum u(\\frac{i}{P}),f(n)=\\sum u(\\frac{ip}{P}) f(i)=\\sum u(\\frac{i}{P}),f(n)=\\sum u(\\frac{ip}{P}) \u800c u(\\frac{ip}{P})=u(\\frac{i}{P})\\times(-1) u(\\frac{ip}{P})=u(\\frac{i}{P})\\times(-1) \u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u9664\u4e86 p p \uff0c\u5176\u4ed6\u90fd\u5728 f(i) f(i) \u4e2d\u51fa\u73b0\u8fc7\u7c7b\u4f3c\u7684\u9879 \u6240\u4ee5 f(n)=-f(i)+u(\\frac{ip}{p})=-f(i)+u(i) f(n)=-f(i)+u(\\frac{ip}{p})=-f(i)+u(i) \u5230\u8fd9\u91cc\u5c31\u80fd\u7ebf\u6027\u9000\u51fa f(x) f(x) \u7684\u6bcf\u4e00\u9879\uff0c\u6700\u540e\u5904\u7406\u51fa\u524d\u7f00\u548c\u5c31\u597d\u5566\uff0c\u6ce8\u610f\u8fd9\u9898\u82e5 #define int long long \u4f1a\u8d85\u65f6\u4e00\u4e2a\u70b9","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_10","text":"#include <bits/stdc++.h> using namespace std ; typedef long long LL ; const int N = 1e7 + 5 ; int prime [ N ], cnt = 0 ; bool vis [ N ]; int u [ N ]; int f [ N ]; LL sum [ N ]; void init ( int n ) { vis [ 1 ] = true ; u [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( ! vis [ i ]) { prime [ ++ cnt ] = i , u [ i ] = -1 ; f [ i ] = 1 ; } for ( int j = 1 ; prime [ j ] <= n / i ; j ++ ) { vis [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) { u [ i * prime [ j ]] = 0 ; f [ i * prime [ j ]] = u [ i ]; break ; } u [ i * prime [ j ]] = u [ i ] * ( -1 ); f [ i * prime [ j ]] = - f [ i ] + u [ i ]; } } for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + f [ i ]; } LL cal ( int a , int b ) { LL res = 0 ; for ( int l = 1 , r ; l <= min ( a , b ); l = r + 1 ) { r = min ( a / ( a / l ), b / ( b / l )); res += ( sum [ r ] - sum [ l - 1 ]) * ( a / l ) * ( b / l ); } //cout << res << endl; return res ; } signed main () { int t ; scanf ( \"%d\" , & t ); init ( 1e7 + 1 ); while ( t -- ) { int n , m ; scanf ( \"%d %d\" , & n , & m ); LL res = 0 ; res = cal ( n , m ); printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_11","text":"","title":"\u8865\u5145\u77e5\u8bc6"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#_12","text":"phi(x)=\\sum_{d|x}u(\\frac{x}{d})d phi(x)=\\sum_{d|x}u(\\frac{x}{d})d","title":"\u6b27\u62c9\u51fd\u6570\u4e0e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5173\u7cfb"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E5%8F%8D/#gcdi-j1","text":"[gcd(i,j)=1]=\\sum_{d|gcd(i,j)}u(d) [gcd(i,j)=1]=\\sum_{d|gcd(i,j)}u(d) \u5728\u6b64\u611f\u8c22 ShadyPi\u7684\u535a\u5ba2","title":"[gcd(i, j)=1]\u7684\u66ff\u6362"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/","text":"\u6982\u8ff0 \u00b6 \u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b ax\u22611(mod \\ b) ax\u22611(mod \\ b) ,\u5219\u79f0 x x \u662f a\\ mod \\ b a\\ mod \\ b \u7684\u9006\u5143\uff0c\u8bb0\u4f5c a-1 a-1 \u3002(\u5f53 a\u22a5b a\u22a5b \u65f6\u624d\u6709\u9006\u5143) \u6269\u6b27\u6c42\u9006\u5143 \u00b6 \u4ee3\u7801\u6a21\u677f void exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return ; } exgcd ( b , a % b , y , x ); y -= a / b * x ; } \u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 \u00b6 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a \u82e5\u5b58\u5728\u6574\u6570 a,p a,p \u4e14 gcd(a,p)=1 gcd(a,p)=1 ,\u5373\u4e8c\u8005\u4e92\u4e3a\u8d28\u6570\uff0c\u5219\u6709 a^{p-1}\u22611(mod \\ p) a^{p-1}\u22611(mod \\ p) \u3002\u6b64\u65f6 a^{p-2} a^{p-2} \u662f a\\mod\\ p a\\mod\\ p \u7684\u9006\u5143 \u7531\u4e8ep\u4e00\u822c\u5f88\u5927\uff0c\u7528\u5feb\u901f\u5e42\u6765\u6c42 \u4ee3\u7801\u6a21\u677f ll qpow ( ll a , ll n ) { ll ans = 1 ; while ( n ) { if ( n % 2 ) ans = ans * a % mod ; a = a * a % mod ; n /= 2 ; } return ans ; } \u7ebf\u6027\u6c42\u9006\u5143 \u00b6 \u6c421-n\u7684\u9006\u5143 \u00b6 \u4ee3\u7801\u6a21\u677f inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { inv [ i ] = ( long long )( p - p / i ) * inv [ p % i ] % p ; } \u6c42\u7ed9\u5b9an\u4e2a\u6570\u7684\u9006\u5143 \u00b6 \u9996\u5148\u8ba1\u7b97 n n \u4e2a\u6570\u7684\u524d\u7f00\u79ef\uff0c\u8bb0\u4e3a pre[i] pre[i] \uff0c\u7136\u540e\u4f7f\u7528\u5feb\u901f\u5e42\u6216\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u8ba1\u7b97 pre[n] pre[n] \u7684\u9006\u5143\uff0c\u8bb0\u4e3a$Inv[n] $\u3002 \u56e0\u4e3a Inv[n] Inv[n] \u662f n n \u4e2a\u6570\u7684\u79ef\u7684\u9006\u5143\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u628a\u5b83\u4e58\u4e0a a[n] a[n] \u65f6\uff0c\u5c31\u4f1a\u548c a[n] a[n] \u7684\u9006\u5143\u62b5\u6d88\uff0c\u4e8e\u662f\u5c31\u5f97\u5230\u4e86 a[1] \u5230 \u5230 a[n-1]a[n-1] a[1] <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\u5230</span><script type=\"math/tex\">\u5230 a[n-1]a[n-1] \u7684\u79ef\u9006\u5143\uff0c\u8bb0\u4e3a Inv[n-1] Inv[n-1] \u3002 \u540c\u7406\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8ba1\u7b97\u51fa\u6240\u6709\u7684 Inv[i] Inv[i] \uff0c\u4e8e\u662f a[i-1] a[i-1] \u5c31\u53ef\u4ee5\u7528 pre[i-1] \\times Inv[i] pre[i-1] \\times Inv[i] \u6c42\u5f97\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5728 O(n+logp) O(n+logp) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u4e86 n n \u4e2a\u6570\u7684\u9006\u5143\u3002 \u4ee3\u7801\u6a21\u677f void init () { pre [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) pre [ i ] = pre [ i - 1 ] * a [ i ] % p ; inv [ n ] = qpow ( pre [ n ], p - 2 ); // \u5f53\u7136\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528 exgcd \u6765\u6c42\u9006\u5143,\u89c6\u4e2a\u4eba\u559c\u597d\u800c\u5b9a. for ( int i = n ; i >= 1 ; -- i ) inv [ i - 1 ] = inv [ i ] * a [ i ] % p ; for ( int i = 1 ; i <= n ; ++ i ) inv [ i ] = inv [ i ] * pre [ i - 1 ] % p ; } \u4f8b1.\u4e58\u6cd5\u9006\u51432 \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u76ee\u63cf\u8ff0 \u8fd9\u53ef\u80fd\u662f\u4e00\u9053\u6a21\u677f\u9898\u3002 \u7ed9\u5b9a\u4e2a\u6b63\u6574\u6570,\u6c42\u6bcf\u4e2a\u6570\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u63d0\u793a\uff1a\u8bf7\u4f7f\u7528\u9ad8\u6548\u7684\u8bfb\u5165\u65b9\u5f0f\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570n\u3002 \u7b2c\u4e8c\u884cn\u4e2a\u6574\u6570ai\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6570 \u8f93\u5165\u6837\u4f8b 5 4 7 8 12 123456 \u8f93\u51fa\u6837\u4f8b 650798912 \u9898\u89e3 \u00b6 \u6c42\u4e00\u5806\u6570\u9006\u5143\u6a21\u677f\u9898 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const ll mod = 1e9 + 7 ; const ll N = 998244353 ; ll a [ 5000005 ]; ll pre [ 5000005 ]; ll qpow ( ll a , ll n ) { ll ans = 1 ; while ( n ) { if ( n & 1 ) ans = ( ans % mod ) * ( a % mod ) % mod ; a = a * a % mod ; n /= 2 ; } return ans ; } int read () { int x = 0 , f = 1 ; char c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f = -1 ; c = getchar ();} while ( c >= '0' && c <= '9' ) x = x * 10 + c - '0' , c = getchar (); return x * f ; } ll inv [ 5000005 ]; int main () { int n ; scanf ( \"%d\" , & n ); pre [ 0 ] = 1 ; ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = read (); pre [ i ] = pre [ i -1 ] * a [ i ] % mod ; } inv [ n ] = qpow ( pre [ n ], mod -2 ); for ( int i = n ; i >= 1 ; i -- ) inv [ i -1 ] = inv [ i ] % mod * a [ i ] % mod ; for ( int i = 1 ; i <= n ; i ++ ) { ans = ans * N % mod + inv [ i ] * pre [ i -1 ] % mod ; } printf ( \"%lld \\n \" , ans % mod ); return 0 ; }","title":"\u9006\u5143"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#_1","text":"\u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b ax\u22611(mod \\ b) ax\u22611(mod \\ b) ,\u5219\u79f0 x x \u662f a\\ mod \\ b a\\ mod \\ b \u7684\u9006\u5143\uff0c\u8bb0\u4f5c a-1 a-1 \u3002(\u5f53 a\u22a5b a\u22a5b \u65f6\u624d\u6709\u9006\u5143)","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#_2","text":"\u4ee3\u7801\u6a21\u677f void exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return ; } exgcd ( b , a % b , y , x ); y -= a / b * x ; }","title":"\u6269\u6b27\u6c42\u9006\u5143"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#_3","text":"\u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a \u82e5\u5b58\u5728\u6574\u6570 a,p a,p \u4e14 gcd(a,p)=1 gcd(a,p)=1 ,\u5373\u4e8c\u8005\u4e92\u4e3a\u8d28\u6570\uff0c\u5219\u6709 a^{p-1}\u22611(mod \\ p) a^{p-1}\u22611(mod \\ p) \u3002\u6b64\u65f6 a^{p-2} a^{p-2} \u662f a\\mod\\ p a\\mod\\ p \u7684\u9006\u5143 \u7531\u4e8ep\u4e00\u822c\u5f88\u5927\uff0c\u7528\u5feb\u901f\u5e42\u6765\u6c42 \u4ee3\u7801\u6a21\u677f ll qpow ( ll a , ll n ) { ll ans = 1 ; while ( n ) { if ( n % 2 ) ans = ans * a % mod ; a = a * a % mod ; n /= 2 ; } return ans ; }","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#_4","text":"","title":"\u7ebf\u6027\u6c42\u9006\u5143"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#1-n","text":"\u4ee3\u7801\u6a21\u677f inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { inv [ i ] = ( long long )( p - p / i ) * inv [ p % i ] % p ; }","title":"\u6c421-n\u7684\u9006\u5143"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#n","text":"\u9996\u5148\u8ba1\u7b97 n n \u4e2a\u6570\u7684\u524d\u7f00\u79ef\uff0c\u8bb0\u4e3a pre[i] pre[i] \uff0c\u7136\u540e\u4f7f\u7528\u5feb\u901f\u5e42\u6216\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u8ba1\u7b97 pre[n] pre[n] \u7684\u9006\u5143\uff0c\u8bb0\u4e3a$Inv[n] $\u3002 \u56e0\u4e3a Inv[n] Inv[n] \u662f n n \u4e2a\u6570\u7684\u79ef\u7684\u9006\u5143\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u628a\u5b83\u4e58\u4e0a a[n] a[n] \u65f6\uff0c\u5c31\u4f1a\u548c a[n] a[n] \u7684\u9006\u5143\u62b5\u6d88\uff0c\u4e8e\u662f\u5c31\u5f97\u5230\u4e86 a[1] \u5230 \u5230 a[n-1]a[n-1] a[1] <span class=\"arithmatex\"><span class=\"MathJax_Preview\">\u5230</span><script type=\"math/tex\">\u5230 a[n-1]a[n-1] \u7684\u79ef\u9006\u5143\uff0c\u8bb0\u4e3a Inv[n-1] Inv[n-1] \u3002 \u540c\u7406\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8ba1\u7b97\u51fa\u6240\u6709\u7684 Inv[i] Inv[i] \uff0c\u4e8e\u662f a[i-1] a[i-1] \u5c31\u53ef\u4ee5\u7528 pre[i-1] \\times Inv[i] pre[i-1] \\times Inv[i] \u6c42\u5f97\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5728 O(n+logp) O(n+logp) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u4e86 n n \u4e2a\u6570\u7684\u9006\u5143\u3002 \u4ee3\u7801\u6a21\u677f void init () { pre [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) pre [ i ] = pre [ i - 1 ] * a [ i ] % p ; inv [ n ] = qpow ( pre [ n ], p - 2 ); // \u5f53\u7136\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528 exgcd \u6765\u6c42\u9006\u5143,\u89c6\u4e2a\u4eba\u559c\u597d\u800c\u5b9a. for ( int i = n ; i >= 1 ; -- i ) inv [ i - 1 ] = inv [ i ] * a [ i ] % p ; for ( int i = 1 ; i <= n ; ++ i ) inv [ i ] = inv [ i ] * pre [ i - 1 ] % p ; }","title":"\u6c42\u7ed9\u5b9an\u4e2a\u6570\u7684\u9006\u5143"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#12","text":"\u9898\u76ee\u5165\u53e3 \u9898\u76ee\u63cf\u8ff0 \u8fd9\u53ef\u80fd\u662f\u4e00\u9053\u6a21\u677f\u9898\u3002 \u7ed9\u5b9a\u4e2a\u6b63\u6574\u6570,\u6c42\u6bcf\u4e2a\u6570\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u63d0\u793a\uff1a\u8bf7\u4f7f\u7528\u9ad8\u6548\u7684\u8bfb\u5165\u65b9\u5f0f\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570n\u3002 \u7b2c\u4e8c\u884cn\u4e2a\u6574\u6570ai\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e00\u4e2a\u6570 \u8f93\u5165\u6837\u4f8b 5 4 7 8 12 123456 \u8f93\u51fa\u6837\u4f8b 650798912","title":"\u4f8b1.\u4e58\u6cd5\u9006\u51432"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#_5","text":"\u6c42\u4e00\u5806\u6570\u9006\u5143\u6a21\u677f\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E9%80%86%E5%85%83/#_6","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const ll mod = 1e9 + 7 ; const ll N = 998244353 ; ll a [ 5000005 ]; ll pre [ 5000005 ]; ll qpow ( ll a , ll n ) { ll ans = 1 ; while ( n ) { if ( n & 1 ) ans = ( ans % mod ) * ( a % mod ) % mod ; a = a * a % mod ; n /= 2 ; } return ans ; } int read () { int x = 0 , f = 1 ; char c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f = -1 ; c = getchar ();} while ( c >= '0' && c <= '9' ) x = x * 10 + c - '0' , c = getchar (); return x * f ; } ll inv [ 5000005 ]; int main () { int n ; scanf ( \"%d\" , & n ); pre [ 0 ] = 1 ; ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = read (); pre [ i ] = pre [ i -1 ] * a [ i ] % mod ; } inv [ n ] = qpow ( pre [ n ], mod -2 ); for ( int i = n ; i >= 1 ; i -- ) inv [ i -1 ] = inv [ i ] % mod * a [ i ] % mod ; for ( int i = 1 ; i <= n ; i ++ ) { ans = ans * N % mod + inv [ i ] * pre [ i -1 ] % mod ; } printf ( \"%lld \\n \" , ans % mod ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/","text":"1.\u671f\u671bDP \u00b6 \u4f8b1.\u6d1b\u8c37P1365 WJMZBMR\u6253osu! / Easy \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u4ee4 f[i] f[i] \u8868\u793a\u5230\u7b2ci\u4e2a\u5b57\u7b26\u7684\u671f\u671b\u957f\u5ea6, g[i] g[i] \u8868\u793a\u4ee5\u7b2ci\u4e2a\u5b57\u7b26\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eedo\u4e32\u957f\u5ea6\u7684\u671f\u671b,\u6b64\u65f6\u5c31\u6709\u4e09\u79cd\u60c5\u51b5 s[i] == o \u65f6, f[i] = f[i - 1] + (g[i-1] + 1)^2 -g[i-1]^2 = f[i - 1] + 2 * g[i - 1] + 1,g[i] = g[i -1] + 1 s[i] == o \u65f6, f[i] = f[i - 1] + (g[i-1] + 1)^2 -g[i-1]^2 = f[i - 1] + 2 * g[i - 1] + 1,g[i] = g[i -1] + 1 \u5f53s[i] == x\u65f6,g[i] = 0,f[i] = f[i - 1] \u5f53s[i] == x\u65f6,g[i] = 0,f[i] = f[i - 1] \u5f53s[i] == ?\u65f6,f[i] = f[i] + (2 * g[i - 1] + 1.0) * p,g[i]=(g[i - 1] + 1)*p(p\u4e3a?\u4e3ao\u7684\u6982\u7387\uff0c\u8fd9\u9898\u662f0.5) \u5f53s[i] == ?\u65f6,f[i] = f[i] + (2 * g[i - 1] + 1.0) * p,g[i]=(g[i - 1] + 1)*p(p\u4e3a?\u4e3ao\u7684\u6982\u7387\uff0c\u8fd9\u9898\u662f0.5) \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 3e5 + 5 ; double f [ N ], g [ N ]; char s [ N ]; int main () { int n ; cin >> n >> s + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s [ i ] == 'o' ) { g [ i ] = g [ i - 1 ] + 1.0 ; f [ i ] = f [ i - 1 ] + 2.0 * g [ i - 1 ] + 1.0 ; } else if ( s [ i ] == 'x' ) { g [ i ] = 0 ; f [ i ] = f [ i - 1 ]; } else if ( s [ i ] == '?' ) { g [ i ] = ( g [ i - 1 ] + 1.0 ) / 2.0 ; f [ i ] = f [ i - 1 ] + ( 2.0 * g [ i - 1 ] + 1.0 ) / 2.0 ; } } printf ( \"%.4lf\" , f [ n ]); return 0 ; } \u4f8b2.\u6d1b\u8c37P1654 OSU\uff01 \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u672c\u9898\u548c\u4e0a\u9898\u5dee\u4e0d\u591a,\u4e0d\u540c\u7684\u662f\u672c\u9898\u9700\u8981\u7ef4\u62a4\u957f\u5ea6 len len \u548c len^2 len^2 \u7684\u671f\u671b\uff0c\u6ce8\u610f\u4e0d\u80fd\u53ea\u7ef4\u62a4 len len \u7684\u671f\u671b\uff0c\u56e0\u4e3a E(x^2)\\neq E(x)^2 E(x^2)\\neq E(x)^2 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; double p ; double f [ N ]; // \u5230\u7b2ci\u4e2a\u7684\u671f\u671b\u957f\u5ea6 double a [ N ], b [ N ]; // len\u7684\u671f\u671b \u548c len\u65b9\u7684\u671f\u671b double cal ( double x ) { return x * x * x ; } int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int n ; cin >> n ; double res = 0 ; double len = 0 ; double p ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> p ; a [ i ] = ( a [ i - 1 ] + 1 ) * p ; b [ i ] = ( b [ i - 1 ] + ( 2.0 * a [ i - 1 ] + 1.0 )) * p ; f [ i ] = f [ i - 1 ] + (( 3.0 * b [ i - 1 ] + 3.0 * a [ i - 1 ] + 1.0 )) * p ; } printf ( \"%.1lf\" , f [ n ]); return 0 ; } 2.\u63a8\u516c\u5f0f \u00b6 \u4f8b1.\u6e38\u620f \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u7cfb\u5217\u5177\u6709\u500d\u6570\u5173\u7cfb\u6570\u5b572,4,6,8\uff0c\u68c0\u67e5\u65f6\u95f4\u5176\u5b9e\u662f\u7531\u4ed6\u4eec\u79cd\u6700\u5c0f\u7684\u6570\u6240\u51b3\u5b9a\u7684\uff0c\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff0c\u5c062\uff0c4\u5206\u4e3a\u4e00\u7c7b\uff0c3\u5206\u4e3a\u4e00\u7c7b\uff0c\u6700\u540e\u7684\u68c0\u67e5\u65f6\u95f4\u662f\u75312\u548c3\u7684\u4f4d\u7f6e\u6240\u51b3\u5b9a\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\uff0c\u6392\u5217\u7ec4\u5408\u4e00\u4e0b\u5373\u53ef \u4ee3\u7801 #include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 1e9 + 7 ; const int N = 1e7 + 5 ; int fac [ N ], infac [ N ]; int pre [ N ]; bool vis [ N ]; int sz [ N ]; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } void init ( int n ) { //\u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143 fac [ 0 ] = 1 ; infac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % mod ; infac [ n ] = qpow ( fac [ n ], mod - 2 , mod ); for ( int i = n - 1 ; i >= 1 ; i -- ) { infac [ i ] = infac [ i + 1 ] * ( i + 1 ) % mod ; } //for(int i = 1; i <= 10; i ++ ) cout << fac[i] << \" \"; //cout << endl; //for(int j = 1; j <= 10; j ++ ) cout << infac[j] << \" \"; //cout << endl; } inline int find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = find ( pre [ x ]); } int C ( int a , int b ) { return fac [ a ] % mod * infac [ a - b ] % mod * infac [ b ] % mod ; } signed main () { int l , r ; cin >> l >> r ; init ( r + 1 ); int n = r - l + 1 ; int x = 0 ; // x\u4e3a\u6700\u5c0f\u7684\u6570\u7684\u4e2a\u6570 for ( int i = l ; i <= r ; i ++ ) { if ( vis [ i ]) continue ; x ++ ; for ( int j = 2 ; j * i <= r ; j ++ ) { if ( vis [ i * j ]) continue ; vis [ i * j ] = true ; //cout << i << \" \" << j << endl; } } //for(int i = l; i <= r; i ++ ) cout << pre[i] << \" \"; int res = 0 ; //cout << C(5, 3) << endl; //cout << x << endl; for ( int i = x ; i <= n ; i ++ ) { // \u679a\u4e3e\u53ef\u80fd\u7684\u65f6\u95f4 res += x * C ( n - x , i - x ) % mod * fac [ i - 1 ] % mod * fac [ n - i ] % mod * i % mod ; res %= mod ; } // \u5bf9\u4e8e\u65f6\u95f4\u662fi\u7684\u60c5\u51b5\uff0c\u8bf4\u660ex\u4e2a\u6570\u5fc5\u987b\u5728\u524di\u4e2a\u4f4d\u7f6e\u4e14\u6709\u4e00\u4e2a\u5904\u4e8e\u7b2ci\u4e2a\u4f4d\u7f6e\uff0c\u4e8e\u662f\u56fa\u5b9a\u7b2ci\u4e2a\u4f4d\u7f6e\uff0c\u524d\u9762\u548c\u540e\u9762\u5168\u6392\u5217\u5373\u53ef cout << res << endl ; return 0 ; } \u4f8b2.\u5c0f\u9b54\u5973\u5e15\u742a \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u5982\u679c\u6211\u4eec\u80fd\u77e5\u9053\u6bcf\u4e03\u4e2a\u8fde\u7eed\u7684\u6676\u4f53\u91ca\u653e\u9b54\u6cd5\u7684\u6982\u7387\uff0c\u5c06\u6240\u6709\u7684\u53ef\u80fd\u6027\u52a0\u8d77\u6765\u4fbf\u662f\u7ed3\u679c\uff0c\u4ee4 a_1,a_2...a_7\u4e3a\u6bcf\u79cd\u5c5e\u6027\u7684\u6676\u4f53\u6570\u91cf\uff0c a_1,a_2...a_7\u4e3a\u6bcf\u79cd\u5c5e\u6027\u7684\u6676\u4f53\u6570\u91cf\uff0c \u4ee5\u524d\u4e03\u4e2a\u4e3a\u4f8b\uff0c\u5982\u679c\u80fd\u65bd\u653e\u9b54\u6cd5\uff0c\u6982\u7387\u5fc5\u4e3a 7!\\times C_n^{a1}\\times C_{n-1}^{a2}...\\times C_{n - 6}^{a7} 7!\\times C_n^{a1}\\times C_{n-1}^{a2}...\\times C_{n - 6}^{a7} \uff0c7!\u662f\u56e0\u4e3a\u91ca\u653e\u4e00\u6b21\u9b54\u6cd5\u65f6\u6bcf\u79cd\u5c5e\u6027\u7684\u6676\u4f53\u4f4d\u7f6e\u4e0d\u786e\u5b9a\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u62bd\u7b7e\uff0c\u5728\u6bcf\u6b21\u4e0d\u77e5\u9053\u524d\u8005\u7ed3\u679c\u65f6\u6982\u7387\u65f6\u4e00\u6837\u7684\uff0c\u672c\u9898\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0c\u4e4b\u540e\u6bcf\u4e03\u4e2a\u80fd\u91ca\u653e\u9b54\u6cd5\u7684\u6982\u7387\u5747\u76f8\u540c\uff0c\u7531\u4e8e\u957f\u5ea6\u4e3a7\u7684\u4e32\u4e00\u5171\u6709 n-6 n-6 \u4e2a\uff0c\u6700\u540e\u7b54\u6848\u4e58\u4e0a\u5373\u53ef \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 10 ; double f [ N ], g [ N ]; int a [ N ]; double res = 1 ; int main () { int n = 0 ; for ( int i = 1 ; i <= 7 ; i ++ ) { cin >> a [ i ]; n += a [ i ]; } int fac7 = 1 * 2 * 3 * 4 * 5 * 6 * 7 ; bool flag = true ; for ( int i = 1 ; i <= 7 ; i ++ ) { if ( n - i + 1 == 0 ) { flag = false ; break ; } res *= a [ i ] * 1.0 / ( n - i + 1 ); } if ( ! flag ) cout << \"0.000\" << endl ; else { res = res * fac7 * ( n - 6 ); printf ( \"%.3lf\" , res ); } return 0 ; }","title":"\u671f\u671b"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/#1dp","text":"","title":"1.\u671f\u671bDP"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/#1p1365-wjmzbmrosu-easy","text":"\u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u4ee4 f[i] f[i] \u8868\u793a\u5230\u7b2ci\u4e2a\u5b57\u7b26\u7684\u671f\u671b\u957f\u5ea6, g[i] g[i] \u8868\u793a\u4ee5\u7b2ci\u4e2a\u5b57\u7b26\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eedo\u4e32\u957f\u5ea6\u7684\u671f\u671b,\u6b64\u65f6\u5c31\u6709\u4e09\u79cd\u60c5\u51b5 s[i] == o \u65f6, f[i] = f[i - 1] + (g[i-1] + 1)^2 -g[i-1]^2 = f[i - 1] + 2 * g[i - 1] + 1,g[i] = g[i -1] + 1 s[i] == o \u65f6, f[i] = f[i - 1] + (g[i-1] + 1)^2 -g[i-1]^2 = f[i - 1] + 2 * g[i - 1] + 1,g[i] = g[i -1] + 1 \u5f53s[i] == x\u65f6,g[i] = 0,f[i] = f[i - 1] \u5f53s[i] == x\u65f6,g[i] = 0,f[i] = f[i - 1] \u5f53s[i] == ?\u65f6,f[i] = f[i] + (2 * g[i - 1] + 1.0) * p,g[i]=(g[i - 1] + 1)*p(p\u4e3a?\u4e3ao\u7684\u6982\u7387\uff0c\u8fd9\u9898\u662f0.5) \u5f53s[i] == ?\u65f6,f[i] = f[i] + (2 * g[i - 1] + 1.0) * p,g[i]=(g[i - 1] + 1)*p(p\u4e3a?\u4e3ao\u7684\u6982\u7387\uff0c\u8fd9\u9898\u662f0.5) \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 3e5 + 5 ; double f [ N ], g [ N ]; char s [ N ]; int main () { int n ; cin >> n >> s + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s [ i ] == 'o' ) { g [ i ] = g [ i - 1 ] + 1.0 ; f [ i ] = f [ i - 1 ] + 2.0 * g [ i - 1 ] + 1.0 ; } else if ( s [ i ] == 'x' ) { g [ i ] = 0 ; f [ i ] = f [ i - 1 ]; } else if ( s [ i ] == '?' ) { g [ i ] = ( g [ i - 1 ] + 1.0 ) / 2.0 ; f [ i ] = f [ i - 1 ] + ( 2.0 * g [ i - 1 ] + 1.0 ) / 2.0 ; } } printf ( \"%.4lf\" , f [ n ]); return 0 ; }","title":"\u4f8b1.\u6d1b\u8c37P1365 WJMZBMR\u6253osu! / Easy"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/#2p1654-osu","text":"\u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u672c\u9898\u548c\u4e0a\u9898\u5dee\u4e0d\u591a,\u4e0d\u540c\u7684\u662f\u672c\u9898\u9700\u8981\u7ef4\u62a4\u957f\u5ea6 len len \u548c len^2 len^2 \u7684\u671f\u671b\uff0c\u6ce8\u610f\u4e0d\u80fd\u53ea\u7ef4\u62a4 len len \u7684\u671f\u671b\uff0c\u56e0\u4e3a E(x^2)\\neq E(x)^2 E(x^2)\\neq E(x)^2 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; double p ; double f [ N ]; // \u5230\u7b2ci\u4e2a\u7684\u671f\u671b\u957f\u5ea6 double a [ N ], b [ N ]; // len\u7684\u671f\u671b \u548c len\u65b9\u7684\u671f\u671b double cal ( double x ) { return x * x * x ; } int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); int n ; cin >> n ; double res = 0 ; double len = 0 ; double p ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> p ; a [ i ] = ( a [ i - 1 ] + 1 ) * p ; b [ i ] = ( b [ i - 1 ] + ( 2.0 * a [ i - 1 ] + 1.0 )) * p ; f [ i ] = f [ i - 1 ] + (( 3.0 * b [ i - 1 ] + 3.0 * a [ i - 1 ] + 1.0 )) * p ; } printf ( \"%.1lf\" , f [ n ]); return 0 ; }","title":"\u4f8b2.\u6d1b\u8c37P1654 OSU\uff01"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/#2","text":"","title":"2.\u63a8\u516c\u5f0f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/#1","text":"\u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u7cfb\u5217\u5177\u6709\u500d\u6570\u5173\u7cfb\u6570\u5b572,4,6,8\uff0c\u68c0\u67e5\u65f6\u95f4\u5176\u5b9e\u662f\u7531\u4ed6\u4eec\u79cd\u6700\u5c0f\u7684\u6570\u6240\u51b3\u5b9a\u7684\uff0c\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff0c\u5c062\uff0c4\u5206\u4e3a\u4e00\u7c7b\uff0c3\u5206\u4e3a\u4e00\u7c7b\uff0c\u6700\u540e\u7684\u68c0\u67e5\u65f6\u95f4\u662f\u75312\u548c3\u7684\u4f4d\u7f6e\u6240\u51b3\u5b9a\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\uff0c\u6392\u5217\u7ec4\u5408\u4e00\u4e0b\u5373\u53ef \u4ee3\u7801 #include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 1e9 + 7 ; const int N = 1e7 + 5 ; int fac [ N ], infac [ N ]; int pre [ N ]; bool vis [ N ]; int sz [ N ]; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } void init ( int n ) { //\u9884\u5904\u7406\u9636\u4e58\u548c\u9006\u5143 fac [ 0 ] = 1 ; infac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % mod ; infac [ n ] = qpow ( fac [ n ], mod - 2 , mod ); for ( int i = n - 1 ; i >= 1 ; i -- ) { infac [ i ] = infac [ i + 1 ] * ( i + 1 ) % mod ; } //for(int i = 1; i <= 10; i ++ ) cout << fac[i] << \" \"; //cout << endl; //for(int j = 1; j <= 10; j ++ ) cout << infac[j] << \" \"; //cout << endl; } inline int find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = find ( pre [ x ]); } int C ( int a , int b ) { return fac [ a ] % mod * infac [ a - b ] % mod * infac [ b ] % mod ; } signed main () { int l , r ; cin >> l >> r ; init ( r + 1 ); int n = r - l + 1 ; int x = 0 ; // x\u4e3a\u6700\u5c0f\u7684\u6570\u7684\u4e2a\u6570 for ( int i = l ; i <= r ; i ++ ) { if ( vis [ i ]) continue ; x ++ ; for ( int j = 2 ; j * i <= r ; j ++ ) { if ( vis [ i * j ]) continue ; vis [ i * j ] = true ; //cout << i << \" \" << j << endl; } } //for(int i = l; i <= r; i ++ ) cout << pre[i] << \" \"; int res = 0 ; //cout << C(5, 3) << endl; //cout << x << endl; for ( int i = x ; i <= n ; i ++ ) { // \u679a\u4e3e\u53ef\u80fd\u7684\u65f6\u95f4 res += x * C ( n - x , i - x ) % mod * fac [ i - 1 ] % mod * fac [ n - i ] % mod * i % mod ; res %= mod ; } // \u5bf9\u4e8e\u65f6\u95f4\u662fi\u7684\u60c5\u51b5\uff0c\u8bf4\u660ex\u4e2a\u6570\u5fc5\u987b\u5728\u524di\u4e2a\u4f4d\u7f6e\u4e14\u6709\u4e00\u4e2a\u5904\u4e8e\u7b2ci\u4e2a\u4f4d\u7f6e\uff0c\u4e8e\u662f\u56fa\u5b9a\u7b2ci\u4e2a\u4f4d\u7f6e\uff0c\u524d\u9762\u548c\u540e\u9762\u5168\u6392\u5217\u5373\u53ef cout << res << endl ; return 0 ; }","title":"\u4f8b1.\u6e38\u620f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E6%9C%9F%E6%9C%9B/%E6%9C%9F%E6%9C%9B/#2_1","text":"\u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u5982\u679c\u6211\u4eec\u80fd\u77e5\u9053\u6bcf\u4e03\u4e2a\u8fde\u7eed\u7684\u6676\u4f53\u91ca\u653e\u9b54\u6cd5\u7684\u6982\u7387\uff0c\u5c06\u6240\u6709\u7684\u53ef\u80fd\u6027\u52a0\u8d77\u6765\u4fbf\u662f\u7ed3\u679c\uff0c\u4ee4 a_1,a_2...a_7\u4e3a\u6bcf\u79cd\u5c5e\u6027\u7684\u6676\u4f53\u6570\u91cf\uff0c a_1,a_2...a_7\u4e3a\u6bcf\u79cd\u5c5e\u6027\u7684\u6676\u4f53\u6570\u91cf\uff0c \u4ee5\u524d\u4e03\u4e2a\u4e3a\u4f8b\uff0c\u5982\u679c\u80fd\u65bd\u653e\u9b54\u6cd5\uff0c\u6982\u7387\u5fc5\u4e3a 7!\\times C_n^{a1}\\times C_{n-1}^{a2}...\\times C_{n - 6}^{a7} 7!\\times C_n^{a1}\\times C_{n-1}^{a2}...\\times C_{n - 6}^{a7} \uff0c7!\u662f\u56e0\u4e3a\u91ca\u653e\u4e00\u6b21\u9b54\u6cd5\u65f6\u6bcf\u79cd\u5c5e\u6027\u7684\u6676\u4f53\u4f4d\u7f6e\u4e0d\u786e\u5b9a\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u62bd\u7b7e\uff0c\u5728\u6bcf\u6b21\u4e0d\u77e5\u9053\u524d\u8005\u7ed3\u679c\u65f6\u6982\u7387\u65f6\u4e00\u6837\u7684\uff0c\u672c\u9898\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0c\u4e4b\u540e\u6bcf\u4e03\u4e2a\u80fd\u91ca\u653e\u9b54\u6cd5\u7684\u6982\u7387\u5747\u76f8\u540c\uff0c\u7531\u4e8e\u957f\u5ea6\u4e3a7\u7684\u4e32\u4e00\u5171\u6709 n-6 n-6 \u4e2a\uff0c\u6700\u540e\u7b54\u6848\u4e58\u4e0a\u5373\u53ef \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 10 ; double f [ N ], g [ N ]; int a [ N ]; double res = 1 ; int main () { int n = 0 ; for ( int i = 1 ; i <= 7 ; i ++ ) { cin >> a [ i ]; n += a [ i ]; } int fac7 = 1 * 2 * 3 * 4 * 5 * 6 * 7 ; bool flag = true ; for ( int i = 1 ; i <= 7 ; i ++ ) { if ( n - i + 1 == 0 ) { flag = false ; break ; } res *= a [ i ] * 1.0 / ( n - i + 1 ); } if ( ! flag ) cout << \"0.000\" << endl ; else { res = res * fac7 * ( n - 6 ); printf ( \"%.3lf\" , res ); } return 0 ; }","title":"\u4f8b2.\u5c0f\u9b54\u5973\u5e15\u742a"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/","text":"\u6982\u8ff0 \u00b6 \u5361\u7279\u5170\u6570\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u7ec4\u5408\u6570\uff0c\u7ecf\u5e38\u51fa\u73b0\u5728\u5404\u79cd\u8ba1\u7b97\u4e2d\uff0c\u5176\u524d\u51e0\u9879\u4e3a : 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845\u2026 \u5e38\u89c1\u516c\u5f0f \u00b6 H_n=\\begin{cases} \\sum_{i = 1}^nH_{i - 1}H_{n-i},(n\\ge2, n\\in N_{+})\\\\ 1,(n=0,1) \\end{cases} H_n=\\begin{cases} \\sum_{i = 1}^nH_{i - 1}H_{n-i},(n\\ge2, n\\in N_{+})\\\\ 1,(n=0,1) \\end{cases} \u2002 H_n = \\frac{H_{n-1}(4n-2)}{n+1} H_n = \\frac{H_{n-1}(4n-2)}{n+1} \u2002 H_n=C_{2n}^n-C_{2n}^{n-1}=\\frac{C_{2n}^n}{n+1} H_n=C_{2n}^n-C_{2n}^{n-1}=\\frac{C_{2n}^n}{n+1} \u4f8b1 P1641 [SCOI2010]\u751f\u6210\u5b57\u7b26\u4e32 \u00b6 \u9898\u76ee\u63cf\u8ff0 lxhgww \u6700\u8fd1\u63a5\u5230\u4e86\u4e00\u4e2a\u751f\u6210\u5b57\u7b26\u4e32\u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u9700\u8981\u4ed6\u628a n \u4e2a 1 \u548c m \u4e2a 0 \u7ec4\u6210\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u4efb\u52a1\u8fd8\u8981\u6c42\u5728\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u5728\u4efb\u610f\u7684\u524d k \u4e2a\u5b57\u7b26\u4e2d\uff0c1 \u7684\u4e2a\u6570\u4e0d\u80fd\u5c11\u4e8e 0 \u7684\u4e2a\u6570\u3002\u73b0\u5728 lxhgww \u60f3\u8981\u77e5\u9053\u6ee1\u8db3\u8981\u6c42\u7684\u5b57\u7b26\u4e32\u5171\u6709\u591a\u5c11\u4e2a\uff0c\u806a\u660e\u7684\u7a0b\u5e8f\u5458\u4eec\uff0c\u4f60\u4eec\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6570\u636e\u53ea\u6709\u4e00\u884c\uff0c\u5305\u62ec 2 \u4e2a\u6570\u5b57 n \u548c m\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6570\u636e\u662f\u4e00\u884c\uff0c\u5305\u62ec 1 \u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6ee1\u8db3\u8981\u6c42\u7684\u5b57\u7b26\u4e32\u6570\u76ee\uff0c\u8fd9\u4e2a\u6570\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u53ea\u9700\u8f93\u51fa\u8fd9\u4e2a\u6570\u9664\u4ee5 20100403 \u7684\u4f59\u6570 \u8f93\u5165\u6837\u4f8b 2 2 \u8f93\u51fa\u6837\u4f8b 2 \u9898\u89e3 \u00b6 \u5c061\u548c0\u7684\u64cd\u4f5c\u8f6c\u6362\u5230\u5750\u6807\u7cfb\u4e2d\uff0c\u5047\u8bbe\u67091\u5219 (x+1\uff0cy+1) (x+1\uff0cy+1) \uff0c\u67090\u5219 (x+1,y-1) (x+1,y-1) \uff0c\u6211\u4eec\u53d1\u73b0\u7ec8\u70b9\u4e3a (n+m,n-m) (n+m,n-m) \uff0c\u82e5\u5b58\u5728\u524dk\u5b57\u6bcd\u4e2d0\u4e2a\u6570\u5927\u4e8e1\uff0c\u5219\u5728\u5750\u6807\u7cfb\u4e2d\u66f2\u7ebf\u7ecf\u8fc7 y=-1 y=-1 \uff0c\u5c06\u7ec8\u70b9\u5173\u4e8e y=-1 y=-1 \u5bf9\u79f0\uff0c\u5219\u7ec8\u70b9\u5bf9\u79f0\u70b9\u4e3a (n+m\uff0cm-n-2) (n+m\uff0cm-n-2) \uff0c\u4e8e\u662f\u5c31\u6709 n-m+1 n-m+1 \u6b65\u7684\u5411\u4e0a\u53d8\u6210\u5411\u4e0b\uff0c\u5373\u4e00\u5171\u6709 n+1 n+1 \u6b65\u5411\u4e0b\uff0c\u6240\u6709\u60c5\u51b5\u6709 C_{c+m}^n C_{c+m}^n \u79cd\u53ef\u80fd\uff0c\u4e0d\u5408\u6cd5\u7684\u6709 C_{n+m}^{m-1} C_{n+m}^{m-1} \u6216 C_{n+m}^{n+1} C_{n+m}^{n+1} \u79cd\u53ef\u80fd\uff0c\u7b54\u6848\u76f8\u51cf\u5373\u53ef\uff0c\u53e6\u4e00\u79cd\u5bf9\u79f0\u65b9\u6cd5\u662f\u5c06\u8d77\u70b9\u5173\u4e8e y=-1 y=-1 \u5bf9\u79f0\uff0c\u5219\u8d77\u70b9\u53d8\u4e3a (0\uff0c-2) (0\uff0c-2) \uff0c\u5230\u8fbe (n+m\uff0cn-m) (n+m\uff0cn-m) ,\u9700\u8981\u5c06\u4e00\u6b65\u5411\u4e0b\u53d8\u4e3a\u5411\u4e0a\uff0c\u5219\u4e0d\u5408\u6cd5\u6709 C_{n+m}^{m-1} C_{n+m}^{m-1} \u79cd\u53ef\u80fd \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 20100403 ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int C ( int a , int b , int mod ) { int res = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { res *= j ; res %= mod ; res *= qpow ( i , mod -2 , mod ); res %= mod ; } return res ; } signed main () { int n , m ; cin >> n >> m ; cout << (( C ( n + m , m , mod ) - C ( n + m , m -1 , mod )) % mod + mod ) % mod << endl ; return 0 ; }","title":"\u5361\u7279\u5170\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/#_1","text":"\u5361\u7279\u5170\u6570\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u7ec4\u5408\u6570\uff0c\u7ecf\u5e38\u51fa\u73b0\u5728\u5404\u79cd\u8ba1\u7b97\u4e2d\uff0c\u5176\u524d\u51e0\u9879\u4e3a : 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845\u2026","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/#_2","text":"H_n=\\begin{cases} \\sum_{i = 1}^nH_{i - 1}H_{n-i},(n\\ge2, n\\in N_{+})\\\\ 1,(n=0,1) \\end{cases} H_n=\\begin{cases} \\sum_{i = 1}^nH_{i - 1}H_{n-i},(n\\ge2, n\\in N_{+})\\\\ 1,(n=0,1) \\end{cases} \u2002 H_n = \\frac{H_{n-1}(4n-2)}{n+1} H_n = \\frac{H_{n-1}(4n-2)}{n+1} \u2002 H_n=C_{2n}^n-C_{2n}^{n-1}=\\frac{C_{2n}^n}{n+1} H_n=C_{2n}^n-C_{2n}^{n-1}=\\frac{C_{2n}^n}{n+1}","title":"\u5e38\u89c1\u516c\u5f0f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/#1-p1641-scoi2010","text":"\u9898\u76ee\u63cf\u8ff0 lxhgww \u6700\u8fd1\u63a5\u5230\u4e86\u4e00\u4e2a\u751f\u6210\u5b57\u7b26\u4e32\u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u9700\u8981\u4ed6\u628a n \u4e2a 1 \u548c m \u4e2a 0 \u7ec4\u6210\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u4efb\u52a1\u8fd8\u8981\u6c42\u5728\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u5728\u4efb\u610f\u7684\u524d k \u4e2a\u5b57\u7b26\u4e2d\uff0c1 \u7684\u4e2a\u6570\u4e0d\u80fd\u5c11\u4e8e 0 \u7684\u4e2a\u6570\u3002\u73b0\u5728 lxhgww \u60f3\u8981\u77e5\u9053\u6ee1\u8db3\u8981\u6c42\u7684\u5b57\u7b26\u4e32\u5171\u6709\u591a\u5c11\u4e2a\uff0c\u806a\u660e\u7684\u7a0b\u5e8f\u5458\u4eec\uff0c\u4f60\u4eec\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6570\u636e\u53ea\u6709\u4e00\u884c\uff0c\u5305\u62ec 2 \u4e2a\u6570\u5b57 n \u548c m\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6570\u636e\u662f\u4e00\u884c\uff0c\u5305\u62ec 1 \u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6ee1\u8db3\u8981\u6c42\u7684\u5b57\u7b26\u4e32\u6570\u76ee\uff0c\u8fd9\u4e2a\u6570\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u53ea\u9700\u8f93\u51fa\u8fd9\u4e2a\u6570\u9664\u4ee5 20100403 \u7684\u4f59\u6570 \u8f93\u5165\u6837\u4f8b 2 2 \u8f93\u51fa\u6837\u4f8b 2","title":"\u4f8b1 P1641 [SCOI2010]\u751f\u6210\u5b57\u7b26\u4e32"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/#_3","text":"\u5c061\u548c0\u7684\u64cd\u4f5c\u8f6c\u6362\u5230\u5750\u6807\u7cfb\u4e2d\uff0c\u5047\u8bbe\u67091\u5219 (x+1\uff0cy+1) (x+1\uff0cy+1) \uff0c\u67090\u5219 (x+1,y-1) (x+1,y-1) \uff0c\u6211\u4eec\u53d1\u73b0\u7ec8\u70b9\u4e3a (n+m,n-m) (n+m,n-m) \uff0c\u82e5\u5b58\u5728\u524dk\u5b57\u6bcd\u4e2d0\u4e2a\u6570\u5927\u4e8e1\uff0c\u5219\u5728\u5750\u6807\u7cfb\u4e2d\u66f2\u7ebf\u7ecf\u8fc7 y=-1 y=-1 \uff0c\u5c06\u7ec8\u70b9\u5173\u4e8e y=-1 y=-1 \u5bf9\u79f0\uff0c\u5219\u7ec8\u70b9\u5bf9\u79f0\u70b9\u4e3a (n+m\uff0cm-n-2) (n+m\uff0cm-n-2) \uff0c\u4e8e\u662f\u5c31\u6709 n-m+1 n-m+1 \u6b65\u7684\u5411\u4e0a\u53d8\u6210\u5411\u4e0b\uff0c\u5373\u4e00\u5171\u6709 n+1 n+1 \u6b65\u5411\u4e0b\uff0c\u6240\u6709\u60c5\u51b5\u6709 C_{c+m}^n C_{c+m}^n \u79cd\u53ef\u80fd\uff0c\u4e0d\u5408\u6cd5\u7684\u6709 C_{n+m}^{m-1} C_{n+m}^{m-1} \u6216 C_{n+m}^{n+1} C_{n+m}^{n+1} \u79cd\u53ef\u80fd\uff0c\u7b54\u6848\u76f8\u51cf\u5373\u53ef\uff0c\u53e6\u4e00\u79cd\u5bf9\u79f0\u65b9\u6cd5\u662f\u5c06\u8d77\u70b9\u5173\u4e8e y=-1 y=-1 \u5bf9\u79f0\uff0c\u5219\u8d77\u70b9\u53d8\u4e3a (0\uff0c-2) (0\uff0c-2) \uff0c\u5230\u8fbe (n+m\uff0cn-m) (n+m\uff0cn-m) ,\u9700\u8981\u5c06\u4e00\u6b65\u5411\u4e0b\u53d8\u4e3a\u5411\u4e0a\uff0c\u5219\u4e0d\u5408\u6cd5\u6709 C_{n+m}^{m-1} C_{n+m}^{m-1} \u79cd\u53ef\u80fd","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/#_4","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int mod = 20100403 ; int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int C ( int a , int b , int mod ) { int res = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { res *= j ; res %= mod ; res *= qpow ( i , mod -2 , mod ); res %= mod ; } return res ; } signed main () { int n , m ; cin >> n >> m ; cout << (( C ( n + m , m , mod ) - C ( n + m , m -1 , mod )) % mod + mod ) % mod << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/","text":"\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570 \u00b6 \u6982\u8ff0 \u00b6 \u6c42\u5c06n\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u7403\u5206\u6210k\u4e2a\u5706\u6392\u5217\u7684\u65b9\u6848\u6570 \u601d\u8def \u00b6 s[i][j] s[i][j] \u8868\u793a\u5c06 i i \u4e2a\u7403\u5206\u6210 j j \u4e2a\u5706\u6392\u5217\u7684\u65b9\u6848\u6570\uff0c\u5f53\u653e\u5165\u7b2c i i \u4e2a\u7403\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u989d\u5916\u65b0\u589e\u4e00\u4e2a\u539f\u6392\u5217\uff0c\u6b64\u65f6\u65b9\u6848\u6570\u4f4d s[i-1][j-1] s[i-1][j-1] \uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u63d2\u5165\u5230\u524d i-1 i-1 \u4e2a\u6570\u7684\u7a7a\u9699\u4e2d\uff0c\u7531\u4e8e\u662f\u5706\u6392\u5217\uff0c x x \u4e2a\u7403\u5c31\u6709 x x \u4e2a\u7a7a\uff0c\u4e8e\u662f\u65b0\u589e\u4e86 (i-1)*s[i-1][j] (i-1)*s[i-1][j] \u79cd\u65b9\u6848\u3002 \u4ee3\u7801\u6a21\u677f \u00b6 #include <bits/stdc++.h> using namespace std ; #define int long long int k , n ; const int N = 1005 ; int s [ N ][ N ]; const int mod = 1e9 + 7 ; signed main () { cin >> n >> k ; s [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) { s [ i ][ j ] = s [ i -1 ][ j -1 ] + ( i -1 ) * s [ i -1 ][ j ]; s [ i ][ j ] %= mod ; } } cout << s [ n ][ k ] << endl ; } \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \u00b6 \u6982\u8ff0 \u00b6 \u6c42\u5c06n\u4e2a\u4e0d\u540c\u7684\u7403\u5206\u6210k\u7ec4\u7684\u65b9\u6848\u6570 \u601d\u8def \u00b6 S[i][j] S[i][j] \u8868\u793a\u5c06 i i \u4e2a\u7403\u5206\u6210 j j \u7ec4\u7684\u65b9\u6848\u6570\uff0c\u5f53\u653e\u5165\u7b2c i i \u4e2a\u7403\u65f6\uff0c\u540c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\uff0c\u53ef\u4ee5\u9009\u62e9\u989d\u5916\u751f\u6210\u4e00\u4e2a\u539f\u6392\u5217\uff0c\u5219\u65b9\u6848\u6570\u4e3a S[i-1][j-1] S[i-1][j-1] \uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u63d2\u5165\u5230\u524d j j \u7ec4\u4e2d\uff0c\u65b9\u6848\u6570\u4e3a j*S[i-1][j] j*S[i-1][j] \u3002 \u4ee3\u7801\u6a21\u677f \u00b6 #include <bits/stdc++.h> using namespace std ; #define int long long const int N = 1005 ; int S [ N ][ N ]; int n , k ; const int mod = 1e9 + 7 ; signed main () { cin >> n >> k ; S [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) { S [ i ][ j ] = S [ i -1 ][ j -1 ] + j * S [ i -1 ][ j ]; S [ i ][ j ] %= mod ; } } cout << S [ n ][ k ] << endl ; return 0 ; }","title":"\u65af\u7279\u6797\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_1","text":"","title":"\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_2","text":"\u6c42\u5c06n\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u7403\u5206\u6210k\u4e2a\u5706\u6392\u5217\u7684\u65b9\u6848\u6570","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_3","text":"s[i][j] s[i][j] \u8868\u793a\u5c06 i i \u4e2a\u7403\u5206\u6210 j j \u4e2a\u5706\u6392\u5217\u7684\u65b9\u6848\u6570\uff0c\u5f53\u653e\u5165\u7b2c i i \u4e2a\u7403\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u989d\u5916\u65b0\u589e\u4e00\u4e2a\u539f\u6392\u5217\uff0c\u6b64\u65f6\u65b9\u6848\u6570\u4f4d s[i-1][j-1] s[i-1][j-1] \uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u63d2\u5165\u5230\u524d i-1 i-1 \u4e2a\u6570\u7684\u7a7a\u9699\u4e2d\uff0c\u7531\u4e8e\u662f\u5706\u6392\u5217\uff0c x x \u4e2a\u7403\u5c31\u6709 x x \u4e2a\u7a7a\uff0c\u4e8e\u662f\u65b0\u589e\u4e86 (i-1)*s[i-1][j] (i-1)*s[i-1][j] \u79cd\u65b9\u6848\u3002","title":"\u601d\u8def"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_4","text":"#include <bits/stdc++.h> using namespace std ; #define int long long int k , n ; const int N = 1005 ; int s [ N ][ N ]; const int mod = 1e9 + 7 ; signed main () { cin >> n >> k ; s [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) { s [ i ][ j ] = s [ i -1 ][ j -1 ] + ( i -1 ) * s [ i -1 ][ j ]; s [ i ][ j ] %= mod ; } } cout << s [ n ][ k ] << endl ; }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_5","text":"","title":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_6","text":"\u6c42\u5c06n\u4e2a\u4e0d\u540c\u7684\u7403\u5206\u6210k\u7ec4\u7684\u65b9\u6848\u6570","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_7","text":"S[i][j] S[i][j] \u8868\u793a\u5c06 i i \u4e2a\u7403\u5206\u6210 j j \u7ec4\u7684\u65b9\u6848\u6570\uff0c\u5f53\u653e\u5165\u7b2c i i \u4e2a\u7403\u65f6\uff0c\u540c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\uff0c\u53ef\u4ee5\u9009\u62e9\u989d\u5916\u751f\u6210\u4e00\u4e2a\u539f\u6392\u5217\uff0c\u5219\u65b9\u6848\u6570\u4e3a S[i-1][j-1] S[i-1][j-1] \uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u63d2\u5165\u5230\u524d j j \u7ec4\u4e2d\uff0c\u65b9\u6848\u6570\u4e3a j*S[i-1][j] j*S[i-1][j] \u3002","title":"\u601d\u8def"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/#_8","text":"#include <bits/stdc++.h> using namespace std ; #define int long long const int N = 1005 ; int S [ N ][ N ]; int n , k ; const int mod = 1e9 + 7 ; signed main () { cin >> n >> k ; S [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= k ; j ++ ) { S [ i ][ j ] = S [ i -1 ][ j -1 ] + j * S [ i -1 ][ j ]; S [ i ][ j ] %= mod ; } } cout << S [ n ][ k ] << endl ; return 0 ; }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/","text":"\u6982\u8ff0 \u00b6 \u7ebf\u6027\u57fa\uff0c\u662f\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u6982\u5ff5\uff0c\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\uff0c\u524d\u7f00\u7ebf\u6027\u57fa\u662f\u7ebf\u6027\u57fa\u7684\u6269\u5c55\uff0c\u4ed6\u4eec\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u6709\u5173\u5f02\u6216\u548c\u7684\u6781\u503c\u95ee\u9898\u3002 \u4e00\u7ec4\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf\u5373\u53ef\u4f5c\u4e3a\u4e00\u7ec4\u57fa\u5e95\uff0c\u5f20\u8d77\u4e00\u4e2a\u7ebf\u6027\u7684\u5411\u91cf\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u57fa\u5e95\u5373\u79f0\u4e3a\u7ebf\u6027\u57fa\uff0c\u5229\u7528\u7ebf\u6027\u57fa\u7684\u57fa\u5e95\u8fdb\u884c\u7ebf\u6027\u8fd0\u7b97\uff0c\u53ef\u8868\u793a\u5411\u91cf\u7a7a\u95f4\u5185\u7684\u6240\u6709\u5411\u91cf\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6240\u6709\u5411\u91cf\u90fd\u53ef\u4ee5\u62c6\u6210\u57fa\u5e95\u7684\u7ebf\u6027\u7ec4\u5408\u3002 \u6839\u636e\u5f02\u6216\u7684\u539f\u7406\uff0c\u5c06\u4e00\u4e2a\u6570\u5b57\u62c6\u6210\u4ed6\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u5c06\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7528\u5411\u91cf\u6765\u8868\u793a\uff0c\u7531\u4e8e\u4e00\u7ec4\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf\u53ef\u4ee5\u5f20\u8d77\u4e00\u4e2a\u5411\u91cf\u7a7a\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u6784\u9020\u8fd9\u6837\u4e00\u7ec4\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7ec4\u6210\u7684\u7ebf\u6027\u57fa\uff0c\u5728\u8fd9\u4e2a\u7ebf\u6027\u57fa\u4e2d\uff0c\u901a\u8fc7\u57fa\u5e95\u7684\u7ebf\u6027\u7ec4\u5408\u3001\u5f02\u6216\u8fd0\u7b97\uff0c\u4ece\u800c\u53ef\u4ee5\u8868\u8fbe\u6240\u6709\u7684\u5f02\u6216\u7ed3\u679c\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u82e5\u4e00\u4e2a\u6570\u96c6 T T \u7684\u503c\u57df\u8303\u56f4\u4e3a \uff0c\u90a3\u4e48 T T \u7684\u7ebf\u6027\u57fa\u662f T T \u7684\u4e00\u4e2a\u5b50\u96c6 A={a1,a2,a3,...,an} A={a1,a2,a3,...,an} \uff0c A A \u4e2d\u5143\u7d20\u76f8\u4e92\u5f02\u6216\u800c\u6210\u7684\u96c6\u5408\uff0c\u7b49\u4ef7\u4e8e\u539f\u6570\u96c6 T T \u7684\u5143\u7d20\u76f8\u4e92\u5f02\u6216\u5f62\u6210\u5f02\u6216\u96c6\u5408 \u9884\u5907\u77e5\u8bc6 \u00b6 \u4ea4\u6362\u53d8\u91cf\u4f4d\u7f6e\uff1a a = a ^ b; b = a ^ b; a = a ^ b; \u5982\u679ca^b==c \u5219 a^c==b b^c==a a^b^c==0 \u5b9a\u4e49 \u00b6 \u7ebf\u6027\u57fa\u662f\u4e00\u4e2a\u6570\u7684\u96c6\u5408\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5e8f\u5217\u90fd\u62e5\u6709\u81f3\u5c11\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u53d6\u7ebf\u6027\u57fa\u4e2d\u82e5\u5e72\u4e2a\u6570\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u5f97\u5230\u539f\u5e8f\u5217\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6570\u3002 \u4e8c\u8fdb\u5236\u6c42\u7ebf\u6027\u57fa \u00b6 \u4ee3\u7801 void init () //\u6c42\u975e\u6700\u7b80\u7ebf\u6027\u57fa { for ( int i = 1 ; i <= n ; i ++ ) //1-n\u904d\u5386\u6570\u7ec4\u5143\u7d20 { ll x = num [ i ]; for ( int j = 63 ; j >= 0 ; j -- ) //\u8003\u5bdf\u5143\u7d20\u7684\u6bcf\u4e00\u4f4d { if ( x & ( 1L L << j )) //\u5982\u679c\u5143\u7d20\u7684\u7b2cj\u4f4d\u4e3a1 { if ( p [ j ]) x ^= p [ j ]; //\u5728\u7ebf\u6027\u57fa\u4e2d\u5df2\u7ecf\u51fa\u73b0\u7b2cj\u4f4d\u4e3a1\u65f6\uff0c\u6d88\u53bb\u5f53\u524d\u5143\u7d20//\u76841\uff0c\u4fdd\u8bc1\u4e3a\u4e0b\u4e09\u89d2\u5f62\u5f0f,\u5316\u4e3a\u4e0b\u4e09\u89d2\u662f\u4e3a\u4e86\u66f4\u5bb9\u6613\u5f02//\u6216\u5f97\u51fa\u67d0\u6570 else { p [ j ] = x ; //\u5426\u5219\u5c06\u7b2cj\u4f4d\u5143\u7d20\u7f6e1 break ; } } } } return ; } \u5224\u65ad\u67d0\u6570\u80fd\u5426\u7531\u7ebf\u6027\u57fa\u8868\u793a \u00b6 \u601d\u8def \u00b6 \u5c06\u8be5\u6570\u901a\u8fc7\u7ebf\u6027\u57fa\uff0c\u770b\u7ed3\u679c\u662f\u5426\u4e3a0\u5373\u53ef \u4ee3\u7801 \u00b6 bool check ( long long x ) { for ( int j = 60 ; j >= 0 ; j -- ) { if ( x & ( 1L L << j )) { if ( d [ j ] == 0 ) { return false ; } else x ^= d [ j ]; } } return x == 0 ; } \u6c42\u5f02\u6216\u548c\u6700\u5927 \u00b6 \u601d\u8def \u00b6 \u6c42\u51fa\u7ebf\u6027\u57fa\uff0c\u7531\u4e8e\u9ad8\u4f4d\u4e3a1\u8d21\u732e\u66f4\u5927\uff0c\u6bcf\u6b21\u4f18\u5148\u5f02\u6216\u9ad8\u4f4d\uff0c\u904d\u5386\u7ebf\u6027\u57fa\u5373\u53ef \u4ee3\u7801 \u00b6 long long query_max () { long long ret = 0 ; for ( int i = 60 ; i >= 0 ; i -- ) if (( ret ^ d [ i ]) > ret ) //\u8d2a\u5fc3 ret ^= d [ i ]; return ret ; } \u6c42\u5f02\u6216\u548c\u6700\u5c0f \u00b6 \u601d\u8def \u00b6 \u6c42\u6700\u5c0f\u7684\u7ebf\u6027\u57fa\u5143\u7d20\u5373\u53ef \u4ee3\u7801 \u00b6 long long query_min () { for ( int i = 0 ; i <= 60 ; i ++ ) if ( d [ i ]) return d [ i ]; return 0 ; } \u6c42\u5f02\u6216\u548c\u7b2cK\u5927 \u00b6 \u601d\u8def \u00b6 \u5c06\u7ebf\u6027\u57fa\u5316\u4e3a\u6700\u7b80\uff0cK\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u9009\u51fa1\u7684\u4f4d\uff0c\u5c06\u4ee5\u5176\u4e3a\u4e0b\u6807\u7684\u7ebf\u6027\u57fa\u5143\u7d20\u76f8\u4e58\u5373\u53ef \u4ee3\u7801 \u00b6 void rebuild () //\u9ad8\u65af\u6d88\u5143\u5316\u4e3a\u6700\u7b80\u7ebf\u6027\u57fa { for ( int i = 60 ; i >= 0 ; i -- ) for ( int j = i -1 ; j >= 0 ; j -- ) if ( d [ i ] & ( 1L L << j )) d [ i ] ^= d [ j ]; for ( int i = 0 ; i <= 60 ; i ++ ) if ( d [ i ]) p [ cnt ++ ] = d [ i ]; } long long kthquery ( long long k ) { int ret = 0 ; if ( k >= ( 1L L << cnt )) return -1 ; for ( int i = 60 ; i >= 0 ; i -- ) if ( k & ( 1L L << i )) ret ^= p [ i ]; return ret ; } \u4f8b1.HDU 3949 XOR \u00b6 \u9898\u76ee\u63cf\u8ff0 XOR is a kind of bit operator, we define that as follow: for two binary base number A and B, let C=A XOR B, then for each bit of C, we can get its value by check the digit of corresponding position in A and B. And for each digit, 1 XOR 1 = 0, 1 XOR 0 = 1, 0 XOR 1 = 1, 0 XOR 0 = 0. And we simply write this operator as ^, like 3 ^ 1 = 2,4 ^ 3 = 7. XOR is an amazing operator and this is a question about XOR. We can choose several numbers and do XOR operatorion to them one by one, then we get another number. For example, if we choose 2,3 and 4, we can get 2^3^4=5. Now, you are given N numbers, and you can choose some of them(even a single number) to do XOR on them, and you can get many different numbers. Now I want you tell me which number is the K-th smallest number among them. \u8f93\u5165\u683c\u5f0ft First line of the input is a single integer T(T<=30), indicates there are T test cases. For each test case, the first line is an integer N(1<=N<=10000), the number of numbers below. The second line contains N integers (each number is between 1 and 10^18). The third line is a number Q(1<=Q<=10000), the number of queries. The fourth line contains Q numbers(each number is between 1 and 10^18) K1,K2,......KQ. \u8f93\u51fa\u683c\u5f0f For each test case,first output Case #C: in a single line,C means the number of the test case which is from 1 to T. Then for each query, you should output a single line contains the Ki-th smallest number in them, if there are less than Ki different numbers, output -1. \u8f93\u5165\u6837\u4f8b 2 2 1 2 4 1 2 3 4 3 1 2 3 5 1 2 3 4 5 \u8f93\u51fa\u6837\u4f8b Case #1 : 1 2 3 -1 Case #2 : 0 1 2 3 -1 \u9898\u610f: \u7ed9\u51fan\u4e2a\u6570\uff0c\u6c42\u4ed6\u4eec\u4efb\u610f\u7ec4\u5408\u7684\u6700\u5c0f\u503c \u9898\u89e3 \u00b6 \u6c42\u51fa\u8fd9\u4e9b\u6570\u7684\u7ebf\u6027\u57fa\uff0c\u5c06k\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u7b2ci\u4f4d\u4e3a1\uff0c\u7b54\u6848\u5c31\u5f02\u6216\u7b2ci\u4e2a\u7ebf\u6027\u57fa\uff0c\u82e5\u7ebf\u6027\u57fa\u4e2a\u6570\u5c0f\u4e8e\u539f\u4e2a\u6570\uff0c\u5373\u6700\u5c0f\u503c\u53ef\u4e3a0\uff0c\u5219\u7528\u7c7b\u4f3c\u65b9\u6cd5\u6c42k-1\u5c0f\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; ll p [ 65 ]; //\u5b58\u50a8\u7ebf\u6027\u57fa ll np [ 65 ]; //\u5b58\u50a8\u6700\u7b80\u7ebf\u6027\u57fa ll num [ 10005 ]; //\u5b58\u50a8\u539f\u6570\u7ec4 int n ; int k ; void init () //\u6c42\u975e\u6700\u7b80\u7ebf\u6027\u57fa { for ( int i = 1 ; i <= n ; i ++ ) //1-n\u904d\u5386\u6570\u7ec4\u5143\u7d20 { ll x = num [ i ]; for ( int j = 63 ; j >= 0 ; j -- ) //\u8003\u5bdf\u5143\u7d20\u7684\u6bcf\u4e00\u4f4d { if ( x & ( 1L L << j )) //\u5982\u679c\u5143\u7d20\u7684\u7b2cj\u4f4d\u4e3a1 { if ( p [ j ]) x ^= p [ j ]; //\u5728\u7ebf\u6027\u57fa\u4e2d\u5df2\u7ecf\u51fa\u73b0\u7b2cj\u4f4d\u4e3a1\u65f6\uff0c\u6d88\u53bb\u5f53\u524d\u5143\u7d20\u76841\uff0c\u4fdd\u8bc1\u4e3a\u4e0b\u4e09\u89d2\u5f62\u5f0f //\u5316\u4e3a\u4e0b\u4e09\u89d2\u662f\u4e3a\u4e86\u66f4\u5bb9\u6613\u5f02\u6216\u5f97\u51fa\u67d0\u6570 else { p [ j ] = x ; //\u5426\u5219\u5c06\u7b2cj\u4f4d\u5143\u7d20\u7f6e1 break ; } } } } return ; } int ninit () //\u6c42\u6700\u7b80\u7ebf\u6027\u57fa \u5316\u4e3a\u5bf9\u89d2\u77e9\u9635 { int cnt = 0 ; for ( int i = 0 ; i <= 63 ; i ++ ) //\u4ece\u53f3\u4e0b\u89d2\u5f00\u59cb { for ( int j = i -1 ; j >= 0 ; j -- ) //\u4ece\u5de6\u5f80\u53f3\u904d\u5386 { if ( p [ i ] & ( 1L L << j )) p [ i ] ^= p [ j ]; //\u5982\u679cp[i]\u5728\u9664\u7b2ci\u4f4d\u4e3a1\u5916\u6709\u7b2cj\u4f4d\u4e3a1\uff0c\u9ad8\u65af\u6d88\u5143\u6d88\u53bb\u7b2cj\u4f4d\u76841 //\u7531\u4e8ep[j]\u7684\u7b2cj\u4f4d\u5fc5\u4e3a1\uff0c\u56e0\u6b64\u4e0ep[J]\u5f02\u6216 } } for ( int i = 0 ; i <= 63 ; i ++ ) if ( p [ i ]) { np [ cnt ++ ] = p [ i ]; //\u5c06\u6700\u7b80\u7684\u7ebf\u6027\u57fa\u5b58\u5165\u65b0\u6570\u7ec4\u4e2d } return cnt ; } ll kth ( ll k , int z ) //\u67e5\u8be2\u5f02\u6216\u548c\u7b2ck\u5c0f\u7684\u51fd\u6570 { ll ans = 0 ; for ( int i = 0 ; i <= 62 ; i ++ ) //\u5c06k\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u9010\u4e00\u641c\u7d22\u5b83\u7684\u6bcf\u4e00\u4f4d\uff0c\u82e5\u7b2cj\u4f4d\u4e3a1\uff0c\u5219\u5c06\u7b54\u6848\u5f02p[j] { if ( k & ( 1L L << i )) ans ^= np [ i ]; } return ans ; } ll q [ 10005 ]; int main () { int t ; cin >> t ; int command ; int now = 0 ; while ( t -- ) { now ++ ; memset ( p , 0 , sizeof ( p )); memset ( num , 0 , sizeof ( num )); memset ( np , 0 , sizeof ( np )); cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ]; cin >> command ; init (); k = ninit (); for ( int i = 1 ; i <= command ; i ++ ) cin >> q [ i ]; cout << \"Case #\" << now << \":\" << endl ; for ( int i = 1 ; i <= command ; i ++ ) { if ( k < n && q [ i ] == 1 ) { cout << \"0\" << endl ; continue ; } if ( k < n ) q [ i ] -- ; //\u6709\u91cd\u590d\u7684\uff0c\u5f02\u6216\u548c\u6700\u5c0f\u4e3a0\uff0c\u7531\u4e8e\u7ebf\u6027\u57fa\u65e0\u6cd5\u7ec4\u5408\u51fa0\uff0c\u56e0\u6b64\u5148\u51cf if ( q [ i ] >= ( 1L L << k )) //\u5982\u679c\u67e5\u8be2\u7684\u4f4d\u6b21\u6bd4\u6240\u6709\u7684\u7ec4\u5408\u90fd\u8981\u591a\uff0c\u5219\u8f93\u51fa-1 { cout << \"-1\" << endl ; continue ; } cout << kth ( q [ i ], k ) << endl ; } } return 0 ; } \u4f8b2.\u6d1b\u8c37P3812 \u7ebf\u6027\u57fa \u00b6 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a n\u4e2a\u6574\u6570\uff08\u6570\u5b57\u53ef\u80fd\u91cd\u590d\uff09\uff0c\u6c42\u5728\u8fd9\u4e9b\u6570\u4e2d\u9009\u53d6\u4efb\u610f\u4e2a\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u5f02\u6216\u548c\u6700\u5927\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n\uff0c\u8868\u793a\u5143\u7d20\u4e2a\u6570 \u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570 \u8f93\u51fa\u683c\u5f0f \u4ec5\u4e00\u884c\uff0c\u8868\u793a\u7b54\u6848\u3002 \u8f93\u5165\u6837\u4f8b 2 1 1 \u8f93\u51fa\u6837\u4f8b 1 \u9898\u89e3 \u00b6 \u904d\u5386\u7ebf\u6027\u57fa\uff0c\u6bcf\u6b21\u5f02\u6216\u9ad8\u4f4d\u4e3a1\u7684\u7ebf\u6027\u57fa\u5143\u7d20 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; ll mp [ 65 ]; ll p [ 65 ]; ll np [ 65 ]; int n ; void init () //\u6c42\u975e\u6700\u7b80\u7ebf\u6027\u57fa\uff08\u4e0b\u4e09\u89d2\uff09 { memset ( p , 0 , sizeof ( p )); memset ( np , 0 , sizeof ( np )); for ( int i = 1 ; i <= n ; i ++ ) //\u904d\u5386\u6570\u7ec4 { ll x = mp [ i ]; for ( int j = 62 ; j >= 0 ; j -- ) //\u904d\u5386\u5143\u7d20\u6bcf\u4e00\u4f4d { if ( x & ( 1L L << j )) //\u82e5\u5143\u7d20\u7b2cj\u4f4d\u4e3a1 { if ( ! p [ j ]) //\u5e76\u4e14\u7ebf\u6027\u57fa\u4e2d\u65e0\u5bf9\u5e94\u7684\u503c { p [ j ] = x ; //\u52a0\u5165\u5143\u7d20 break ; } else x ^= p [ j ]; //\u5426\u5219\u6d88\u53bb\u7b2cj\u4f4d\u76841 } } } } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> mp [ i ]; init (); ll ans = 0 ; for ( int i = 62 ; i >= 0 ; i -- ) //\u6c42\u6700\u5927\u503c\u8d2a\u5fc3 { if (( ans ^ p [ i ]) > ans ) ans ^= p [ i ]; } cout << ans << endl ; return 0 ; } \u4f8b3.\u6d1b\u8c37P4570[BJWC2011]\u5143\u7d20 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u76f8\u4f20\uff0c\u5728\u8fdc\u53e4\u65f6\u671f\uff0c\u4f4d\u4e8e\u897f\u65b9\u5927\u9646\u7684 Magic Land \u4e0a\uff0c\u4eba\u4eec\u5df2\u7ecf\u638c\u63e1\u4e86\u7528\u9b54\u6cd5\u77ff\u77f3\u70bc\u5236\u6cd5\u6756\u7684\u6280\u672f\u3002\u90a3\u65f6\u4eba\u4eec\u5c31\u8ba4\u8bc6\u5230\uff0c\u4e00\u4e2a\u6cd5\u6756\u7684\u6cd5\u529b\u53d6\u51b3\u4e8e\u4f7f\u7528\u7684\u77ff\u77f3\u3002 \u4e00\u822c\u5730\uff0c\u77ff\u77f3\u8d8a\u591a\u5219\u6cd5\u529b\u8d8a\u5f3a\uff0c\u4f46\u7269\u6781\u5fc5\u53cd\uff1a\u6709\u65f6\uff0c\u4eba\u4eec\u4e3a\u4e86\u83b7\u53d6\u66f4\u5f3a\u7684\u6cd5\u529b\u800c\u4f7f\u7528\u4e86\u5f88\u591a\u77ff\u77f3\uff0c\u5374\u5728\u70bc\u5236\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u9b54\u6cd5\u77ff\u77f3\u5168\u90e8\u6d88\u5931\u4e86\uff0c\u4ece\u800c\u65e0\u6cd5\u70bc\u5236\u51fa\u6cd5\u6756\uff0c\u8fd9\u4e2a\u73b0\u8c61\u88ab\u79f0\u4e3a\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\u3002\u7279\u522b\u5730\uff0c\u5982\u679c\u5728\u70bc\u5236\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8d85\u8fc7\u4e00\u5757\u540c\u4e00\u79cd\u77ff\u77f3\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u53d1\u751f\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\u3002\u540e\u6765\uff0c\u968f\u7740\u4eba\u4eec\u8ba4\u77e5\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u8fd9\u4e2a\u73b0\u8c61\u5f97\u5230\u4e86\u5f88\u597d\u7684\u89e3\u91ca\u3002\u7ecf\u8fc7\u4e86\u5927\u91cf\u7684\u5b9e\u9a8c\u540e\uff0c\u8457\u540d\u6cd5\u5e08 Dmitri \u53d1\u73b0\uff1a\u5982\u679c\u7ed9\u73b0\u5728\u53d1\u73b0\u7684\u6bcf\u4e00\u79cd\u77ff\u77f3\u8fdb\u884c\u5408\u7406\u7684\u7f16\u53f7\uff08\u7f16\u53f7\u4e3a\u6b63\u6574\u6570\uff0c\u79f0\u4e3a\u8be5\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\uff09\uff0c\u90a3\u4e48\uff0c\u4e00\u4e2a\u77ff\u77f3\u7ec4\u5408\u4f1a\u4ea7\u751f\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u90a3\u4e9b\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u6309\u4f4d\u5f02\u6216\u8d77\u6765\u4e3a\u96f6\uff08\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u4ec0\u4e48\u662f\u5f02\u6216\uff0c\u8bf7\u53c2\u89c1\u4e0b\u4e00\u9875\u7684\u540d\u8bcd\u89e3\u91ca \uff09\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u4e24\u4e2a\u540c\u6837\u7684\u77ff\u77f3\u5fc5\u5c06\u53d1\u751f\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\uff0c\u56e0\u4e3a\u8fd9\u4e24\u79cd\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u76f8\u540c\uff0c\u5f02\u6216\u8d77\u6765\u4e3a\u96f6\u3002\u5e76\u4e14\u4eba\u4eec\u6709\u4e86\u6d4b\u5b9a\u9b54\u529b\u7684\u6709\u6548\u9014\u5f84\uff0c\u5df2\u7ecf\u77e5\u9053\u4e86\uff1a\u5408\u6210\u51fa\u6765\u7684\u6cd5\u6756\u7684\u9b54\u529b\u7b49\u4e8e\u6bcf\u4e00\u79cd\u77ff\u77f3\u7684\u6cd5\u529b\u4e4b\u548c\u3002\u4eba\u4eec\u5df2\u7ecf\u6d4b\u5b9a\u4e86\u73b0\u4eca\u53d1\u73b0\u7684\u6240\u6709\u77ff\u77f3\u7684\u6cd5\u529b\u503c\uff0c\u5e76\u4e14\u901a\u8fc7\u5b9e\u9a8c\u63a8\u7b97\u51fa\u6bcf\u4e00\u79cd\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u3002 \u73b0\u5728\uff0c\u7ed9\u5b9a\u4f60\u4ee5\u4e0a\u7684\u77ff\u77f3\u4fe1\u606f\uff0c\u8bf7\u4f60\u6765\u8ba1\u7b97\u4e00\u4e0b\u5f53\u65f6\u53ef\u4ee5\u70bc\u5236\u51fa\u7684\u6cd5\u6756\u6700\u591a\u6709\u591a\u5927\u7684\u9b54\u529b\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 NN\uff0c\u8868\u793a\u77ff\u77f3\u7684\u79cd\u7c7b\u6570\u3002 \u63a5\u4e0b\u6765 N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570Numberi \u548c Magici\uff0c\u8868\u793a\u8fd9\u79cd\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u548c\u9b54\u529b\u503c\u3002 \u8f93\u51fa\u683c\u5f0f \u4ec5\u5305\u542b\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u6700\u5927\u7684\u9b54\u529b\u503c\u3002 \u8f93\u5165\u6837\u4f8b 3 1 10 2 20 3 30 \u8f93\u51fa\u6837\u4f8b 50 \u9898\u89e3 \u00b6 \u7531\u4e8e\u7ebf\u6027\u57fa\u4e0d\u552f\u4e00\uff0c\u672c\u9898\u8981\u6c42\u6700\u5927\u9b54\u529b\u503c\uff0c\u53ef\u4f18\u5148\u9009\u9b54\u529b\u503c\u5927\u7684\u503c\u751f\u6210\u7ebf\u6027\u57fa\uff0c\u8d2a\u5fc3\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; struct node { ll val , magic ; friend bool operator < ( const node x , const node y ) { return x . magic > y . magic ; } } mp [ 1005 ]; ll p [ 65 ]; int init ( int n ) { ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ll x = mp [ i ]. val ; for ( int j = 62 ; j >= 0 ; j -- ) { if ( x & ( 1L L << j )) { if ( ! p [ j ]) { p [ j ] = x ; ans += mp [ i ]. magic ; break ; } else x ^= p [ j ]; } } } return ans ; } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> mp [ i ]. val >> mp [ i ]. magic ; } sort ( mp + 1 , mp + n + 1 ); ll ans = init ( n ); cout << ans << endl ; return 0 ; } \u4f8b4.\u6d1b\u8c37P3265 \u88c5\u5907\u8d2d\u4e70 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u6709n\u4ef6\u88c5\u5907\uff0c\u6bcf\u4ef6\u88c5\u5907\u6709m\u4e2a\u5c5e\u6027\uff0c\u7528\u5411\u91cf\uff08a1\uff0ca2\uff0ca3\u2026\u2026am\uff09\u8868\u793a\uff0c\u9700\u8981\u82b1\u8d39c\u8d2d\u4e70\uff0c\u73b0\u5728\u89c4\u5b9a\u5982\u679c\u4e00\u4ef6\u88c5\u5907\u80fd\u7531\u5176\u4ed6\u88c5\u5907\u7ec4\u5408\u51fa\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u8d2d\u4e70\uff08\u5373\u53ef\u7531\u5176\u4ed6\u5411\u91cf\u7ebf\u6027\u8868\u793a\uff09\uff0c\u6c42\u5728\u4e70\u4e0b\u6700\u591a\u88c5\u5907\u7684\u60c5\u51b5\u4e0b\u82b1\u8d39\u6700\u5c11\u7684\u94b1 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6570n\uff0cm\u3002 \u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884cm\u4e2a\u6570\uff0c\u5176\u4e2d\u7b2ci\u884c\u63cf\u8ff0\u88c5\u5907i\u7684\u5404\u9879\u5c5e\u6027\u503c\u3002\u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570\uff0c\u5176\u4e2dci\u8868\u793a\u8d2d\u4e70\u7b2ci\u4ef6\u88c5\u5907\u7684\u82b1\u8d39\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e24\u4e2a\u6570\uff0c \u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u80fd\u591f\u8d2d\u4e70\u7684\u6700\u591a\u88c5\u5907\u6570\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u6570\u8868\u793a\u5728\u8d2d\u4e70\u6700\u591a\u6570\u91cf\u7684\u88c5\u5907\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u82b1\u8d39 \u8f93\u5165\u6837\u4f8b 3 3 1 2 3 3 4 5 2 3 4 1 1 2 \u8f93\u51fa\u6837\u4f8b 2 2 \u9898\u89e3 \u00b6 \u5b9e\u6570\u7ebf\u6027\u57fa+\u8d2a\u5fc3 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const double eps = 1e-6 ; int n , m ; int p [ 505 ]; struct node_ { double mp [ 505 ]; int c ; friend bool operator < ( const node_ x , const node_ y ) { return x . c < y . c ; } } node [ 505 ]; int cnt = 0 ; int ans = 0 ; void init () { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( fabs ( node [ i ]. mp [ j ]) > eps ) //\u5361\u7cbe\u5ea6 { if ( ! p [ j ]) { cnt ++ ; ans += node [ i ]. c ; p [ j ] = i ; break ; } else { long double times = node [ i ]. mp [ j ] * 1.0 / node [ p [ j ]]. mp [ j ]; for ( int k = j ; k <= m ; k ++ ) //\u521d\u7b49\u884c\u53d8\u6362\uff0c\u5316\u4e3a\u4e0b\u4e09\u89d2 { node [ i ]. mp [ k ] -= times * node [ p [ j ]]. mp [ k ]; } } } } } } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> node [ i ]. mp [ j ]; for ( int i = 1 ; i <= n ; i ++ ) cin >> node [ i ]. c ; sort ( node + 1 , node + n + 1 ); memset ( p , 0 , sizeof ( p )); init (); cout << cnt << \" \" << ans << endl ; return 0 ; }","title":"\u7ebf\u6027\u57fa"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_1","text":"\u7ebf\u6027\u57fa\uff0c\u662f\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u6982\u5ff5\uff0c\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\uff0c\u524d\u7f00\u7ebf\u6027\u57fa\u662f\u7ebf\u6027\u57fa\u7684\u6269\u5c55\uff0c\u4ed6\u4eec\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u6709\u5173\u5f02\u6216\u548c\u7684\u6781\u503c\u95ee\u9898\u3002 \u4e00\u7ec4\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf\u5373\u53ef\u4f5c\u4e3a\u4e00\u7ec4\u57fa\u5e95\uff0c\u5f20\u8d77\u4e00\u4e2a\u7ebf\u6027\u7684\u5411\u91cf\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u57fa\u5e95\u5373\u79f0\u4e3a\u7ebf\u6027\u57fa\uff0c\u5229\u7528\u7ebf\u6027\u57fa\u7684\u57fa\u5e95\u8fdb\u884c\u7ebf\u6027\u8fd0\u7b97\uff0c\u53ef\u8868\u793a\u5411\u91cf\u7a7a\u95f4\u5185\u7684\u6240\u6709\u5411\u91cf\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6240\u6709\u5411\u91cf\u90fd\u53ef\u4ee5\u62c6\u6210\u57fa\u5e95\u7684\u7ebf\u6027\u7ec4\u5408\u3002 \u6839\u636e\u5f02\u6216\u7684\u539f\u7406\uff0c\u5c06\u4e00\u4e2a\u6570\u5b57\u62c6\u6210\u4ed6\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u5c06\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7528\u5411\u91cf\u6765\u8868\u793a\uff0c\u7531\u4e8e\u4e00\u7ec4\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf\u53ef\u4ee5\u5f20\u8d77\u4e00\u4e2a\u5411\u91cf\u7a7a\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u6784\u9020\u8fd9\u6837\u4e00\u7ec4\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7ec4\u6210\u7684\u7ebf\u6027\u57fa\uff0c\u5728\u8fd9\u4e2a\u7ebf\u6027\u57fa\u4e2d\uff0c\u901a\u8fc7\u57fa\u5e95\u7684\u7ebf\u6027\u7ec4\u5408\u3001\u5f02\u6216\u8fd0\u7b97\uff0c\u4ece\u800c\u53ef\u4ee5\u8868\u8fbe\u6240\u6709\u7684\u5f02\u6216\u7ed3\u679c\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u82e5\u4e00\u4e2a\u6570\u96c6 T T \u7684\u503c\u57df\u8303\u56f4\u4e3a \uff0c\u90a3\u4e48 T T \u7684\u7ebf\u6027\u57fa\u662f T T \u7684\u4e00\u4e2a\u5b50\u96c6 A={a1,a2,a3,...,an} A={a1,a2,a3,...,an} \uff0c A A \u4e2d\u5143\u7d20\u76f8\u4e92\u5f02\u6216\u800c\u6210\u7684\u96c6\u5408\uff0c\u7b49\u4ef7\u4e8e\u539f\u6570\u96c6 T T \u7684\u5143\u7d20\u76f8\u4e92\u5f02\u6216\u5f62\u6210\u5f02\u6216\u96c6\u5408","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_2","text":"\u4ea4\u6362\u53d8\u91cf\u4f4d\u7f6e\uff1a a = a ^ b; b = a ^ b; a = a ^ b; \u5982\u679ca^b==c \u5219 a^c==b b^c==a a^b^c==0","title":"\u9884\u5907\u77e5\u8bc6"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_3","text":"\u7ebf\u6027\u57fa\u662f\u4e00\u4e2a\u6570\u7684\u96c6\u5408\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5e8f\u5217\u90fd\u62e5\u6709\u81f3\u5c11\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u53d6\u7ebf\u6027\u57fa\u4e2d\u82e5\u5e72\u4e2a\u6570\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u5f97\u5230\u539f\u5e8f\u5217\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6570\u3002","title":"\u5b9a\u4e49"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_4","text":"\u4ee3\u7801 void init () //\u6c42\u975e\u6700\u7b80\u7ebf\u6027\u57fa { for ( int i = 1 ; i <= n ; i ++ ) //1-n\u904d\u5386\u6570\u7ec4\u5143\u7d20 { ll x = num [ i ]; for ( int j = 63 ; j >= 0 ; j -- ) //\u8003\u5bdf\u5143\u7d20\u7684\u6bcf\u4e00\u4f4d { if ( x & ( 1L L << j )) //\u5982\u679c\u5143\u7d20\u7684\u7b2cj\u4f4d\u4e3a1 { if ( p [ j ]) x ^= p [ j ]; //\u5728\u7ebf\u6027\u57fa\u4e2d\u5df2\u7ecf\u51fa\u73b0\u7b2cj\u4f4d\u4e3a1\u65f6\uff0c\u6d88\u53bb\u5f53\u524d\u5143\u7d20//\u76841\uff0c\u4fdd\u8bc1\u4e3a\u4e0b\u4e09\u89d2\u5f62\u5f0f,\u5316\u4e3a\u4e0b\u4e09\u89d2\u662f\u4e3a\u4e86\u66f4\u5bb9\u6613\u5f02//\u6216\u5f97\u51fa\u67d0\u6570 else { p [ j ] = x ; //\u5426\u5219\u5c06\u7b2cj\u4f4d\u5143\u7d20\u7f6e1 break ; } } } } return ; }","title":"\u4e8c\u8fdb\u5236\u6c42\u7ebf\u6027\u57fa"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_5","text":"","title":"\u5224\u65ad\u67d0\u6570\u80fd\u5426\u7531\u7ebf\u6027\u57fa\u8868\u793a"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_6","text":"\u5c06\u8be5\u6570\u901a\u8fc7\u7ebf\u6027\u57fa\uff0c\u770b\u7ed3\u679c\u662f\u5426\u4e3a0\u5373\u53ef","title":"\u601d\u8def"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_7","text":"bool check ( long long x ) { for ( int j = 60 ; j >= 0 ; j -- ) { if ( x & ( 1L L << j )) { if ( d [ j ] == 0 ) { return false ; } else x ^= d [ j ]; } } return x == 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_8","text":"","title":"\u6c42\u5f02\u6216\u548c\u6700\u5927"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_9","text":"\u6c42\u51fa\u7ebf\u6027\u57fa\uff0c\u7531\u4e8e\u9ad8\u4f4d\u4e3a1\u8d21\u732e\u66f4\u5927\uff0c\u6bcf\u6b21\u4f18\u5148\u5f02\u6216\u9ad8\u4f4d\uff0c\u904d\u5386\u7ebf\u6027\u57fa\u5373\u53ef","title":"\u601d\u8def"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_10","text":"long long query_max () { long long ret = 0 ; for ( int i = 60 ; i >= 0 ; i -- ) if (( ret ^ d [ i ]) > ret ) //\u8d2a\u5fc3 ret ^= d [ i ]; return ret ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_11","text":"","title":"\u6c42\u5f02\u6216\u548c\u6700\u5c0f"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_12","text":"\u6c42\u6700\u5c0f\u7684\u7ebf\u6027\u57fa\u5143\u7d20\u5373\u53ef","title":"\u601d\u8def"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_13","text":"long long query_min () { for ( int i = 0 ; i <= 60 ; i ++ ) if ( d [ i ]) return d [ i ]; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#k","text":"","title":"\u6c42\u5f02\u6216\u548c\u7b2cK\u5927"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_14","text":"\u5c06\u7ebf\u6027\u57fa\u5316\u4e3a\u6700\u7b80\uff0cK\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u9009\u51fa1\u7684\u4f4d\uff0c\u5c06\u4ee5\u5176\u4e3a\u4e0b\u6807\u7684\u7ebf\u6027\u57fa\u5143\u7d20\u76f8\u4e58\u5373\u53ef","title":"\u601d\u8def"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_15","text":"void rebuild () //\u9ad8\u65af\u6d88\u5143\u5316\u4e3a\u6700\u7b80\u7ebf\u6027\u57fa { for ( int i = 60 ; i >= 0 ; i -- ) for ( int j = i -1 ; j >= 0 ; j -- ) if ( d [ i ] & ( 1L L << j )) d [ i ] ^= d [ j ]; for ( int i = 0 ; i <= 60 ; i ++ ) if ( d [ i ]) p [ cnt ++ ] = d [ i ]; } long long kthquery ( long long k ) { int ret = 0 ; if ( k >= ( 1L L << cnt )) return -1 ; for ( int i = 60 ; i >= 0 ; i -- ) if ( k & ( 1L L << i )) ret ^= p [ i ]; return ret ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#1hdu-3949-xor","text":"\u9898\u76ee\u63cf\u8ff0 XOR is a kind of bit operator, we define that as follow: for two binary base number A and B, let C=A XOR B, then for each bit of C, we can get its value by check the digit of corresponding position in A and B. And for each digit, 1 XOR 1 = 0, 1 XOR 0 = 1, 0 XOR 1 = 1, 0 XOR 0 = 0. And we simply write this operator as ^, like 3 ^ 1 = 2,4 ^ 3 = 7. XOR is an amazing operator and this is a question about XOR. We can choose several numbers and do XOR operatorion to them one by one, then we get another number. For example, if we choose 2,3 and 4, we can get 2^3^4=5. Now, you are given N numbers, and you can choose some of them(even a single number) to do XOR on them, and you can get many different numbers. Now I want you tell me which number is the K-th smallest number among them. \u8f93\u5165\u683c\u5f0ft First line of the input is a single integer T(T<=30), indicates there are T test cases. For each test case, the first line is an integer N(1<=N<=10000), the number of numbers below. The second line contains N integers (each number is between 1 and 10^18). The third line is a number Q(1<=Q<=10000), the number of queries. The fourth line contains Q numbers(each number is between 1 and 10^18) K1,K2,......KQ. \u8f93\u51fa\u683c\u5f0f For each test case,first output Case #C: in a single line,C means the number of the test case which is from 1 to T. Then for each query, you should output a single line contains the Ki-th smallest number in them, if there are less than Ki different numbers, output -1. \u8f93\u5165\u6837\u4f8b 2 2 1 2 4 1 2 3 4 3 1 2 3 5 1 2 3 4 5 \u8f93\u51fa\u6837\u4f8b Case #1 : 1 2 3 -1 Case #2 : 0 1 2 3 -1 \u9898\u610f: \u7ed9\u51fan\u4e2a\u6570\uff0c\u6c42\u4ed6\u4eec\u4efb\u610f\u7ec4\u5408\u7684\u6700\u5c0f\u503c","title":"\u4f8b1.HDU 3949 XOR"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_16","text":"\u6c42\u51fa\u8fd9\u4e9b\u6570\u7684\u7ebf\u6027\u57fa\uff0c\u5c06k\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u7b2ci\u4f4d\u4e3a1\uff0c\u7b54\u6848\u5c31\u5f02\u6216\u7b2ci\u4e2a\u7ebf\u6027\u57fa\uff0c\u82e5\u7ebf\u6027\u57fa\u4e2a\u6570\u5c0f\u4e8e\u539f\u4e2a\u6570\uff0c\u5373\u6700\u5c0f\u503c\u53ef\u4e3a0\uff0c\u5219\u7528\u7c7b\u4f3c\u65b9\u6cd5\u6c42k-1\u5c0f\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_17","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; ll p [ 65 ]; //\u5b58\u50a8\u7ebf\u6027\u57fa ll np [ 65 ]; //\u5b58\u50a8\u6700\u7b80\u7ebf\u6027\u57fa ll num [ 10005 ]; //\u5b58\u50a8\u539f\u6570\u7ec4 int n ; int k ; void init () //\u6c42\u975e\u6700\u7b80\u7ebf\u6027\u57fa { for ( int i = 1 ; i <= n ; i ++ ) //1-n\u904d\u5386\u6570\u7ec4\u5143\u7d20 { ll x = num [ i ]; for ( int j = 63 ; j >= 0 ; j -- ) //\u8003\u5bdf\u5143\u7d20\u7684\u6bcf\u4e00\u4f4d { if ( x & ( 1L L << j )) //\u5982\u679c\u5143\u7d20\u7684\u7b2cj\u4f4d\u4e3a1 { if ( p [ j ]) x ^= p [ j ]; //\u5728\u7ebf\u6027\u57fa\u4e2d\u5df2\u7ecf\u51fa\u73b0\u7b2cj\u4f4d\u4e3a1\u65f6\uff0c\u6d88\u53bb\u5f53\u524d\u5143\u7d20\u76841\uff0c\u4fdd\u8bc1\u4e3a\u4e0b\u4e09\u89d2\u5f62\u5f0f //\u5316\u4e3a\u4e0b\u4e09\u89d2\u662f\u4e3a\u4e86\u66f4\u5bb9\u6613\u5f02\u6216\u5f97\u51fa\u67d0\u6570 else { p [ j ] = x ; //\u5426\u5219\u5c06\u7b2cj\u4f4d\u5143\u7d20\u7f6e1 break ; } } } } return ; } int ninit () //\u6c42\u6700\u7b80\u7ebf\u6027\u57fa \u5316\u4e3a\u5bf9\u89d2\u77e9\u9635 { int cnt = 0 ; for ( int i = 0 ; i <= 63 ; i ++ ) //\u4ece\u53f3\u4e0b\u89d2\u5f00\u59cb { for ( int j = i -1 ; j >= 0 ; j -- ) //\u4ece\u5de6\u5f80\u53f3\u904d\u5386 { if ( p [ i ] & ( 1L L << j )) p [ i ] ^= p [ j ]; //\u5982\u679cp[i]\u5728\u9664\u7b2ci\u4f4d\u4e3a1\u5916\u6709\u7b2cj\u4f4d\u4e3a1\uff0c\u9ad8\u65af\u6d88\u5143\u6d88\u53bb\u7b2cj\u4f4d\u76841 //\u7531\u4e8ep[j]\u7684\u7b2cj\u4f4d\u5fc5\u4e3a1\uff0c\u56e0\u6b64\u4e0ep[J]\u5f02\u6216 } } for ( int i = 0 ; i <= 63 ; i ++ ) if ( p [ i ]) { np [ cnt ++ ] = p [ i ]; //\u5c06\u6700\u7b80\u7684\u7ebf\u6027\u57fa\u5b58\u5165\u65b0\u6570\u7ec4\u4e2d } return cnt ; } ll kth ( ll k , int z ) //\u67e5\u8be2\u5f02\u6216\u548c\u7b2ck\u5c0f\u7684\u51fd\u6570 { ll ans = 0 ; for ( int i = 0 ; i <= 62 ; i ++ ) //\u5c06k\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u9010\u4e00\u641c\u7d22\u5b83\u7684\u6bcf\u4e00\u4f4d\uff0c\u82e5\u7b2cj\u4f4d\u4e3a1\uff0c\u5219\u5c06\u7b54\u6848\u5f02p[j] { if ( k & ( 1L L << i )) ans ^= np [ i ]; } return ans ; } ll q [ 10005 ]; int main () { int t ; cin >> t ; int command ; int now = 0 ; while ( t -- ) { now ++ ; memset ( p , 0 , sizeof ( p )); memset ( num , 0 , sizeof ( num )); memset ( np , 0 , sizeof ( np )); cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ]; cin >> command ; init (); k = ninit (); for ( int i = 1 ; i <= command ; i ++ ) cin >> q [ i ]; cout << \"Case #\" << now << \":\" << endl ; for ( int i = 1 ; i <= command ; i ++ ) { if ( k < n && q [ i ] == 1 ) { cout << \"0\" << endl ; continue ; } if ( k < n ) q [ i ] -- ; //\u6709\u91cd\u590d\u7684\uff0c\u5f02\u6216\u548c\u6700\u5c0f\u4e3a0\uff0c\u7531\u4e8e\u7ebf\u6027\u57fa\u65e0\u6cd5\u7ec4\u5408\u51fa0\uff0c\u56e0\u6b64\u5148\u51cf if ( q [ i ] >= ( 1L L << k )) //\u5982\u679c\u67e5\u8be2\u7684\u4f4d\u6b21\u6bd4\u6240\u6709\u7684\u7ec4\u5408\u90fd\u8981\u591a\uff0c\u5219\u8f93\u51fa-1 { cout << \"-1\" << endl ; continue ; } cout << kth ( q [ i ], k ) << endl ; } } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#2p3812","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a n\u4e2a\u6574\u6570\uff08\u6570\u5b57\u53ef\u80fd\u91cd\u590d\uff09\uff0c\u6c42\u5728\u8fd9\u4e9b\u6570\u4e2d\u9009\u53d6\u4efb\u610f\u4e2a\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u5f02\u6216\u548c\u6700\u5927\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n\uff0c\u8868\u793a\u5143\u7d20\u4e2a\u6570 \u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570 \u8f93\u51fa\u683c\u5f0f \u4ec5\u4e00\u884c\uff0c\u8868\u793a\u7b54\u6848\u3002 \u8f93\u5165\u6837\u4f8b 2 1 1 \u8f93\u51fa\u6837\u4f8b 1","title":"\u4f8b2.\u6d1b\u8c37P3812  \u7ebf\u6027\u57fa"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_18","text":"\u904d\u5386\u7ebf\u6027\u57fa\uff0c\u6bcf\u6b21\u5f02\u6216\u9ad8\u4f4d\u4e3a1\u7684\u7ebf\u6027\u57fa\u5143\u7d20","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_19","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; ll mp [ 65 ]; ll p [ 65 ]; ll np [ 65 ]; int n ; void init () //\u6c42\u975e\u6700\u7b80\u7ebf\u6027\u57fa\uff08\u4e0b\u4e09\u89d2\uff09 { memset ( p , 0 , sizeof ( p )); memset ( np , 0 , sizeof ( np )); for ( int i = 1 ; i <= n ; i ++ ) //\u904d\u5386\u6570\u7ec4 { ll x = mp [ i ]; for ( int j = 62 ; j >= 0 ; j -- ) //\u904d\u5386\u5143\u7d20\u6bcf\u4e00\u4f4d { if ( x & ( 1L L << j )) //\u82e5\u5143\u7d20\u7b2cj\u4f4d\u4e3a1 { if ( ! p [ j ]) //\u5e76\u4e14\u7ebf\u6027\u57fa\u4e2d\u65e0\u5bf9\u5e94\u7684\u503c { p [ j ] = x ; //\u52a0\u5165\u5143\u7d20 break ; } else x ^= p [ j ]; //\u5426\u5219\u6d88\u53bb\u7b2cj\u4f4d\u76841 } } } } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> mp [ i ]; init (); ll ans = 0 ; for ( int i = 62 ; i >= 0 ; i -- ) //\u6c42\u6700\u5927\u503c\u8d2a\u5fc3 { if (( ans ^ p [ i ]) > ans ) ans ^= p [ i ]; } cout << ans << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#3p4570bjwc2011","text":"\u9898\u76ee\u63cf\u8ff0 \u76f8\u4f20\uff0c\u5728\u8fdc\u53e4\u65f6\u671f\uff0c\u4f4d\u4e8e\u897f\u65b9\u5927\u9646\u7684 Magic Land \u4e0a\uff0c\u4eba\u4eec\u5df2\u7ecf\u638c\u63e1\u4e86\u7528\u9b54\u6cd5\u77ff\u77f3\u70bc\u5236\u6cd5\u6756\u7684\u6280\u672f\u3002\u90a3\u65f6\u4eba\u4eec\u5c31\u8ba4\u8bc6\u5230\uff0c\u4e00\u4e2a\u6cd5\u6756\u7684\u6cd5\u529b\u53d6\u51b3\u4e8e\u4f7f\u7528\u7684\u77ff\u77f3\u3002 \u4e00\u822c\u5730\uff0c\u77ff\u77f3\u8d8a\u591a\u5219\u6cd5\u529b\u8d8a\u5f3a\uff0c\u4f46\u7269\u6781\u5fc5\u53cd\uff1a\u6709\u65f6\uff0c\u4eba\u4eec\u4e3a\u4e86\u83b7\u53d6\u66f4\u5f3a\u7684\u6cd5\u529b\u800c\u4f7f\u7528\u4e86\u5f88\u591a\u77ff\u77f3\uff0c\u5374\u5728\u70bc\u5236\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u9b54\u6cd5\u77ff\u77f3\u5168\u90e8\u6d88\u5931\u4e86\uff0c\u4ece\u800c\u65e0\u6cd5\u70bc\u5236\u51fa\u6cd5\u6756\uff0c\u8fd9\u4e2a\u73b0\u8c61\u88ab\u79f0\u4e3a\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\u3002\u7279\u522b\u5730\uff0c\u5982\u679c\u5728\u70bc\u5236\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8d85\u8fc7\u4e00\u5757\u540c\u4e00\u79cd\u77ff\u77f3\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u53d1\u751f\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\u3002\u540e\u6765\uff0c\u968f\u7740\u4eba\u4eec\u8ba4\u77e5\u6c34\u5e73\u7684\u63d0\u9ad8\uff0c\u8fd9\u4e2a\u73b0\u8c61\u5f97\u5230\u4e86\u5f88\u597d\u7684\u89e3\u91ca\u3002\u7ecf\u8fc7\u4e86\u5927\u91cf\u7684\u5b9e\u9a8c\u540e\uff0c\u8457\u540d\u6cd5\u5e08 Dmitri \u53d1\u73b0\uff1a\u5982\u679c\u7ed9\u73b0\u5728\u53d1\u73b0\u7684\u6bcf\u4e00\u79cd\u77ff\u77f3\u8fdb\u884c\u5408\u7406\u7684\u7f16\u53f7\uff08\u7f16\u53f7\u4e3a\u6b63\u6574\u6570\uff0c\u79f0\u4e3a\u8be5\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\uff09\uff0c\u90a3\u4e48\uff0c\u4e00\u4e2a\u77ff\u77f3\u7ec4\u5408\u4f1a\u4ea7\u751f\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u90a3\u4e9b\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u6309\u4f4d\u5f02\u6216\u8d77\u6765\u4e3a\u96f6\uff08\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u4ec0\u4e48\u662f\u5f02\u6216\uff0c\u8bf7\u53c2\u89c1\u4e0b\u4e00\u9875\u7684\u540d\u8bcd\u89e3\u91ca \uff09\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u4e24\u4e2a\u540c\u6837\u7684\u77ff\u77f3\u5fc5\u5c06\u53d1\u751f\u201c\u9b54\u6cd5\u62b5\u6d88\u201d\uff0c\u56e0\u4e3a\u8fd9\u4e24\u79cd\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u76f8\u540c\uff0c\u5f02\u6216\u8d77\u6765\u4e3a\u96f6\u3002\u5e76\u4e14\u4eba\u4eec\u6709\u4e86\u6d4b\u5b9a\u9b54\u529b\u7684\u6709\u6548\u9014\u5f84\uff0c\u5df2\u7ecf\u77e5\u9053\u4e86\uff1a\u5408\u6210\u51fa\u6765\u7684\u6cd5\u6756\u7684\u9b54\u529b\u7b49\u4e8e\u6bcf\u4e00\u79cd\u77ff\u77f3\u7684\u6cd5\u529b\u4e4b\u548c\u3002\u4eba\u4eec\u5df2\u7ecf\u6d4b\u5b9a\u4e86\u73b0\u4eca\u53d1\u73b0\u7684\u6240\u6709\u77ff\u77f3\u7684\u6cd5\u529b\u503c\uff0c\u5e76\u4e14\u901a\u8fc7\u5b9e\u9a8c\u63a8\u7b97\u51fa\u6bcf\u4e00\u79cd\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u3002 \u73b0\u5728\uff0c\u7ed9\u5b9a\u4f60\u4ee5\u4e0a\u7684\u77ff\u77f3\u4fe1\u606f\uff0c\u8bf7\u4f60\u6765\u8ba1\u7b97\u4e00\u4e0b\u5f53\u65f6\u53ef\u4ee5\u70bc\u5236\u51fa\u7684\u6cd5\u6756\u6700\u591a\u6709\u591a\u5927\u7684\u9b54\u529b\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 NN\uff0c\u8868\u793a\u77ff\u77f3\u7684\u79cd\u7c7b\u6570\u3002 \u63a5\u4e0b\u6765 N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570Numberi \u548c Magici\uff0c\u8868\u793a\u8fd9\u79cd\u77ff\u77f3\u7684\u5143\u7d20\u5e8f\u53f7\u548c\u9b54\u529b\u503c\u3002 \u8f93\u51fa\u683c\u5f0f \u4ec5\u5305\u542b\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u6700\u5927\u7684\u9b54\u529b\u503c\u3002 \u8f93\u5165\u6837\u4f8b 3 1 10 2 20 3 30 \u8f93\u51fa\u6837\u4f8b 50","title":"\u4f8b3.\u6d1b\u8c37P4570[BJWC2011]\u5143\u7d20"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_20","text":"\u7531\u4e8e\u7ebf\u6027\u57fa\u4e0d\u552f\u4e00\uff0c\u672c\u9898\u8981\u6c42\u6700\u5927\u9b54\u529b\u503c\uff0c\u53ef\u4f18\u5148\u9009\u9b54\u529b\u503c\u5927\u7684\u503c\u751f\u6210\u7ebf\u6027\u57fa\uff0c\u8d2a\u5fc3\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_21","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; struct node { ll val , magic ; friend bool operator < ( const node x , const node y ) { return x . magic > y . magic ; } } mp [ 1005 ]; ll p [ 65 ]; int init ( int n ) { ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ll x = mp [ i ]. val ; for ( int j = 62 ; j >= 0 ; j -- ) { if ( x & ( 1L L << j )) { if ( ! p [ j ]) { p [ j ] = x ; ans += mp [ i ]. magic ; break ; } else x ^= p [ j ]; } } } return ans ; } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> mp [ i ]. val >> mp [ i ]. magic ; } sort ( mp + 1 , mp + n + 1 ); ll ans = init ( n ); cout << ans << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#4p3265","text":"\u9898\u76ee\u63cf\u8ff0 \u6709n\u4ef6\u88c5\u5907\uff0c\u6bcf\u4ef6\u88c5\u5907\u6709m\u4e2a\u5c5e\u6027\uff0c\u7528\u5411\u91cf\uff08a1\uff0ca2\uff0ca3\u2026\u2026am\uff09\u8868\u793a\uff0c\u9700\u8981\u82b1\u8d39c\u8d2d\u4e70\uff0c\u73b0\u5728\u89c4\u5b9a\u5982\u679c\u4e00\u4ef6\u88c5\u5907\u80fd\u7531\u5176\u4ed6\u88c5\u5907\u7ec4\u5408\u51fa\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u8d2d\u4e70\uff08\u5373\u53ef\u7531\u5176\u4ed6\u5411\u91cf\u7ebf\u6027\u8868\u793a\uff09\uff0c\u6c42\u5728\u4e70\u4e0b\u6700\u591a\u88c5\u5907\u7684\u60c5\u51b5\u4e0b\u82b1\u8d39\u6700\u5c11\u7684\u94b1 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6570n\uff0cm\u3002 \u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884cm\u4e2a\u6570\uff0c\u5176\u4e2d\u7b2ci\u884c\u63cf\u8ff0\u88c5\u5907i\u7684\u5404\u9879\u5c5e\u6027\u503c\u3002\u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6570\uff0c\u5176\u4e2dci\u8868\u793a\u8d2d\u4e70\u7b2ci\u4ef6\u88c5\u5907\u7684\u82b1\u8d39\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\u4e24\u4e2a\u6570\uff0c \u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u80fd\u591f\u8d2d\u4e70\u7684\u6700\u591a\u88c5\u5907\u6570\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u6570\u8868\u793a\u5728\u8d2d\u4e70\u6700\u591a\u6570\u91cf\u7684\u88c5\u5907\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u82b1\u8d39 \u8f93\u5165\u6837\u4f8b 3 3 1 2 3 3 4 5 2 3 4 1 1 2 \u8f93\u51fa\u6837\u4f8b 2 2","title":"\u4f8b4.\u6d1b\u8c37P3265 \u88c5\u5907\u8d2d\u4e70"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_22","text":"\u5b9e\u6570\u7ebf\u6027\u57fa+\u8d2a\u5fc3","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E5%9F%BA/#_23","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const double eps = 1e-6 ; int n , m ; int p [ 505 ]; struct node_ { double mp [ 505 ]; int c ; friend bool operator < ( const node_ x , const node_ y ) { return x . c < y . c ; } } node [ 505 ]; int cnt = 0 ; int ans = 0 ; void init () { for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( fabs ( node [ i ]. mp [ j ]) > eps ) //\u5361\u7cbe\u5ea6 { if ( ! p [ j ]) { cnt ++ ; ans += node [ i ]. c ; p [ j ] = i ; break ; } else { long double times = node [ i ]. mp [ j ] * 1.0 / node [ p [ j ]]. mp [ j ]; for ( int k = j ; k <= m ; k ++ ) //\u521d\u7b49\u884c\u53d8\u6362\uff0c\u5316\u4e3a\u4e0b\u4e09\u89d2 { node [ i ]. mp [ k ] -= times * node [ p [ j ]]. mp [ k ]; } } } } } } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> node [ i ]. mp [ j ]; for ( int i = 1 ; i <= n ; i ++ ) cin >> node [ i ]. c ; sort ( node + 1 , node + n + 1 ); memset ( p , 0 , sizeof ( p )); init (); cout << cnt << \" \" << ans << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/","text":"\u6982\u8ff0 \u00b6 \u6392\u5217\u6570 \u00b6 \u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u4efb\u53d6m(m\u2264n,n,m\u5747\u4e3a\u81ea\u7136\u6570)\u4e2a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6392\u6210\u4e00\u5217\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u6392\u5217\uff1b\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam(m\u2264n)\u4e2a\u5143\u7d20\u7684\u6240\u6709\u6392\u5217\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u6392\u5217\u6570\uff0c\u7528\u7b26\u53f7 A_n^m(\u6216\u8005\u662fP_n^m) A_n^m(\u6216\u8005\u662fP_n^m) \u8868\u793a\u3002 A_n^m=\\frac{n!}{(n-m)!} A_n^m=\\frac{n!}{(n-m)!} \u7ec4\u5408\u6570 \u00b6 \u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m(m\u2264n)\u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u7ec4\u5408\uff1b\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam(m\u2264n)\u4e2a\u5143\u7d20\u7684\u6240\u6709\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\u3002\u7528\u7b26\u53f7 C_n^m C_n^m \u6765\u8868\u793a,\u7ec4\u5408\u6570\u4e5f\u5e38\u7528 (_m^n) (_m^n) \u8868\u793a C_n^m=\\frac{n!}{m!(n-m)!} C_n^m=\\frac{n!}{m!(n-m)!} \u5404\u79cd\u6392\u5217 \u00b6 Note (\u6458\u81eaoiwiki) \u4e0d\u76f8\u90bb\u7684\u6392\u5217 \u00b6 1-n\u8fd9n\u4e2a\u81ea\u7136\u6570\u4e2d\u9009k\u4e2a\uff0c\u8fd9k\u4e2a\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u90fd\u4e0d\u76f8\u90bb\u7684\u7ec4\u5408\u6709 (\\frac{n-k+1}{k}) (\\frac{n-k+1}{k}) \u9519\u4f4d\u6392\u5217 \u00b6 \u6211\u4eec\u628a\u9519\u4f4d\u6392\u5217\u95ee\u9898\u5177\u4f53\u5316\uff0c\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a n\u5c01\u4e0d\u540c\u7684\u4fe1\uff0c\u7f16\u53f7\u5206\u522b\u662f1,2,3,4,5\uff0c\u73b0\u5728\u8981\u628a\u8fd9\u4e94\u5c01\u4fe1\u653e\u5728\u7f16\u53f71,2,3,4,5\u7684\u4fe1\u5c01\u4e2d\uff0c\u8981\u6c42\u4fe1\u5c01\u7684\u7f16\u53f7\u4e0e\u4fe1\u7684\u7f16\u53f7\u4e0d\u4e00\u6837\u3002\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u653e\u7f6e\u65b9\u6cd5\uff1f \u5047\u8bbe\u6211\u4eec\u8003\u8651\u5230\u7b2cn\u4e2a\u4fe1\u5c01\uff0c\u521d\u59cb\u65f6\u6211\u4eec\u6682\u65f6\u628a\u7b2cn\u5c01\u4fe1\u653e\u5728\u7b2cn\u4e2a\u4fe1\u5c01\u4e2d\uff0c\u7136\u540e\u8003\u8651\u4e24\u79cd\u60c5\u51b5\u7684\u9012\u63a8\uff1a \u524d\u9762n-1\u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1b \u524d\u9762n-1\u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u524d\u9762n-1\u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1a\u56e0\u4e3a\u524d\u9762n-1\u4e2a\u5df2\u7ecf\u5168\u90e8\u88c5\u9519\u4e86\uff0c\u6240\u4ee5\u7b2cn\u5c01\u53ea\u9700\u8981\u4e0e\u524d\u9762\u4efb\u4e00\u4e00\u4e2a\u4f4d\u7f6e\u4ea4\u6362\u5373\u53ef\uff0c\u603b\u5171\u6709 f(n-1)\u00d7(n-1) f(n-1)\u00d7(n-1) \u79cd\u60c5\u51b5\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u524d\u9762n-1\u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\uff1a\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u7684\u76ee\u7684\u5728\u4e8e\uff0c\u82e5n-1\u4e2a\u4fe1\u5c01\u4e2d\u5982\u679c\u6709\u4e00\u4e2a\u6ca1\u88c5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u90a3\u4e2a\u6ca1\u88c5\u9519\u7684\u4e0en\u4ea4\u6362\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u5168\u9519\u4f4d\u6392\u5217\u60c5\u51b5\u3002 \u5176\u4ed6\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u4e00\u6b21\u64cd\u4f5c\u6765\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a \u7684\u9519\u6392\u3002 \u4e8e\u662f\u53ef\u5f97\u9519\u4f4d\u6392\u5217\u7684\u9012\u63a8\u5f0f\u4e3a f(n)=(n-1)(f(n-1)+f(n-2)) f(n)=(n-1)(f(n-1)+f(n-2)) \u3002 \u9519\u4f4d\u6392\u5217\u6570\u5217\u7684\u524d\u51e0\u9879\u4e3a0,1,2,9,44,265\u3002 \u5706\u6392\u5217 \u00b6 n\u4e2a\u4eba\u5168\u90e8\u6765\u56f4\u6210\u4e00\u5708\uff0c\u6240\u6709\u7684\u6392\u5217\u6570\u8bb0\u4e3aQ_n^n\u3002\u8003\u8651\u5176\u4e2d\u5df2\u7ecf\u6392\u597d\u7684\u4e00\u5708\uff0c\u4ece\u4e0d\u540c\u4f4d\u7f6e\u65ad\u5f00\uff0c\u53c8\u53d8\u6210\u4e0d\u540c\u7684\u961f\u5217\u3002 \u6240\u4ee5\u6709 Q_n^n\u00d7n=A_n^n\u2192Q_n^n=\\frac{A_n^n}{n}=(n-1)! Q_n^n\u00d7n=A_n^n\u2192Q_n^n=\\frac{A_n^n}{n}=(n-1)! \u90e8\u5206\u5706\u6392\u5217\u516c\u5f0f Q_n^r=\\frac{A_n^r}{r}=\\frac{n!}{r\u00d7(n-r)!} Q_n^r=\\frac{A_n^r}{r}=\\frac{n!}{r\u00d7(n-r)!} \u6c42\u7ec4\u5408\u6570\u7684\u65b9\u6cd5 \u00b6 \u9012\u63a8\u5904\u7406 \u00b6 Note \u9002\u7528\u4e8e a,b \\le 2000 a,b \\le 2000 \u7684\u60c5\u51b5 \u901a\u8fc7 (_b^a)=(_{b-1}^a)+(_{b-1}^{a-1}) (_b^a)=(_{b-1}^a)+(_{b-1}^{a-1}) \u9884\u5904\u7406 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 2005 , mod = 1e9 + 7 ; int c [ N ][ N ]; void init ( int n , int m ) { for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) c [ i ][ j ] = 1 ; else c [ i ][ j ] = ( c [ i -1 ][ j -1 ] + c [ i -1 ][ j ]) % mod ; } } } int main () { init ( 2000 , 2000 ); int n , a , b ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a >> b ; cout << c [ a ][ b ] << endl ; } return 0 ; } \u9006\u5143\u5904\u7406 \u00b6 Note \u9002\u7528\u4e8e a,b \\le 1e5 a,b \\le 1e5 \u7684\u60c5\u51b5 \u968f\u53d6\u968f\u7528\uff0c\u7528\u9006\u5143,\u82e5\u8be2\u95ee\u591a\u5219\u9009\u62e9\u9884\u5904\u7406\u9636\u4e58\uff0c C_a^b=\\frac{fac[a]}{fac[b]*fac[a-b]} C_a^b=\\frac{fac[a]}{fac[b]*fac[a-b]} \u4ee3\u7801 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 , mod = 1e9 + 7 ; int fac [ N ], infac [ N ]; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } void init () { fac [ 0 ] = 1 ; infac [ 0 ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { fac [ i ] = fac [ i -1 ] * i % mod ; infac [ i ] = infac [ i -1 ] * qpow ( i , mod -2 , mod ) % mod ; } } int C ( int a , int b ) { return fac [ a ] * infac [ b ] % mod * infac [ a - b ] % mod ; } signed main () { int n ; cin >> n ; init (); //for(int i=1;i<=100;i++) cout<<fac[i]<<\" \"<<infac[i]<<endl; for ( int i = 1 ; i <= n ; i ++ ) { int a , b ; cin >> a >> b ; cout << C ( a , b ) << endl ; } return 0 ; } Lucas\u5b9a\u7406 \u00b6 Note \u9002\u7528\u4e8e a\u22641e18,b\u22641e18,p\u22641e5 a\u22641e18,b\u22641e18,p\u22641e5 \u7684\u53d6\u6a21\u60c5\u51b5 Lucas\u5b9a\u7406: \u5f53p\u4e3a\u8d28\u6570\u65f6\uff0c\u6709 C_a^b=C_{a\\ mod\\ p}^{b\\ mod\\ p}\\times C_{\\frac{a}{p}}^{\\frac{b}{p}} C_a^b=C_{a\\ mod\\ p}^{b\\ mod\\ p}\\times C_{\\frac{a}{p}}^{\\frac{b}{p}} \u4ee3\u7801 #include <bits/stdc++.h> #define int long long using namespace std ; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } int C ( int a , int b , int p ) { int res = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { res = res * j % p * qpow ( i , p -2 , p ) % p ; } return res ; } int lucas ( int a , int b , int p ) { if ( a < b ) return 0 ; if ( a < p && b < p ) return C ( a , b , p ); else return lucas ( a % p , b % p , p ) * lucas ( a / p , b / p , p ) % p ; } signed main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { int a , b , p ; cin >> a >> b >> p ; cout << lucas ( a , b , p ) << endl ; } return 0 ; } \u4f8b1.Beautiful Numbers \u00b6 \u9898\u76ee\u5165\u53e3 \u9898\u89e3 \u00b6 \u5bf9\u4e8e\u6bcf\u4e2an\u4f4d\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5b83\u7684\u4f4d\u6570\u548c\u662f\u5426good\u5373\u53ef\uff0c\u66b4\u529b\u679a\u4e3ea\u7684\u6570\u91cf\uff0c\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u9700\u5904\u7406\u9636\u4e58 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; #define int long long int a , b , n ; const int mod = 1e9 + 7 , N = 1e6 + 6 ;; int fac [ N ]; void init () { fac [ 0 ] = 1 ; for ( int i = 1 ; i <= 1000000 ; i ++ ) { fac [ i ] = fac [ i -1 ] * i % mod ; } } bool check ( int x , int a , int b ) { while ( x ) { if ( x % 10 != a && x % 10 != b ) return false ; x /= 10 ; } return true ; } int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int C ( int a , int b , int mod ) { return fac [ a ] * qpow ( fac [ b ], mod -2 , mod ) % mod * qpow ( fac [ a - b ], mod -2 , mod ) % mod ; } void solve () { init (); cin >> a >> b >> n ; int res = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { int tmp = i * a + ( n - i ) * b ; if ( ! check ( tmp , a , b )) continue ; res += C ( n , i , mod ); res %= mod ; } cout << res << endl ; } signed main () { solve (); return 0 ; }","title":"\u7ec4\u5408\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_1","text":"","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_2","text":"\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u4efb\u53d6m(m\u2264n,n,m\u5747\u4e3a\u81ea\u7136\u6570)\u4e2a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6392\u6210\u4e00\u5217\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u6392\u5217\uff1b\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam(m\u2264n)\u4e2a\u5143\u7d20\u7684\u6240\u6709\u6392\u5217\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u6392\u5217\u6570\uff0c\u7528\u7b26\u53f7 A_n^m(\u6216\u8005\u662fP_n^m) A_n^m(\u6216\u8005\u662fP_n^m) \u8868\u793a\u3002 A_n^m=\\frac{n!}{(n-m)!} A_n^m=\\frac{n!}{(n-m)!}","title":"\u6392\u5217\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_3","text":"\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m(m\u2264n)\u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u7ec4\u5408\uff1b\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam(m\u2264n)\u4e2a\u5143\u7d20\u7684\u6240\u6709\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ecen\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fam\u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\u3002\u7528\u7b26\u53f7 C_n^m C_n^m \u6765\u8868\u793a,\u7ec4\u5408\u6570\u4e5f\u5e38\u7528 (_m^n) (_m^n) \u8868\u793a C_n^m=\\frac{n!}{m!(n-m)!} C_n^m=\\frac{n!}{m!(n-m)!}","title":"\u7ec4\u5408\u6570"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_4","text":"Note (\u6458\u81eaoiwiki)","title":"\u5404\u79cd\u6392\u5217"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_5","text":"1-n\u8fd9n\u4e2a\u81ea\u7136\u6570\u4e2d\u9009k\u4e2a\uff0c\u8fd9k\u4e2a\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u90fd\u4e0d\u76f8\u90bb\u7684\u7ec4\u5408\u6709 (\\frac{n-k+1}{k}) (\\frac{n-k+1}{k})","title":"\u4e0d\u76f8\u90bb\u7684\u6392\u5217"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_6","text":"\u6211\u4eec\u628a\u9519\u4f4d\u6392\u5217\u95ee\u9898\u5177\u4f53\u5316\uff0c\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a n\u5c01\u4e0d\u540c\u7684\u4fe1\uff0c\u7f16\u53f7\u5206\u522b\u662f1,2,3,4,5\uff0c\u73b0\u5728\u8981\u628a\u8fd9\u4e94\u5c01\u4fe1\u653e\u5728\u7f16\u53f71,2,3,4,5\u7684\u4fe1\u5c01\u4e2d\uff0c\u8981\u6c42\u4fe1\u5c01\u7684\u7f16\u53f7\u4e0e\u4fe1\u7684\u7f16\u53f7\u4e0d\u4e00\u6837\u3002\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u653e\u7f6e\u65b9\u6cd5\uff1f \u5047\u8bbe\u6211\u4eec\u8003\u8651\u5230\u7b2cn\u4e2a\u4fe1\u5c01\uff0c\u521d\u59cb\u65f6\u6211\u4eec\u6682\u65f6\u628a\u7b2cn\u5c01\u4fe1\u653e\u5728\u7b2cn\u4e2a\u4fe1\u5c01\u4e2d\uff0c\u7136\u540e\u8003\u8651\u4e24\u79cd\u60c5\u51b5\u7684\u9012\u63a8\uff1a \u524d\u9762n-1\u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1b \u524d\u9762n-1\u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u524d\u9762n-1\u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1a\u56e0\u4e3a\u524d\u9762n-1\u4e2a\u5df2\u7ecf\u5168\u90e8\u88c5\u9519\u4e86\uff0c\u6240\u4ee5\u7b2cn\u5c01\u53ea\u9700\u8981\u4e0e\u524d\u9762\u4efb\u4e00\u4e00\u4e2a\u4f4d\u7f6e\u4ea4\u6362\u5373\u53ef\uff0c\u603b\u5171\u6709 f(n-1)\u00d7(n-1) f(n-1)\u00d7(n-1) \u79cd\u60c5\u51b5\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u524d\u9762n-1\u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\uff1a\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u7684\u76ee\u7684\u5728\u4e8e\uff0c\u82e5n-1\u4e2a\u4fe1\u5c01\u4e2d\u5982\u679c\u6709\u4e00\u4e2a\u6ca1\u88c5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u90a3\u4e2a\u6ca1\u88c5\u9519\u7684\u4e0en\u4ea4\u6362\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u5168\u9519\u4f4d\u6392\u5217\u60c5\u51b5\u3002 \u5176\u4ed6\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u4e00\u6b21\u64cd\u4f5c\u6765\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a \u7684\u9519\u6392\u3002 \u4e8e\u662f\u53ef\u5f97\u9519\u4f4d\u6392\u5217\u7684\u9012\u63a8\u5f0f\u4e3a f(n)=(n-1)(f(n-1)+f(n-2)) f(n)=(n-1)(f(n-1)+f(n-2)) \u3002 \u9519\u4f4d\u6392\u5217\u6570\u5217\u7684\u524d\u51e0\u9879\u4e3a0,1,2,9,44,265\u3002","title":"\u9519\u4f4d\u6392\u5217"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_7","text":"n\u4e2a\u4eba\u5168\u90e8\u6765\u56f4\u6210\u4e00\u5708\uff0c\u6240\u6709\u7684\u6392\u5217\u6570\u8bb0\u4e3aQ_n^n\u3002\u8003\u8651\u5176\u4e2d\u5df2\u7ecf\u6392\u597d\u7684\u4e00\u5708\uff0c\u4ece\u4e0d\u540c\u4f4d\u7f6e\u65ad\u5f00\uff0c\u53c8\u53d8\u6210\u4e0d\u540c\u7684\u961f\u5217\u3002 \u6240\u4ee5\u6709 Q_n^n\u00d7n=A_n^n\u2192Q_n^n=\\frac{A_n^n}{n}=(n-1)! Q_n^n\u00d7n=A_n^n\u2192Q_n^n=\\frac{A_n^n}{n}=(n-1)! \u90e8\u5206\u5706\u6392\u5217\u516c\u5f0f Q_n^r=\\frac{A_n^r}{r}=\\frac{n!}{r\u00d7(n-r)!} Q_n^r=\\frac{A_n^r}{r}=\\frac{n!}{r\u00d7(n-r)!}","title":"\u5706\u6392\u5217"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_8","text":"","title":"\u6c42\u7ec4\u5408\u6570\u7684\u65b9\u6cd5"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_9","text":"Note \u9002\u7528\u4e8e a,b \\le 2000 a,b \\le 2000 \u7684\u60c5\u51b5 \u901a\u8fc7 (_b^a)=(_{b-1}^a)+(_{b-1}^{a-1}) (_b^a)=(_{b-1}^a)+(_{b-1}^{a-1}) \u9884\u5904\u7406 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 2005 , mod = 1e9 + 7 ; int c [ N ][ N ]; void init ( int n , int m ) { for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) c [ i ][ j ] = 1 ; else c [ i ][ j ] = ( c [ i -1 ][ j -1 ] + c [ i -1 ][ j ]) % mod ; } } } int main () { init ( 2000 , 2000 ); int n , a , b ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a >> b ; cout << c [ a ][ b ] << endl ; } return 0 ; }","title":"\u9012\u63a8\u5904\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_10","text":"Note \u9002\u7528\u4e8e a,b \\le 1e5 a,b \\le 1e5 \u7684\u60c5\u51b5 \u968f\u53d6\u968f\u7528\uff0c\u7528\u9006\u5143,\u82e5\u8be2\u95ee\u591a\u5219\u9009\u62e9\u9884\u5904\u7406\u9636\u4e58\uff0c C_a^b=\\frac{fac[a]}{fac[b]*fac[a-b]} C_a^b=\\frac{fac[a]}{fac[b]*fac[a-b]} \u4ee3\u7801 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 , mod = 1e9 + 7 ; int fac [ N ], infac [ N ]; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } void init () { fac [ 0 ] = 1 ; infac [ 0 ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { fac [ i ] = fac [ i -1 ] * i % mod ; infac [ i ] = infac [ i -1 ] * qpow ( i , mod -2 , mod ) % mod ; } } int C ( int a , int b ) { return fac [ a ] * infac [ b ] % mod * infac [ a - b ] % mod ; } signed main () { int n ; cin >> n ; init (); //for(int i=1;i<=100;i++) cout<<fac[i]<<\" \"<<infac[i]<<endl; for ( int i = 1 ; i <= n ; i ++ ) { int a , b ; cin >> a >> b ; cout << C ( a , b ) << endl ; } return 0 ; }","title":"\u9006\u5143\u5904\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#lucas","text":"Note \u9002\u7528\u4e8e a\u22641e18,b\u22641e18,p\u22641e5 a\u22641e18,b\u22641e18,p\u22641e5 \u7684\u53d6\u6a21\u60c5\u51b5 Lucas\u5b9a\u7406: \u5f53p\u4e3a\u8d28\u6570\u65f6\uff0c\u6709 C_a^b=C_{a\\ mod\\ p}^{b\\ mod\\ p}\\times C_{\\frac{a}{p}}^{\\frac{b}{p}} C_a^b=C_{a\\ mod\\ p}^{b\\ mod\\ p}\\times C_{\\frac{a}{p}}^{\\frac{b}{p}} \u4ee3\u7801 #include <bits/stdc++.h> #define int long long using namespace std ; int qpow ( int a , int n , int mod ) { int ans = 1 ; while ( n ) { if ( n & 1 ) ans = ans * a % mod ; a = a * a % mod ; n >>= 1 ; } return ans ; } int C ( int a , int b , int p ) { int res = 1 ; for ( int i = 1 , j = a ; i <= b ; i ++ , j -- ) { res = res * j % p * qpow ( i , p -2 , p ) % p ; } return res ; } int lucas ( int a , int b , int p ) { if ( a < b ) return 0 ; if ( a < p && b < p ) return C ( a , b , p ); else return lucas ( a % p , b % p , p ) * lucas ( a / p , b / p , p ) % p ; } signed main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { int a , b , p ; cin >> a >> b >> p ; cout << lucas ( a , b , p ) << endl ; } return 0 ; }","title":"Lucas\u5b9a\u7406"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#1beautiful-numbers","text":"\u9898\u76ee\u5165\u53e3","title":"\u4f8b1.Beautiful Numbers"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_11","text":"\u5bf9\u4e8e\u6bcf\u4e2an\u4f4d\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5b83\u7684\u4f4d\u6570\u548c\u662f\u5426good\u5373\u53ef\uff0c\u66b4\u529b\u679a\u4e3ea\u7684\u6570\u91cf\uff0c\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u9700\u5904\u7406\u9636\u4e58","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0/#_12","text":"#include <bits/stdc++.h> using namespace std ; #define int long long int a , b , n ; const int mod = 1e9 + 7 , N = 1e6 + 6 ;; int fac [ N ]; void init () { fac [ 0 ] = 1 ; for ( int i = 1 ; i <= 1000000 ; i ++ ) { fac [ i ] = fac [ i -1 ] * i % mod ; } } bool check ( int x , int a , int b ) { while ( x ) { if ( x % 10 != a && x % 10 != b ) return false ; x /= 10 ; } return true ; } int qpow ( int a , int n , int mod ) { int res = 1 ; while ( n ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int C ( int a , int b , int mod ) { return fac [ a ] * qpow ( fac [ b ], mod -2 , mod ) % mod * qpow ( fac [ a - b ], mod -2 , mod ) % mod ; } void solve () { init (); cin >> a >> b >> n ; int res = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { int tmp = i * a + ( n - i ) * b ; if ( ! check ( tmp , a , b )) continue ; res += C ( n , i , mod ); res %= mod ; } cout << res << endl ; } signed main () { solve (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/","text":"\u6982\u8ff0 \u00b6 \ud83d\udc49 \u5e76\u67e5\u96c6 \u63d0\u9ad8\u7bc7 \u5b9a\u4e49\uff1a \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u5408\u5e76\u53ca\u67e5\u8be2\u95ee\u9898\uff08\u5373\u6240\u8c13\u7684\u5e76\u3001\u67e5\uff09\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u4e00\u4e2a\u68ee\u6797\u4e2d\u6709\u51e0\u68f5\u6811\u3001\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u5c5e\u4e8e\u67d0\u68f5\u6811\u7b49\u3002 \u4e3b\u8981\u6784\u6210\uff1a \u5e76\u67e5\u96c6\u4e3b\u8981\u7531\u4e00\u4e2a\u6574\u578b\u6570\u7ec4pre[ ]\u548c\u4e24\u4e2a\u51fd\u6570find( )\u3001join( )\u6784\u6210\u3002 \u6570\u7ec4 pre[ ] \u8bb0\u5f55\u4e86\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u8282\u70b9\u662f\u8c01\uff0c\u51fd\u6570 find(x) \u7528\u4e8e\u67e5\u627e\u6307\u5b9a\u8282\u70b9 x \u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\uff0c\u51fd\u6570 join(x,y) \u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u8282\u70b9 x \u548c y \u3002 find\u51fd\u6570 \u00b6 int find ( int x ) { while ( pre [ x ] != x ) //\u5982\u679cx\u7684\u4e0a\u7ea7\u4e0d\u662f\u81ea\u5df1 x = pre [ x ]; //x\u7ee7\u7eed\u627e\u4ed6\u7684\u4e0a\u7ea7 return x ; //\u627e\u5230 } join\u51fd\u6570 \u00b6 void join ( int x , int y ) { int fx = find ( x ), fy = find ( y ); // \u627ex\u7684\u4e0a\u7ea7\uff0cy\u7684\u4e0a\u7ea7 if ( fx != fy ) // \u4e0a\u7ea7\u4e0d\u76f8\u7b49\uff0c\u5408\u5e76 pre [ fx ] = fy ; } \u8def\u5f84\u538b\u7f29 \u00b6 \u4ecefind\u51fd\u6570\u53ef\u4ee5\u770b\u51fa\uff0c\u4ece\u67d0\u4e2a\u8282\u70b9\u51fa\u53d1\u5bfb\u627e\u6839\u8282\u70b9\u65f6\uff0c\u9700\u8981\u9014\u5f84\u4e00\u7cfb\u5217\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u4e9b\u8282\u70b9\u7684\u4e0a\u7ea7\u90fd\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u5bfb\u627e\u7684\u8fc7\u7a0b\u4e2d\u5c06\u8fd9\u4e9b\u8282\u70b9\u7684\u4e0a\u7ea7\u90fd\u987a\u5e26\u4fee\u6539\u4e86\uff0c\u7b80\u5355\u8bf4\u6765\u5c31\u662f\u5c06x\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684pre\uff08\u4e0a\u7ea7\uff09\u90fd\u8bbe\u4e3a\u6839\u8282\u70b9\u3002\u4ee3\u7801\u5982\u4e0b\uff1a int find ( int x ) //\u67e5\u627e\u7ed3\u70b9 x\u7684\u6839\u7ed3\u70b9 { if ( pre [ x ] == x ) return x ; //\u9012\u5f52\u51fa\u53e3\uff1ax\u7684\u4e0a\u7ea7\u4e3a x\u672c\u8eab\uff0c\u5373 x\u4e3a\u6839\u7ed3\u70b9 return pre [ x ] = find ( pre [ x ]); // \u4fee\u6539\u9014\u5f84\u8282\u70b9\u7684\u6839\u8282\u70b9 } \u4f8b1.\u5408\u5e76\u96c6\u5408 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u4e00\u5171\u6709 n \u4e2a\u6570\uff0c\u7f16\u53f7\u662f 1\u223cn\uff0c\u6700\u5f00\u59cb\u6bcf\u4e2a\u6570\u5404\u81ea\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u73b0\u5728\u8981\u8fdb\u884c m \u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5171\u6709\u4e24\u79cd\uff1a M a b \uff0c\u5c06\u7f16\u53f7\u4e3a a \u548c b \u7684\u4e24\u4e2a\u6570\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u5982\u679c\u4e24\u4e2a\u6570\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5219\u5ffd\u7565\u8fd9\u4e2a\u64cd\u4f5c\uff1b Q a b \uff0c\u8be2\u95ee\u7f16\u53f7\u4e3a a \u548c b \u7684\u4e24\u4e2a\u6570\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1b \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u64cd\u4f5c\u6307\u4ee4\uff0c\u6307\u4ee4\u4e3a M a b \u6216 Q a b \u4e2d\u7684\u4e00\u79cd\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6307\u4ee4 Q a b \uff0c\u90fd\u8981\u8f93\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u5982\u679c a \u548c b \u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u5219\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264105 1\u2264n,m\u2264105 \u8f93\u5165\u6837\u4f8b 4 5 M 1 2 M 3 4 Q 1 2 Q 1 3 Q 3 4 \u8f93\u51fa\u6837\u4f8b Yes No Yes \u9898\u89e3 \u00b6 \u5e76\u67e5\u96c6\u6a21\u677f\u9898 \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; const int N = 100010 ; int p [ N ] , n , m ; int find ( int x ) { if ( p [ x ] != x ) p [ x ] = find ( p [ x ]); return p [ x ]; } int main () { cin >> n >> m ; for ( int i = 0 ; i <= n ; i ++ ) p [ i ] = i ; while ( m -- ) { char op ; int a , b ; cin >> op >> a >> b ; if ( op == 'M' ) p [ find ( a )] = find ( b ); else { if ( find ( a ) == find ( b )) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } } } \u4f8b2.\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u70b9\uff08\u7f16\u53f7\u4e3a 1\u223cn\uff09\u7684\u65e0\u5411\u56fe\uff0c\u521d\u59cb\u65f6\u56fe\u4e2d\u6ca1\u6709\u8fb9\u3002 \u73b0\u5728\u8981\u8fdb\u884c m \u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5171\u6709\u4e09\u79cd\uff1a C a b \uff0c\u5728\u70b9 a \u548c\u70b9 b \u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0ca \u548c b \u53ef\u80fd\u76f8\u7b49\uff1b Q1 a b \uff0c\u8be2\u95ee\u70b9 a \u548c\u70b9 b \u662f\u5426\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0ca \u548c b \u53ef\u80fd\u76f8\u7b49\uff1b Q2 a \uff0c\u8be2\u95ee\u70b9 a \u6240\u5728\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf\uff1b \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u64cd\u4f5c\u6307\u4ee4\uff0c\u6307\u4ee4\u4e3a C a b \uff0c Q1 a b \u6216 Q2 a \u4e2d\u7684\u4e00\u79cd\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6307\u4ee4 Q1 a b \uff0c\u5982\u679c a \u548c b \u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u5219\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6307\u4ee4 Q2 a \uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u70b9 a \u6240\u5728\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf \u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264105 1\u2264n,m\u2264105 \u8f93\u5165\u6837\u4f8b 5 5 C 1 2 Q1 1 2 Q2 1 C 2 5 Q2 5 \u8f93\u51fa\u6837\u4f8b Yes 2 3 \u9898\u89e3 \u00b6 C\u548cQ1\u64cd\u4f5c\u4e3a\u5e76\u67e5\u96c6\u57fa\u672c\u64cd\u4f5c\uff0cQ2\u64cd\u4f5c\u8981\u6c42\u77e5\u9053\u4e0ea\u6709\u76f8\u540c\u6839\u8282\u70b9\u7684\u8282\u70b9\u6240\u6784\u6210\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u5728\u6bcf\u6b21join\u64cd\u4f5c\u65f6\u66f4\u65b0\u96c6\u5408\u5927\u5c0f\u5373\u53ef \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; const int N = 100010 ; int n , m ; int p [ N ] , psize [ N ]; // psize\u5b58\u96c6\u5408\u5927\u5c0f int find ( int x ) { if ( p [ x ] != x ) p [ x ] = find ( p [ x ]); return p [ x ]; } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = i ; psize [ i ] = 1 ; } while ( m -- ) { string op ; int a , b ; cin >> op ; if ( op == \"C\" ) { cin >> a >> b ; if ( find ( a ) == find ( b )) continue ; psize [ find ( b )] += psize [ find ( a )]; p [ find ( a )] = find ( b ); } else if ( op == \"Q1\" ) { cin >> a >> b ; if ( find ( a ) == find ( b )) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } else { cin >> a ; cout << psize [ find ( a )] << endl ; } } return 0 ; } \u4f8b3.\u98df\u7269\u94fe \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u52a8\u7269\u738b\u56fd\u4e2d\u6709\u4e09\u7c7b\u52a8\u7269 A,B,C\uff0c\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u98df\u7269\u94fe\u6784\u6210\u4e86\u6709\u8da3\u7684\u73af\u5f62\u3002 A \u5403 B\uff0cB \u5403 C\uff0cC \u5403 A\u3002 \u73b0\u6709 N \u4e2a\u52a8\u7269\uff0c\u4ee5 1\u223cN \u7f16\u53f7\u3002 \u6bcf\u4e2a\u52a8\u7269\u90fd\u662f A,B,C \u4e2d\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5b83\u5230\u5e95\u662f\u54ea\u4e00\u79cd\u3002 \u6709\u4eba\u7528\u4e24\u79cd\u8bf4\u6cd5\u5bf9\u8fd9 N \u4e2a\u52a8\u7269\u6240\u6784\u6210\u7684\u98df\u7269\u94fe\u5173\u7cfb\u8fdb\u884c\u63cf\u8ff0\uff1a \u7b2c\u4e00\u79cd\u8bf4\u6cd5\u662f 1 X Y\uff0c\u8868\u793a X \u548c Y \u662f\u540c\u7c7b\u3002 \u7b2c\u4e8c\u79cd\u8bf4\u6cd5\u662f 2 X Y\uff0c\u8868\u793a X \u5403 Y\u3002 \u6b64\u4eba\u5bf9 N \u4e2a\u52a8\u7269\uff0c\u7528\u4e0a\u8ff0\u4e24\u79cd\u8bf4\u6cd5\uff0c\u4e00\u53e5\u63a5\u4e00\u53e5\u5730\u8bf4\u51fa K \u53e5\u8bdd\uff0c\u8fd9 K \u53e5\u8bdd\u6709\u7684\u662f\u771f\u7684\uff0c\u6709\u7684\u662f\u5047\u7684\u3002 \u5f53\u4e00\u53e5\u8bdd\u6ee1\u8db3\u4e0b\u5217\u4e09\u6761\u4e4b\u4e00\u65f6\uff0c\u8fd9\u53e5\u8bdd\u5c31\u662f\u5047\u8bdd\uff0c\u5426\u5219\u5c31\u662f\u771f\u8bdd\u3002 \u5f53\u524d\u7684\u8bdd\u4e0e\u524d\u9762\u7684\u67d0\u4e9b\u771f\u7684\u8bdd\u51b2\u7a81\uff0c\u5c31\u662f\u5047\u8bdd\uff1b \u5f53\u524d\u7684\u8bdd\u4e2d X \u6216 Y \u6bd4 N \u5927\uff0c\u5c31\u662f\u5047\u8bdd\uff1b \u5f53\u524d\u7684\u8bdd\u8868\u793a X \u5403 X\uff0c\u5c31\u662f\u5047\u8bdd\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u6839\u636e\u7ed9\u5b9a\u7684 N \u548c K \u53e5\u8bdd\uff0c\u8f93\u51fa\u5047\u8bdd\u7684\u603b\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570 N \u548c K\uff0c\u4ee5\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 \u4ee5\u4e0b K \u884c\u6bcf\u884c\u662f\u4e09\u4e2a\u6b63\u6574\u6570 D\uff0cX\uff0cY\uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u5176\u4e2d D \u8868\u793a\u8bf4\u6cd5\u7684\u79cd\u7c7b\u3002 \u82e5 D=1\uff0c\u5219\u8868\u793a X \u548c Y \u662f\u540c\u7c7b\u3002 \u82e5 D=2\uff0c\u5219\u8868\u793a X \u5403 Y\u3002 \u8f93\u51fa\u683c\u5f0f \u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5047\u8bdd\u7684\u6570\u76ee\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226450000, 1\u2264N\u226450000, 0\u2264K\u2264100000 0\u2264K\u2264100000 \u8f93\u5165\u6837\u4f8b 100 7 1 101 1 2 1 2 2 2 3 2 3 3 1 1 3 2 3 1 1 5 5 \u8f93\u51fa\u6837\u4f8b 3 \u9898\u89e3 \u00b6 \u89e3\u6cd51:\u82e5x\u548cy\u5df2\u7ecf\u786e\u5b9a\u5173\u7cfb\uff0c\u5219x\u548cy\u5df2\u7ecf\u6709\u4e86\u76f8\u540c\u7684\u6839\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4x\u548cy\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u6765\u5224\u65ad\u4ed6\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5bf93\u53d6\u4f59\u540e\u8ddd\u79bb\u53d6\u503c\u4e3a0\uff0c1\uff0c2\uff0c\u5206\u522b\u5bf9\u5e94 x\u548cy\u540c\u7c7b \uff0c x\u5403y \uff0c y\u5403x \u4e09\u79cd\u72b6\u6001\uff0c\u82e5\u6839\u8282\u70b9\u76f8\u540c\uff0c\u5224\u65ad\u8ddd\u79bb\uff0c\u82e5\u4e0d\u76f8\u540c\uff0c\u5219\u5408\u5e76\u5373\u53ef \u89e3\u6cd52:\u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c\u5f00\u4e09\u500d\u7a7a\u95f4\uff0c\u4ee4 1-n \u4e3a\u540c\u7c7b\u57df\uff0c n+1-2n \u4e3a\u6355\u98df\u57df\uff0c 2n+1-3n \u4e3a\u5929\u654c\u57df\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\u540c\u65f6\u7ef4\u62a4\u4e09\u4e2a\u57df\uff0c\u4f8b\u5982x\u5403y\uff0c\u5219\u5728x\u7684\u6355\u98df\u57df\u4e2d\u52a0\u5165y\uff0c\u5728y\u7684\u5929\u654c\u57df\u4e2d\u52a0\u5165x\uff0c\u540c\u65f6\u5728y\u7684\u6355\u98df\u57df\u662f\u6355\u98dfx\u7684\u5929\u654c\u57df\u3002 \u4ee3\u7801 \u00b6 // \u89e3\u6cd51 #include <iostream> using namespace std ; const int N = 50010 ; int n , m ; int p [ N ], d [ N ]; int find ( int x ) { if ( p [ x ] != x ) { int t = find ( p [ x ]); d [ x ] += d [ p [ x ]]; p [ x ] = t ; } return p [ x ]; } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) p [ i ] = i ; int res = 0 ; while ( m -- ) { int t , x , y ; scanf ( \"%d%d%d\" , & t , & x , & y ); if ( x > n || y > n ) res ++ ; else { int px = find ( x ), py = find ( y ); if ( t == 1 ) { if ( px == py && ( d [ x ] - d [ y ]) % 3 ) res ++ ; else if ( px != py ) { p [ px ] = py ; d [ px ] = d [ y ] - d [ x ]; } } else { if ( px == py && ( d [ x ] - d [ y ] - 1 ) % 3 ) res ++ ; else if ( px != py ) { p [ px ] = py ; d [ px ] = d [ y ] + 1 - d [ x ]; } } } } printf ( \"%d \\n \" , res ); return 0 ; } // \u89e3\u6cd52 //\u8fd9\u91cc\u6211\u4eec\u5c06\u4e09\u4e2a\u57df,\u5206\u522b\u8f6c\u5316\u4e3a\u4e86n,n+n,n+n+n.\u56e0\u4e3a\u8bfb\u5165\u65b9\u9762\u7279\u522b\u70e6. #include <bits/stdc++.h> using namespace std ; int fa [ 200000 ]; int n , m , k , x , y , ans ; int get ( int x ) { if ( x == fa [ x ]) return x ; return fa [ x ] = get ( fa [ x ]); } void merge ( int x , int y ) { fa [ get ( x )] = get ( y ); } int main () { cin >> n >> m ; for ( int i = 1 ; i <= 3 * n ; i ++ ) fa [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d%d\" , & k , & x , & y ); if ( x > n || y > n ) ans ++ ; else if ( k == 1 ) { if ( get ( x ) == get ( y + n ) || get ( x ) == get ( y + n + n )) //\u5982\u679cx,y\u662f\u540c\u7c7b,\u4f46\u662fx\u662fy\u7684\u6355\u98df\u4e2d\u7684\u52a8\u7269,\u6216\u8005x\u662fy\u5929\u654c\u4e2d\u7684\u52a8\u7269,\u90a3\u4e48\u9519\u8bef. ans ++ ; else { merge ( x , y ); merge ( x + n , y + n ); merge ( x + n + n , y + n + n ); } } else { if ( x == y || get ( x ) == get ( y ) || get ( x ) == get ( y + n )) //x\u5c31\u662fy,\u6216\u8005\u4ed6\u4eec\u662f\u540c\u7c7b,\u518d\u6216\u8005\u662fy\u7684\u540c\u7c7b\u4e2d\u6709x ans ++ ; //\u90fd\u662f\u5047\u8bdd else { merge ( x , y + n + n ); //y\u7684\u5929\u654c\u57df\u52a0\u5165x merge ( x + n , y ); //x\u7684\u6355\u98df\u57df\u52a0\u5165y merge ( x + n + n , y + n ); //x\u7684\u5929\u654c\u57df\u662fy\u7684\u6355\u98df\u57df. } } } cout << ans << endl ; } //x\u662f\u540c\u7c7b\u57df. //x+n\u662f\u6355\u98df\u57df //x+n+n\u662f\u5929\u654c\u57df","title":"\u5e76\u67e5\u96c6 \u57fa\u7840\u7bc7"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_1","text":"\ud83d\udc49 \u5e76\u67e5\u96c6 \u63d0\u9ad8\u7bc7 \u5b9a\u4e49\uff1a \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u5408\u5e76\u53ca\u67e5\u8be2\u95ee\u9898\uff08\u5373\u6240\u8c13\u7684\u5e76\u3001\u67e5\uff09\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u4e00\u4e2a\u68ee\u6797\u4e2d\u6709\u51e0\u68f5\u6811\u3001\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u5c5e\u4e8e\u67d0\u68f5\u6811\u7b49\u3002 \u4e3b\u8981\u6784\u6210\uff1a \u5e76\u67e5\u96c6\u4e3b\u8981\u7531\u4e00\u4e2a\u6574\u578b\u6570\u7ec4pre[ ]\u548c\u4e24\u4e2a\u51fd\u6570find( )\u3001join( )\u6784\u6210\u3002 \u6570\u7ec4 pre[ ] \u8bb0\u5f55\u4e86\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u8282\u70b9\u662f\u8c01\uff0c\u51fd\u6570 find(x) \u7528\u4e8e\u67e5\u627e\u6307\u5b9a\u8282\u70b9 x \u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\uff0c\u51fd\u6570 join(x,y) \u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u8282\u70b9 x \u548c y \u3002","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#find","text":"int find ( int x ) { while ( pre [ x ] != x ) //\u5982\u679cx\u7684\u4e0a\u7ea7\u4e0d\u662f\u81ea\u5df1 x = pre [ x ]; //x\u7ee7\u7eed\u627e\u4ed6\u7684\u4e0a\u7ea7 return x ; //\u627e\u5230 }","title":"find\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#join","text":"void join ( int x , int y ) { int fx = find ( x ), fy = find ( y ); // \u627ex\u7684\u4e0a\u7ea7\uff0cy\u7684\u4e0a\u7ea7 if ( fx != fy ) // \u4e0a\u7ea7\u4e0d\u76f8\u7b49\uff0c\u5408\u5e76 pre [ fx ] = fy ; }","title":"join\u51fd\u6570"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_2","text":"\u4ecefind\u51fd\u6570\u53ef\u4ee5\u770b\u51fa\uff0c\u4ece\u67d0\u4e2a\u8282\u70b9\u51fa\u53d1\u5bfb\u627e\u6839\u8282\u70b9\u65f6\uff0c\u9700\u8981\u9014\u5f84\u4e00\u7cfb\u5217\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u4e9b\u8282\u70b9\u7684\u4e0a\u7ea7\u90fd\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u5bfb\u627e\u7684\u8fc7\u7a0b\u4e2d\u5c06\u8fd9\u4e9b\u8282\u70b9\u7684\u4e0a\u7ea7\u90fd\u987a\u5e26\u4fee\u6539\u4e86\uff0c\u7b80\u5355\u8bf4\u6765\u5c31\u662f\u5c06x\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684pre\uff08\u4e0a\u7ea7\uff09\u90fd\u8bbe\u4e3a\u6839\u8282\u70b9\u3002\u4ee3\u7801\u5982\u4e0b\uff1a int find ( int x ) //\u67e5\u627e\u7ed3\u70b9 x\u7684\u6839\u7ed3\u70b9 { if ( pre [ x ] == x ) return x ; //\u9012\u5f52\u51fa\u53e3\uff1ax\u7684\u4e0a\u7ea7\u4e3a x\u672c\u8eab\uff0c\u5373 x\u4e3a\u6839\u7ed3\u70b9 return pre [ x ] = find ( pre [ x ]); // \u4fee\u6539\u9014\u5f84\u8282\u70b9\u7684\u6839\u8282\u70b9 }","title":"\u8def\u5f84\u538b\u7f29"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u4e00\u5171\u6709 n \u4e2a\u6570\uff0c\u7f16\u53f7\u662f 1\u223cn\uff0c\u6700\u5f00\u59cb\u6bcf\u4e2a\u6570\u5404\u81ea\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u73b0\u5728\u8981\u8fdb\u884c m \u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5171\u6709\u4e24\u79cd\uff1a M a b \uff0c\u5c06\u7f16\u53f7\u4e3a a \u548c b \u7684\u4e24\u4e2a\u6570\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u5982\u679c\u4e24\u4e2a\u6570\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5219\u5ffd\u7565\u8fd9\u4e2a\u64cd\u4f5c\uff1b Q a b \uff0c\u8be2\u95ee\u7f16\u53f7\u4e3a a \u548c b \u7684\u4e24\u4e2a\u6570\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1b \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u64cd\u4f5c\u6307\u4ee4\uff0c\u6307\u4ee4\u4e3a M a b \u6216 Q a b \u4e2d\u7684\u4e00\u79cd\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6307\u4ee4 Q a b \uff0c\u90fd\u8981\u8f93\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u5982\u679c a \u548c b \u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u5219\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264105 1\u2264n,m\u2264105 \u8f93\u5165\u6837\u4f8b 4 5 M 1 2 M 3 4 Q 1 2 Q 1 3 Q 3 4 \u8f93\u51fa\u6837\u4f8b Yes No Yes","title":"\u4f8b1.\u5408\u5e76\u96c6\u5408"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_3","text":"\u5e76\u67e5\u96c6\u6a21\u677f\u9898","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_4","text":"#include <iostream> using namespace std ; const int N = 100010 ; int p [ N ] , n , m ; int find ( int x ) { if ( p [ x ] != x ) p [ x ] = find ( p [ x ]); return p [ x ]; } int main () { cin >> n >> m ; for ( int i = 0 ; i <= n ; i ++ ) p [ i ] = i ; while ( m -- ) { char op ; int a , b ; cin >> op >> a >> b ; if ( op == 'M' ) p [ find ( a )] = find ( b ); else { if ( find ( a ) == find ( b )) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } } }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u70b9\uff08\u7f16\u53f7\u4e3a 1\u223cn\uff09\u7684\u65e0\u5411\u56fe\uff0c\u521d\u59cb\u65f6\u56fe\u4e2d\u6ca1\u6709\u8fb9\u3002 \u73b0\u5728\u8981\u8fdb\u884c m \u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5171\u6709\u4e09\u79cd\uff1a C a b \uff0c\u5728\u70b9 a \u548c\u70b9 b \u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0ca \u548c b \u53ef\u80fd\u76f8\u7b49\uff1b Q1 a b \uff0c\u8be2\u95ee\u70b9 a \u548c\u70b9 b \u662f\u5426\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0ca \u548c b \u53ef\u80fd\u76f8\u7b49\uff1b Q2 a \uff0c\u8be2\u95ee\u70b9 a \u6240\u5728\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf\uff1b \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u64cd\u4f5c\u6307\u4ee4\uff0c\u6307\u4ee4\u4e3a C a b \uff0c Q1 a b \u6216 Q2 a \u4e2d\u7684\u4e00\u79cd\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6307\u4ee4 Q1 a b \uff0c\u5982\u679c a \u548c b \u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u5219\u8f93\u51fa Yes \uff0c\u5426\u5219\u8f93\u51fa No \u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6307\u4ee4 Q2 a \uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u70b9 a \u6240\u5728\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf \u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n,m\u2264105 1\u2264n,m\u2264105 \u8f93\u5165\u6837\u4f8b 5 5 C 1 2 Q1 1 2 Q2 1 C 2 5 Q2 5 \u8f93\u51fa\u6837\u4f8b Yes 2 3","title":"\u4f8b2.\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_5","text":"C\u548cQ1\u64cd\u4f5c\u4e3a\u5e76\u67e5\u96c6\u57fa\u672c\u64cd\u4f5c\uff0cQ2\u64cd\u4f5c\u8981\u6c42\u77e5\u9053\u4e0ea\u6709\u76f8\u540c\u6839\u8282\u70b9\u7684\u8282\u70b9\u6240\u6784\u6210\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u5728\u6bcf\u6b21join\u64cd\u4f5c\u65f6\u66f4\u65b0\u96c6\u5408\u5927\u5c0f\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_6","text":"#include <iostream> using namespace std ; const int N = 100010 ; int n , m ; int p [ N ] , psize [ N ]; // psize\u5b58\u96c6\u5408\u5927\u5c0f int find ( int x ) { if ( p [ x ] != x ) p [ x ] = find ( p [ x ]); return p [ x ]; } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = i ; psize [ i ] = 1 ; } while ( m -- ) { string op ; int a , b ; cin >> op ; if ( op == \"C\" ) { cin >> a >> b ; if ( find ( a ) == find ( b )) continue ; psize [ find ( b )] += psize [ find ( a )]; p [ find ( a )] = find ( b ); } else if ( op == \"Q1\" ) { cin >> a >> b ; if ( find ( a ) == find ( b )) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } else { cin >> a ; cout << psize [ find ( a )] << endl ; } } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u52a8\u7269\u738b\u56fd\u4e2d\u6709\u4e09\u7c7b\u52a8\u7269 A,B,C\uff0c\u8fd9\u4e09\u7c7b\u52a8\u7269\u7684\u98df\u7269\u94fe\u6784\u6210\u4e86\u6709\u8da3\u7684\u73af\u5f62\u3002 A \u5403 B\uff0cB \u5403 C\uff0cC \u5403 A\u3002 \u73b0\u6709 N \u4e2a\u52a8\u7269\uff0c\u4ee5 1\u223cN \u7f16\u53f7\u3002 \u6bcf\u4e2a\u52a8\u7269\u90fd\u662f A,B,C \u4e2d\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5b83\u5230\u5e95\u662f\u54ea\u4e00\u79cd\u3002 \u6709\u4eba\u7528\u4e24\u79cd\u8bf4\u6cd5\u5bf9\u8fd9 N \u4e2a\u52a8\u7269\u6240\u6784\u6210\u7684\u98df\u7269\u94fe\u5173\u7cfb\u8fdb\u884c\u63cf\u8ff0\uff1a \u7b2c\u4e00\u79cd\u8bf4\u6cd5\u662f 1 X Y\uff0c\u8868\u793a X \u548c Y \u662f\u540c\u7c7b\u3002 \u7b2c\u4e8c\u79cd\u8bf4\u6cd5\u662f 2 X Y\uff0c\u8868\u793a X \u5403 Y\u3002 \u6b64\u4eba\u5bf9 N \u4e2a\u52a8\u7269\uff0c\u7528\u4e0a\u8ff0\u4e24\u79cd\u8bf4\u6cd5\uff0c\u4e00\u53e5\u63a5\u4e00\u53e5\u5730\u8bf4\u51fa K \u53e5\u8bdd\uff0c\u8fd9 K \u53e5\u8bdd\u6709\u7684\u662f\u771f\u7684\uff0c\u6709\u7684\u662f\u5047\u7684\u3002 \u5f53\u4e00\u53e5\u8bdd\u6ee1\u8db3\u4e0b\u5217\u4e09\u6761\u4e4b\u4e00\u65f6\uff0c\u8fd9\u53e5\u8bdd\u5c31\u662f\u5047\u8bdd\uff0c\u5426\u5219\u5c31\u662f\u771f\u8bdd\u3002 \u5f53\u524d\u7684\u8bdd\u4e0e\u524d\u9762\u7684\u67d0\u4e9b\u771f\u7684\u8bdd\u51b2\u7a81\uff0c\u5c31\u662f\u5047\u8bdd\uff1b \u5f53\u524d\u7684\u8bdd\u4e2d X \u6216 Y \u6bd4 N \u5927\uff0c\u5c31\u662f\u5047\u8bdd\uff1b \u5f53\u524d\u7684\u8bdd\u8868\u793a X \u5403 X\uff0c\u5c31\u662f\u5047\u8bdd\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u6839\u636e\u7ed9\u5b9a\u7684 N \u548c K \u53e5\u8bdd\uff0c\u8f93\u51fa\u5047\u8bdd\u7684\u603b\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570 N \u548c K\uff0c\u4ee5\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 \u4ee5\u4e0b K \u884c\u6bcf\u884c\u662f\u4e09\u4e2a\u6b63\u6574\u6570 D\uff0cX\uff0cY\uff0c\u4e24\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u5176\u4e2d D \u8868\u793a\u8bf4\u6cd5\u7684\u79cd\u7c7b\u3002 \u82e5 D=1\uff0c\u5219\u8868\u793a X \u548c Y \u662f\u540c\u7c7b\u3002 \u82e5 D=2\uff0c\u5219\u8868\u793a X \u5403 Y\u3002 \u8f93\u51fa\u683c\u5f0f \u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5047\u8bdd\u7684\u6570\u76ee\u3002 \u6570\u636e\u8303\u56f4 1\u2264N\u226450000, 1\u2264N\u226450000, 0\u2264K\u2264100000 0\u2264K\u2264100000 \u8f93\u5165\u6837\u4f8b 100 7 1 101 1 2 1 2 2 2 3 2 3 3 1 1 3 2 3 1 1 5 5 \u8f93\u51fa\u6837\u4f8b 3","title":"\u4f8b3.\u98df\u7269\u94fe"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_7","text":"\u89e3\u6cd51:\u82e5x\u548cy\u5df2\u7ecf\u786e\u5b9a\u5173\u7cfb\uff0c\u5219x\u548cy\u5df2\u7ecf\u6709\u4e86\u76f8\u540c\u7684\u6839\u8282\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4x\u548cy\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u6765\u5224\u65ad\u4ed6\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5bf93\u53d6\u4f59\u540e\u8ddd\u79bb\u53d6\u503c\u4e3a0\uff0c1\uff0c2\uff0c\u5206\u522b\u5bf9\u5e94 x\u548cy\u540c\u7c7b \uff0c x\u5403y \uff0c y\u5403x \u4e09\u79cd\u72b6\u6001\uff0c\u82e5\u6839\u8282\u70b9\u76f8\u540c\uff0c\u5224\u65ad\u8ddd\u79bb\uff0c\u82e5\u4e0d\u76f8\u540c\uff0c\u5219\u5408\u5e76\u5373\u53ef \u89e3\u6cd52:\u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c\u5f00\u4e09\u500d\u7a7a\u95f4\uff0c\u4ee4 1-n \u4e3a\u540c\u7c7b\u57df\uff0c n+1-2n \u4e3a\u6355\u98df\u57df\uff0c 2n+1-3n \u4e3a\u5929\u654c\u57df\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\u540c\u65f6\u7ef4\u62a4\u4e09\u4e2a\u57df\uff0c\u4f8b\u5982x\u5403y\uff0c\u5219\u5728x\u7684\u6355\u98df\u57df\u4e2d\u52a0\u5165y\uff0c\u5728y\u7684\u5929\u654c\u57df\u4e2d\u52a0\u5165x\uff0c\u540c\u65f6\u5728y\u7684\u6355\u98df\u57df\u662f\u6355\u98dfx\u7684\u5929\u654c\u57df\u3002","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E5%9F%BA%E7%A1%80%E7%AF%87/#_8","text":"// \u89e3\u6cd51 #include <iostream> using namespace std ; const int N = 50010 ; int n , m ; int p [ N ], d [ N ]; int find ( int x ) { if ( p [ x ] != x ) { int t = find ( p [ x ]); d [ x ] += d [ p [ x ]]; p [ x ] = t ; } return p [ x ]; } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) p [ i ] = i ; int res = 0 ; while ( m -- ) { int t , x , y ; scanf ( \"%d%d%d\" , & t , & x , & y ); if ( x > n || y > n ) res ++ ; else { int px = find ( x ), py = find ( y ); if ( t == 1 ) { if ( px == py && ( d [ x ] - d [ y ]) % 3 ) res ++ ; else if ( px != py ) { p [ px ] = py ; d [ px ] = d [ y ] - d [ x ]; } } else { if ( px == py && ( d [ x ] - d [ y ] - 1 ) % 3 ) res ++ ; else if ( px != py ) { p [ px ] = py ; d [ px ] = d [ y ] + 1 - d [ x ]; } } } } printf ( \"%d \\n \" , res ); return 0 ; } // \u89e3\u6cd52 //\u8fd9\u91cc\u6211\u4eec\u5c06\u4e09\u4e2a\u57df,\u5206\u522b\u8f6c\u5316\u4e3a\u4e86n,n+n,n+n+n.\u56e0\u4e3a\u8bfb\u5165\u65b9\u9762\u7279\u522b\u70e6. #include <bits/stdc++.h> using namespace std ; int fa [ 200000 ]; int n , m , k , x , y , ans ; int get ( int x ) { if ( x == fa [ x ]) return x ; return fa [ x ] = get ( fa [ x ]); } void merge ( int x , int y ) { fa [ get ( x )] = get ( y ); } int main () { cin >> n >> m ; for ( int i = 1 ; i <= 3 * n ; i ++ ) fa [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d%d\" , & k , & x , & y ); if ( x > n || y > n ) ans ++ ; else if ( k == 1 ) { if ( get ( x ) == get ( y + n ) || get ( x ) == get ( y + n + n )) //\u5982\u679cx,y\u662f\u540c\u7c7b,\u4f46\u662fx\u662fy\u7684\u6355\u98df\u4e2d\u7684\u52a8\u7269,\u6216\u8005x\u662fy\u5929\u654c\u4e2d\u7684\u52a8\u7269,\u90a3\u4e48\u9519\u8bef. ans ++ ; else { merge ( x , y ); merge ( x + n , y + n ); merge ( x + n + n , y + n + n ); } } else { if ( x == y || get ( x ) == get ( y ) || get ( x ) == get ( y + n )) //x\u5c31\u662fy,\u6216\u8005\u4ed6\u4eec\u662f\u540c\u7c7b,\u518d\u6216\u8005\u662fy\u7684\u540c\u7c7b\u4e2d\u6709x ans ++ ; //\u90fd\u662f\u5047\u8bdd else { merge ( x , y + n + n ); //y\u7684\u5929\u654c\u57df\u52a0\u5165x merge ( x + n , y ); //x\u7684\u6355\u98df\u57df\u52a0\u5165y merge ( x + n + n , y + n ); //x\u7684\u5929\u654c\u57df\u662fy\u7684\u6355\u98df\u57df. } } } cout << ans << endl ; } //x\u662f\u540c\u7c7b\u57df. //x+n\u662f\u6355\u98df\u57df //x+n+n\u662f\u5929\u654c\u57df","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/","text":"\u6982\u8ff0 \u00b6 \u4e3b\u8981\u8bb2\u89e3\u5404\u79cd\u5e76\u67e5\u96c6\u7684\u4f8b\u9898 \u4f8b1.\u683c\u5b50\u6e38\u620f \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Alice\u548cBob\u73a9\u4e86\u4e00\u4e2a\u53e4\u8001\u7684\u6e38\u620f\uff1a\u9996\u5148\u753b\u4e00\u4e2a n\u00d7n \u7684\u70b9\u9635\uff08\u4e0b\u56fe n=3 \uff09\u3002 \u63a5\u7740\uff0c\u4ed6\u4eec\u4e24\u4e2a\u8f6e\u6d41\u5728\u76f8\u90bb\u7684\u70b9\u4e4b\u95f4\u753b\u4e0a\u7ea2\u8fb9\u548c\u84dd\u8fb9\uff1a \u76f4\u5230\u56f4\u6210\u4e00\u4e2a\u5c01\u95ed\u7684\u5708\uff08\u9762\u79ef\u4e0d\u5fc5\u4e3a 1\uff09\u4e3a\u6b62\uff0c\u201c\u5c01\u5708\u201d\u7684\u90a3\u4e2a\u4eba\u5c31\u662f\u8d62\u5bb6\u3002\u56e0\u4e3a\u68cb\u76d8\u5b9e\u5728\u662f\u592a\u5927\u4e86\uff0c\u4ed6\u4eec\u7684\u6e38\u620f\u5b9e\u5728\u662f\u592a\u957f\u4e86\uff01 \u4ed6\u4eec\u751a\u81f3\u5728\u6e38\u620f\u4e2d\u90fd\u4e0d\u77e5\u9053\u8c01\u8d62\u5f97\u4e86\u6e38\u620f\u3002 \u4e8e\u662f\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5e2e\u52a9\u4ed6\u4eec\u8ba1\u7b97\u4ed6\u4eec\u662f\u5426\u7ed3\u675f\u4e86\u6e38\u620f\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 n \u548c m\u3002n\u8868\u793a\u70b9\u9635\u7684\u5927\u5c0f\uff0cm \u8868\u793a\u4e00\u5171\u753b\u4e86 m \u6761\u7ebf\u3002 \u4ee5\u540e m \u884c\uff0c\u6bcf\u884c\u9996\u5148\u6709\u4e24\u4e2a\u6570\u5b57 (x,y)\uff0c\u4ee3\u8868\u4e86\u753b\u7ebf\u7684\u8d77\u70b9\u5750\u6807\uff0c\u63a5\u7740\u7528\u7a7a\u683c\u9694\u5f00\u4e00\u4e2a\u5b57\u7b26\uff0c\u5047\u5982\u5b57\u7b26\u662f D\uff0c\u5219\u662f\u5411\u4e0b\u8fde\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u662f R \u5c31\u662f\u5411\u53f3\u8fde\u4e00\u6761\u8fb9\u3002 \u8f93\u5165\u6570\u636e\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u8fb9\u4e14\u4fdd\u8bc1\u6b63\u786e\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u884c\uff1a\u5728\u7b2c\u51e0\u6b65\u7684\u65f6\u5019\u7ed3\u675f\u3002 \u5047\u5982 m \u6b65\u4e4b\u540e\u4e5f\u6ca1\u6709\u7ed3\u675f\uff0c\u5219\u8f93\u51fa\u4e00\u884c\u201cdraw\u201d\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264200\uff0c 1\u2264n\u2264200\uff0c 1\u2264m\u226424000 1\u2264m\u226424000 \u8f93\u5165\u6837\u4f8b 3 5 1 1 D 1 1 R 1 2 D 2 1 R 2 2 D \u8f93\u51fa\u6837\u4f8b 4 \u9898\u89e3 \u00b6 \u5c06\u4e8c\u7ef4\u7684\u70b9\u6620\u5c04\u6210\u4e00\u7ef4\uff0c\u82e5\u4e24\u70b9\u8fde\u7ebf\uff0c\u5219\u6709\u76f8\u540c\u7684\u6839\u8282\u70b9\uff0c\u6bcf\u6b21\u5224\u65ad\u5373\u53ef \u4ee3\u7801 \u00b6 #include <iostream> #include <cstring> #include <algorithm> using namespace std ; const int N = 40005 ; int n , m ; int a , b ; char op ; int pre [ N ]; int find ( int x ) { return pre [ x ] == x ? x : pre [ x ] = find ( pre [ x ]); } void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; } int get ( int x , int y ) { return ( x -1 ) * n + y ; } int main () { cin >> n >> m ; init ( n * n ); int cnt = 0 ; bool flag = false ; while ( m -- ) { cnt ++ ; cin >> a >> b >> op ; int cur = get ( a , b ); int tmp ; if ( op == 'D' ) tmp = get ( a + 1 , b ); else tmp = get ( a , b + 1 ); if ( find ( cur ) == find ( tmp )) { cout << cnt << endl ; flag = true ; break ; } else { int fx = find ( cur ); int fy = find ( tmp ); pre [ fx ] = fy ; } } if ( ! flag ) cout << \"draw\" << endl ; return 0 ; } \u4f8b2.\u642d\u914d\u8d2d\u4e70 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Joe\u89c9\u5f97\u4e91\u6735\u5f88\u7f8e\uff0c\u51b3\u5b9a\u53bb\u5c71\u4e0a\u7684\u5546\u5e97\u4e70\u4e00\u4e9b\u4e91\u6735\u3002 \u5546\u5e97\u91cc\u6709 n \u6735\u4e91\uff0c\u4e91\u6735\u88ab\u7f16\u53f7\u4e3a 1,2,\u2026,n\uff0c\u5e76\u4e14\u6bcf\u6735\u4e91\u90fd\u6709\u4e00\u4e2a\u4ef7\u503c\u3002 \u4f46\u662f\u5546\u5e97\u8001\u677f\u8ddf\u4ed6\u8bf4\uff0c\u4e00\u4e9b\u4e91\u6735\u8981\u642d\u914d\u6765\u4e70\u624d\u597d\uff0c\u6240\u4ee5\u4e70\u4e00\u6735\u4e91\u5219\u4e0e\u8fd9\u6735\u4e91\u6709\u642d\u914d\u7684\u4e91\u90fd\u8981\u4e70\u3002 \u4f46\u662fJoe\u7684\u94b1\u6709\u9650\uff0c\u6240\u4ee5\u4ed6\u5e0c\u671b\u4e70\u7684\u4ef7\u503c\u8d8a\u591a\u8d8a\u597d\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c 1 \u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n\uff0cm\uff0cw\uff0c\u8868\u793a\u6709 n \u6735\u4e91\uff0cm \u4e2a\u642d\u914d\uff0cJoe\u6709 w \u7684\u94b1\u3002 \u7b2c 2\u223cn+1\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 ci\uff0cdi \u8868\u793a i \u6735\u4e91\u7684\u4ef7\u94b1\u548c\u4ef7\u503c\u3002 \u7b2c n+2\u223cn+1+m \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 ui\uff0cvi\uff0c\u8868\u793a\u4e70 ui \u5c31\u5fc5\u987b\u4e70 vi\uff0c\u540c\u7406\uff0c\u5982\u679c\u4e70 vi \u5c31\u5fc5\u987b\u4e70 ui\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\uff0c\u8868\u793a\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226410000, 1\u2264n\u226410000, 0\u2264m\u22645000, 0\u2264m\u22645000, 1\u2264w\u226410000, 1\u2264w\u226410000, 1\u2264ci\u22645000, 1\u2264ci\u22645000, 1\u2264di\u2264100, 1\u2264di\u2264100, 1\u2264ui,vi\u2264n 1\u2264ui,vi\u2264n \u8f93\u5165\u6837\u4f8b 5 3 10 3 10 3 10 3 10 5 100 10 1 1 3 3 2 4 2 \u8f93\u51fa\u6837\u4f8b 1 \u9898\u89e3 \u00b6 \u5c06\u5fc5\u987b\u4e70\u7684\u7269\u54c1\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5fc5\u987b\u4e70\u7684\u7269\u54c1\u76f8\u5f53\u4e8e\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u5bf9\u6240\u6709\u7684\u8054\u901a\u5757\u8fdb\u884c01\u80cc\u5305\u5373\u53ef \u4ee3\u7801 \u00b6 #include <iostream> #include <cstring> #include <algorithm> using namespace std ; const int N = 10005 ; int dp [ N ]; int n , m , w ; int pre [ N ], sumc [ N ], sumd [ N ]; int c [ N ], d [ N ]; int u , v ; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { pre [ i ] = i ; sumc [ i ] = c [ i ]; sumd [ i ] = d [ i ]; } } int find ( int x ) { return pre [ x ] == x ? x : pre [ x ] = find ( pre [ x ]); } int main () { cin >> n >> m >> w ; for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ] >> d [ i ]; init ( n ); while ( m -- ) { cin >> u >> v ; if ( find ( u ) != find ( v )) { int fx = find ( u ); int fy = find ( v ); pre [ fx ] = fy ; sumc [ fy ] += sumc [ fx ]; sumd [ fy ] += sumd [ fx ]; } } memset ( c , 0 , sizeof ( c )); memset ( d , 0 , sizeof ( d )); int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( pre [ i ] == i ) { c [ ++ cnt ] = sumc [ i ]; d [ cnt ] = sumd [ i ]; } } for ( int i = 1 ; i <= cnt ; i ++ ) { for ( int j = w ; j >= c [ i ]; j -- ) { dp [ j ] = max ( dp [ j ], dp [ j - c [ i ]] + d [ i ]); } } cout << dp [ w ] << endl ; return 0 ; } \u4f8b3.\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u6709\u4e00\u4e2a\u5212\u5206\u4e3a N \u5217\u7684\u661f\u9645\u6218\u573a\uff0c\u5404\u5217\u4f9d\u6b21\u7f16\u53f7\u4e3a 1,2,\u2026,N\u3002 \u6709 N \u8258\u6218\u8230\uff0c\u4e5f\u4f9d\u6b21\u7f16\u53f7\u4e3a 1,2,\u2026,N\uff0c\u5176\u4e2d\u7b2c i \u53f7\u6218\u8230\u5904\u4e8e\u7b2c i \u5217\u3002 \u6709 T \u6761\u6307\u4ee4\uff0c\u6bcf\u6761\u6307\u4ee4\u683c\u5f0f\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u4e4b\u4e00\uff1a M i j \uff0c\u8868\u793a\u8ba9\u7b2c i \u53f7\u6218\u8230\u6240\u5728\u5217\u7684\u5168\u90e8\u6218\u8230\u4fdd\u6301\u539f\u6709\u987a\u5e8f\uff0c\u63a5\u5728\u7b2c j \u53f7\u6218\u8230\u6240\u5728\u5217\u7684\u5c3e\u90e8\u3002 C i j \uff0c\u8868\u793a\u8be2\u95ee\u7b2c i \u53f7\u6218\u8230\u4e0e\u7b2c j \u53f7\u6218\u8230\u5f53\u524d\u662f\u5426\u5904\u4e8e\u540c\u4e00\u5217\u4e2d\uff0c\u5982\u679c\u5728\u540c\u4e00\u5217\u4e2d\uff0c\u5b83\u4eec\u4e4b\u95f4\u95f4\u9694\u4e86\u591a\u5c11\u8258\u6218\u8230\u3002 \u73b0\u5728\u9700\u8981\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5904\u7406\u4e00\u7cfb\u5217\u7684\u6307\u4ee4\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 T\uff0c\u8868\u793a\u5171\u6709 T \u6761\u6307\u4ee4\u3002 \u63a5\u4e0b\u6765 T \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6307\u4ee4\uff0c\u6307\u4ee4\u6709\u4e24\u79cd\u5f62\u5f0f\uff1aM i j \u6216 C i j\u3002 \u5176\u4e2d M \u548c C \u4e3a\u5927\u5199\u5b57\u6bcd\u8868\u793a\u6307\u4ee4\u7c7b\u578b\uff0ci \u548c j \u4e3a\u6574\u6570\uff0c\u8868\u793a\u6307\u4ee4\u6d89\u53ca\u7684\u6218\u8230\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u4f60\u7684\u7a0b\u5e8f\u5e94\u5f53\u4f9d\u6b21\u5bf9\u8f93\u5165\u7684\u6bcf\u4e00\u6761\u6307\u4ee4\u8fdb\u884c\u5206\u6790\u548c\u5904\u7406\uff1a \u5982\u679c\u662f M i j \u5f62\u5f0f\uff0c\u5219\u8868\u793a\u8230\u961f\u6392\u5217\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u4e0d\u8981\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\uff1b \u5982\u679c\u662f C i j \u5f62\u5f0f\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u8f93\u51fa\u4e00\u884c\uff0c\u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5728\u540c\u4e00\u5217\u4e0a\uff0c\u7b2c i \u53f7\u6218\u8230\u4e0e\u7b2c j \u53f7\u6218\u8230\u4e4b\u95f4\u5e03\u7f6e\u7684\u6218\u8230\u6570\u76ee\uff0c\u5982\u679c\u7b2c i \u53f7\u6218\u8230\u4e0e\u7b2c j \u53f7\u6218\u8230\u5f53\u524d\u4e0d\u5728\u540c\u4e00\u5217\u4e0a\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u6570\u636e\u8303\u56f4 N\u226430000,T\u2264500000 N\u226430000,T\u2264500000 \u8f93\u5165\u6837\u4f8b 4 M 2 3 C 1 2 M 2 4 C 4 2 \u8f93\u51fa\u6837\u4f8b -1 1 \u9898\u89e3 \u00b6 \u5e76\u67e5\u96c6\u53ef\u4ee5\u7528\u4e8e\u7ef4\u62a4\u5177\u6709\u4f20\u9012\u6027\u5173\u7cfb\u7684\u4f5c\u7528\uff0c\u6bcf\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u7ed1\u5b9a\u5230\u6839\u7ed3\u70b9\u4e0a\uff0c\u6bcf\u4e2a\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8ddd\u79bb\uff0c\u7ed1\u5b9a\u5230\u6bcf\u4e2a\u5143\u7d20\u7684\u7ed3\u70b9\u4e0a \u53ef\u4ee5\u5728find\u7684\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u5f53\u524d\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb(d[x])\u4e0e\u96c6\u5408\u5927\u5c0f(sz[x])\uff0c\u5177\u4f53\u66f4\u65b0\u89c1\u4ee3\u7801 \u9898\u76ee\u95ee\u7684\u662f\u4e24\u6761\u8239\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64\u6709\u4e24\u79cd\u60c5\u51b5 a==b :0 a!=b :abs(d[a] - d[b]) - 1; \u4ee3\u7801 \u00b6 #include <iostream> using namespace std ; const int N = 30005 ; int pre [ N ]; int d [ N ], sz [ N ]; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { pre [ i ] = i ; sz [ i ] = 1 ; } } int find ( int x ) { if ( pre [ x ] == x ) return x ; int root = find ( pre [ x ]); d [ x ] += d [ pre [ x ]]; // d\u8868\u793a\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u9700\u8981\u52a0\u4e0a\u7236\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb return pre [ x ] = root ; } void solve () { int t ; char op ; int x , y ; cin >> t ; init ( N -5 ); while ( t -- ) { cin >> op >> x >> y ; int fx = find ( x ), fy = find ( y ); if ( op == 'M' ) { pre [ fx ] = fy ; // \u66f4\u65b0\u6839\u8282\u70b9 d [ fx ] = sz [ fy ]; // \u7531\u4e8e\u662f\u63a5\u5728\u672b\u5c3e\uff0cx\u7684\u6839\u8282\u70b9\u5230y\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u4e3a\u539fy\u96c6\u5408\u7684\u5927\u5c0f sz [ fy ] += sz [ fx ]; // y\u96c6\u5408\u5927\u5c0f\u589e\u52a0x\u96c6\u5408\u7684\u5927\u5c0f } else { if ( fx != fy ) cout << \"-1\" << endl ; else { cout << max ( 0 , abs ( d [ x ] - d [ y ]) -1 ) << endl ; } } } } int main () { solve (); return 0 ; } \u4f8b4.\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728\u5b9e\u73b0\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u5224\u5b9a\u4e00\u4e9b\u7ea6\u675f\u6761\u4ef6\u662f\u5426\u80fd\u88ab\u540c\u65f6\u6ee1\u8db3\u3002 \u8003\u8651\u4e00\u4e2a\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\u7684\u7b80\u5316\u7248\u672c\uff1a\u5047\u8bbe x1,x2,x3,\u2026 \u4ee3\u8868\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u53d8\u91cf\uff0c\u7ed9\u5b9a n \u4e2a\u5f62\u5982 xi=xj \u6216 xi\u2260xj \u7684\u53d8\u91cf\u76f8\u7b49/\u4e0d\u7b49\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u8bf7\u5224\u5b9a\u662f\u5426\u53ef\u4ee5\u5206\u522b\u4e3a\u6bcf\u4e00\u4e2a\u53d8\u91cf\u8d4b\u4e88\u6070\u5f53\u7684\u503c\uff0c\u4f7f\u5f97\u4e0a\u8ff0\u6240\u6709\u7ea6\u675f\u6761\u4ef6\u540c\u65f6\u88ab\u6ee1\u8db3\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u95ee\u9898\u4e2d\u7684\u7ea6\u675f\u6761\u4ef6\u4e3a\uff1ax1=x2\uff0cx2=x3\uff0cx3=x4\uff0cx1\u2260x4\uff0c\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u540c\u65f6\u88ab\u6ee1\u8db3\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u95ee\u9898\u5e94\u5224\u5b9a\u4e3a\u4e0d\u53ef\u88ab\u6ee1\u8db3\u3002 \u73b0\u5728\u7ed9\u51fa\u4e00\u4e9b\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\uff0c\u8bf7\u5206\u522b\u5bf9\u5b83\u4eec\u8fdb\u884c\u5224\u5b9a\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6587\u4ef6\u7684\u7b2c 1 \u884c\u5305\u542b 1 \u4e2a\u6b63\u6574\u6570 t\uff0c\u8868\u793a\u9700\u8981\u5224\u5b9a\u7684\u95ee\u9898\u4e2a\u6570\uff0c\u6ce8\u610f\u8fd9\u4e9b\u95ee\u9898\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u95ee\u9898\uff0c\u5305\u542b\u82e5\u5e72\u884c\uff1a \u7b2c 1 \u884c\u5305\u542b 1 \u4e2a\u6b63\u6574\u6570 n\uff0c\u8868\u793a\u8be5\u95ee\u9898\u4e2d\u9700\u8981\u88ab\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u5305\u62ec 3 \u4e2a\u6574\u6570 i,j,e\uff0c\u63cf\u8ff0 1 \u4e2a\u76f8\u7b49/\u4e0d\u7b49\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u76f8\u90bb\u6574\u6570\u4e4b\u95f4\u7528\u5355\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u82e5 e=1\uff0c\u5219\u8be5\u7ea6\u675f\u6761\u4ef6\u4e3a xi=xj\uff1b\u82e5 e=0\uff0c\u5219\u8be5\u7ea6\u675f\u6761\u4ef6\u4e3a xi\u2260xj\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6587\u4ef6\u5305\u62ec t \u884c\u3002 \u8f93\u51fa\u6587\u4ef6\u7684\u7b2c k \u884c\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 YES \u6216\u8005 NO\uff0cYES \u8868\u793a\u8f93\u5165\u4e2d\u7684\u7b2c k \u4e2a\u95ee\u9898\u5224\u5b9a\u4e3a\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0cNO \u8868\u793a\u4e0d\u53ef\u88ab\u6ee1\u8db3\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264105 1\u2264n\u2264105 1\u2264i,j\u2264109 1\u2264i,j\u2264109 \u8f93\u5165\u6837\u4f8b 2 2 1 2 1 1 2 0 2 1 2 1 2 1 1 \u8f93\u51fa\u6837\u4f8b NO YES \u9898\u89e3 \u00b6 \u9996\u5148\u53d1\u73b0\u6570\u636e\u8303\u56f4\u8fc7\u5927\uff0c\u79bb\u6563\u5316\uff0c\u5408\u5e76\u64cd\u4f5c\u5728\u5224\u65ad\u64cd\u4f5c\u4e4b\u524d\u8fdb\u884c\uff0c\u79bb\u7ebf\u64cd\u4f5c\u540e\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u548c\u5224\u65ad\u5373\u53ef \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int ini [ N ], inj [ N ]; int pre [ 2 * N ]; int e [ N ]; int a [ 2 * N + 5 ]; int n ; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; } int find ( int x ) { return pre [ x ] == x ? x : pre [ x ] = find ( pre [ x ]); } signed main () { int t ; cin >> t ; while ( t -- ) { cin >> n ; int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> ini [ i ] >> inj [ i ] >> e [ i ]; a [ ++ cnt ] = ini [ i ]; a [ ++ cnt ] = inj [ i ]; } sort ( a + 1 , a + cnt + 1 ); int len = unique ( a + 1 , a + cnt + 1 ) - a -1 ; init ( len ); //cout<<len<<endl; bool flag = true ; for ( int i = 1 ; i <= n ; i ++ ) { ini [ i ] = lower_bound ( a + 1 , a + len + 1 , ini [ i ]) - a ; inj [ i ] = lower_bound ( a + 1 , a + len + 1 , inj [ i ]) - a ; int fx = find ( ini [ i ]), fy = find ( inj [ i ]); if ( e [ i ]) { if ( fx != fy ) { pre [ fx ] = fy ; } } } //for(int i=1;i<=n;i++) cout<<ini[i]<<\" \"<<inj[i]<<endl; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! e [ i ]) { int fx = find ( ini [ i ]), fy = find ( inj [ i ]); if ( fx == fy ) { flag = false ; break ; } } } if ( flag ) cout << \"YES\" << endl ; else cout << \"NO\" << endl ; } return 0 ; } \u4f8b5.Graph Destruction \u00b6 \u9898\u76ee\u94fe\u63a5 \u9898\u89e3 \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u6709n\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0c\u4f9d\u6b21\u5220\u96641-n\u8282\u70b9\uff0c\u8f93\u51fa\u6bcf\u6b21\u5220\u9664\u540e\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u6211\u4eec\u77e5\u9053\u5e76\u67e5\u96c6\u80fd\u5f88\u5bb9\u6613\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u4f46\u5bf9\u4e8e\u5206\u88c2\u64cd\u4f5c\u5f88\u96be\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5012\u7740\u8003\u8651\uff0c\u4ece\u7f16\u53f7\u6700\u5927\u7684\u70b9\u5f00\u59cb\u4f9d\u6b21\u52a0\u70b9\u5408\u5e76\uff0c\u79bb\u7ebf\u5012\u7740\u5904\u7406\u6240\u6709\u7684\u7b54\u6848\u7136\u540e\u8f93\u51fa\u5c31\u884c\u4e86\uff0c\u6211\u4eec\u6bcf\u6b21\u52a0\u70b9\u5b9e\u9645\u5224\u65ad\u7684\u662f\u7f16\u53f7\u6bd4\u81ea\u5df1\u5927\u7684\u70b9\u7684\u8054\u901a\u60c5\u51b5\uff0c\u800c\u9898\u76ee\u4fdd\u8bc1\u4e86 a_i \\lt b_i a_i \\lt b_i \uff0c\u56e0\u6b64\u5efa\u5355\u5411\u8fb9\u5373\u53ef\u3002 \u4ee3\u7801 \u00b6 #include <bits/stdc++.h> using namespace std ; const int N = 2e5 + 5 ; int e [ N ], ne [ N ], head [ N ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n , m ; int res [ N ]; int pre [ N ]; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; } int find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = find ( pre [ x ]); } bool vis [ N ]; int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); cin >> n >> m ; init ( n ); memset ( head , -1 , sizeof ( head )); int tmp = 0 ; for ( int i = 1 ; i <= m ; i ++ ){ int a , b ; cin >> a >> b ; add ( a , b ); } for ( int i = n ; i >= 1 ; i -- ) { tmp ++ ; for ( int j = head [ i ]; j != -1 ; j = ne [ j ]) { int k = e [ j ]; int fx = find ( i ); int fy = find ( k ); if ( fx != fy ) pre [ fy ] = fx , tmp -- ; } res [ i - 1 ] = tmp ; } for ( int i = 1 ; i <= n ; i ++ ) cout << res [ i ] << endl ; return 0 ; }","title":"\u5e76\u67e5\u96c6 \u63d0\u9ad8\u7bc7"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_1","text":"\u4e3b\u8981\u8bb2\u89e3\u5404\u79cd\u5e76\u67e5\u96c6\u7684\u4f8b\u9898","title":"\u6982\u8ff0"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#1","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Alice\u548cBob\u73a9\u4e86\u4e00\u4e2a\u53e4\u8001\u7684\u6e38\u620f\uff1a\u9996\u5148\u753b\u4e00\u4e2a n\u00d7n \u7684\u70b9\u9635\uff08\u4e0b\u56fe n=3 \uff09\u3002 \u63a5\u7740\uff0c\u4ed6\u4eec\u4e24\u4e2a\u8f6e\u6d41\u5728\u76f8\u90bb\u7684\u70b9\u4e4b\u95f4\u753b\u4e0a\u7ea2\u8fb9\u548c\u84dd\u8fb9\uff1a \u76f4\u5230\u56f4\u6210\u4e00\u4e2a\u5c01\u95ed\u7684\u5708\uff08\u9762\u79ef\u4e0d\u5fc5\u4e3a 1\uff09\u4e3a\u6b62\uff0c\u201c\u5c01\u5708\u201d\u7684\u90a3\u4e2a\u4eba\u5c31\u662f\u8d62\u5bb6\u3002\u56e0\u4e3a\u68cb\u76d8\u5b9e\u5728\u662f\u592a\u5927\u4e86\uff0c\u4ed6\u4eec\u7684\u6e38\u620f\u5b9e\u5728\u662f\u592a\u957f\u4e86\uff01 \u4ed6\u4eec\u751a\u81f3\u5728\u6e38\u620f\u4e2d\u90fd\u4e0d\u77e5\u9053\u8c01\u8d62\u5f97\u4e86\u6e38\u620f\u3002 \u4e8e\u662f\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5e2e\u52a9\u4ed6\u4eec\u8ba1\u7b97\u4ed6\u4eec\u662f\u5426\u7ed3\u675f\u4e86\u6e38\u620f\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 n \u548c m\u3002n\u8868\u793a\u70b9\u9635\u7684\u5927\u5c0f\uff0cm \u8868\u793a\u4e00\u5171\u753b\u4e86 m \u6761\u7ebf\u3002 \u4ee5\u540e m \u884c\uff0c\u6bcf\u884c\u9996\u5148\u6709\u4e24\u4e2a\u6570\u5b57 (x,y)\uff0c\u4ee3\u8868\u4e86\u753b\u7ebf\u7684\u8d77\u70b9\u5750\u6807\uff0c\u63a5\u7740\u7528\u7a7a\u683c\u9694\u5f00\u4e00\u4e2a\u5b57\u7b26\uff0c\u5047\u5982\u5b57\u7b26\u662f D\uff0c\u5219\u662f\u5411\u4e0b\u8fde\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u662f R \u5c31\u662f\u5411\u53f3\u8fde\u4e00\u6761\u8fb9\u3002 \u8f93\u5165\u6570\u636e\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u8fb9\u4e14\u4fdd\u8bc1\u6b63\u786e\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u884c\uff1a\u5728\u7b2c\u51e0\u6b65\u7684\u65f6\u5019\u7ed3\u675f\u3002 \u5047\u5982 m \u6b65\u4e4b\u540e\u4e5f\u6ca1\u6709\u7ed3\u675f\uff0c\u5219\u8f93\u51fa\u4e00\u884c\u201cdraw\u201d\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264200\uff0c 1\u2264n\u2264200\uff0c 1\u2264m\u226424000 1\u2264m\u226424000 \u8f93\u5165\u6837\u4f8b 3 5 1 1 D 1 1 R 1 2 D 2 1 R 2 2 D \u8f93\u51fa\u6837\u4f8b 4","title":"\u4f8b1.\u683c\u5b50\u6e38\u620f"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_2","text":"\u5c06\u4e8c\u7ef4\u7684\u70b9\u6620\u5c04\u6210\u4e00\u7ef4\uff0c\u82e5\u4e24\u70b9\u8fde\u7ebf\uff0c\u5219\u6709\u76f8\u540c\u7684\u6839\u8282\u70b9\uff0c\u6bcf\u6b21\u5224\u65ad\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_3","text":"#include <iostream> #include <cstring> #include <algorithm> using namespace std ; const int N = 40005 ; int n , m ; int a , b ; char op ; int pre [ N ]; int find ( int x ) { return pre [ x ] == x ? x : pre [ x ] = find ( pre [ x ]); } void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; } int get ( int x , int y ) { return ( x -1 ) * n + y ; } int main () { cin >> n >> m ; init ( n * n ); int cnt = 0 ; bool flag = false ; while ( m -- ) { cnt ++ ; cin >> a >> b >> op ; int cur = get ( a , b ); int tmp ; if ( op == 'D' ) tmp = get ( a + 1 , b ); else tmp = get ( a , b + 1 ); if ( find ( cur ) == find ( tmp )) { cout << cnt << endl ; flag = true ; break ; } else { int fx = find ( cur ); int fy = find ( tmp ); pre [ fx ] = fy ; } } if ( ! flag ) cout << \"draw\" << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#2","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 Joe\u89c9\u5f97\u4e91\u6735\u5f88\u7f8e\uff0c\u51b3\u5b9a\u53bb\u5c71\u4e0a\u7684\u5546\u5e97\u4e70\u4e00\u4e9b\u4e91\u6735\u3002 \u5546\u5e97\u91cc\u6709 n \u6735\u4e91\uff0c\u4e91\u6735\u88ab\u7f16\u53f7\u4e3a 1,2,\u2026,n\uff0c\u5e76\u4e14\u6bcf\u6735\u4e91\u90fd\u6709\u4e00\u4e2a\u4ef7\u503c\u3002 \u4f46\u662f\u5546\u5e97\u8001\u677f\u8ddf\u4ed6\u8bf4\uff0c\u4e00\u4e9b\u4e91\u6735\u8981\u642d\u914d\u6765\u4e70\u624d\u597d\uff0c\u6240\u4ee5\u4e70\u4e00\u6735\u4e91\u5219\u4e0e\u8fd9\u6735\u4e91\u6709\u642d\u914d\u7684\u4e91\u90fd\u8981\u4e70\u3002 \u4f46\u662fJoe\u7684\u94b1\u6709\u9650\uff0c\u6240\u4ee5\u4ed6\u5e0c\u671b\u4e70\u7684\u4ef7\u503c\u8d8a\u591a\u8d8a\u597d\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c 1 \u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 n\uff0cm\uff0cw\uff0c\u8868\u793a\u6709 n \u6735\u4e91\uff0cm \u4e2a\u642d\u914d\uff0cJoe\u6709 w \u7684\u94b1\u3002 \u7b2c 2\u223cn+1\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 ci\uff0cdi \u8868\u793a i \u6735\u4e91\u7684\u4ef7\u94b1\u548c\u4ef7\u503c\u3002 \u7b2c n+2\u223cn+1+m \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 ui\uff0cvi\uff0c\u8868\u793a\u4e70 ui \u5c31\u5fc5\u987b\u4e70 vi\uff0c\u540c\u7406\uff0c\u5982\u679c\u4e70 vi \u5c31\u5fc5\u987b\u4e70 ui\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u884c\uff0c\u8868\u793a\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u226410000, 1\u2264n\u226410000, 0\u2264m\u22645000, 0\u2264m\u22645000, 1\u2264w\u226410000, 1\u2264w\u226410000, 1\u2264ci\u22645000, 1\u2264ci\u22645000, 1\u2264di\u2264100, 1\u2264di\u2264100, 1\u2264ui,vi\u2264n 1\u2264ui,vi\u2264n \u8f93\u5165\u6837\u4f8b 5 3 10 3 10 3 10 3 10 5 100 10 1 1 3 3 2 4 2 \u8f93\u51fa\u6837\u4f8b 1","title":"\u4f8b2.\u642d\u914d\u8d2d\u4e70"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_4","text":"\u5c06\u5fc5\u987b\u4e70\u7684\u7269\u54c1\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5fc5\u987b\u4e70\u7684\u7269\u54c1\u76f8\u5f53\u4e8e\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u5bf9\u6240\u6709\u7684\u8054\u901a\u5757\u8fdb\u884c01\u80cc\u5305\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_5","text":"#include <iostream> #include <cstring> #include <algorithm> using namespace std ; const int N = 10005 ; int dp [ N ]; int n , m , w ; int pre [ N ], sumc [ N ], sumd [ N ]; int c [ N ], d [ N ]; int u , v ; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { pre [ i ] = i ; sumc [ i ] = c [ i ]; sumd [ i ] = d [ i ]; } } int find ( int x ) { return pre [ x ] == x ? x : pre [ x ] = find ( pre [ x ]); } int main () { cin >> n >> m >> w ; for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ] >> d [ i ]; init ( n ); while ( m -- ) { cin >> u >> v ; if ( find ( u ) != find ( v )) { int fx = find ( u ); int fy = find ( v ); pre [ fx ] = fy ; sumc [ fy ] += sumc [ fx ]; sumd [ fy ] += sumd [ fx ]; } } memset ( c , 0 , sizeof ( c )); memset ( d , 0 , sizeof ( d )); int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( pre [ i ] == i ) { c [ ++ cnt ] = sumc [ i ]; d [ cnt ] = sumd [ i ]; } } for ( int i = 1 ; i <= cnt ; i ++ ) { for ( int j = w ; j >= c [ i ]; j -- ) { dp [ j ] = max ( dp [ j ], dp [ j - c [ i ]] + d [ i ]); } } cout << dp [ w ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#3","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u6709\u4e00\u4e2a\u5212\u5206\u4e3a N \u5217\u7684\u661f\u9645\u6218\u573a\uff0c\u5404\u5217\u4f9d\u6b21\u7f16\u53f7\u4e3a 1,2,\u2026,N\u3002 \u6709 N \u8258\u6218\u8230\uff0c\u4e5f\u4f9d\u6b21\u7f16\u53f7\u4e3a 1,2,\u2026,N\uff0c\u5176\u4e2d\u7b2c i \u53f7\u6218\u8230\u5904\u4e8e\u7b2c i \u5217\u3002 \u6709 T \u6761\u6307\u4ee4\uff0c\u6bcf\u6761\u6307\u4ee4\u683c\u5f0f\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u4e4b\u4e00\uff1a M i j \uff0c\u8868\u793a\u8ba9\u7b2c i \u53f7\u6218\u8230\u6240\u5728\u5217\u7684\u5168\u90e8\u6218\u8230\u4fdd\u6301\u539f\u6709\u987a\u5e8f\uff0c\u63a5\u5728\u7b2c j \u53f7\u6218\u8230\u6240\u5728\u5217\u7684\u5c3e\u90e8\u3002 C i j \uff0c\u8868\u793a\u8be2\u95ee\u7b2c i \u53f7\u6218\u8230\u4e0e\u7b2c j \u53f7\u6218\u8230\u5f53\u524d\u662f\u5426\u5904\u4e8e\u540c\u4e00\u5217\u4e2d\uff0c\u5982\u679c\u5728\u540c\u4e00\u5217\u4e2d\uff0c\u5b83\u4eec\u4e4b\u95f4\u95f4\u9694\u4e86\u591a\u5c11\u8258\u6218\u8230\u3002 \u73b0\u5728\u9700\u8981\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5904\u7406\u4e00\u7cfb\u5217\u7684\u6307\u4ee4\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 T\uff0c\u8868\u793a\u5171\u6709 T \u6761\u6307\u4ee4\u3002 \u63a5\u4e0b\u6765 T \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6307\u4ee4\uff0c\u6307\u4ee4\u6709\u4e24\u79cd\u5f62\u5f0f\uff1aM i j \u6216 C i j\u3002 \u5176\u4e2d M \u548c C \u4e3a\u5927\u5199\u5b57\u6bcd\u8868\u793a\u6307\u4ee4\u7c7b\u578b\uff0ci \u548c j \u4e3a\u6574\u6570\uff0c\u8868\u793a\u6307\u4ee4\u6d89\u53ca\u7684\u6218\u8230\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u4f60\u7684\u7a0b\u5e8f\u5e94\u5f53\u4f9d\u6b21\u5bf9\u8f93\u5165\u7684\u6bcf\u4e00\u6761\u6307\u4ee4\u8fdb\u884c\u5206\u6790\u548c\u5904\u7406\uff1a \u5982\u679c\u662f M i j \u5f62\u5f0f\uff0c\u5219\u8868\u793a\u8230\u961f\u6392\u5217\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u4e0d\u8981\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\uff1b \u5982\u679c\u662f C i j \u5f62\u5f0f\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u8f93\u51fa\u4e00\u884c\uff0c\u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5728\u540c\u4e00\u5217\u4e0a\uff0c\u7b2c i \u53f7\u6218\u8230\u4e0e\u7b2c j \u53f7\u6218\u8230\u4e4b\u95f4\u5e03\u7f6e\u7684\u6218\u8230\u6570\u76ee\uff0c\u5982\u679c\u7b2c i \u53f7\u6218\u8230\u4e0e\u7b2c j \u53f7\u6218\u8230\u5f53\u524d\u4e0d\u5728\u540c\u4e00\u5217\u4e0a\uff0c\u5219\u8f93\u51fa \u22121\u3002 \u6570\u636e\u8303\u56f4 N\u226430000,T\u2264500000 N\u226430000,T\u2264500000 \u8f93\u5165\u6837\u4f8b 4 M 2 3 C 1 2 M 2 4 C 4 2 \u8f93\u51fa\u6837\u4f8b -1 1","title":"\u4f8b3.\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_6","text":"\u5e76\u67e5\u96c6\u53ef\u4ee5\u7528\u4e8e\u7ef4\u62a4\u5177\u6709\u4f20\u9012\u6027\u5173\u7cfb\u7684\u4f5c\u7528\uff0c\u6bcf\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u7ed1\u5b9a\u5230\u6839\u7ed3\u70b9\u4e0a\uff0c\u6bcf\u4e2a\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8ddd\u79bb\uff0c\u7ed1\u5b9a\u5230\u6bcf\u4e2a\u5143\u7d20\u7684\u7ed3\u70b9\u4e0a \u53ef\u4ee5\u5728find\u7684\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u5f53\u524d\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb(d[x])\u4e0e\u96c6\u5408\u5927\u5c0f(sz[x])\uff0c\u5177\u4f53\u66f4\u65b0\u89c1\u4ee3\u7801 \u9898\u76ee\u95ee\u7684\u662f\u4e24\u6761\u8239\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64\u6709\u4e24\u79cd\u60c5\u51b5 a==b :0 a!=b :abs(d[a] - d[b]) - 1;","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_7","text":"#include <iostream> using namespace std ; const int N = 30005 ; int pre [ N ]; int d [ N ], sz [ N ]; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { pre [ i ] = i ; sz [ i ] = 1 ; } } int find ( int x ) { if ( pre [ x ] == x ) return x ; int root = find ( pre [ x ]); d [ x ] += d [ pre [ x ]]; // d\u8868\u793a\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u9700\u8981\u52a0\u4e0a\u7236\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb return pre [ x ] = root ; } void solve () { int t ; char op ; int x , y ; cin >> t ; init ( N -5 ); while ( t -- ) { cin >> op >> x >> y ; int fx = find ( x ), fy = find ( y ); if ( op == 'M' ) { pre [ fx ] = fy ; // \u66f4\u65b0\u6839\u8282\u70b9 d [ fx ] = sz [ fy ]; // \u7531\u4e8e\u662f\u63a5\u5728\u672b\u5c3e\uff0cx\u7684\u6839\u8282\u70b9\u5230y\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u4e3a\u539fy\u96c6\u5408\u7684\u5927\u5c0f sz [ fy ] += sz [ fx ]; // y\u96c6\u5408\u5927\u5c0f\u589e\u52a0x\u96c6\u5408\u7684\u5927\u5c0f } else { if ( fx != fy ) cout << \"-1\" << endl ; else { cout << max ( 0 , abs ( d [ x ] - d [ y ]) -1 ) << endl ; } } } } int main () { solve (); return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#4","text":"\u9898\u76ee\u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u5728\u5b9e\u73b0\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u5224\u5b9a\u4e00\u4e9b\u7ea6\u675f\u6761\u4ef6\u662f\u5426\u80fd\u88ab\u540c\u65f6\u6ee1\u8db3\u3002 \u8003\u8651\u4e00\u4e2a\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\u7684\u7b80\u5316\u7248\u672c\uff1a\u5047\u8bbe x1,x2,x3,\u2026 \u4ee3\u8868\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u53d8\u91cf\uff0c\u7ed9\u5b9a n \u4e2a\u5f62\u5982 xi=xj \u6216 xi\u2260xj \u7684\u53d8\u91cf\u76f8\u7b49/\u4e0d\u7b49\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u8bf7\u5224\u5b9a\u662f\u5426\u53ef\u4ee5\u5206\u522b\u4e3a\u6bcf\u4e00\u4e2a\u53d8\u91cf\u8d4b\u4e88\u6070\u5f53\u7684\u503c\uff0c\u4f7f\u5f97\u4e0a\u8ff0\u6240\u6709\u7ea6\u675f\u6761\u4ef6\u540c\u65f6\u88ab\u6ee1\u8db3\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u95ee\u9898\u4e2d\u7684\u7ea6\u675f\u6761\u4ef6\u4e3a\uff1ax1=x2\uff0cx2=x3\uff0cx3=x4\uff0cx1\u2260x4\uff0c\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u540c\u65f6\u88ab\u6ee1\u8db3\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u95ee\u9898\u5e94\u5224\u5b9a\u4e3a\u4e0d\u53ef\u88ab\u6ee1\u8db3\u3002 \u73b0\u5728\u7ed9\u51fa\u4e00\u4e9b\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\uff0c\u8bf7\u5206\u522b\u5bf9\u5b83\u4eec\u8fdb\u884c\u5224\u5b9a\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6587\u4ef6\u7684\u7b2c 1 \u884c\u5305\u542b 1 \u4e2a\u6b63\u6574\u6570 t\uff0c\u8868\u793a\u9700\u8981\u5224\u5b9a\u7684\u95ee\u9898\u4e2a\u6570\uff0c\u6ce8\u610f\u8fd9\u4e9b\u95ee\u9898\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u95ee\u9898\uff0c\u5305\u542b\u82e5\u5e72\u884c\uff1a \u7b2c 1 \u884c\u5305\u542b 1 \u4e2a\u6b63\u6574\u6570 n\uff0c\u8868\u793a\u8be5\u95ee\u9898\u4e2d\u9700\u8981\u88ab\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u5305\u62ec 3 \u4e2a\u6574\u6570 i,j,e\uff0c\u63cf\u8ff0 1 \u4e2a\u76f8\u7b49/\u4e0d\u7b49\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u76f8\u90bb\u6574\u6570\u4e4b\u95f4\u7528\u5355\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u82e5 e=1\uff0c\u5219\u8be5\u7ea6\u675f\u6761\u4ef6\u4e3a xi=xj\uff1b\u82e5 e=0\uff0c\u5219\u8be5\u7ea6\u675f\u6761\u4ef6\u4e3a xi\u2260xj\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6587\u4ef6\u5305\u62ec t \u884c\u3002 \u8f93\u51fa\u6587\u4ef6\u7684\u7b2c k \u884c\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 YES \u6216\u8005 NO\uff0cYES \u8868\u793a\u8f93\u5165\u4e2d\u7684\u7b2c k \u4e2a\u95ee\u9898\u5224\u5b9a\u4e3a\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0cNO \u8868\u793a\u4e0d\u53ef\u88ab\u6ee1\u8db3\u3002 \u6570\u636e\u8303\u56f4 1\u2264n\u2264105 1\u2264n\u2264105 1\u2264i,j\u2264109 1\u2264i,j\u2264109 \u8f93\u5165\u6837\u4f8b 2 2 1 2 1 1 2 0 2 1 2 1 2 1 1 \u8f93\u51fa\u6837\u4f8b NO YES","title":"\u4f8b4.\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_8","text":"\u9996\u5148\u53d1\u73b0\u6570\u636e\u8303\u56f4\u8fc7\u5927\uff0c\u79bb\u6563\u5316\uff0c\u5408\u5e76\u64cd\u4f5c\u5728\u5224\u65ad\u64cd\u4f5c\u4e4b\u524d\u8fdb\u884c\uff0c\u79bb\u7ebf\u64cd\u4f5c\u540e\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u548c\u5224\u65ad\u5373\u53ef","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_9","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int N = 1e5 + 5 ; int ini [ N ], inj [ N ]; int pre [ 2 * N ]; int e [ N ]; int a [ 2 * N + 5 ]; int n ; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; } int find ( int x ) { return pre [ x ] == x ? x : pre [ x ] = find ( pre [ x ]); } signed main () { int t ; cin >> t ; while ( t -- ) { cin >> n ; int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> ini [ i ] >> inj [ i ] >> e [ i ]; a [ ++ cnt ] = ini [ i ]; a [ ++ cnt ] = inj [ i ]; } sort ( a + 1 , a + cnt + 1 ); int len = unique ( a + 1 , a + cnt + 1 ) - a -1 ; init ( len ); //cout<<len<<endl; bool flag = true ; for ( int i = 1 ; i <= n ; i ++ ) { ini [ i ] = lower_bound ( a + 1 , a + len + 1 , ini [ i ]) - a ; inj [ i ] = lower_bound ( a + 1 , a + len + 1 , inj [ i ]) - a ; int fx = find ( ini [ i ]), fy = find ( inj [ i ]); if ( e [ i ]) { if ( fx != fy ) { pre [ fx ] = fy ; } } } //for(int i=1;i<=n;i++) cout<<ini[i]<<\" \"<<inj[i]<<endl; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! e [ i ]) { int fx = find ( ini [ i ]), fy = find ( inj [ i ]); if ( fx == fy ) { flag = false ; break ; } } } if ( flag ) cout << \"YES\" << endl ; else cout << \"NO\" << endl ; } return 0 ; }","title":"\u4ee3\u7801"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#5graph-destruction","text":"\u9898\u76ee\u94fe\u63a5","title":"\u4f8b5.Graph Destruction"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_10","text":"\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u6709n\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0c\u4f9d\u6b21\u5220\u96641-n\u8282\u70b9\uff0c\u8f93\u51fa\u6bcf\u6b21\u5220\u9664\u540e\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u6211\u4eec\u77e5\u9053\u5e76\u67e5\u96c6\u80fd\u5f88\u5bb9\u6613\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u4f46\u5bf9\u4e8e\u5206\u88c2\u64cd\u4f5c\u5f88\u96be\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5012\u7740\u8003\u8651\uff0c\u4ece\u7f16\u53f7\u6700\u5927\u7684\u70b9\u5f00\u59cb\u4f9d\u6b21\u52a0\u70b9\u5408\u5e76\uff0c\u79bb\u7ebf\u5012\u7740\u5904\u7406\u6240\u6709\u7684\u7b54\u6848\u7136\u540e\u8f93\u51fa\u5c31\u884c\u4e86\uff0c\u6211\u4eec\u6bcf\u6b21\u52a0\u70b9\u5b9e\u9645\u5224\u65ad\u7684\u662f\u7f16\u53f7\u6bd4\u81ea\u5df1\u5927\u7684\u70b9\u7684\u8054\u901a\u60c5\u51b5\uff0c\u800c\u9898\u76ee\u4fdd\u8bc1\u4e86 a_i \\lt b_i a_i \\lt b_i \uff0c\u56e0\u6b64\u5efa\u5355\u5411\u8fb9\u5373\u53ef\u3002","title":"\u9898\u89e3"},{"location":"ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86%20%E6%8F%90%E9%AB%98%E7%AF%87/#_11","text":"#include <bits/stdc++.h> using namespace std ; const int N = 2e5 + 5 ; int e [ N ], ne [ N ], head [ N ], idx = 0 ; void add ( int a , int b ) { e [ idx ] = b ; ne [ idx ] = head [ a ]; head [ a ] = idx ++ ; } int n , m ; int res [ N ]; int pre [ N ]; void init ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; } int find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = find ( pre [ x ]); } bool vis [ N ]; int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( 0 ); cin >> n >> m ; init ( n ); memset ( head , -1 , sizeof ( head )); int tmp = 0 ; for ( int i = 1 ; i <= m ; i ++ ){ int a , b ; cin >> a >> b ; add ( a , b ); } for ( int i = n ; i >= 1 ; i -- ) { tmp ++ ; for ( int j = head [ i ]; j != -1 ; j = ne [ j ]) { int k = e [ j ]; int fx = find ( i ); int fy = find ( k ); if ( fx != fy ) pre [ fy ] = fx , tmp -- ; } res [ i - 1 ] = tmp ; } for ( int i = 1 ; i <= n ; i ++ ) cout << res [ i ] << endl ; return 0 ; }","title":"\u4ee3\u7801"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/","text":"\u5185\u8054\u4ee3\u7801\u9ad8\u4eae \u00b6 \u4e00\u822c\u5728 markdown \u91cc\u9762\uff0c\u4ee3\u7801\u5757\u53ef\u4ee5\u9ad8\u4eae\uff0c\u4f46\u662f\u5185\u8054\u7684\u4ee3\u7801\u5374\u4e0d\u662f\u9ad8\u4eae\u7684\u3002\u6211\u4eec\u7684\u5f15\u64ce\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 \u4f8b\u5982: `#!js var test = 0;` \u7ed3\u679c: var test = 0 ; \u663e\u793a\u884c\u53f7 \u00b6 \u6dfb\u52a0\u4e00\u4e2a linenums=\"1\" \u7684\u53c2\u6570\uff0c\u5f00\u542f\u884c\u53f7\u7684\u663e\u793a\u3002 \u4f8b\u5982: \u2018\u2018\u2018 python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] \u2018\u2018\u2018 \u7ed3\u679c: 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] \u6807\u8bb0\u4ee3\u7801 \u00b6 \u6dfb\u52a0\u4e00\u4e2a hl_lines=\"\u884c\u53f7\" \u53c2\u6570\uff0c\u51f8\u663e\u6807\u8bb0\u4ee3\u7801\u3002 \u4f8b\u5982: \u2018\u2018\u2018 python hl_lines=\"3 4\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] \u2018\u2018\u2018 \u7ed3\u679c: def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Tip hl_lines \u548c linenums \u8fde\u7528\u7684\u6548\u679c\u4e0d\u9519\u3002 \u4ee3\u7801\u7ec4 \u00b6 \u9762\u5bf9\u4e00\u9053\u6709\u8bb8\u591a\u89e3\u6cd5\u7684\u9898\u76ee\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4ee3\u7801\u7ec4\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u8bed\u8a00\u4e2d\u5207\u6362\u3002 \u4f8b\u5982: \u2018\u2018\u2018 python tab=\"Bash\" #!/bin/bash echo \"Hello world!\" \u2018\u2018\u2018 \u2018\u2018\u2018 c tab=\"C\" #include int main(void) { printf(\"Hello world!\\n\"); } \u2018\u2018\u2018 \u2018\u2018\u2018 cpp tab=\"C++\" #include int main() { std::cout < < \"Hello world!\" < < std::endl; return 0; } \u2018\u2018\u2018 \u2018\u2018\u2018 c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } \u2018\u2018\u2018 \u7ed3\u679c\uff1a ``` bash tab=\"Bash\" !/bin/bash \u00b6 echo \"Hello world!\" ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` c++ tab=\"C++\" include \u00b6 int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } diff\u4ee3\u7801 \u00b6 \u4f7f\u7528diff\u5173\u952e\u5b57\uff0c\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u4e0egit\u7684\u663e\u793a\u6548\u679c\uff0c\u663e\u793a\u4ee3\u7801\u7684\u5dee\u5f02\u3002 \u4f8b\u5982: \u2018\u2018\u2018 diff Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js', \u2018\u2018\u2018 \u7ed3\u679c: Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js',","title":"\u4ee3\u7801\u5757\u6269\u5c55\u8bed\u6cd5"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#_1","text":"\u4e00\u822c\u5728 markdown \u91cc\u9762\uff0c\u4ee3\u7801\u5757\u53ef\u4ee5\u9ad8\u4eae\uff0c\u4f46\u662f\u5185\u8054\u7684\u4ee3\u7801\u5374\u4e0d\u662f\u9ad8\u4eae\u7684\u3002\u6211\u4eec\u7684\u5f15\u64ce\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 \u4f8b\u5982: `#!js var test = 0;` \u7ed3\u679c: var test = 0 ;","title":"\u5185\u8054\u4ee3\u7801\u9ad8\u4eae"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#_2","text":"\u6dfb\u52a0\u4e00\u4e2a linenums=\"1\" \u7684\u53c2\u6570\uff0c\u5f00\u542f\u884c\u53f7\u7684\u663e\u793a\u3002 \u4f8b\u5982: \u2018\u2018\u2018 python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] \u2018\u2018\u2018 \u7ed3\u679c: 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"\u663e\u793a\u884c\u53f7"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#_3","text":"\u6dfb\u52a0\u4e00\u4e2a hl_lines=\"\u884c\u53f7\" \u53c2\u6570\uff0c\u51f8\u663e\u6807\u8bb0\u4ee3\u7801\u3002 \u4f8b\u5982: \u2018\u2018\u2018 python hl_lines=\"3 4\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] \u2018\u2018\u2018 \u7ed3\u679c: def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Tip hl_lines \u548c linenums \u8fde\u7528\u7684\u6548\u679c\u4e0d\u9519\u3002","title":"\u6807\u8bb0\u4ee3\u7801"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#_4","text":"\u9762\u5bf9\u4e00\u9053\u6709\u8bb8\u591a\u89e3\u6cd5\u7684\u9898\u76ee\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4ee3\u7801\u7ec4\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u8bed\u8a00\u4e2d\u5207\u6362\u3002 \u4f8b\u5982: \u2018\u2018\u2018 python tab=\"Bash\" #!/bin/bash echo \"Hello world!\" \u2018\u2018\u2018 \u2018\u2018\u2018 c tab=\"C\" #include int main(void) { printf(\"Hello world!\\n\"); } \u2018\u2018\u2018 \u2018\u2018\u2018 cpp tab=\"C++\" #include int main() { std::cout < < \"Hello world!\" < < std::endl; return 0; } \u2018\u2018\u2018 \u2018\u2018\u2018 c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } \u2018\u2018\u2018 \u7ed3\u679c\uff1a ``` bash tab=\"Bash\"","title":"\u4ee3\u7801\u7ec4"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#binbash","text":"echo \"Hello world!\" ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` c++ tab=\"C++\"","title":"!/bin/bash"},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#include","text":"int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } }","title":"include "},{"location":"MarkDown/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/#diff","text":"\u4f7f\u7528diff\u5173\u952e\u5b57\uff0c\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u4e0egit\u7684\u663e\u793a\u6548\u679c\uff0c\u663e\u793a\u4ee3\u7801\u7684\u5dee\u5f02\u3002 \u4f8b\u5982: \u2018\u2018\u2018 diff Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js', \u2018\u2018\u2018 \u7ed3\u679c: Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js',","title":"diff\u4ee3\u7801"},{"location":"MarkDown/%E5%85%B6%E4%BB%96/","text":"\u9a6c\u514b\u7b14 \u00b6 ==...== \uff0c\u4f7f\u7528\u4e24\u4e2a\u7b49\u4e8e\u53ef\u4ee5\u628a\u4e00\u6bb5\u5185\u5bb9\u4ee5 \u9a6c\u514b\u7b14 \u7684\u5f62\u5f0f\u6253\u4e0a\u6807\u8bb0\u3002 Warning \u6d4b\u8bd5\u8fd9\u4e2a\u529f\u80fd\u7684\u65f6\u5019\u53d1\u73b0\u4e24\u4e2a\u7b49\u4e8e\u7684\u4e24\u8fb9\u8fd8\u9700\u8981\u52a0\u4e0a\u7a7a\u683c\u3002 \u811a\u6ce8 \u00b6 \u683c\u5f0f\uff1a[^number] \u4ee3\u7801 \u524d\u7aef\u4e09\u9a7e\u9a6c\u8f66\uff1aHTML[^1]\u3001CSS\u3001JavaScript\u3002 \u663e\u793a\u6548\u679c \u524d\u7aef\u4e09\u9a7e\u9a6c\u8f66\uff1aHTML 1 \u3001CSS\u3001JavaScript\u3002 \u5728markdown\u5e95\u90e8\u58f0\u660e\u811a\u6ce8 [ ^1 ]: HTML\u79f0\u4e3a\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff0c\u662f\u4e00\u79cd\u6807\u8bc6\u6027\u7684\u8bed\u8a00\u3002 LaTex \u6570\u5b66\u6269\u5c55 \u00b6 \u652f\u6301\u5185\u8054\u516c\u5f0f $$ \u548c\u5757\u7ea7\u516c\u5f0f $$$$ \uff0c\u5177\u4f53\u8bf7\u67e5\u770bLaTeX\u7684\u8bed\u6cd5\u89c4\u5219\u3002 \u4ee3\u7801: \\frac { n! }{ k!(n-k)! } = \\binom { n }{ k } \u6548\u679c: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Todo List \u00b6 \u6e90\u4ee3\u7801\uff1a * [x] \u8d77\u5e8a * [x] \u5237\u7259 * [ ] \u4e0a\u7f51\u8bfe * [x] \u6570\u636e\u5e93 * [x] \u64cd\u4f5c\u7cfb\u7edf * [x] \u8ba1\u7b97\u673a\u7f51\u7edc * [ ] \u6570\u636e\u7ed3\u6784 * [ ] \u505a\u4f5c\u4e1a * [ ] \u7761\u89c9 \u663e\u793a\u7ed3\u679c\uff1a \u8d77\u5e8a \u5237\u7259 \u4e0a\u7f51\u8bfe \u6570\u636e\u5e93 \u64cd\u4f5c\u7cfb\u7edf \u8ba1\u7b97\u673a\u7f51\u7edc \u6570\u636e\u7ed3\u6784 \u505a\u4f5c\u4e1a \u7761\u89c9 \u8fde\u4f53\u6807\u8bb0 \u00b6 \u6807\u8bb0 \u7ed3\u679c (tm) \u2122 (c) \u00a9 (r) \u00ae c/o \u2105 +/- \u00b1 --> \u2192 <-- \u2190 <--> \u2194 =/= \u2260 1/4 \u00bc 1st 2nd 1 st 2 nd HTML\u79f0\u4e3a\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff0c\u662f\u4e00\u79cd\u6807\u8bc6\u6027\u7684\u8bed\u8a00\u3002 \u21a9","title":"\u5176\u4ed6\u6269\u5c55\u8bed\u6cd5"},{"location":"MarkDown/%E5%85%B6%E4%BB%96/#_1","text":"==...== \uff0c\u4f7f\u7528\u4e24\u4e2a\u7b49\u4e8e\u53ef\u4ee5\u628a\u4e00\u6bb5\u5185\u5bb9\u4ee5 \u9a6c\u514b\u7b14 \u7684\u5f62\u5f0f\u6253\u4e0a\u6807\u8bb0\u3002 Warning \u6d4b\u8bd5\u8fd9\u4e2a\u529f\u80fd\u7684\u65f6\u5019\u53d1\u73b0\u4e24\u4e2a\u7b49\u4e8e\u7684\u4e24\u8fb9\u8fd8\u9700\u8981\u52a0\u4e0a\u7a7a\u683c\u3002","title":"\u9a6c\u514b\u7b14"},{"location":"MarkDown/%E5%85%B6%E4%BB%96/#_2","text":"\u683c\u5f0f\uff1a[^number] \u4ee3\u7801 \u524d\u7aef\u4e09\u9a7e\u9a6c\u8f66\uff1aHTML[^1]\u3001CSS\u3001JavaScript\u3002 \u663e\u793a\u6548\u679c \u524d\u7aef\u4e09\u9a7e\u9a6c\u8f66\uff1aHTML 1 \u3001CSS\u3001JavaScript\u3002 \u5728markdown\u5e95\u90e8\u58f0\u660e\u811a\u6ce8 [ ^1 ]: HTML\u79f0\u4e3a\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff0c\u662f\u4e00\u79cd\u6807\u8bc6\u6027\u7684\u8bed\u8a00\u3002","title":"\u811a\u6ce8"},{"location":"MarkDown/%E5%85%B6%E4%BB%96/#latex","text":"\u652f\u6301\u5185\u8054\u516c\u5f0f $$ \u548c\u5757\u7ea7\u516c\u5f0f $$$$ \uff0c\u5177\u4f53\u8bf7\u67e5\u770bLaTeX\u7684\u8bed\u6cd5\u89c4\u5219\u3002 \u4ee3\u7801: \\frac { n! }{ k!(n-k)! } = \\binom { n }{ k } \u6548\u679c: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"LaTex \u6570\u5b66\u6269\u5c55"},{"location":"MarkDown/%E5%85%B6%E4%BB%96/#todo-list","text":"\u6e90\u4ee3\u7801\uff1a * [x] \u8d77\u5e8a * [x] \u5237\u7259 * [ ] \u4e0a\u7f51\u8bfe * [x] \u6570\u636e\u5e93 * [x] \u64cd\u4f5c\u7cfb\u7edf * [x] \u8ba1\u7b97\u673a\u7f51\u7edc * [ ] \u6570\u636e\u7ed3\u6784 * [ ] \u505a\u4f5c\u4e1a * [ ] \u7761\u89c9 \u663e\u793a\u7ed3\u679c\uff1a \u8d77\u5e8a \u5237\u7259 \u4e0a\u7f51\u8bfe \u6570\u636e\u5e93 \u64cd\u4f5c\u7cfb\u7edf \u8ba1\u7b97\u673a\u7f51\u7edc \u6570\u636e\u7ed3\u6784 \u505a\u4f5c\u4e1a \u7761\u89c9","title":"Todo List"},{"location":"MarkDown/%E5%85%B6%E4%BB%96/#_3","text":"\u6807\u8bb0 \u7ed3\u679c (tm) \u2122 (c) \u00a9 (r) \u00ae c/o \u2105 +/- \u00b1 --> \u2192 <-- \u2190 <--> \u2194 =/= \u2260 1/4 \u00bc 1st 2nd 1 st 2 nd HTML\u79f0\u4e3a\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff0c\u662f\u4e00\u79cd\u6807\u8bc6\u6027\u7684\u8bed\u8a00\u3002 \u21a9","title":"\u8fde\u4f53\u6807\u8bb0"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/","text":"\u51e0\u79cd\u663e\u793a\u7528\u6cd5 \u00b6 \u666e\u901a\u7528\u6cd5 \u00b6 \u4ee3\u7801: !!! note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: Note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u5e26\u6807\u9898\u7528\u6cd5 \u00b6 \u4ee3\u7801: !!! note \"Jaycee Chow\u7684\u65e5\u8bb0\" \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: Jaycee Chow\u7684\u65e5\u8bb0 \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u65e0\u8fa9\u9898\u7528\u6cd5 \u00b6 \u4ee3\u7801: !!! note \"\" \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u53ef\u6298\u53e0\u7528\u6cd5 \u00b6 \u4ee3\u7801: ??? note \u4f60\u770b\u4e0d\u89c1\u6211\u3002 \u7ed3\u679c: Note \u4f60\u770b\u4e0d\u89c1\u6211\u3002 \u51e0\u79cd\u663e\u793a\u7c7b\u578b \u00b6 Note \u00b6 \u4ee3\u7801: !!! note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: Note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 note\u4e5f\u53ef\u4ee5\u7528seealso\u66ff\u6362\u3002 Abstract \u00b6 \u4ee3\u7801: !!! abstract \u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u5de8\u9f99\u7a81\u7136\u51fa\u73b0\uff0c\u5e26\u6765\u707e\u96be\uff0c\u5e26\u8d70\u4e86\u516c\u4e3b\u53c8\u6d88\u5931\u4e0d\u89c1\u3002\u738b\u56fd\u5341\u5206\u5371\u9669\uff0c\u4e16\u95f4\u8c01\u6700\u52c7\u6562\uff0c\u4e00\u4f4d\u52c7\u8005\u8d76\u6765\uff0c\u5927\u58f0\u558a\uff0c\u6211\u8981\u5e26\u4e0a\u6700\u597d\u7684\u5251\uff0c\u7ffb\u8fc7\u6700\u9ad8\u7684\u5c71\uff0c\u95ef\u8fdb\u6700\u6df1\u7684\u68ee\u6797\uff0c\u628a\u516c\u4e3b\u5e26\u56de\u5230\u9762\u524d\u3002 \u7ed3\u679c: Abstract \u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u5de8\u9f99\u7a81\u7136\u51fa\u73b0\uff0c\u5e26\u6765\u707e\u96be\uff0c\u5e26\u8d70\u4e86\u516c\u4e3b\u53c8\u6d88\u5931\u4e0d\u89c1\u3002\u738b\u56fd\u5341\u5206\u5371\u9669\uff0c\u4e16\u95f4\u8c01\u6700\u52c7\u6562\uff0c\u4e00\u4f4d\u52c7\u8005\u8d76\u6765\uff0c\u5927\u58f0\u558a\uff0c\u6211\u8981\u5e26\u4e0a\u6700\u597d\u7684\u5251\uff0c\u7ffb\u8fc7\u6700\u9ad8\u7684\u5c71\uff0c\u95ef\u8fdb\u6700\u6df1\u7684\u68ee\u6797\uff0c\u628a\u516c\u4e3b\u5e26\u56de\u5230\u9762\u524d\u3002 abstract\u4e5f\u53ef\u4ee5\u7528summary\u6216\u8005tldr\u66ff\u6362\u3002 Info \u00b6 \u4ee3\u7801: !!! info \u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e1a\u6ca1\u505a\u5b8c\u3002 \u7ed3\u679c: Info \u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e1a\u6ca1\u505a\u5b8c\u3002 info\u4e5f\u53ef\u4ee5\u7528todo\u66ff\u6362\u3002 Tip \u00b6 \u4ee3\u7801: !!! tip \u7a0b\u5e8f\u5458\u52a1\u5fc5\u591a\u559d\u829d\u9ebb\uff0c\u8fd9\u6837\u5934\u53d1\u624d\u4f1a\u8302\u5bc6\u3002 \u7ed3\u679c: Tip \u7a0b\u5e8f\u5458\u52a1\u5fc5\u591a\u559d\u829d\u9ebb\uff0c\u8fd9\u6837\u5934\u53d1\u624d\u4f1a\u8302\u5bc6\u3002 tip\u4e5f\u53ef\u4ee5\u7528hint\u6216\u8005important\u66ff\u6362\u3002 Success \u00b6 \u4ee3\u7801: !!! success \u4eca\u65e5\u4efd\u7684\u5d29\u574f\u5df2\u809d\u5b8c\u3002 \u7ed3\u679c: Success \u4eca\u65e5\u4efd\u7684\u5d29\u574f\u5df2\u809d\u5b8c\u3002 success\u4e5f\u53ef\u4ee5\u7528check\u6216\u8005done\u66ff\u6362\u3002 Question \u00b6 \u4ee3\u7801: !!! question \u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\uff1f \u7ed3\u679c: Question \u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\uff1f question\u4e5f\u53ef\u4ee5\u7528help\u6216\u8005faq\u66ff\u6362\u3002 Warning \u00b6 \u4ee3\u7801: !!! warning warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result \u7ed3\u679c: Warning warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result warning\u4e5f\u53ef\u4ee5\u7528caution\u6216\u8005attention\u66ff\u6362\u3002 Failure \u00b6 \u4ee3\u7801: !!! failure Exception thrown :java.lang.ArrayIndexOutOfBoundsException: 3 \u7ed3\u679c: Failure Exception thrown :java.lang.ArrayIndexOutOfBoundsException: 3 failure\u4e5f\u53ef\u4ee5\u7528fail\u6216\u8005missing\u66ff\u6362\u3002 Danger \u00b6 \u4ee3\u7801: !!! danger \u9ad8\u538b\u7535 \u7ed3\u679c: Danger \u9ad8\u538b\u7535 danger\u4e5f\u53ef\u4ee5\u7528error\u66ff\u6362\u3002 Bug \u00b6 \u4ee3\u7801: !!! bug 404 GET \u7ed3\u679c: Bug 404 GET \u65e0\u5176\u4ed6\u5173\u952e\u8bcd\u53ef\u66ff\u6362 Example \u00b6 \u4ee3\u7801: !!! example Admonition\u6269\u5c55\u8bed\u6cd5\u5173\u952e\u8bcd\u5305\u62ec\uff1a Note\uff0cAbstract\uff0cInfo\uff0cTip\uff0cSuccess\uff0cQuestion\uff0cWarning\uff0cFailure\uff0cDanger\uff0cBug\uff0cExample\uff0cQuote \u7ed3\u679c: Example Admonition\u6269\u5c55\u8bed\u6cd5\u5173\u952e\u8bcd\u5305\u62ec\uff1a Note\uff0cAbstract\uff0cInfo\uff0cTip\uff0cSuccess\uff0cQuestion\uff0cWarning\uff0cFailure\uff0cDanger\uff0cBug\uff0cExample\uff0cQuote example\u4e5f\u53ef\u4ee5\u7528snippet\u66ff\u6362\u3002 Quote \u00b6 \u4ee3\u7801: !!! quote Jeff Atwood: \u4e00\u5207\u80fd\u88abJavaScript\u5b9e\u73b0\u7684\u7ec8\u5c06\u4f1a\u88abJavaScript\u5b9e\u73b0\u3002 \u7ed3\u679c: Quote Jeff Atwood: \u4e00\u5207\u80fd\u88abJavaScript\u5b9e\u73b0\u7684\u7ec8\u5c06\u4f1a\u88abJavaScript\u5b9e\u73b0\u3002","title":"\u8b66\u544a\u6846"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#_1","text":"","title":"\u51e0\u79cd\u663e\u793a\u7528\u6cd5"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#_2","text":"\u4ee3\u7801: !!! note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: Note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002","title":"\u666e\u901a\u7528\u6cd5"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#_3","text":"\u4ee3\u7801: !!! note \"Jaycee Chow\u7684\u65e5\u8bb0\" \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: Jaycee Chow\u7684\u65e5\u8bb0 \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002","title":"\u5e26\u6807\u9898\u7528\u6cd5"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#_4","text":"\u4ee3\u7801: !!! note \"\" \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002","title":"\u65e0\u8fa9\u9898\u7528\u6cd5"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#_5","text":"\u4ee3\u7801: ??? note \u4f60\u770b\u4e0d\u89c1\u6211\u3002 \u7ed3\u679c: Note \u4f60\u770b\u4e0d\u89c1\u6211\u3002","title":"\u53ef\u6298\u53e0\u7528\u6cd5"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#_6","text":"","title":"\u51e0\u79cd\u663e\u793a\u7c7b\u578b"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#note","text":"\u4ee3\u7801: !!! note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 \u7ed3\u679c: Note \u4eca\u5929\u98ce\u548c\u65e5\u4e3d\u3002 note\u4e5f\u53ef\u4ee5\u7528seealso\u66ff\u6362\u3002","title":"Note"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#abstract","text":"\u4ee3\u7801: !!! abstract \u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u5de8\u9f99\u7a81\u7136\u51fa\u73b0\uff0c\u5e26\u6765\u707e\u96be\uff0c\u5e26\u8d70\u4e86\u516c\u4e3b\u53c8\u6d88\u5931\u4e0d\u89c1\u3002\u738b\u56fd\u5341\u5206\u5371\u9669\uff0c\u4e16\u95f4\u8c01\u6700\u52c7\u6562\uff0c\u4e00\u4f4d\u52c7\u8005\u8d76\u6765\uff0c\u5927\u58f0\u558a\uff0c\u6211\u8981\u5e26\u4e0a\u6700\u597d\u7684\u5251\uff0c\u7ffb\u8fc7\u6700\u9ad8\u7684\u5c71\uff0c\u95ef\u8fdb\u6700\u6df1\u7684\u68ee\u6797\uff0c\u628a\u516c\u4e3b\u5e26\u56de\u5230\u9762\u524d\u3002 \u7ed3\u679c: Abstract \u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u5de8\u9f99\u7a81\u7136\u51fa\u73b0\uff0c\u5e26\u6765\u707e\u96be\uff0c\u5e26\u8d70\u4e86\u516c\u4e3b\u53c8\u6d88\u5931\u4e0d\u89c1\u3002\u738b\u56fd\u5341\u5206\u5371\u9669\uff0c\u4e16\u95f4\u8c01\u6700\u52c7\u6562\uff0c\u4e00\u4f4d\u52c7\u8005\u8d76\u6765\uff0c\u5927\u58f0\u558a\uff0c\u6211\u8981\u5e26\u4e0a\u6700\u597d\u7684\u5251\uff0c\u7ffb\u8fc7\u6700\u9ad8\u7684\u5c71\uff0c\u95ef\u8fdb\u6700\u6df1\u7684\u68ee\u6797\uff0c\u628a\u516c\u4e3b\u5e26\u56de\u5230\u9762\u524d\u3002 abstract\u4e5f\u53ef\u4ee5\u7528summary\u6216\u8005tldr\u66ff\u6362\u3002","title":"Abstract"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#info","text":"\u4ee3\u7801: !!! info \u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e1a\u6ca1\u505a\u5b8c\u3002 \u7ed3\u679c: Info \u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e1a\u6ca1\u505a\u5b8c\u3002 info\u4e5f\u53ef\u4ee5\u7528todo\u66ff\u6362\u3002","title":"Info"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#tip","text":"\u4ee3\u7801: !!! tip \u7a0b\u5e8f\u5458\u52a1\u5fc5\u591a\u559d\u829d\u9ebb\uff0c\u8fd9\u6837\u5934\u53d1\u624d\u4f1a\u8302\u5bc6\u3002 \u7ed3\u679c: Tip \u7a0b\u5e8f\u5458\u52a1\u5fc5\u591a\u559d\u829d\u9ebb\uff0c\u8fd9\u6837\u5934\u53d1\u624d\u4f1a\u8302\u5bc6\u3002 tip\u4e5f\u53ef\u4ee5\u7528hint\u6216\u8005important\u66ff\u6362\u3002","title":"Tip"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#success","text":"\u4ee3\u7801: !!! success \u4eca\u65e5\u4efd\u7684\u5d29\u574f\u5df2\u809d\u5b8c\u3002 \u7ed3\u679c: Success \u4eca\u65e5\u4efd\u7684\u5d29\u574f\u5df2\u809d\u5b8c\u3002 success\u4e5f\u53ef\u4ee5\u7528check\u6216\u8005done\u66ff\u6362\u3002","title":"Success"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#question","text":"\u4ee3\u7801: !!! question \u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\uff1f \u7ed3\u679c: Question \u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\uff1f question\u4e5f\u53ef\u4ee5\u7528help\u6216\u8005faq\u66ff\u6362\u3002","title":"Question"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#warning","text":"\u4ee3\u7801: !!! warning warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result \u7ed3\u679c: Warning warning: ignoring return value of \u2018scanf\u2019, declared with attribute warn_unused_result warning\u4e5f\u53ef\u4ee5\u7528caution\u6216\u8005attention\u66ff\u6362\u3002","title":"Warning"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#failure","text":"\u4ee3\u7801: !!! failure Exception thrown :java.lang.ArrayIndexOutOfBoundsException: 3 \u7ed3\u679c: Failure Exception thrown :java.lang.ArrayIndexOutOfBoundsException: 3 failure\u4e5f\u53ef\u4ee5\u7528fail\u6216\u8005missing\u66ff\u6362\u3002","title":"Failure"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#danger","text":"\u4ee3\u7801: !!! danger \u9ad8\u538b\u7535 \u7ed3\u679c: Danger \u9ad8\u538b\u7535 danger\u4e5f\u53ef\u4ee5\u7528error\u66ff\u6362\u3002","title":"Danger"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#bug","text":"\u4ee3\u7801: !!! bug 404 GET \u7ed3\u679c: Bug 404 GET \u65e0\u5176\u4ed6\u5173\u952e\u8bcd\u53ef\u66ff\u6362","title":"Bug"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#example","text":"\u4ee3\u7801: !!! example Admonition\u6269\u5c55\u8bed\u6cd5\u5173\u952e\u8bcd\u5305\u62ec\uff1a Note\uff0cAbstract\uff0cInfo\uff0cTip\uff0cSuccess\uff0cQuestion\uff0cWarning\uff0cFailure\uff0cDanger\uff0cBug\uff0cExample\uff0cQuote \u7ed3\u679c: Example Admonition\u6269\u5c55\u8bed\u6cd5\u5173\u952e\u8bcd\u5305\u62ec\uff1a Note\uff0cAbstract\uff0cInfo\uff0cTip\uff0cSuccess\uff0cQuestion\uff0cWarning\uff0cFailure\uff0cDanger\uff0cBug\uff0cExample\uff0cQuote example\u4e5f\u53ef\u4ee5\u7528snippet\u66ff\u6362\u3002","title":"Example"},{"location":"MarkDown/%E8%AD%A6%E5%91%8A%E6%A1%86/#quote","text":"\u4ee3\u7801: !!! quote Jeff Atwood: \u4e00\u5207\u80fd\u88abJavaScript\u5b9e\u73b0\u7684\u7ec8\u5c06\u4f1a\u88abJavaScript\u5b9e\u73b0\u3002 \u7ed3\u679c: Quote Jeff Atwood: \u4e00\u5207\u80fd\u88abJavaScript\u5b9e\u73b0\u7684\u7ec8\u5c06\u4f1a\u88abJavaScript\u5b9e\u73b0\u3002","title":"Quote"},{"location":"PS/PS1/","text":"\u5feb\u6377\u952e \u00b6 \u65b0\u5efa\u56fe\u5f62\u6587\u4ef6\uff1a Ctrl + N \u8def\u5f84\u53d8\u9009\u533a\uff1a Ctrl + Enter \u8f7d\u5165\u9009\u533a\uff1a`Ctrl + \u70b9\u6309\u56fe\u5c42\u3001\u8def\u5f84\u3001\u901a\u9053\u9762\u677f\u4e2d\u7684\u7f29\u7ea6\u56fe \u653e\u5927/\u7f29\u5c0f\u89c6\u56fe\uff1a Ctrl + [+]/[-] \u6ee1\u753b\u5e03\u663e\u793a\uff1a Ctrl + 0 \u663e\u793a/\u9690\u85cf\u6807\u5c3a\uff1a Ctrl + R \u81ea\u7531\u53d8\u6362\uff1a Ctrl + T \u65b0\u5efa\u56fe\u5c42\uff1a Ctrl + Shift + N \u62f7\u8d1d\u56fe\u5c42\uff1a Ctrl + J \u5408\u5e76\u56fe\u5c42\uff1a Ctrl + E \u9009\u533a\u524d\u666f\u8272\u586b\u5145\uff1a Alt + del \u9009\u533a\u80cc\u666f\u8272\u586b\u5145\uff1a Ctrl + del \u5168\u90e8\u9009\u53d6\uff1a Ctrl + A \u53d6\u6d88\u9009\u62e9\uff1a Ctrl + D \u5728\u5df2\u6709\u9009\u533a\u60c5\u51b5\u4e0b\u6dfb\u52a0\u9009\u53d6\uff1a \u6309\u4f4fShift\u540e\u6dfb\u52a0 \u5728\u5df2\u6709\u9009\u533a\u60c5\u51b5\u4e0b\u51cf\u5c11\u9009\u533a\uff1a \u6309\u4f4fAlt \u540e\u51cf\u5c11 \u53cd\u5411\u9009\u62e9\uff1a Ctrl + Shift + I \u7fbd\u5316\uff1a Shift + F6 \u64a4\u9500\u64cd\u4f5c\uff1a Ctrl + Z \u4fee\u6539\u56fe\u50cf\u5927\u5c0f \u00b6 \u6267\u884c\u201c\u56fe\u50cf > \u56fe\u50cf\u5927\u5c0f\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+I \u7ec4\u5408\u952e\uff0c\u53ef\u6253\u5f00\u201c\u56fe\u50cf\u5927\u5c0f\u201d\u5bf9\u8bdd\u6846\u3002 \u4fee\u6539\u56fe\u50cf\u5c3a\u5bf8 \u00b6 \u5f88\u591a\u65f6\u5019\u56fe\u50cf\u7d20\u6750\u7684\u5c3a\u5bf8\u4e0e\u9700\u8981\u7684\u5c3a\u5bf8\u4e0d\u7b26\uff0c\u4f8b\u5982\u5236\u4f5c\u8ba1\u7b97\u673a\u684c\u9762\u58c1\u7eb8\u3001\u4e2a\u6027\u5316\u865a\u62df\u5934\u50cf\u6216\u4f20\u8f93\u5230\u4e2a\u4eba\u7f51\u7edc\u7a7a\u95f4\u7b49\uff0c\u90fd\u9700\u8981\u5bf9\u56fe\u50cf\u7684\u5c3a\u5bf8\u8fdb\u884c\u7279\u5b9a\u7684\u4fee\u6539\uff0c\u4ee5\u9002\u5408\u4e0d\u540c\u7684\u8981\u6c42\u3002 \u4fee\u6539\u56fe\u50cf\u5206\u8fa8\u7387 \u00b6 \u5206\u8fa8\u7387\u662f\u6307\u4f4d\u56fe\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u7cbe\u7ec6\u5ea6\uff0c\u6d4b\u91cf\u5355\u4f4d\u662f\u50cf\u7d20 / \u82f1\u5bf8\uff08PPI\uff09\uff0c\u6bcf\u82f1\u5bf8\u7684\u50cf\u7d20\u8d8a\u591a\uff0c\u5206\u8fa8\u7387\u8d8a\u9ad8\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u56fe\u50cf\u7684\u5206\u8fa8\u7387\u8d8a\u9ad8\uff0c\u5370\u5237\u51fa\u6765\u7684\u8d28\u91cf\u5c31\u8d8a\u597d\u3002 \u4fee\u6539\u753b\u5e03 \u00b6 \u4fee\u6539\u753b\u5e03\u5927\u5c0f \u00b6 \u6267\u884c\u201c\u56fe\u50cf > \u753b\u5e03\u5927\u5c0f\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u753b\u5e03\u5927\u5c0f\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u5bf9\u753b\u5e03\u7684\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u3001\u5b9a\u4f4d\u548c\u753b\u5e03\u6269\u5c55\u989c\u8272\u8fdb\u884c\u8c03\u6574\u3002\u589e\u5927\u753b\u5e03\u5927\u5c0f\uff0c\u539f\u59cb\u56fe\u50cf\u5927\u5c0f\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c\u589e\u5927\u7684\u90e8\u5206\u5219\u4f7f\u7528\u9009\u5b9a\u7684\u586b\u5145\u989c\u8272\u8fdb\u884c\u586b\u5145\uff1b\u51cf\u5c0f\u753b\u5e03\u5927\u5c0f\uff0c\u56fe\u50cf\u5219\u4f1a\u88ab\u88c1\u5207\u6389\u4e00\u90e8\u5206\u3002 \u8bbe\u7f6e\u753b\u5e03\u6269\u5c55\u989c\u8272 \u00b6 \u753b\u5e03\u6269\u5c55\u989c\u8272\u662f\u6307\u586b\u5145\u65b0\u753b\u5e03\u7684\u989c\u8272\u3002\u5982\u679c\u56fe\u50cf\u7684\u80cc\u666f\u662f\u900f\u660e\u7684\uff0c\u90a3\u4e48\u201c\u753b\u5e03\u6269\u5c55\u989c\u8272\u201d\u9009\u9879\u5c06\u4e0d\u53ef\u7528\uff0c\u65b0\u589e\u52a0\u7684\u753b\u5e03\u4e5f\u662f\u900f\u660e\u7684\u3002 \u88c1\u526a\u4e0e\u88c1\u5207\u56fe\u50cf \u00b6 \u88c1\u526a\u56fe\u50cf \u00b6 \u88c1\u526a\u662f\u6307\u79fb\u53bb\u90e8\u5206\u56fe\u50cf\uff0c\u4ee5\u7a81\u51fa\u6216\u52a0\u5f3a\u6784\u56fe\u6548\u679c\u7684\u8fc7\u7a0b\u3002\u4f7f\u7528\u201c\u88c1\u526a\u5de5\u5177\u201d\u53ef\u4ee5\u88c1\u526a\u6389\u591a\u4f59\u7684\u56fe\u50cf\uff0c\u5e76\u91cd\u65b0\u5b9a\u4e49\u753b\u5e03\u7684\u5927\u5c0f\u3002\u9009\u62e9\u201c\u88c1\u526a\u5de5\u5177\u201d\u540e\uff0c\u5728\u753b\u9762\u4e2d\u62d6\u66f3\u51fa\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\uff0c\u9009\u62e9\u8981\u4fdd\u7559\u7684\u90e8\u5206\uff0c\u7136\u540e\u6309 Enter \u952e\u6216\u53cc\u51fb\u5373\u53ef\u5b8c\u6210\u88c1\u526a\u3002 \u900f\u89c6\u88c1\u526a\u5de5\u5177 \u00b6 \u4f7f\u7528\u201c\u900f\u89c6\u88c1\u526a\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u9700\u8981\u88c1\u526a\u7684\u56fe\u50cf\u4e0a\u5236\u4f5c\u51fa\u5e26\u6709\u900f\u89c6\u611f\u7684\u88c1\u526a\u6846\uff0c\u5728\u5e94\u7528\u88c1\u526a\u540e\u53ef\u4ee5\u4f7f\u56fe\u50cf\u5e26\u6709\u660e\u663e\u7684\u900f\u89c6\u611f\u3002\u4f7f\u7528\u201c\u900f\u89c6\u88c1\u526a\u5de5\u5177\u201d\u5728\u753b\u9762\u4e2d\u7ed8\u5236\u4e00\u4e2a\u88c1\u526a\u6846\uff0c\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u88c1\u526a\u6846\u7684\u4e00\u4e2a\u63a7\u5236\u70b9\u4e0a\uff0c\u5355\u51fb\u5e76\u62d6\u52a8\u3002\u8c03\u6574\u5b8c\u6210\u540e\u5355\u51fb\u9009\u9879\u680f\u4e2d\u7684\u201c\u63d0\u4ea4\u5f53\u524d\u88c1\u526a\u64cd\u4f5c\u201d\u6309\u94ae \uff0c\u5373\u53ef\u5f97\u5230\u5e26\u6709\u900f\u89c6\u611f\u7684\u753b\u9762\u6548\u679c\u3002 \u88c1\u5207\u56fe\u50cf \u00b6 \u4f7f\u7528\u201c\u88c1\u5207\u201d\u547d\u4ee4\u53ef\u4ee5\u57fa\u4e8e\u50cf\u7d20\u7684\u989c\u8272\u6765\u88c1\u5207\u56fe\u50cf\u3002\u6267\u884c\u201c\u56fe\u50cf > \u88c1\u5207\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u88c1\u5207\u201d\u5bf9\u8bdd\u6846 \u65cb\u8f6c\u753b\u5e03 \u00b6 \u6267\u884c\u201c\u56fe\u50cf > \u56fe\u50cf\u65cb\u8f6c\u201d\u547d\u4ee4\uff0c\u5728\u8be5\u83dc\u5355\u4e0b\u63d0\u4f9b\u4e86 6 \u79cd\u65cb\u8f6c\u753b\u5e03\u7684\u547d\u4ee4\uff0c\u5305\u62ec\u201c180 \u5ea6\u201d\u3001\u201c90 \u5ea6\uff08\u987a\u65f6\u9488\uff09\u201d\u3001\u201c90 \u5ea6\uff08\u9006\u65f6\u9488\uff09\u201d\u3001\u201c\u4efb\u610f\u89d2\u5ea6\u201d\u3001\u201c\u6c34\u5e73\u7ffb\u8f6c\u753b\u5e03\u201d\u548c\u201c\u5782\u76f4\u7ffb\u8f6c\u753b\u5e03\u201d\u3002\u5728\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u65f6\uff0c\u53ef\u4ee5\u65cb\u8f6c\u6216\u7ffb\u8f6c\u6574\u4e2a\u56fe\u50cf\u3002 \u64a4\u9500/\u8fd4\u56de/\u6062\u590d\u6587\u4ef6 \u00b6 \u8fd8\u539f\u4e0e\u91cd\u505a \u00b6 \u6267\u884c\u201c\u7f16\u8f91 > \u8fd8\u539f\u201d\u547d\u4ee4\u6216\u6309 Ctrl+Z \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u64a4\u9500\u6700\u8fd1\u4e00\u6b21\u7684\u64cd\u4f5c\uff0c\u5c06\u56fe\u50cf\u8fd8\u539f\u5230\u4e0a\u4e00\u6b65\u7684\u64cd\u4f5c\u72b6\u6001\u3002\u5982\u679c\u60f3\u8981\u53d6\u6d88\u8fd8\u539f\u64cd\u4f5c\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u7f16\u8f91 > \u91cd\u505a\u201d\u547d\u4ee4\u3002 \u524d\u8fdb\u4e00\u6b65\u4e0e\u540e\u9000\u4e00\u6b65 \u00b6 \u7531\u4e8e\u201c\u8fd8\u539f\u201d\u547d\u4ee4\u53ea\u53ef\u4ee5\u8fd8\u539f\u4e00\u6b65\u64cd\u4f5c\uff0c\u800c\u5b9e\u9645\u64cd\u4f5c\u4e2d\u7ecf\u5e38\u9700\u8981\u8fd8\u539f\u591a\u4e2a\u64cd\u4f5c\uff0c\u5c31\u9700\u8981\u8fde\u7eed\u6267\u884c\u201c\u7f16\u8f91 > \u540e\u9000\u4e00\u6b65\u201d\u547d\u4ee4\uff0c\u6216\u8fde\u7eed\u6309 Alt+Ctrl+Z \u7ec4\u5408\u952e\u6765\u9010\u6b65\u64a4\u9500\u64cd\u4f5c\uff1b\u5982\u679c\u8981\u53d6\u6d88\u8fd8\u539f\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8fde\u7eed\u6267\u884c\u201c\u7f16\u8f91 > \u524d\u8fdb\u4e00\u6b65\u201d\u547d\u4ee4\uff0c\u6216\u8fde\u7eed\u6309 Shift+Ctrl+Z \u7ec4\u5408\u952e\u6765\u9010\u6b65\u6062\u590d\u88ab\u64a4\u9500\u7684\u64cd\u4f5c\u3002 \u6062\u590d\u6587\u4ef6\u5230\u521d\u59cb\u72b6\u6001 \u00b6 \u6267\u884c\u201c\u6587\u4ef6 > \u6062\u590d\u201d\u547d\u4ee4\u6216\u6309 F12 \u952e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u6587\u4ef6\u6062\u590d\u5230\u6700\u540e\u4e00\u6b21\u4fdd\u5b58\u65f6\u7684\u72b6\u6001\uff0c\u6216\u8fd4\u56de\u5230\u521a\u6253\u5f00\u6587\u4ef6\u65f6\u7684\u72b6\u6001\u3002 \u4f7f\u7528\u201c\u5386\u53f2\u8bb0\u5f55\u201d \u00b6 \u6267\u884c\u201c\u7a97\u53e3 > \u5386\u53f2\u8bb0\u5f55\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u5386\u53f2\u8bb0\u5f55\u201d\u9762\u677f\u3002 \u526a\u5207/\u62f7\u8d1d/\u7c98\u8d34\u56fe\u50cf \u00b6 \u526a\u5207\u4e0e\u7c98\u8d34 \u00b6 \u521b\u5efa\u9009\u533a\u540e\uff0c\u6267\u884c\u201c\u7f16\u8f91 > \u526a\u5207\u201d\u547d\u4ee4\u6216\u6309 Ctrl+X \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u4e2d\u7684\u5185\u5bb9\u526a\u5207\u5230\u526a\u8d34\u677f\u4e0a\u3002\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u7c98\u8d34\u201d\u547d\u4ee4\u6216\u6309 Ctrl+V \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u526a\u5207\u7684\u56fe\u50cf\u7c98\u8d34\u5230\u753b\u5e03\u4e2d\uff0c\u5e76\u53ef\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002 \u62f7\u8d1d \u00b6 \u521b\u5efa\u9009\u533a\u540e\uff0c\u6267\u884c\u201c\u7f16\u8f91 > \u62f7\u8d1d\u201d\u547d\u4ee4\u6216\u6309 Ctrl+C \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u4e2d\u7684\u56fe\u50cf\u590d\u5236\u5230\u526a\u8d34\u677f\u4e2d\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u7c98\u8d34\u201d\u547d\u4ee4\u6216\u6309 Ctrl+V \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u590d\u5236\u7684\u56fe\u50cf\u7c98\u8d34\u5230\u753b\u5e03\u4e2d\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002 \u5408\u5e76\u62f7\u8d1d \u00b6 \u5f53\u6587\u6863\u4e2d\u5305\u542b\u5f88\u591a\u56fe\u5c42\u65f6\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u5168\u9009\u201d\u547d\u4ee4\u6216\u6309 Ctrl+A \u7ec4\u5408\u952e\u5168\u9009\u5f53\u524d\u56fe\u50cf\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u5408\u5e76\u62f7 \u8d1d\u201d\u547d\u4ee4\u6216\u6309 Ctrl+Shift+C \u7ec4\u5408\u952e\uff0c\u53ef\u5c06\u6240\u6709\u53ef\u89c1\u56fe\u5c42\u590d\u5236\u5e76\u5408\u5e76\u5230\u526a\u8d34\u677f\u4e2d\u3002\u6700\u540e\u6309 Ctrl+V \u7ec4\u5408\u952e\u53ef\u4ee5\u5c06\u5408\u5e76\u590d\u5236\u7684\u56fe\u50cf\u7c98\u8d34\u5230\u5f53\u524d\u6587\u6863\u6216\u5176\u4ed6\u6587\u6863\u4e2d\u3002 \u6e05\u9664\u56fe\u50cf \u00b6 \u5f53\u9009\u4e2d\u7684\u56fe\u5c42\u4e3a\u5305\u542b\u9009\u533a\u72b6\u6001\u4e0b\u7684\u666e\u901a\u56fe\u5c42\u65f6\uff0c\u6267\u884c\u201c\u7f16\u8f91 > \u6e05\u9664\u201d\u547d\u4ee4\u53ef\u4ee5\u6e05\u9664\u9009\u533a\u4e2d\u7684\u56fe\u50cf\u3002\u9009\u4e2d\u56fe\u5c42\u4e3a\u201c\u80cc\u666f\u201d\u56fe\u5c42\u65f6\uff0c\u88ab\u6e05\u9664\u7684\u533a\u57df\u5c06\u586b\u5145\u80cc\u666f\u8272\u3002 \u9009\u62e9\u4e0e\u79fb\u52a8\u5bf9\u8c61 \u00b6 \u5728\u540c\u4e00\u4e2a\u6587\u6863\u4e2d\u79fb\u52a8\u56fe\u50cf \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u8981\u79fb\u52a8\u7684\u5bf9\u8c61\u6240\u5728\u7684\u56fe\u5c42\u3002\u7136\u540e\u5728\u5de5\u5177\u7bb1\u4e2d\u5355\u51fb\u201c\u79fb\u52a8\u5de5\u5177\u201d\u6309\u94ae \uff0c\u63a5\u7740\u5728\u753b\u5e03\u4e2d\u5355\u51fb \u9f20\u6807\u5de6\u952e\u5e76\u62d6\u66f3\u5373\u53ef\u79fb\u52a8\u9009\u4e2d\u7684\u5bf9\u8c61\u3002 \u5728\u4e0d\u540c\u7684\u6587\u6863\u95f4\u79fb\u52a8\u56fe\u50cf \u00b6 \u82e5\u8981\u5728\u4e0d\u540c\u7684\u6587\u6863\u95f4\u79fb\u52a8\u56fe\u50cf\uff0c\u9996\u5148\u9700\u8981\u4f7f\u7528\u201c\u79fb\u52a8\u5de5 \u5177\u201d\u5c06\u5149\u6807\u653e\u7f6e\u5728\u5176\u4e2d\u4e00\u4e2a\u753b\u5e03\u4e2d\uff0c\u5355\u51fb\u5e76\u62d6\u66f3\u5230\u53e6\u5916\u4e00\u4e2a\u6587\u6863\u7684\u6807\u9898\u680f\u4e0a\uff0c\u505c\u7559\u7247\u523b\u540e\u5373\u53ef\u5207\u6362\u5230\u76ee\u6807\u6587\u6863\uff0c\u63a5\u7740\u5c06\u56fe\u50cf\u79fb\u52a8\u5230\u753b\u9762\u4e2d\u91ca\u653e\u9f20\u6807\u5373\u53ef\u5c06\u56fe\u50cf\u62d6\u66f3\u5230\u6587\u6863\u4e2d\uff0c\u540c\u65f6Photoshop \u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002 \u56fe\u50cf\u53d8\u6362 \u00b6 \u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u626d\u66f2\u3001\u659c\u5207\u7b49\u662f\u5904\u7406\u56fe\u50cf\u7684\u57fa\u672c\u65b9\u6cd5\u3002\u5176\u4e2d\u79fb\u52a8\u3001\u65cb\u8f6c\u548c\u7f29\u653e\u79f0\u4e3a\u53d8\u6362\u64cd\u4f5c\uff0c\u800c\u626d\u66f2\u548c\u659c\u5207\u79f0\u4e3a\u53d8\u5f62\u64cd\u4f5c\u3002\u901a\u8fc7\u6267\u884c\u201c\u7f16\u8f91\u201d\u83dc\u5355\u4e0b\u7684 \u201c\u81ea\u7531\u53d8\u6362\u201d\u548c\u201c\u53d8\u6362\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6539\u53d8\u56fe\u50cf\u7684\u5f62\u72b6\u3002 \u5b9a\u754c\u6846\u3001\u4e2d\u5fc3\u70b9\u548c\u63a7\u5236\u70b9 \u00b6 \u5728\u6267\u884c\u201c\u81ea\u7531\u53d8\u6362\u201d\u6216\u201c\u53d8\u6362\u201d\u64cd\u4f5c\u65f6\uff0c\u5f53\u524d\u5bf9\u8c61\u7684\u5468\u56f4\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5b9a\u754c\u6846\uff0c\u5b9a\u754c\u6846\u7684\u4e2d\u95f4\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u56db\u5468\u8fd8\u6709\u63a7\u5236\u70b9\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e2d\u5fc3\u70b9\u4f4d\u4e8e\u53d8\u6362\u5bf9\u8c61\u7684\u4e2d\u5fc3\uff0c\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u53d8\u6362\u4e2d\u5fc3\uff0c\u62d6\u66f3\u4e2d\u5fc3\u70b9\u53ef\u4ee5\u79fb\u52a8\u5b83\u7684\u4f4d\u7f6e\uff1b\u63a7\u5236\u70b9\u4e3b\u8981\u7528\u6765\u53d8\u6362\u56fe\u50cf\u3002 \u53d8\u6362\u4e0e\u81ea\u7531\u53d8\u6362\u547d\u4ee4 \u00b6 \u5728\u201c\u7f16\u8f91 > \u53d8\u6362\u201d\u83dc\u5355\u4e2d\u63d0\u4f9b\u4e86\u591a\u79cd\u53d8\u6362\u547d\u4ee4\u3002\u4f7f\u7528\u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u5bf9\u56fe\u5c42\u3001\u8def\u5f84\u3001\u77e2\u91cf\u56fe\u5f62\uff0c\u4ee5\u53ca\u9009\u533a\u4e2d\u7684\u56fe\u50cf\u8fdb\u884c\u53d8\u6362\u64cd\u4f5c\u3002\u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u77e2\u91cf\u8499\u7248\u548c Alpha \u5e94\u7528\u53d8\u6362\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u81ea\u7531\u53d8\u6362\u201d\u547d\u4ee4\uff0c\u540c\u6837\u53ef\u4ee5\u4f7f\u5bf9\u8c61\u8fdb\u5165\u53d8\u6362\u72b6\u6001\uff0c\u5982\u679c\u60f3\u8981\u5207\u6362\u53d8\u6362\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5728\u81ea\u7531\u53d8\u6362\u72b6\u6001\u4e0b\u5728\u753b\u9762\u4e2d\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u8fdb\u884c\u9009\u62e9\u3002 \u81ea\u7531\u53d8\u6362\u64cd\u4f5c \u00b6 \u7f29\u653e\uff1a \u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u4efb\u610f\u7f29\u653e\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u7b49\u6bd4\u4f8b\u7f29\u653e\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift+Alt \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u4ee5\u4e2d\u5fc3\u70b9\u4e3a\u57fa\u51c6\u7b49\u6bd4\u4f8b\u7f29\u653e\u56fe\u50cf\u3002 \u65cb\u8f6c\uff1a \u5982\u679c\u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u4ee5\u4efb\u610f\u89d2\u5ea6\u65cb\u8f6c\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u4ee5 15\u00b0\u4e3a\u5355\u4f4d\u65cb\u8f6c\u56fe\u50cf\u3002 \u659c\u5207\uff1a \u4f7f\u7528\u201c\u659c\u5207\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u4efb\u610f\u65b9\u5411\u3001\u5782\u76f4\u65b9\u5411\u6216\u6c34\u5e73\u65b9\u5411\u4e0a\u503e\u659c\u56fe\u50cf\u3002\u5982\u679c\u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u65b9\u5411\u4e0a\u503e\u659c\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u5728\u5782\u76f4\u6216\u6c34\u5e73\u65b9\u5411\u4e0a\u503e\u659c\u56fe\u50cf\u3002 \u626d\u66f2\uff1a \u4f7f\u7528\u201c\u626d\u66f2\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u5404\u4e2a\u65b9\u5411\u4e0a\u4f38\u5c55\u53d8\u6362\u5bf9\u8c61\u3002\u5982\u679c\u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u65b9\u5411\u4e0a\u626d\u66f2\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u5728\u5782\u76f4\u6216\u6c34\u5e73\u65b9\u5411\u4e0a\u626d\u66f2\u56fe\u50cf\u3002 \u900f\u89c6\uff1a \u4f7f\u7528\u201c\u900f\u89c6\u201d\u547d\u4ee4\u53ef\u4ee5\u5bf9\u53d8\u6362\u5bf9\u8c61\u5e94\u7528\u5355\u70b9\u900f\u89c6\u3002\u62d6\u66f3\u5b9a\u754c\u6846 4 \u4e2a\u89d2\u4e0a\u7684\u63a7\u5236\u70b9\uff0c\u53ef\u4ee5\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u5bf9\u56fe\u50cf\u5e94\u7528\u900f\u89c6\u3002 \u53d8\u5f62\uff1a \u5982\u679c\u8981\u5bf9\u56fe\u50cf\u7684\u5c40\u90e8\u5185\u5bb9\u8fdb\u884c\u626d\u66f2\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u53d8\u5f62\u201d\u547d\u4ee4\u6765\u64cd\u4f5c\u3002\u6267\u884c\u8be5\u547d\u4ee4\u65f6\uff0c\u56fe\u50cf\u4e0a\u5c06\u4f1a\u51fa\u73b0\u53d8\u5f62\u7f51\u683c\u548c\u951a\u70b9\uff0c\u62d6\u66f3\u951a\u70b9\u6216\u8c03\u6574\u951a\u70b9\u7684\u65b9\u5411\u7ebf\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u66f4\u52a0\u81ea\u7531\u548c\u7075\u6d3b\u7684\u53d8\u5f62\u5904\u7406\u3002 \u65cb\u8f6c 180 \u5ea6 / \u65cb\u8f6c 90 \u5ea6\uff08\u987a\u65f6\u9488\uff09/ \u65cb\u8f6c 90 \u5ea6\uff08\u9006\u65f6\u9488\uff09\uff1a \u8fd9 3 \u4e2a\u547d\u4ee4\u975e\u5e38\u7b80\u5355\uff0c\u4ee5\u56fe 4-107 \u6240\u793a\u56fe\u50cf\u4e3a\u4f8b\uff0c\u6267\u884c\u201c\u65cb\u8f6c 180 \u5ea6\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u65cb\u8f6c 180\u00b0\uff1b\u6267\u884c\u201c\u65cb\u8f6c 90 \u5ea6\uff08\u987a\u65f6\u9488\uff09\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90\u00b0\uff1b\u6267\u884c\u201c\u65cb\u8f6c 90 \u5ea6\uff08\u9006\u65f6\u9488\uff09\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u9006\u65f6\u9488\u65cb\u8f6c 90\u00b0\u3002 \u6c34\u5e73\u7ffb\u8f6c / \u5782\u76f4\u7ffb\u8f6c\uff1a \u8fd9\u4e24\u4e2a\u547d\u4ee4\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u6267\u884c\u201c\u6c34\u5e73\u7ffb\u8f6c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u8fdb\u884c\u7ffb\u8f6c\uff1b\u6267\u884c\u201c\u5782\u76f4\u7ffb\u8f6c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u8fdb\u884c\u7ffb\u8f6c\u3002 \u81ea\u7531\u53d8\u6362\u5e76\u590d\u5236\u56fe\u50cf \u00b6 \u5728 Photoshop \u4e2d\uff0c\u53ef\u4ee5\u8fb9\u53d8\u6362\u56fe\u50cf\uff0c\u8fb9\u590d\u5236\u56fe\u50cf\u3002\u8fd9\u4e2a\u529f\u80fd\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u9891\u7387\u975e\u5e38\u9ad8\u3002\u9009\u4e2d\u5706\u5f62\u6309\u94ae\u56fe\u5c42\uff0c\u6309 Ctrl+Alt+T \u7ec4\u5408\u952e\u8fdb\u5165\u81ea\u7531\u53d8\u6362\u5e76\u590d\u5236\u72b6\u6001\uff0c\u5c06\u4e2d\u5fc3\u70b9\u5b9a\u4f4d\u5728\u53f3\u4e0a\u89d2\uff0c\u7136\u540e\u5c06\u5176\u7f29\u5c0f\u5e76\u5411\u53f3\u79fb\u52a8\u4e00\u6bb5\u8ddd\u79bb\uff0c\u63a5\u7740\u6309 Enter \u952e\u786e\u8ba4\u64cd\u4f5c\u3002\u8fd9\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u5960\u5b9a\u4e86\u4e00\u4e2a\u53d8\u6362\u89c4\u5f8b\uff0c\u540c\u65f6 Photoshop\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002 \u786e \u5b9a \u53d8 \u6362 \u89c4 \u5f8b \u4ee5 \u540e\uff0c \u5c31 \u53ef \u4ee5 \u6309 \u7167 \u8fd9 \u4e2a \u89c4 \u5f8b \u7ee7 \u7eed \u53d8 \u6362 \u5e76 \u590d \u5236 \u56fe \u50cf\u3002 \u5982 \u679c \u8981 \u7ee7 \u7eed \u53d8 \u6362 \u5e76 \u590d \u5236 \u56fe \u50cf\uff0c \u53ef \u4ee5 \u8fde \u7eed \u6309 Shift+Ctrl+Alt+T \u7ec4\u5408\u952e\uff0c\u76f4\u5230\u8fbe\u5230\u8981\u6c42\u4e3a\u6b62\u3002 \u64cd\u63a7\u53d8\u5f62 \u00b6 \u201c\u64cd\u63a7\u53d8\u5f62\u201d\u662f\u4e00\u79cd\u53ef\u89c6\u7f51\u683c\u3002\u501f\u52a9\u8be5\u7f51\u683c\uff0c\u53ef\u4ee5\u968f\u610f\u5730\u626d\u66f2\u7279\u5b9a\u56fe\u50cf\u533a\u57df\uff0c\u5e76\u4fdd\u6301\u5176\u4ed6\u533a\u57df\u4e0d\u53d8\u3002\u201c\u64cd\u63a7\u53d8\u5f62\u201d\u901a\u5e38\u7528\u6765\u4fee\u6539\u4eba\u7269\u7684\u52a8\u4f5c\u3001\u53d1\u578b\u7b49\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u64cd\u63a7\u53d8\u5f62\u201d\u547d\u4ee4\uff0c\u56fe\u50cf\u4e0a\u5c06\u4f1a\u5e03\u6ee1\u7f51\u683c\uff0c\u901a\u8fc7\u5728\u56fe\u50cf\u4e2d\u7684\u5173\u952e\u70b9\u4e0a\u6dfb\u52a0\u201c\u56fe\u9489\u201d\uff0c\u53ef\u4ee5\u4fee\u6539\u4eba\u7269\u7684\u4e00\u4e9b\u52a8\u4f5c\u3002 \u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42 \u00b6 \u62cd\u6444\u5168\u666f\u56fe\u50cf\u65f6\u7ecf\u5e38\u9700\u8981\u62cd\u6444\u591a\u5f20\u540e\u5728\u540e\u671f\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u62fc\u63a5\u3002\u4f7f\u7528\u201c\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u201d\u547d\u4ee4\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u56fe\u5c42\u4e2d\u7684\u76f8\u4f3c\u5185\u5bb9\uff08\u5982\u89d2\u548c\u8fb9\uff09\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u3002\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u56fe\u5c42\u4f5c\u4e3a\u53c2\u8003\u56fe\u5c42\uff0c\u4e5f\u53ef\u4ee5\u8ba9 Photoshop \u81ea\u52a8\u9009\u62e9\u53c2\u8003\u56fe\u5c42\uff0c\u5176\u4ed6\u56fe\u5c42\u5c06\u4e0e\u53c2\u8003\u56fe\u5c42\u5bf9\u9f50\uff0c\u4ee5\u4fbf\u4f7f\u5339\u914d\u7684\u5185\u5bb9\u80fd\u591f\u81ea\u52a8\u8fdb\u884c\u53e0\u52a0\u3002 \u81ea\u52a8\u6df7\u5408\u56fe\u5c42 \u00b6 \u4f7f\u7528\u201c\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\u53ef\u4ee5\u7f1d\u5408\u6216\u8005\u7ec4\u5408\u56fe\u50cf\uff0c\u4ece\u800c\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u83b7\u5f97\u5e73\u6ed1\u7684\u8fc7\u6e21\u6548\u679c\u3002\u201c\u7f16\u8f91 > \u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u3002 \u7ec3\u4e60 \u00b6 \u4f7f\u7528\u53d8\u6362\u5236\u4f5c\u5f62\u6001\u5404\u5f02\u7684\u8774\u8776 \u4f7f\u7528\u64cd\u63a7\u53d8\u5f62\u6539\u53d8\u7f8e\u5973\u59ff\u52bf \u5229\u7528\u81ea\u7531\u53d8\u6362\u5c06\u7167\u7247\u653e\u5230\u76f8\u6846\u4e2d \u8c03\u6574\u753b\u9762\u6784\u56fe","title":"\u56fe\u50cf\u7684\u57fa\u672c\u7f16\u8f91\u65b9\u6cd5"},{"location":"PS/PS1/#_1","text":"\u65b0\u5efa\u56fe\u5f62\u6587\u4ef6\uff1a Ctrl + N \u8def\u5f84\u53d8\u9009\u533a\uff1a Ctrl + Enter \u8f7d\u5165\u9009\u533a\uff1a`Ctrl + \u70b9\u6309\u56fe\u5c42\u3001\u8def\u5f84\u3001\u901a\u9053\u9762\u677f\u4e2d\u7684\u7f29\u7ea6\u56fe \u653e\u5927/\u7f29\u5c0f\u89c6\u56fe\uff1a Ctrl + [+]/[-] \u6ee1\u753b\u5e03\u663e\u793a\uff1a Ctrl + 0 \u663e\u793a/\u9690\u85cf\u6807\u5c3a\uff1a Ctrl + R \u81ea\u7531\u53d8\u6362\uff1a Ctrl + T \u65b0\u5efa\u56fe\u5c42\uff1a Ctrl + Shift + N \u62f7\u8d1d\u56fe\u5c42\uff1a Ctrl + J \u5408\u5e76\u56fe\u5c42\uff1a Ctrl + E \u9009\u533a\u524d\u666f\u8272\u586b\u5145\uff1a Alt + del \u9009\u533a\u80cc\u666f\u8272\u586b\u5145\uff1a Ctrl + del \u5168\u90e8\u9009\u53d6\uff1a Ctrl + A \u53d6\u6d88\u9009\u62e9\uff1a Ctrl + D \u5728\u5df2\u6709\u9009\u533a\u60c5\u51b5\u4e0b\u6dfb\u52a0\u9009\u53d6\uff1a \u6309\u4f4fShift\u540e\u6dfb\u52a0 \u5728\u5df2\u6709\u9009\u533a\u60c5\u51b5\u4e0b\u51cf\u5c11\u9009\u533a\uff1a \u6309\u4f4fAlt \u540e\u51cf\u5c11 \u53cd\u5411\u9009\u62e9\uff1a Ctrl + Shift + I \u7fbd\u5316\uff1a Shift + F6 \u64a4\u9500\u64cd\u4f5c\uff1a Ctrl + Z","title":"\u5feb\u6377\u952e"},{"location":"PS/PS1/#_2","text":"\u6267\u884c\u201c\u56fe\u50cf > \u56fe\u50cf\u5927\u5c0f\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+I \u7ec4\u5408\u952e\uff0c\u53ef\u6253\u5f00\u201c\u56fe\u50cf\u5927\u5c0f\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u4fee\u6539\u56fe\u50cf\u5927\u5c0f"},{"location":"PS/PS1/#_3","text":"\u5f88\u591a\u65f6\u5019\u56fe\u50cf\u7d20\u6750\u7684\u5c3a\u5bf8\u4e0e\u9700\u8981\u7684\u5c3a\u5bf8\u4e0d\u7b26\uff0c\u4f8b\u5982\u5236\u4f5c\u8ba1\u7b97\u673a\u684c\u9762\u58c1\u7eb8\u3001\u4e2a\u6027\u5316\u865a\u62df\u5934\u50cf\u6216\u4f20\u8f93\u5230\u4e2a\u4eba\u7f51\u7edc\u7a7a\u95f4\u7b49\uff0c\u90fd\u9700\u8981\u5bf9\u56fe\u50cf\u7684\u5c3a\u5bf8\u8fdb\u884c\u7279\u5b9a\u7684\u4fee\u6539\uff0c\u4ee5\u9002\u5408\u4e0d\u540c\u7684\u8981\u6c42\u3002","title":"\u4fee\u6539\u56fe\u50cf\u5c3a\u5bf8"},{"location":"PS/PS1/#_4","text":"\u5206\u8fa8\u7387\u662f\u6307\u4f4d\u56fe\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u7cbe\u7ec6\u5ea6\uff0c\u6d4b\u91cf\u5355\u4f4d\u662f\u50cf\u7d20 / \u82f1\u5bf8\uff08PPI\uff09\uff0c\u6bcf\u82f1\u5bf8\u7684\u50cf\u7d20\u8d8a\u591a\uff0c\u5206\u8fa8\u7387\u8d8a\u9ad8\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u56fe\u50cf\u7684\u5206\u8fa8\u7387\u8d8a\u9ad8\uff0c\u5370\u5237\u51fa\u6765\u7684\u8d28\u91cf\u5c31\u8d8a\u597d\u3002","title":"\u4fee\u6539\u56fe\u50cf\u5206\u8fa8\u7387"},{"location":"PS/PS1/#_5","text":"","title":"\u4fee\u6539\u753b\u5e03"},{"location":"PS/PS1/#_6","text":"\u6267\u884c\u201c\u56fe\u50cf > \u753b\u5e03\u5927\u5c0f\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u753b\u5e03\u5927\u5c0f\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u5bf9\u753b\u5e03\u7684\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u3001\u5b9a\u4f4d\u548c\u753b\u5e03\u6269\u5c55\u989c\u8272\u8fdb\u884c\u8c03\u6574\u3002\u589e\u5927\u753b\u5e03\u5927\u5c0f\uff0c\u539f\u59cb\u56fe\u50cf\u5927\u5c0f\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c\u589e\u5927\u7684\u90e8\u5206\u5219\u4f7f\u7528\u9009\u5b9a\u7684\u586b\u5145\u989c\u8272\u8fdb\u884c\u586b\u5145\uff1b\u51cf\u5c0f\u753b\u5e03\u5927\u5c0f\uff0c\u56fe\u50cf\u5219\u4f1a\u88ab\u88c1\u5207\u6389\u4e00\u90e8\u5206\u3002","title":"\u4fee\u6539\u753b\u5e03\u5927\u5c0f"},{"location":"PS/PS1/#_7","text":"\u753b\u5e03\u6269\u5c55\u989c\u8272\u662f\u6307\u586b\u5145\u65b0\u753b\u5e03\u7684\u989c\u8272\u3002\u5982\u679c\u56fe\u50cf\u7684\u80cc\u666f\u662f\u900f\u660e\u7684\uff0c\u90a3\u4e48\u201c\u753b\u5e03\u6269\u5c55\u989c\u8272\u201d\u9009\u9879\u5c06\u4e0d\u53ef\u7528\uff0c\u65b0\u589e\u52a0\u7684\u753b\u5e03\u4e5f\u662f\u900f\u660e\u7684\u3002","title":"\u8bbe\u7f6e\u753b\u5e03\u6269\u5c55\u989c\u8272"},{"location":"PS/PS1/#_8","text":"","title":"\u88c1\u526a\u4e0e\u88c1\u5207\u56fe\u50cf"},{"location":"PS/PS1/#_9","text":"\u88c1\u526a\u662f\u6307\u79fb\u53bb\u90e8\u5206\u56fe\u50cf\uff0c\u4ee5\u7a81\u51fa\u6216\u52a0\u5f3a\u6784\u56fe\u6548\u679c\u7684\u8fc7\u7a0b\u3002\u4f7f\u7528\u201c\u88c1\u526a\u5de5\u5177\u201d\u53ef\u4ee5\u88c1\u526a\u6389\u591a\u4f59\u7684\u56fe\u50cf\uff0c\u5e76\u91cd\u65b0\u5b9a\u4e49\u753b\u5e03\u7684\u5927\u5c0f\u3002\u9009\u62e9\u201c\u88c1\u526a\u5de5\u5177\u201d\u540e\uff0c\u5728\u753b\u9762\u4e2d\u62d6\u66f3\u51fa\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\uff0c\u9009\u62e9\u8981\u4fdd\u7559\u7684\u90e8\u5206\uff0c\u7136\u540e\u6309 Enter \u952e\u6216\u53cc\u51fb\u5373\u53ef\u5b8c\u6210\u88c1\u526a\u3002","title":"\u88c1\u526a\u56fe\u50cf"},{"location":"PS/PS1/#_10","text":"\u4f7f\u7528\u201c\u900f\u89c6\u88c1\u526a\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u9700\u8981\u88c1\u526a\u7684\u56fe\u50cf\u4e0a\u5236\u4f5c\u51fa\u5e26\u6709\u900f\u89c6\u611f\u7684\u88c1\u526a\u6846\uff0c\u5728\u5e94\u7528\u88c1\u526a\u540e\u53ef\u4ee5\u4f7f\u56fe\u50cf\u5e26\u6709\u660e\u663e\u7684\u900f\u89c6\u611f\u3002\u4f7f\u7528\u201c\u900f\u89c6\u88c1\u526a\u5de5\u5177\u201d\u5728\u753b\u9762\u4e2d\u7ed8\u5236\u4e00\u4e2a\u88c1\u526a\u6846\uff0c\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u88c1\u526a\u6846\u7684\u4e00\u4e2a\u63a7\u5236\u70b9\u4e0a\uff0c\u5355\u51fb\u5e76\u62d6\u52a8\u3002\u8c03\u6574\u5b8c\u6210\u540e\u5355\u51fb\u9009\u9879\u680f\u4e2d\u7684\u201c\u63d0\u4ea4\u5f53\u524d\u88c1\u526a\u64cd\u4f5c\u201d\u6309\u94ae \uff0c\u5373\u53ef\u5f97\u5230\u5e26\u6709\u900f\u89c6\u611f\u7684\u753b\u9762\u6548\u679c\u3002","title":"\u900f\u89c6\u88c1\u526a\u5de5\u5177"},{"location":"PS/PS1/#_11","text":"\u4f7f\u7528\u201c\u88c1\u5207\u201d\u547d\u4ee4\u53ef\u4ee5\u57fa\u4e8e\u50cf\u7d20\u7684\u989c\u8272\u6765\u88c1\u5207\u56fe\u50cf\u3002\u6267\u884c\u201c\u56fe\u50cf > \u88c1\u5207\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u88c1\u5207\u201d\u5bf9\u8bdd\u6846","title":"\u88c1\u5207\u56fe\u50cf"},{"location":"PS/PS1/#_12","text":"\u6267\u884c\u201c\u56fe\u50cf > \u56fe\u50cf\u65cb\u8f6c\u201d\u547d\u4ee4\uff0c\u5728\u8be5\u83dc\u5355\u4e0b\u63d0\u4f9b\u4e86 6 \u79cd\u65cb\u8f6c\u753b\u5e03\u7684\u547d\u4ee4\uff0c\u5305\u62ec\u201c180 \u5ea6\u201d\u3001\u201c90 \u5ea6\uff08\u987a\u65f6\u9488\uff09\u201d\u3001\u201c90 \u5ea6\uff08\u9006\u65f6\u9488\uff09\u201d\u3001\u201c\u4efb\u610f\u89d2\u5ea6\u201d\u3001\u201c\u6c34\u5e73\u7ffb\u8f6c\u753b\u5e03\u201d\u548c\u201c\u5782\u76f4\u7ffb\u8f6c\u753b\u5e03\u201d\u3002\u5728\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u65f6\uff0c\u53ef\u4ee5\u65cb\u8f6c\u6216\u7ffb\u8f6c\u6574\u4e2a\u56fe\u50cf\u3002","title":"\u65cb\u8f6c\u753b\u5e03"},{"location":"PS/PS1/#_13","text":"","title":"\u64a4\u9500/\u8fd4\u56de/\u6062\u590d\u6587\u4ef6"},{"location":"PS/PS1/#_14","text":"\u6267\u884c\u201c\u7f16\u8f91 > \u8fd8\u539f\u201d\u547d\u4ee4\u6216\u6309 Ctrl+Z \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u64a4\u9500\u6700\u8fd1\u4e00\u6b21\u7684\u64cd\u4f5c\uff0c\u5c06\u56fe\u50cf\u8fd8\u539f\u5230\u4e0a\u4e00\u6b65\u7684\u64cd\u4f5c\u72b6\u6001\u3002\u5982\u679c\u60f3\u8981\u53d6\u6d88\u8fd8\u539f\u64cd\u4f5c\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u7f16\u8f91 > \u91cd\u505a\u201d\u547d\u4ee4\u3002","title":"\u8fd8\u539f\u4e0e\u91cd\u505a"},{"location":"PS/PS1/#_15","text":"\u7531\u4e8e\u201c\u8fd8\u539f\u201d\u547d\u4ee4\u53ea\u53ef\u4ee5\u8fd8\u539f\u4e00\u6b65\u64cd\u4f5c\uff0c\u800c\u5b9e\u9645\u64cd\u4f5c\u4e2d\u7ecf\u5e38\u9700\u8981\u8fd8\u539f\u591a\u4e2a\u64cd\u4f5c\uff0c\u5c31\u9700\u8981\u8fde\u7eed\u6267\u884c\u201c\u7f16\u8f91 > \u540e\u9000\u4e00\u6b65\u201d\u547d\u4ee4\uff0c\u6216\u8fde\u7eed\u6309 Alt+Ctrl+Z \u7ec4\u5408\u952e\u6765\u9010\u6b65\u64a4\u9500\u64cd\u4f5c\uff1b\u5982\u679c\u8981\u53d6\u6d88\u8fd8\u539f\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8fde\u7eed\u6267\u884c\u201c\u7f16\u8f91 > \u524d\u8fdb\u4e00\u6b65\u201d\u547d\u4ee4\uff0c\u6216\u8fde\u7eed\u6309 Shift+Ctrl+Z \u7ec4\u5408\u952e\u6765\u9010\u6b65\u6062\u590d\u88ab\u64a4\u9500\u7684\u64cd\u4f5c\u3002","title":"\u524d\u8fdb\u4e00\u6b65\u4e0e\u540e\u9000\u4e00\u6b65"},{"location":"PS/PS1/#_16","text":"\u6267\u884c\u201c\u6587\u4ef6 > \u6062\u590d\u201d\u547d\u4ee4\u6216\u6309 F12 \u952e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u6587\u4ef6\u6062\u590d\u5230\u6700\u540e\u4e00\u6b21\u4fdd\u5b58\u65f6\u7684\u72b6\u6001\uff0c\u6216\u8fd4\u56de\u5230\u521a\u6253\u5f00\u6587\u4ef6\u65f6\u7684\u72b6\u6001\u3002","title":"\u6062\u590d\u6587\u4ef6\u5230\u521d\u59cb\u72b6\u6001"},{"location":"PS/PS1/#_17","text":"\u6267\u884c\u201c\u7a97\u53e3 > \u5386\u53f2\u8bb0\u5f55\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u5386\u53f2\u8bb0\u5f55\u201d\u9762\u677f\u3002","title":"\u4f7f\u7528\u201c\u5386\u53f2\u8bb0\u5f55\u201d"},{"location":"PS/PS1/#_18","text":"","title":"\u526a\u5207/\u62f7\u8d1d/\u7c98\u8d34\u56fe\u50cf"},{"location":"PS/PS1/#_19","text":"\u521b\u5efa\u9009\u533a\u540e\uff0c\u6267\u884c\u201c\u7f16\u8f91 > \u526a\u5207\u201d\u547d\u4ee4\u6216\u6309 Ctrl+X \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u4e2d\u7684\u5185\u5bb9\u526a\u5207\u5230\u526a\u8d34\u677f\u4e0a\u3002\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u7c98\u8d34\u201d\u547d\u4ee4\u6216\u6309 Ctrl+V \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u526a\u5207\u7684\u56fe\u50cf\u7c98\u8d34\u5230\u753b\u5e03\u4e2d\uff0c\u5e76\u53ef\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002","title":"\u526a\u5207\u4e0e\u7c98\u8d34"},{"location":"PS/PS1/#_20","text":"\u521b\u5efa\u9009\u533a\u540e\uff0c\u6267\u884c\u201c\u7f16\u8f91 > \u62f7\u8d1d\u201d\u547d\u4ee4\u6216\u6309 Ctrl+C \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u4e2d\u7684\u56fe\u50cf\u590d\u5236\u5230\u526a\u8d34\u677f\u4e2d\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u7c98\u8d34\u201d\u547d\u4ee4\u6216\u6309 Ctrl+V \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u590d\u5236\u7684\u56fe\u50cf\u7c98\u8d34\u5230\u753b\u5e03\u4e2d\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002","title":"\u62f7\u8d1d"},{"location":"PS/PS1/#_21","text":"\u5f53\u6587\u6863\u4e2d\u5305\u542b\u5f88\u591a\u56fe\u5c42\u65f6\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u5168\u9009\u201d\u547d\u4ee4\u6216\u6309 Ctrl+A \u7ec4\u5408\u952e\u5168\u9009\u5f53\u524d\u56fe\u50cf\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u5408\u5e76\u62f7 \u8d1d\u201d\u547d\u4ee4\u6216\u6309 Ctrl+Shift+C \u7ec4\u5408\u952e\uff0c\u53ef\u5c06\u6240\u6709\u53ef\u89c1\u56fe\u5c42\u590d\u5236\u5e76\u5408\u5e76\u5230\u526a\u8d34\u677f\u4e2d\u3002\u6700\u540e\u6309 Ctrl+V \u7ec4\u5408\u952e\u53ef\u4ee5\u5c06\u5408\u5e76\u590d\u5236\u7684\u56fe\u50cf\u7c98\u8d34\u5230\u5f53\u524d\u6587\u6863\u6216\u5176\u4ed6\u6587\u6863\u4e2d\u3002","title":"\u5408\u5e76\u62f7\u8d1d"},{"location":"PS/PS1/#_22","text":"\u5f53\u9009\u4e2d\u7684\u56fe\u5c42\u4e3a\u5305\u542b\u9009\u533a\u72b6\u6001\u4e0b\u7684\u666e\u901a\u56fe\u5c42\u65f6\uff0c\u6267\u884c\u201c\u7f16\u8f91 > \u6e05\u9664\u201d\u547d\u4ee4\u53ef\u4ee5\u6e05\u9664\u9009\u533a\u4e2d\u7684\u56fe\u50cf\u3002\u9009\u4e2d\u56fe\u5c42\u4e3a\u201c\u80cc\u666f\u201d\u56fe\u5c42\u65f6\uff0c\u88ab\u6e05\u9664\u7684\u533a\u57df\u5c06\u586b\u5145\u80cc\u666f\u8272\u3002","title":"\u6e05\u9664\u56fe\u50cf"},{"location":"PS/PS1/#_23","text":"","title":"\u9009\u62e9\u4e0e\u79fb\u52a8\u5bf9\u8c61"},{"location":"PS/PS1/#_24","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u8981\u79fb\u52a8\u7684\u5bf9\u8c61\u6240\u5728\u7684\u56fe\u5c42\u3002\u7136\u540e\u5728\u5de5\u5177\u7bb1\u4e2d\u5355\u51fb\u201c\u79fb\u52a8\u5de5\u5177\u201d\u6309\u94ae \uff0c\u63a5\u7740\u5728\u753b\u5e03\u4e2d\u5355\u51fb \u9f20\u6807\u5de6\u952e\u5e76\u62d6\u66f3\u5373\u53ef\u79fb\u52a8\u9009\u4e2d\u7684\u5bf9\u8c61\u3002","title":"\u5728\u540c\u4e00\u4e2a\u6587\u6863\u4e2d\u79fb\u52a8\u56fe\u50cf"},{"location":"PS/PS1/#_25","text":"\u82e5\u8981\u5728\u4e0d\u540c\u7684\u6587\u6863\u95f4\u79fb\u52a8\u56fe\u50cf\uff0c\u9996\u5148\u9700\u8981\u4f7f\u7528\u201c\u79fb\u52a8\u5de5 \u5177\u201d\u5c06\u5149\u6807\u653e\u7f6e\u5728\u5176\u4e2d\u4e00\u4e2a\u753b\u5e03\u4e2d\uff0c\u5355\u51fb\u5e76\u62d6\u66f3\u5230\u53e6\u5916\u4e00\u4e2a\u6587\u6863\u7684\u6807\u9898\u680f\u4e0a\uff0c\u505c\u7559\u7247\u523b\u540e\u5373\u53ef\u5207\u6362\u5230\u76ee\u6807\u6587\u6863\uff0c\u63a5\u7740\u5c06\u56fe\u50cf\u79fb\u52a8\u5230\u753b\u9762\u4e2d\u91ca\u653e\u9f20\u6807\u5373\u53ef\u5c06\u56fe\u50cf\u62d6\u66f3\u5230\u6587\u6863\u4e2d\uff0c\u540c\u65f6Photoshop \u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002","title":"\u5728\u4e0d\u540c\u7684\u6587\u6863\u95f4\u79fb\u52a8\u56fe\u50cf"},{"location":"PS/PS1/#_26","text":"\u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u626d\u66f2\u3001\u659c\u5207\u7b49\u662f\u5904\u7406\u56fe\u50cf\u7684\u57fa\u672c\u65b9\u6cd5\u3002\u5176\u4e2d\u79fb\u52a8\u3001\u65cb\u8f6c\u548c\u7f29\u653e\u79f0\u4e3a\u53d8\u6362\u64cd\u4f5c\uff0c\u800c\u626d\u66f2\u548c\u659c\u5207\u79f0\u4e3a\u53d8\u5f62\u64cd\u4f5c\u3002\u901a\u8fc7\u6267\u884c\u201c\u7f16\u8f91\u201d\u83dc\u5355\u4e0b\u7684 \u201c\u81ea\u7531\u53d8\u6362\u201d\u548c\u201c\u53d8\u6362\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6539\u53d8\u56fe\u50cf\u7684\u5f62\u72b6\u3002","title":"\u56fe\u50cf\u53d8\u6362"},{"location":"PS/PS1/#_27","text":"\u5728\u6267\u884c\u201c\u81ea\u7531\u53d8\u6362\u201d\u6216\u201c\u53d8\u6362\u201d\u64cd\u4f5c\u65f6\uff0c\u5f53\u524d\u5bf9\u8c61\u7684\u5468\u56f4\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5b9a\u754c\u6846\uff0c\u5b9a\u754c\u6846\u7684\u4e2d\u95f4\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u56db\u5468\u8fd8\u6709\u63a7\u5236\u70b9\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e2d\u5fc3\u70b9\u4f4d\u4e8e\u53d8\u6362\u5bf9\u8c61\u7684\u4e2d\u5fc3\uff0c\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u53d8\u6362\u4e2d\u5fc3\uff0c\u62d6\u66f3\u4e2d\u5fc3\u70b9\u53ef\u4ee5\u79fb\u52a8\u5b83\u7684\u4f4d\u7f6e\uff1b\u63a7\u5236\u70b9\u4e3b\u8981\u7528\u6765\u53d8\u6362\u56fe\u50cf\u3002","title":"\u5b9a\u754c\u6846\u3001\u4e2d\u5fc3\u70b9\u548c\u63a7\u5236\u70b9"},{"location":"PS/PS1/#_28","text":"\u5728\u201c\u7f16\u8f91 > \u53d8\u6362\u201d\u83dc\u5355\u4e2d\u63d0\u4f9b\u4e86\u591a\u79cd\u53d8\u6362\u547d\u4ee4\u3002\u4f7f\u7528\u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u5bf9\u56fe\u5c42\u3001\u8def\u5f84\u3001\u77e2\u91cf\u56fe\u5f62\uff0c\u4ee5\u53ca\u9009\u533a\u4e2d\u7684\u56fe\u50cf\u8fdb\u884c\u53d8\u6362\u64cd\u4f5c\u3002\u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u77e2\u91cf\u8499\u7248\u548c Alpha \u5e94\u7528\u53d8\u6362\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u81ea\u7531\u53d8\u6362\u201d\u547d\u4ee4\uff0c\u540c\u6837\u53ef\u4ee5\u4f7f\u5bf9\u8c61\u8fdb\u5165\u53d8\u6362\u72b6\u6001\uff0c\u5982\u679c\u60f3\u8981\u5207\u6362\u53d8\u6362\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5728\u81ea\u7531\u53d8\u6362\u72b6\u6001\u4e0b\u5728\u753b\u9762\u4e2d\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u8fdb\u884c\u9009\u62e9\u3002","title":"\u53d8\u6362\u4e0e\u81ea\u7531\u53d8\u6362\u547d\u4ee4"},{"location":"PS/PS1/#_29","text":"\u7f29\u653e\uff1a \u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u4efb\u610f\u7f29\u653e\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u7b49\u6bd4\u4f8b\u7f29\u653e\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift+Alt \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u4ee5\u4e2d\u5fc3\u70b9\u4e3a\u57fa\u51c6\u7b49\u6bd4\u4f8b\u7f29\u653e\u56fe\u50cf\u3002 \u65cb\u8f6c\uff1a \u5982\u679c\u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u4ee5\u4efb\u610f\u89d2\u5ea6\u65cb\u8f6c\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u4ee5 15\u00b0\u4e3a\u5355\u4f4d\u65cb\u8f6c\u56fe\u50cf\u3002 \u659c\u5207\uff1a \u4f7f\u7528\u201c\u659c\u5207\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u4efb\u610f\u65b9\u5411\u3001\u5782\u76f4\u65b9\u5411\u6216\u6c34\u5e73\u65b9\u5411\u4e0a\u503e\u659c\u56fe\u50cf\u3002\u5982\u679c\u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u65b9\u5411\u4e0a\u503e\u659c\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u5728\u5782\u76f4\u6216\u6c34\u5e73\u65b9\u5411\u4e0a\u503e\u659c\u56fe\u50cf\u3002 \u626d\u66f2\uff1a \u4f7f\u7528\u201c\u626d\u66f2\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u5404\u4e2a\u65b9\u5411\u4e0a\u4f38\u5c55\u53d8\u6362\u5bf9\u8c61\u3002\u5982\u679c\u4e0d\u6309\u4f4f\u4efb\u4f55\u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u65b9\u5411\u4e0a\u626d\u66f2\u56fe\u50cf\uff1b\u5982\u679c\u6309\u4f4f Shift \u952e\uff0c\u53ef\u4ee5\u5728\u5782\u76f4\u6216\u6c34\u5e73\u65b9\u5411\u4e0a\u626d\u66f2\u56fe\u50cf\u3002 \u900f\u89c6\uff1a \u4f7f\u7528\u201c\u900f\u89c6\u201d\u547d\u4ee4\u53ef\u4ee5\u5bf9\u53d8\u6362\u5bf9\u8c61\u5e94\u7528\u5355\u70b9\u900f\u89c6\u3002\u62d6\u66f3\u5b9a\u754c\u6846 4 \u4e2a\u89d2\u4e0a\u7684\u63a7\u5236\u70b9\uff0c\u53ef\u4ee5\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u5bf9\u56fe\u50cf\u5e94\u7528\u900f\u89c6\u3002 \u53d8\u5f62\uff1a \u5982\u679c\u8981\u5bf9\u56fe\u50cf\u7684\u5c40\u90e8\u5185\u5bb9\u8fdb\u884c\u626d\u66f2\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u53d8\u5f62\u201d\u547d\u4ee4\u6765\u64cd\u4f5c\u3002\u6267\u884c\u8be5\u547d\u4ee4\u65f6\uff0c\u56fe\u50cf\u4e0a\u5c06\u4f1a\u51fa\u73b0\u53d8\u5f62\u7f51\u683c\u548c\u951a\u70b9\uff0c\u62d6\u66f3\u951a\u70b9\u6216\u8c03\u6574\u951a\u70b9\u7684\u65b9\u5411\u7ebf\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u66f4\u52a0\u81ea\u7531\u548c\u7075\u6d3b\u7684\u53d8\u5f62\u5904\u7406\u3002 \u65cb\u8f6c 180 \u5ea6 / \u65cb\u8f6c 90 \u5ea6\uff08\u987a\u65f6\u9488\uff09/ \u65cb\u8f6c 90 \u5ea6\uff08\u9006\u65f6\u9488\uff09\uff1a \u8fd9 3 \u4e2a\u547d\u4ee4\u975e\u5e38\u7b80\u5355\uff0c\u4ee5\u56fe 4-107 \u6240\u793a\u56fe\u50cf\u4e3a\u4f8b\uff0c\u6267\u884c\u201c\u65cb\u8f6c 180 \u5ea6\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u65cb\u8f6c 180\u00b0\uff1b\u6267\u884c\u201c\u65cb\u8f6c 90 \u5ea6\uff08\u987a\u65f6\u9488\uff09\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90\u00b0\uff1b\u6267\u884c\u201c\u65cb\u8f6c 90 \u5ea6\uff08\u9006\u65f6\u9488\uff09\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u9006\u65f6\u9488\u65cb\u8f6c 90\u00b0\u3002 \u6c34\u5e73\u7ffb\u8f6c / \u5782\u76f4\u7ffb\u8f6c\uff1a \u8fd9\u4e24\u4e2a\u547d\u4ee4\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u6267\u884c\u201c\u6c34\u5e73\u7ffb\u8f6c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u8fdb\u884c\u7ffb\u8f6c\uff1b\u6267\u884c\u201c\u5782\u76f4\u7ffb\u8f6c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u56fe\u50cf\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u8fdb\u884c\u7ffb\u8f6c\u3002","title":"\u81ea\u7531\u53d8\u6362\u64cd\u4f5c"},{"location":"PS/PS1/#_30","text":"\u5728 Photoshop \u4e2d\uff0c\u53ef\u4ee5\u8fb9\u53d8\u6362\u56fe\u50cf\uff0c\u8fb9\u590d\u5236\u56fe\u50cf\u3002\u8fd9\u4e2a\u529f\u80fd\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u9891\u7387\u975e\u5e38\u9ad8\u3002\u9009\u4e2d\u5706\u5f62\u6309\u94ae\u56fe\u5c42\uff0c\u6309 Ctrl+Alt+T \u7ec4\u5408\u952e\u8fdb\u5165\u81ea\u7531\u53d8\u6362\u5e76\u590d\u5236\u72b6\u6001\uff0c\u5c06\u4e2d\u5fc3\u70b9\u5b9a\u4f4d\u5728\u53f3\u4e0a\u89d2\uff0c\u7136\u540e\u5c06\u5176\u7f29\u5c0f\u5e76\u5411\u53f3\u79fb\u52a8\u4e00\u6bb5\u8ddd\u79bb\uff0c\u63a5\u7740\u6309 Enter \u952e\u786e\u8ba4\u64cd\u4f5c\u3002\u8fd9\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u5960\u5b9a\u4e86\u4e00\u4e2a\u53d8\u6362\u89c4\u5f8b\uff0c\u540c\u65f6 Photoshop\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u3002 \u786e \u5b9a \u53d8 \u6362 \u89c4 \u5f8b \u4ee5 \u540e\uff0c \u5c31 \u53ef \u4ee5 \u6309 \u7167 \u8fd9 \u4e2a \u89c4 \u5f8b \u7ee7 \u7eed \u53d8 \u6362 \u5e76 \u590d \u5236 \u56fe \u50cf\u3002 \u5982 \u679c \u8981 \u7ee7 \u7eed \u53d8 \u6362 \u5e76 \u590d \u5236 \u56fe \u50cf\uff0c \u53ef \u4ee5 \u8fde \u7eed \u6309 Shift+Ctrl+Alt+T \u7ec4\u5408\u952e\uff0c\u76f4\u5230\u8fbe\u5230\u8981\u6c42\u4e3a\u6b62\u3002","title":"\u81ea\u7531\u53d8\u6362\u5e76\u590d\u5236\u56fe\u50cf"},{"location":"PS/PS1/#_31","text":"\u201c\u64cd\u63a7\u53d8\u5f62\u201d\u662f\u4e00\u79cd\u53ef\u89c6\u7f51\u683c\u3002\u501f\u52a9\u8be5\u7f51\u683c\uff0c\u53ef\u4ee5\u968f\u610f\u5730\u626d\u66f2\u7279\u5b9a\u56fe\u50cf\u533a\u57df\uff0c\u5e76\u4fdd\u6301\u5176\u4ed6\u533a\u57df\u4e0d\u53d8\u3002\u201c\u64cd\u63a7\u53d8\u5f62\u201d\u901a\u5e38\u7528\u6765\u4fee\u6539\u4eba\u7269\u7684\u52a8\u4f5c\u3001\u53d1\u578b\u7b49\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u64cd\u63a7\u53d8\u5f62\u201d\u547d\u4ee4\uff0c\u56fe\u50cf\u4e0a\u5c06\u4f1a\u5e03\u6ee1\u7f51\u683c\uff0c\u901a\u8fc7\u5728\u56fe\u50cf\u4e2d\u7684\u5173\u952e\u70b9\u4e0a\u6dfb\u52a0\u201c\u56fe\u9489\u201d\uff0c\u53ef\u4ee5\u4fee\u6539\u4eba\u7269\u7684\u4e00\u4e9b\u52a8\u4f5c\u3002","title":"\u64cd\u63a7\u53d8\u5f62"},{"location":"PS/PS1/#_32","text":"\u62cd\u6444\u5168\u666f\u56fe\u50cf\u65f6\u7ecf\u5e38\u9700\u8981\u62cd\u6444\u591a\u5f20\u540e\u5728\u540e\u671f\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u62fc\u63a5\u3002\u4f7f\u7528\u201c\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u201d\u547d\u4ee4\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u56fe\u5c42\u4e2d\u7684\u76f8\u4f3c\u5185\u5bb9\uff08\u5982\u89d2\u548c\u8fb9\uff09\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u3002\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u56fe\u5c42\u4f5c\u4e3a\u53c2\u8003\u56fe\u5c42\uff0c\u4e5f\u53ef\u4ee5\u8ba9 Photoshop \u81ea\u52a8\u9009\u62e9\u53c2\u8003\u56fe\u5c42\uff0c\u5176\u4ed6\u56fe\u5c42\u5c06\u4e0e\u53c2\u8003\u56fe\u5c42\u5bf9\u9f50\uff0c\u4ee5\u4fbf\u4f7f\u5339\u914d\u7684\u5185\u5bb9\u80fd\u591f\u81ea\u52a8\u8fdb\u884c\u53e0\u52a0\u3002","title":"\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42"},{"location":"PS/PS1/#_33","text":"\u4f7f\u7528\u201c\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\u53ef\u4ee5\u7f1d\u5408\u6216\u8005\u7ec4\u5408\u56fe\u50cf\uff0c\u4ece\u800c\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u83b7\u5f97\u5e73\u6ed1\u7684\u8fc7\u6e21\u6548\u679c\u3002\u201c\u7f16\u8f91 > \u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u81ea\u52a8\u6df7\u5408\u56fe\u5c42"},{"location":"PS/PS1/#_34","text":"\u4f7f\u7528\u53d8\u6362\u5236\u4f5c\u5f62\u6001\u5404\u5f02\u7684\u8774\u8776 \u4f7f\u7528\u64cd\u63a7\u53d8\u5f62\u6539\u53d8\u7f8e\u5973\u59ff\u52bf \u5229\u7528\u81ea\u7531\u53d8\u6362\u5c06\u7167\u7247\u653e\u5230\u76f8\u6846\u4e2d \u8c03\u6574\u753b\u9762\u6784\u56fe","title":"\u7ec3\u4e60"},{"location":"PS/PS10/","text":"\u521d\u8bc6\u8499\u7248 \u00b6 \u8499\u7248\u7684\u7c7b\u578b \u00b6 \u5728 Photoshop \u4e2d\uff0c\u8499\u7248\u6709\u5feb\u901f\u8499\u7248\u3001\u526a\u8d34\u8499\u7248\u3001\u77e2\u91cf\u8499\u7248\u548c\u56fe\u5c42\u8499\u7248 4 \u79cd\u3002 + \u5feb\u901f\u8499\u7248\uff1a\u662f\u4e00\u79cd\u7528\u4e8e\u521b\u5efa\u548c\u7f16\u8f91\u9009\u533a\u7684\u529f\u80fd\u3002 + \u526a\u8d34\u8499\u7248\uff1a\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f62\u72b6\u6765\u63a7\u5236\u5176\u4ed6\u56fe\u5c42\u7684\u663e\u793a\u533a\u57df\u3002 + \u77e2\u91cf\u8499\u7248\uff1a\u901a\u8fc7\u8def\u5f84\u548c\u77e2\u91cf\u5f62\u72b6\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u533a\u57df\u3002 + \u56fe\u5c42\u8499\u7248\uff1a\u901a\u8fc7\u8499\u7248\u4e2d\u7684\u7070\u5ea6\u4fe1\u606f\u6765\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u533a\u57df\u3002 \u8ba4\u8bc6\u201c\u5c5e\u6027\u201d\u9762\u677f \u00b6 \u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u6240\u9009\u56fe\u5c42\u7684\u56fe\u5c42\u8499\u7248\u4ee5\u53ca\u77e2\u91cf\u8499\u7248\u7684\u201c\u6d53\u5ea6\u201d\u548c\u201c\u7fbd\u5316\u201d\u5c5e\u6027\u8fdb\u884c\u8c03\u6574\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u5c5e\u6027\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u5c5e\u6027\u201d\u9762\u677f\u3002 \u5feb\u901f\u8499\u7248 \u00b6 \u521b\u5efa\u5feb\u901f\u8499\u7248 \u00b6 \u6253\u5f00\u56fe\u50cf\uff0c\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u4ee5\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u7f16\u8f91\u201d\u6309\u94ae\u6216\u6309 Q \u952e\uff0c\u53ef\u4ee5\u8fdb\u5165\u5feb\u901f\u8499\u7248\u7f16\u8f91\u6a21\u5f0f\u3002\u6b64\u65f6\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u53ef\u4ee5\u89c2\u5bdf\u5230\u4e00\u4e2a\u5feb\u901f\u8499\u7248\u901a\u9053\u3002 \u7ea2\u8272\u7684\u533a\u57df\u8868\u793a\u672a\u9009\u4e2d\u7684\u533a\u57df\uff0c\u975e\u7ea2\u8272\u533a\u57df\u8868\u793a\u9009\u4e2d\u7684\u533a\u57df\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u4ee5\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u7f16\u8f91\u201d\u6309\u94ae \u6216\u6309 Q \u952e\u9000\u51fa\u5feb\u901f\u8499\u7248\u7f16\u8f91\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\u60f3\u8981\u7684\u9009\u533a\u3002\u53e6\u5916\uff0c\u5728\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u4e0b\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6ee4\u955c\u6765\u7f16\u8f91\u8499\u7248\u3002 \u526a\u8d34\u8499\u7248 \u00b6 \u4ec0\u4e48\u662f\u526a\u8d34\u8499\u7248 \u00b6 \u526a\u8d34\u8499\u677f\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u57fa\u5e95\u56fe\u5c42\u548c\u5185\u5bb9\u56fe\u5c42\u3002\u57fa\u5e95\u56fe\u5c42\u662f\u4f4d\u4e8e\u526a\u8d34\u8499\u7248\u6700\u5e95\u7aef\u7684\u4e00\u4e2a\u56fe\u5c42\uff0c\u5185\u5bb9\u56fe\u5c42\u5219\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u5176\u539f\u7406\u662f\u901a\u8fc7\u4f7f\u7528\u5904\u4e8e\u4e0b\u65b9\u56fe\u5c42\u7684\u5f62\u72b6\u6765\u9650\u5236\u4e0a\u65b9\u56fe\u5c42\u7684\u663e\u793a\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u57fa\u5e95\u56fe\u5c42\u7528\u4e8e\u9650\u5b9a\u6700\u7ec8\u56fe\u50cf\u7684\u5f62\u72b6\uff0c\u800c\u5185\u5bb9\u56fe\u5c42\u5219\u7528\u4e8e\u9650\u5b9a\u6700\u7ec8\u56fe\u50cf\u663e\u793a\u7684\u989c\u8272\u56fe\u6848\u3002 \u57fa\u5e95\u56fe\u5c42\uff1a\u57fa\u5e95\u56fe\u5c42\u53ea\u6709\u4e00\u4e2a\uff0c\u5b83\u51b3\u5b9a\u4e86\u4f4d\u4e8e\u5176\u4e0a\u9762\u7684\u56fe\u50cf\u7684\u663e\u793a\u8303\u56f4\u3002\u5982\u679c\u5bf9\u57fa\u5e95\u56fe\u5c42\u8fdb\u884c\u79fb\u52a8\u3001\u53d8\u6362\u7b49\u64cd\u4f5c\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u56fe\u50cf\u4e5f\u4f1a\u968f\u4e4b\u53d7\u5230\u5f71\u54cd\u3002 \u5185\u5bb9\u56fe\u5c42\uff1a\u5185\u5bb9\u56fe\u5c42\u53ef\u4ee5\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u3002\u5bf9\u5185\u5bb9\u56fe\u5c42\u7684\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u57fa\u5e95\u56fe\u5c42\uff0c\u4f46\u662f\u5bf9\u5176\u8fdb\u884c\u79fb\u52a8\u3001\u53d8\u6362\u7b49\u64cd\u4f5c\u65f6\uff0c\u5176\u663e\u793a\u8303\u56f4\u4e5f\u4f1a\u968f\u4e4b\u800c\u6539\u53d8\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u526a\u8d34\u8499\u7248\u867d\u7136\u53ef\u4ee5\u5e94\u7528\u5728\u591a\u4e2a\u56fe\u5c42\u4e2d\uff0c\u4f46\u662f\u8fd9\u4e9b\u56fe\u5c42\u4e0d\u80fd\u662f\u9694\u5f00\u7684\uff0c\u5fc5\u987b\u662f\u76f8\u90bb\u7684\u56fe\u5c42\u3002 \u526a\u8d34\u8499\u7248\u4e0e\u56fe\u5c42\u8499\u7248\u7684\u5dee\u522b \u00b6 1\u3001\u4ece\u5f62\u5f0f\u4e0a\u770b\uff0c\u666e\u901a\u7684\u56fe\u5c42\u8499\u7248\u53ea\u4f5c\u7528\u4e8e\u4e00\u4e2a\u56fe\u5c42\uff0c\u7ed9\u4eba\u7684\u611f\u89c9\u597d\u50cf\u662f\u5728\u56fe\u5c42\u4e0a\u9762\u8fdb\u884c\u906e\u6321\u4e00\u6837\uff0c\u4f46\u526a\u8d34\u8499\u7248\u5374\u662f\u5bf9\u4e00\u7ec4\u56fe\u5c42\u8fdb\u884c\u5f71\u54cd\uff0c\u800c\u4e14\u662f\u4f4d\u4e8e\u88ab\u5f71\u54cd\u56fe\u5c42\u7684\u6700\u4e0b\u9762\u3002 2\u3001\u666e\u901a\u7684\u56fe\u5c42\u8499\u7248\u672c\u8eab\u4e0d\u662f\u88ab\u4f5c\u7528\u7684\u5bf9\u8c61\uff0c\u800c\u526a\u8d34\u8499\u7248\u672c\u8eab\u662f\u88ab\u4f5c\u7528\u7684\u5bf9\u8c61\u3002 3\u3001\u666e\u901a\u7684\u56fe\u5c42\u8499\u7248\u4ec5\u4ec5\u662f\u5f71\u54cd\u4f5c\u7528\u5bf9\u8c61\u7684\u4e0d\u900f\u660e\u5ea6\uff0c\u800c\u526a\u8d34\u8499\u7248\u9664\u4e86\u5f71\u54cd\u6240\u6709\u5185\u5bb9\u56fe\u5c42\u7684\u4e0d\u900f\u660e\u5ea6\u5916\uff0c\u5176\u81ea\u8eab\u7684\u6df7\u5408\u6a21\u5f0f\u53ca\u56fe\u5c42\u6837\u5f0f\u90fd\u5c06\u5bf9\u5185\u5bb9\u56fe\u5c42\u4ea7\u751f\u76f4\u63a5\u5f71\u54cd\u3002 \u521b\u5efa\u526a\u8d34\u8499\u7248 \u00b6 1.\u9009\u62e9\u201c\u5185\u5bb9\u201d\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u521b\u5efa\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+G \u7ec4\u5408\u952e\u3002 2.\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u521b\u5efa\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u3002 3.\u5148\u6309\u4f4f Alt \u952e\uff0c\u7136\u540e\u5c06\u5149\u6807\u653e\u7f6e\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u548c\u201c\u5f62\u72b6\u201d\u56fe\u5c42\u4e4b\u95f4\u7684\u5206\u9694\u7ebf\u4e0a\uff0c\u5f85\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\u5355\u51fb\u3002 \u91ca\u653e\u526a\u8d34\u8499\u7248 \u00b6 1.\u9009\u62e9\u201c\u5185\u5bb9\u201d\u56fe\u5c42\uff0c\u201c\u56fe\u5c42 > \u91ca\u653e\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+G \u7ec4\u5408\u952e\uff0c\u5373\u53ef\u91ca\u653e\u526a\u8d34\u8499\u7248\u3002 2.\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u91ca\u653e\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u3002 3.\u5148\u6309\u4f4f Alt \u952e\uff0c\u7136\u540e\u5c06\u5149\u6807\u653e\u7f6e\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u548c\u201c\u5f62\u72b6\u201d\u56fe\u5c42\u4e4b\u95f4\u7684\u5206\u9694\u7ebf\u4e0a\uff0c\u5f85\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\u5355\u51fb\u3002 \u526a\u5207\u8499\u7248\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u526a\u8d34\u8499\u7248\u5236\u4f5c\u590d\u53e4\u82f1\u6587 \u8c03\u6574\u5185\u5bb9\u56fe\u5c42\u987a\u5e8f \u00b6 \u4e0e\u8c03\u6574\u666e\u901a\u56fe\u5c42\u987a\u5e8f\u76f8\u540c\uff0c\u5355\u51fb\u5e76\u62d6\u52a8\u5373\u53ef\u8c03\u6574\u5185\u5bb9\u56fe\u5c42\u7684\u987a\u5e8f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u65e6\u79fb\u52a8\u5230\u57fa\u5e95\u56fe\u5c42\u7684\u4e0b\u65b9\u5c31\u76f8\u5f53\u4e8e\u91ca\u653e\u526a\u8d34\u8499\u7248\u3002 \u7f16\u8f91\u5185\u5bb9\u56fe\u5c42 \u00b6 \u5f53\u5bf9\u5185\u5bb9\u56fe\u5c42\u7684\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u548c\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u8fdb\u884c\u8c03\u6574\u65f6\uff0c\u53ea\u6709\u4e0e\u57fa\u5e95\u56fe\u5c42\u7684\u6df7\u5408\u6548\u679c\u53d1\u751f\u53d8\u5316\uff0c\u4e0d\u4f1a\u5f71\u54cd\u526a\u8d34\u8499\u7248\u4e2d\u7684\u5176\u4ed6\u56fe\u5c42\u3002 \u7f16\u8f91\u57fa\u5e95\u56fe\u5c42 \u00b6 \u5f53\u5bf9\u57fa\u5e95\u56fe\u5c42\u7684\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u548c\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u8c03\u6574\u65f6\uff0c\u6574\u4e2a\u526a\u8d34\u8499\u7248\u4e2d\u7684\u6240\u6709\u56fe\u5c42\u90fd\u4f1a\u4ee5\u8bbe\u7f6e\u7684\u4e3a\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u6570\u503c\u4ee5\u53ca\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u8fdb\u884c\u6df7\u5408\u3002 \u4e3a\u526a\u8d34\u8499\u7248\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f \u00b6 \u82e5\u8981\u4e3a\u526a\u8d34\u8499\u7248\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\uff0c\u9700\u8981\u5728\u57fa\u5e95\u56fe\u5c42\u4e0a\u6dfb\u52a0\uff0c\u6dfb\u52a0\u65b9\u5f0f\u4e0e\u4e3a\u666e\u901a\u56fe\u5c42\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\u7684\u65b9\u5f0f\u76f8\u540c\u3002 \u52a0\u5165\u526a\u8d34\u8499\u7248 \u00b6 \u5728\u5df2\u6709\u526a\u8d34\u8499\u7248\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e00\u4e2a\u56fe\u5c42\u62d6\u52a8\u5230\u57fa\u5e95\u56fe\u5c42\u4e0a\u65b9\u3002\u5373\u53ef\u5c06\u5176\u52a0\u5165\u5230\u526a\u8d34\u8499\u7248\u7ec4\u4e2d\u4f5c\u4e3a\u65b0\u7684\u5185\u5bb9\u56fe\u5c42\u3002 \u79fb\u51fa\u526a\u8d34\u8499\u7248 \u00b6 \u5c06\u5185\u5bb9\u56fe\u5c42\u79fb\u5230\u57fa\u5e95\u56fe\u5c42\u7684\u4e0b\u65b9\u5c31\u76f8\u5f53\u4e8e\u5c06\u5176\u79fb\u51fa\u526a\u8d34\u8499\u7248\u7ec4\u3002 \u56fe\u5c42\u8499\u7248 \u00b6 \u56fe\u5c42\u8499\u7248\u7684\u5de5\u4f5c\u539f\u7406 \u00b6 \u56fe\u5c42\u8499\u7248\u4e0e\u77e2\u91cf\u8499\u7248\u76f8\u4f3c\uff0c\u90fd\u5c5e\u4e8e\u975e\u7834\u574f\u6027\u7f16\u8f91\u5de5\u5177\u3002\u4f46\u662f\u56fe\u5c42\u8499\u7248\u662f\u4f4d\u56fe\u5de5\u5177\uff0c\u901a\u8fc7\u4f7f\u7528\u201c\u753b\u7b14\u5de5\u5177\u201d\u3001\u201c\u586b\u5145\u201d\u547d\u4ee4\u7b49\u5904\u7406\u8499\u7248\u7684\u9ed1\u767d\u5173\u7cfb\uff0c\u4ece\u800c\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u4e0e\u9690\u85cf\u3002\u5728\u521b\u5efa\u8c03\u6574\u56fe\u5c42\u3001\u586b\u5145\u56fe\u5c42\u4ee5\u53ca\u4e3a\u667a\u80fd\u5bf9\u8c61\u6dfb\u52a0\u667a\u80fd\u6ee4\u955c\u65f6\uff0cPhotoshop \u4f1a\u81ea\u52a8\u4e3a\u56fe\u5c42\u6dfb\u52a0\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\uff0c\u53ef\u4ee5\u5728\u56fe\u5c42\u8499\u7248\u4e2d\u5bf9\u8c03\u8272\u8303\u56f4\u3001\u586b\u5145\u8303\u56f4\u53ca\u6ee4\u955c\u5e94\u7528\u533a\u57df\u8fdb\u884c\u8c03\u6574\u3002\u5728 Photoshop \u4e2d\uff0c\u56fe\u5c42\u8499\u7248\u9075\u5faa\u201c\u9ed1\u900f\u660e\u3001\u767d\u4e0d\u900f\u660e\u201d\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u521b\u5efa\u56fe\u5c42\u8499\u7248 \u00b6 1\u3001\u9009\u62e9\u8981\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u7684\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u8499\u7248 > \u4ece\u900f\u660e\u533a\u57df\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u4e3a\u56fe\u5c42\u521b\u5efa\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 2\u3001\u9009\u62e9\u8981\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u7684\u56fe\u5c42\uff0c\u7136\u540e\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u201d\u6309\u94ae,\u53ef\u4ee5\u4e3a\u5f53\u524d\u56fe\u5c42\u6dfb\u52a0\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 3\u3001\u53e6\u5916\uff0c\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u50cf\u7d20\u8499\u7248\u201d\u6309\u94ae\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u5f53\u524d\u56fe\u5c42\u6dfb\u52a0\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 \u4ece\u9009\u533a\u751f\u6210\u56fe\u5c42\u8499\u7248 \u00b6 1\u3001\u5982\u679c\u5f53\u524d\u56fe\u50cf\u4e2d\u5b58\u5728\u9009\u533a\uff0c\u5355\u51fb\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u201c\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u57fa\u4e8e\u5f53\u524d\u9009\u533a\u4e3a\u56fe\u5c42\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\uff0c\u9009\u533a\u4ee5\u5916\u7684\u56fe\u50cf\u5c06\u88ab\u8499\u7248\u9690\u85cf\u3002 2\u3001\u521b\u5efa\u9009\u533a\u8499\u7248\u540e\uff0c\u53ef\u4ee5\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u8c03\u6574\u201c\u6d53\u5ea6\u201d\u548c\u201c\u7fbd\u5316\u201d\u6570\u503c\uff0c\u53ef\u4ee5\u5236\u4f5c\u51fa\u6726\u80e7\u7684\u6548\u679c\u3002 \u505c\u7528\u56fe\u5c42\u8499\u7248 \u00b6 1\u3001\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u8499\u7248> \u505c\u7528\u201d\u547d\u4ee4\uff0c\u6216\u5728\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u505c\u7528\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\u3002\u505c\u7528\u8499\u7248\u540e\uff0c\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u7684\u7f29\u89c8\u56fe\u548c\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u8499\u7248\u7f29\u89c8\u56fe\u4e2d\u90fd\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7ea2\u8272\u7684\u4ea4\u53c9\u7ebf\uff08\u00d7\uff09\u3002 2\u3001\u9009\u62e9\u56fe\u5c42\u8499\u7248\uff0c\u7136\u540e\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e0b\u5355\u51fb\u201c\u505c\u7528/\u542f\u7528\u8499\u7248\u201d\u6309\u94ae \u3002 \u5e94\u7528\u56fe\u5c42\u8499\u7248 \u00b6 \u5e94\u7528\u56fe\u5c42\u8499\u7248\u662f\u6307\u56fe\u50cf\u4e2d\u5bf9\u5e94\u8499\u7248\u4e2d\u7684\u9ed1\u8272\u533a\u57df\u5c06\u88ab\u5220\u9664\uff0c\u767d\u8272\u533a\u57df\u4fdd\u7559\u4e0b\u6765\uff0c\u800c\u7070\u8272\u533a\u57df\u5448\u900f\u660e\u6548\u679c\uff0c\u5e76\u4e14\u5220\u9664\u56fe\u5c42\u8499\u7248\u3002 1\u3001\u5728\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5e94\u7528\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u8499\u7248\u5e94\u7528\u5728\u5f53\u524d\u56fe\u5c42\u4e2d\u3002 2\u3001\u5e94\u7528\u56fe\u5c42\u8499\u7248\u540e\uff0c\u8499\u7248\u6548\u679c\u5c06\u4f1a\u5e94\u7528\u5230\u56fe\u50cf\u4e0a\uff0c\u4e5f \u5c31 \u662f \u8bf4\uff0c\u8499\u7248\u4e2d\u7684\u9ed1\u8272\u533a\u57df\u5c06\u88ab\u5220\u9664\uff0c\u767d\u8272\u533a\u57df\u5c06\u88ab\u4fdd\u7559\u4e0b\u6765\uff0c\u800c\u7070\u8272\u533a\u57df\u5c06\u5448\u900f\u660e\u6548\u679c\u3002 \u542f\u7528\u56fe\u5c42\u8499\u7248 \u00b6 \u5728\u505c\u7528\u56fe\u5c42\u8499\u7248\u540e\uff0c\u5982\u679c\u8981\u91cd\u65b0\u542f\u7528\u56fe\u5c42\u8499\u7248\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b 3 \u79cd\u65b9\u6cd5\u6765\u5b8c\u6210\u3002 \uff081\uff09\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u8499\u7248 > \u542f\u7528\u201d\u547d\u4ee4\uff0c\u6216\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u542f\u7528\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\u3002 \uff082\uff09\u76f4\u63a5\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\uff0c\u4e5f\u53ef\u91cd\u65b0\u542f\u7528\u56fe\u5c42\u8499\u7248\u3002 \uff083\uff09\u9009\u62e9\u8499\u7248\uff0c\u7136\u540e\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u505c\u7528 / \u542f\u7528\u8499\u7248\u201d\u6309\u94ae\uff0c\u540c\u6837\u53ef\u4ee5\u91cd\u65b0\u542f\u7528\u56fe\u5c42\u8499\u7248\u3002 \u5220\u9664\u56fe\u5c42\u8499\u7248 \u00b6 \uff081\uff09\u5982\u679c\u8981\u5220\u9664\u56fe\u5c42\u8499\u7248\uff0c\u53ef\u4ee5\u9009\u4e2d\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 >\u56fe\u5c42\u8499\u7248 > \u5220\u9664\u201d\u547d\u4ee4\u3002 \uff082\uff09\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5220\u9664\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u56fe\u5c42\u8499\u7248\u3002 \uff083\uff09\u5c06\u8499\u7248\u7f29\u89c8\u56fe\u62d6\u62fd\u5230\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u56fe\u5c42\u201d\u6309\u94ae\u4e0a\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u5355 \u51fb\u201c\u5220\u9664\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5220\u9664\u8be5\u56fe\u5c42\u8499\u7248\u3002 \uff084\uff09\u9009\u62e9\u8499\u7248\uff0c\u7136\u540e\u76f4\u63a5\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u5220\u9664\u8499\u7248\u201d\u6309\u94ae\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u8be5\u56fe\u5c42\u8499\u7248\u3002 \u8f6c\u79fb\u56fe\u5c42\u8499\u7248 \u00b6 \u5355\u51fb\u9009\u4e2d\u8981\u8f6c\u79fb\u7684\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u5e76\u5c06\u8499\u7248\u62d6\u62fd\u5230\u5176\u4ed6\u56fe\u5c42\u4e0a\uff0c\u5373\u53ef\u5c06\u8be5\u56fe\u5c42\u7684\u8499\u7248\u8f6c\u79fb\u5230\u5176\u4ed6\u56fe\u5c42\u4e0a\u3002 \u66ff\u6362\u56fe\u5c42\u8499\u7248 \u00b6 \u5982\u679c\u8981\u7528\u4e00\u4e2a\u56fe\u5c42\u7684\u8499\u7248\u66ff\u6362\u53e6\u5916\u4e00\u4e2a\u56fe\u5c42\u7684\u8499\u7248\uff0c\u53ef\u4ee5\u5c06\u8be5\u56fe\u5c42\u7684\u8499\u7248\u7f29\u89c8\u56fe\u62d6\u62fd\u5230\u53e6\u5916\u4e00\u4e2a\u56fe\u5c42\u7684\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u5355\u51fb\u201c\u662f\u201d\u6309\u94ae\u3002\u3002 \u590d\u5236\u56fe\u5c42\u8499\u7248 \u00b6 \u5982 \u679c \u8981 \u5c06 \u4e00 \u4e2a \u56fe \u5c42 \u7684 \u8499 \u7248 \u590d \u5236 \u5230 \u53e6 \u5916 \u4e00 \u4e2a \u56fe \u5c42 \u4e0a\uff0c\u53ef \u4ee5 \u6309 \u4f4f Alt \u952e \u5c06 \u8499 \u7248 \u7f29 \u89c8 \u56fe \u62d6 \u62fd \u5230 \u53e6 \u5916 \u4e00 \u4e2a \u56fe \u5c42 \u4e0a\u3002 \u8499\u7248\u4e0e\u9009\u533a\u7684\u8fd0\u7b97 \u00b6 \u5728\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u53ef\u4ee5\u770b\u5230 3 \u4e2a\u5173\u4e8e\u8499\u7248\u4e0e\u9009\u533a\u8fd0\u7b97\u7684\u547d\u4ee4\u3002 \u8499\u7248\u9009\u533a\u8fd0\u7b97\u7ec3\u4e60 \u00b6 \u5236\u4f5c\u5a5a\u7eb1\u6444\u5f71\u7248\u5f0f \u77e2\u91cf\u8499\u7248 \u00b6 \u8bf4\u660e \u00b6 \u77e2\u91cf\u8499\u7248\u662f\u77e2\u91cf\u5de5\u5177\uff0c\u53ef\u4ee5\u94a2\u7b14\u6216\u5f62\u72b6\u5de5\u5177\u5728\u8499\u7248\u4e0a\u7ed8\u5236\u8def\u5f84\u5f62\u72b6\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u4e0e\u9690\u85cf\uff0c\u5e76\u4e14\u77e2\u91cf\u8499\u7248\u53ef\u4ee5\u8c03\u6574\u8def\u5f84\u8282\u70b9\uff0c\u4ece\u800c\u5236\u4f5c\u51fa\u7cbe\u786e\u7684\u8499\u7248\u533a\u57df\u3002 \u521b\u5efa\u77e2\u91cf\u8499\u7248 \u00b6 \u9009\u62e9\u56fe\u5c42\uff0c\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u77e2\u91cf\u8499\u7248\u201d\u6309\u94ae\u5373\u53ef\u4e3a\u5176\u6dfb\u52a0\u4e00\u4e2a\u77e2\u91cf\u8499\u7248\u3002\u6dfb\u52a0\u77e2\u91cf\u8499\u7248\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u77e9\u5f62\u5de5\u5177\u201d \u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u4e00\u4e2a\u5706\u89d2\u77e9\u5f62\u8def\u5f84\uff0c\u6b64\u65f6\u77e9\u5f62\u5916\u7684\u56fe\u50cf\u5c06\u88ab\u9690\u85cf\u3002 \u7ed8\u5236\u5e76\u9009\u62e9\u95ed\u5408\u8def\u5f84\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u77e2\u91cf\u8499\u7248 >\u5f53\u524d\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u57fa\u4e8e\u5f53\u524d\u8def\u5f84\u4e3a\u56fe\u5c42\u521b\u5efa\u4e00\u4e2a\u77e2\u91cf\u8499\u7248\u3002 \u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u5f62\u72b6 \u00b6 \u521b\u5efa\u77e2\u91cf\u8499\u7248\u540e\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u94a2\u7b14\u5de5\u5177\u7ec4\u6216\u5f62\u72b6\u5de5\u5177\u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u5f62\u72b6\u3002 \u5c06\u77e2\u91cf\u8499\u7248\u8f6c\u6362\u4e3a\u56fe\u5c42\u8499\u7248 \u00b6 \u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u6805\u683c\u5316\u77e2\u91cf\u8499\u7248\u201d\u547d\u4ee4\u3002\u6805\u683c\u5316\u77e2\u91cf\u8499\u7248\u540e\uff0c\u8499\u7248\u5c31\u4f1a\u8f6c\u6362\u4e3a\u56fe\u5c42\u8499\u7248\uff0c\u4e0d\u518d\u6709\u77e2\u91cf\u5f62\u72b6\u5b58\u5728\u3002 \u5220\u9664\u77e2\u91cf\u8499\u7248 \u00b6 \u53ef\u4ee5\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5220\u9664\u77e2\u91cf\u8499\u7248\u201d\u547d\u4ee4\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u77e2\u91cf\u8499\u7248 > \u5220\u9664\u201d\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u77e2\u91cf\u8499\u7248\u3002 \u7f16\u8f91\u77e2\u91cf\u8499\u7248 \u00b6 \u9488\u5bf9\u77e2\u91cf\u8499\u7248\u7684\u7f16\u8f91\u4e3b\u8981\u662f\u5bf9\u77e2\u91cf\u8499\u7248\u4e2d\u8def\u5f84\u7684\u7f16\u8f91\uff0c \u9664\u4e86\u53ef\u4ee5\u4f7f\u7528\u94a2\u7b14\u5de5\u5177\u7ec4\u3001\u5f62\u72b6\u5de5\u5177\u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u5f62\u72b6\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8def\u5f84\u951a\u70b9\u7684\u4f4d\u7f6e\u6539\u53d8\u77e2\u91cf\u8499 \u7248 \u7684 \u5916 \u5f62\uff0c \u6216 \u8005 \u901a\u8fc7\u53d8\u6362\u8def\u5f84\u8c03\u6574\u5176\u89d2\u5ea6\u5927\u5c0f\u7b49\u3002 \u94fe\u63a5/\u53d6\u6d88\u94fe\u63a5\u77e2\u91cf\u8499\u7248 \u00b6 \u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c\u56fe\u5c42\u4e0e\u77e2\u91cf\u8499\u7248\u662f\u94fe\u63a5\u5728\u4e00\u8d77\u7684\uff08\u94fe\u63a5\u5904\u6709\u4e00\u4e2a \u56fe\u6807\uff09\uff0c\u5f53\u79fb\u52a8\u3001\u53d8\u6362\u56fe\u5c42\u65f6\uff0c\u77e2\u91cf\u8499\u7248\u4e5f\u4f1a\u8ddf\u7740\u94fe\u63a5/\u53d6\u6d88\u94fe\u63a5\u77e2\u91cf\u8499\u7248\u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c\u56fe\u5c42\u4e0e\u77e2\u91cf\u8499\u7248\u662f\u94fe\u63a5\u5728\u4e00\u8d77\u7684\uff08\u94fe\u63a5\u5904\u6709\u4e00\u4e2a \u56fe\u6807\uff09\uff0c\u5f53\u79fb\u52a8\u3001\u53d8\u6362\u56fe\u5c42\u65f6\uff0c\u77e2\u91cf\u8499\u7248\u4e5f\u4f1a\u8ddf\u7740\u53d1\u751f\u53d8\u5316\u3002\u5982\u679c\u4e0d\u60f3\u53d8\u6362\u56fe\u5c42\u6216\u77e2\u91cf\u8499\u7248\u65f6\u5f71\u54cd\u5bf9\u65b9\uff0c\u53ef\u4ee5\u5355\u51fb\u94fe\u63a5\u56fe\u6807 \u53d6\u6d88\u94fe\u63a5\u3002\u5982\u679c\u8981\u6062\u590d\u94fe\u63a5\uff0c\u53ef\u4ee5\u5728\u53d6\u6d88\u94fe\u63a5\u7684\u5730\u65b9\u5355\u51fb\uff0c\u6216\u8005\u6267\u884c\u201c\u56fe\u5c42 > \u77e2\u91cf\u8499\u7248 > \u94fe\u63a5\u201d\u547d\u4ee4\u3002 \u4e3a\u77e2\u91cf\u8499\u7248\u6dfb\u52a0\u6548\u679c \u00b6 \u53ef\u4ee5\u50cf\u5bf9\u666e\u901a\u56fe\u5c42\u4e00\u6837\uff0c\u5411\u77e2\u91cf\u8499\u7248\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u56fe\u5c42\u6837\u5f0f\u53ea\u5bf9\u77e2\u91cf\u8499\u7248\u4e2d\u7684\u5185\u5bb9\u8d77\u4f5c\u7528\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9690\u85cf\u7684\u90e8\u5206\u3002 \u7ec3\u4e60 \u00b6 \u4f7f\u7528\u56fe\u5c42\u8499\u7248\u5c06\u6d77\u661f\u7d20\u6750\u5408\u6210\u5230\u74f6\u5b50\u4e2d \u4f7f\u7528\u8499\u7248\u5236\u4f5c\u83e0\u841d\u5899","title":"\u8499\u7248"},{"location":"PS/PS10/#_1","text":"","title":"\u521d\u8bc6\u8499\u7248"},{"location":"PS/PS10/#_2","text":"\u5728 Photoshop \u4e2d\uff0c\u8499\u7248\u6709\u5feb\u901f\u8499\u7248\u3001\u526a\u8d34\u8499\u7248\u3001\u77e2\u91cf\u8499\u7248\u548c\u56fe\u5c42\u8499\u7248 4 \u79cd\u3002 + \u5feb\u901f\u8499\u7248\uff1a\u662f\u4e00\u79cd\u7528\u4e8e\u521b\u5efa\u548c\u7f16\u8f91\u9009\u533a\u7684\u529f\u80fd\u3002 + \u526a\u8d34\u8499\u7248\uff1a\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f62\u72b6\u6765\u63a7\u5236\u5176\u4ed6\u56fe\u5c42\u7684\u663e\u793a\u533a\u57df\u3002 + \u77e2\u91cf\u8499\u7248\uff1a\u901a\u8fc7\u8def\u5f84\u548c\u77e2\u91cf\u5f62\u72b6\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u533a\u57df\u3002 + \u56fe\u5c42\u8499\u7248\uff1a\u901a\u8fc7\u8499\u7248\u4e2d\u7684\u7070\u5ea6\u4fe1\u606f\u6765\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u533a\u57df\u3002","title":"\u8499\u7248\u7684\u7c7b\u578b"},{"location":"PS/PS10/#_3","text":"\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u6240\u9009\u56fe\u5c42\u7684\u56fe\u5c42\u8499\u7248\u4ee5\u53ca\u77e2\u91cf\u8499\u7248\u7684\u201c\u6d53\u5ea6\u201d\u548c\u201c\u7fbd\u5316\u201d\u5c5e\u6027\u8fdb\u884c\u8c03\u6574\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u5c5e\u6027\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u5c5e\u6027\u201d\u9762\u677f\u3002","title":"\u8ba4\u8bc6\u201c\u5c5e\u6027\u201d\u9762\u677f"},{"location":"PS/PS10/#_4","text":"","title":"\u5feb\u901f\u8499\u7248"},{"location":"PS/PS10/#_5","text":"\u6253\u5f00\u56fe\u50cf\uff0c\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u4ee5\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u7f16\u8f91\u201d\u6309\u94ae\u6216\u6309 Q \u952e\uff0c\u53ef\u4ee5\u8fdb\u5165\u5feb\u901f\u8499\u7248\u7f16\u8f91\u6a21\u5f0f\u3002\u6b64\u65f6\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u53ef\u4ee5\u89c2\u5bdf\u5230\u4e00\u4e2a\u5feb\u901f\u8499\u7248\u901a\u9053\u3002 \u7ea2\u8272\u7684\u533a\u57df\u8868\u793a\u672a\u9009\u4e2d\u7684\u533a\u57df\uff0c\u975e\u7ea2\u8272\u533a\u57df\u8868\u793a\u9009\u4e2d\u7684\u533a\u57df\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u4ee5\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u7f16\u8f91\u201d\u6309\u94ae \u6216\u6309 Q \u952e\u9000\u51fa\u5feb\u901f\u8499\u7248\u7f16\u8f91\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\u60f3\u8981\u7684\u9009\u533a\u3002\u53e6\u5916\uff0c\u5728\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u4e0b\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6ee4\u955c\u6765\u7f16\u8f91\u8499\u7248\u3002","title":"\u521b\u5efa\u5feb\u901f\u8499\u7248"},{"location":"PS/PS10/#_6","text":"","title":"\u526a\u8d34\u8499\u7248"},{"location":"PS/PS10/#_7","text":"\u526a\u8d34\u8499\u677f\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u57fa\u5e95\u56fe\u5c42\u548c\u5185\u5bb9\u56fe\u5c42\u3002\u57fa\u5e95\u56fe\u5c42\u662f\u4f4d\u4e8e\u526a\u8d34\u8499\u7248\u6700\u5e95\u7aef\u7684\u4e00\u4e2a\u56fe\u5c42\uff0c\u5185\u5bb9\u56fe\u5c42\u5219\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u5176\u539f\u7406\u662f\u901a\u8fc7\u4f7f\u7528\u5904\u4e8e\u4e0b\u65b9\u56fe\u5c42\u7684\u5f62\u72b6\u6765\u9650\u5236\u4e0a\u65b9\u56fe\u5c42\u7684\u663e\u793a\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u57fa\u5e95\u56fe\u5c42\u7528\u4e8e\u9650\u5b9a\u6700\u7ec8\u56fe\u50cf\u7684\u5f62\u72b6\uff0c\u800c\u5185\u5bb9\u56fe\u5c42\u5219\u7528\u4e8e\u9650\u5b9a\u6700\u7ec8\u56fe\u50cf\u663e\u793a\u7684\u989c\u8272\u56fe\u6848\u3002 \u57fa\u5e95\u56fe\u5c42\uff1a\u57fa\u5e95\u56fe\u5c42\u53ea\u6709\u4e00\u4e2a\uff0c\u5b83\u51b3\u5b9a\u4e86\u4f4d\u4e8e\u5176\u4e0a\u9762\u7684\u56fe\u50cf\u7684\u663e\u793a\u8303\u56f4\u3002\u5982\u679c\u5bf9\u57fa\u5e95\u56fe\u5c42\u8fdb\u884c\u79fb\u52a8\u3001\u53d8\u6362\u7b49\u64cd\u4f5c\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u56fe\u50cf\u4e5f\u4f1a\u968f\u4e4b\u53d7\u5230\u5f71\u54cd\u3002 \u5185\u5bb9\u56fe\u5c42\uff1a\u5185\u5bb9\u56fe\u5c42\u53ef\u4ee5\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u3002\u5bf9\u5185\u5bb9\u56fe\u5c42\u7684\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u57fa\u5e95\u56fe\u5c42\uff0c\u4f46\u662f\u5bf9\u5176\u8fdb\u884c\u79fb\u52a8\u3001\u53d8\u6362\u7b49\u64cd\u4f5c\u65f6\uff0c\u5176\u663e\u793a\u8303\u56f4\u4e5f\u4f1a\u968f\u4e4b\u800c\u6539\u53d8\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u526a\u8d34\u8499\u7248\u867d\u7136\u53ef\u4ee5\u5e94\u7528\u5728\u591a\u4e2a\u56fe\u5c42\u4e2d\uff0c\u4f46\u662f\u8fd9\u4e9b\u56fe\u5c42\u4e0d\u80fd\u662f\u9694\u5f00\u7684\uff0c\u5fc5\u987b\u662f\u76f8\u90bb\u7684\u56fe\u5c42\u3002","title":"\u4ec0\u4e48\u662f\u526a\u8d34\u8499\u7248"},{"location":"PS/PS10/#_8","text":"1\u3001\u4ece\u5f62\u5f0f\u4e0a\u770b\uff0c\u666e\u901a\u7684\u56fe\u5c42\u8499\u7248\u53ea\u4f5c\u7528\u4e8e\u4e00\u4e2a\u56fe\u5c42\uff0c\u7ed9\u4eba\u7684\u611f\u89c9\u597d\u50cf\u662f\u5728\u56fe\u5c42\u4e0a\u9762\u8fdb\u884c\u906e\u6321\u4e00\u6837\uff0c\u4f46\u526a\u8d34\u8499\u7248\u5374\u662f\u5bf9\u4e00\u7ec4\u56fe\u5c42\u8fdb\u884c\u5f71\u54cd\uff0c\u800c\u4e14\u662f\u4f4d\u4e8e\u88ab\u5f71\u54cd\u56fe\u5c42\u7684\u6700\u4e0b\u9762\u3002 2\u3001\u666e\u901a\u7684\u56fe\u5c42\u8499\u7248\u672c\u8eab\u4e0d\u662f\u88ab\u4f5c\u7528\u7684\u5bf9\u8c61\uff0c\u800c\u526a\u8d34\u8499\u7248\u672c\u8eab\u662f\u88ab\u4f5c\u7528\u7684\u5bf9\u8c61\u3002 3\u3001\u666e\u901a\u7684\u56fe\u5c42\u8499\u7248\u4ec5\u4ec5\u662f\u5f71\u54cd\u4f5c\u7528\u5bf9\u8c61\u7684\u4e0d\u900f\u660e\u5ea6\uff0c\u800c\u526a\u8d34\u8499\u7248\u9664\u4e86\u5f71\u54cd\u6240\u6709\u5185\u5bb9\u56fe\u5c42\u7684\u4e0d\u900f\u660e\u5ea6\u5916\uff0c\u5176\u81ea\u8eab\u7684\u6df7\u5408\u6a21\u5f0f\u53ca\u56fe\u5c42\u6837\u5f0f\u90fd\u5c06\u5bf9\u5185\u5bb9\u56fe\u5c42\u4ea7\u751f\u76f4\u63a5\u5f71\u54cd\u3002","title":"\u526a\u8d34\u8499\u7248\u4e0e\u56fe\u5c42\u8499\u7248\u7684\u5dee\u522b"},{"location":"PS/PS10/#_9","text":"1.\u9009\u62e9\u201c\u5185\u5bb9\u201d\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u521b\u5efa\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+G \u7ec4\u5408\u952e\u3002 2.\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u521b\u5efa\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u3002 3.\u5148\u6309\u4f4f Alt \u952e\uff0c\u7136\u540e\u5c06\u5149\u6807\u653e\u7f6e\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u548c\u201c\u5f62\u72b6\u201d\u56fe\u5c42\u4e4b\u95f4\u7684\u5206\u9694\u7ebf\u4e0a\uff0c\u5f85\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\u5355\u51fb\u3002","title":"\u521b\u5efa\u526a\u8d34\u8499\u7248"},{"location":"PS/PS10/#_10","text":"1.\u9009\u62e9\u201c\u5185\u5bb9\u201d\u56fe\u5c42\uff0c\u201c\u56fe\u5c42 > \u91ca\u653e\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+G \u7ec4\u5408\u952e\uff0c\u5373\u53ef\u91ca\u653e\u526a\u8d34\u8499\u7248\u3002 2.\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u91ca\u653e\u526a\u8d34\u8499\u7248\u201d\u547d\u4ee4\u3002 3.\u5148\u6309\u4f4f Alt \u952e\uff0c\u7136\u540e\u5c06\u5149\u6807\u653e\u7f6e\u5728\u201c\u5185\u5bb9\u201d\u56fe\u5c42\u548c\u201c\u5f62\u72b6\u201d\u56fe\u5c42\u4e4b\u95f4\u7684\u5206\u9694\u7ebf\u4e0a\uff0c\u5f85\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\u5355\u51fb\u3002","title":"\u91ca\u653e\u526a\u8d34\u8499\u7248"},{"location":"PS/PS10/#_11","text":"\u4f7f\u7528\u526a\u8d34\u8499\u7248\u5236\u4f5c\u590d\u53e4\u82f1\u6587","title":"\u526a\u5207\u8499\u7248\u7ec3\u4e60"},{"location":"PS/PS10/#_12","text":"\u4e0e\u8c03\u6574\u666e\u901a\u56fe\u5c42\u987a\u5e8f\u76f8\u540c\uff0c\u5355\u51fb\u5e76\u62d6\u52a8\u5373\u53ef\u8c03\u6574\u5185\u5bb9\u56fe\u5c42\u7684\u987a\u5e8f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u65e6\u79fb\u52a8\u5230\u57fa\u5e95\u56fe\u5c42\u7684\u4e0b\u65b9\u5c31\u76f8\u5f53\u4e8e\u91ca\u653e\u526a\u8d34\u8499\u7248\u3002","title":"\u8c03\u6574\u5185\u5bb9\u56fe\u5c42\u987a\u5e8f"},{"location":"PS/PS10/#_13","text":"\u5f53\u5bf9\u5185\u5bb9\u56fe\u5c42\u7684\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u548c\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u8fdb\u884c\u8c03\u6574\u65f6\uff0c\u53ea\u6709\u4e0e\u57fa\u5e95\u56fe\u5c42\u7684\u6df7\u5408\u6548\u679c\u53d1\u751f\u53d8\u5316\uff0c\u4e0d\u4f1a\u5f71\u54cd\u526a\u8d34\u8499\u7248\u4e2d\u7684\u5176\u4ed6\u56fe\u5c42\u3002","title":"\u7f16\u8f91\u5185\u5bb9\u56fe\u5c42"},{"location":"PS/PS10/#_14","text":"\u5f53\u5bf9\u57fa\u5e95\u56fe\u5c42\u7684\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u548c\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u8c03\u6574\u65f6\uff0c\u6574\u4e2a\u526a\u8d34\u8499\u7248\u4e2d\u7684\u6240\u6709\u56fe\u5c42\u90fd\u4f1a\u4ee5\u8bbe\u7f6e\u7684\u4e3a\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u6570\u503c\u4ee5\u53ca\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u8fdb\u884c\u6df7\u5408\u3002","title":"\u7f16\u8f91\u57fa\u5e95\u56fe\u5c42"},{"location":"PS/PS10/#_15","text":"\u82e5\u8981\u4e3a\u526a\u8d34\u8499\u7248\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\uff0c\u9700\u8981\u5728\u57fa\u5e95\u56fe\u5c42\u4e0a\u6dfb\u52a0\uff0c\u6dfb\u52a0\u65b9\u5f0f\u4e0e\u4e3a\u666e\u901a\u56fe\u5c42\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\u7684\u65b9\u5f0f\u76f8\u540c\u3002","title":"\u4e3a\u526a\u8d34\u8499\u7248\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS10/#_16","text":"\u5728\u5df2\u6709\u526a\u8d34\u8499\u7248\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e00\u4e2a\u56fe\u5c42\u62d6\u52a8\u5230\u57fa\u5e95\u56fe\u5c42\u4e0a\u65b9\u3002\u5373\u53ef\u5c06\u5176\u52a0\u5165\u5230\u526a\u8d34\u8499\u7248\u7ec4\u4e2d\u4f5c\u4e3a\u65b0\u7684\u5185\u5bb9\u56fe\u5c42\u3002","title":"\u52a0\u5165\u526a\u8d34\u8499\u7248"},{"location":"PS/PS10/#_17","text":"\u5c06\u5185\u5bb9\u56fe\u5c42\u79fb\u5230\u57fa\u5e95\u56fe\u5c42\u7684\u4e0b\u65b9\u5c31\u76f8\u5f53\u4e8e\u5c06\u5176\u79fb\u51fa\u526a\u8d34\u8499\u7248\u7ec4\u3002","title":"\u79fb\u51fa\u526a\u8d34\u8499\u7248"},{"location":"PS/PS10/#_18","text":"","title":"\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_19","text":"\u56fe\u5c42\u8499\u7248\u4e0e\u77e2\u91cf\u8499\u7248\u76f8\u4f3c\uff0c\u90fd\u5c5e\u4e8e\u975e\u7834\u574f\u6027\u7f16\u8f91\u5de5\u5177\u3002\u4f46\u662f\u56fe\u5c42\u8499\u7248\u662f\u4f4d\u56fe\u5de5\u5177\uff0c\u901a\u8fc7\u4f7f\u7528\u201c\u753b\u7b14\u5de5\u5177\u201d\u3001\u201c\u586b\u5145\u201d\u547d\u4ee4\u7b49\u5904\u7406\u8499\u7248\u7684\u9ed1\u767d\u5173\u7cfb\uff0c\u4ece\u800c\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u4e0e\u9690\u85cf\u3002\u5728\u521b\u5efa\u8c03\u6574\u56fe\u5c42\u3001\u586b\u5145\u56fe\u5c42\u4ee5\u53ca\u4e3a\u667a\u80fd\u5bf9\u8c61\u6dfb\u52a0\u667a\u80fd\u6ee4\u955c\u65f6\uff0cPhotoshop \u4f1a\u81ea\u52a8\u4e3a\u56fe\u5c42\u6dfb\u52a0\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\uff0c\u53ef\u4ee5\u5728\u56fe\u5c42\u8499\u7248\u4e2d\u5bf9\u8c03\u8272\u8303\u56f4\u3001\u586b\u5145\u8303\u56f4\u53ca\u6ee4\u955c\u5e94\u7528\u533a\u57df\u8fdb\u884c\u8c03\u6574\u3002\u5728 Photoshop \u4e2d\uff0c\u56fe\u5c42\u8499\u7248\u9075\u5faa\u201c\u9ed1\u900f\u660e\u3001\u767d\u4e0d\u900f\u660e\u201d\u7684\u5de5\u4f5c\u539f\u7406\u3002","title":"\u56fe\u5c42\u8499\u7248\u7684\u5de5\u4f5c\u539f\u7406"},{"location":"PS/PS10/#_20","text":"1\u3001\u9009\u62e9\u8981\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u7684\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u8499\u7248 > \u4ece\u900f\u660e\u533a\u57df\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u4e3a\u56fe\u5c42\u521b\u5efa\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 2\u3001\u9009\u62e9\u8981\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u7684\u56fe\u5c42\uff0c\u7136\u540e\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u201d\u6309\u94ae,\u53ef\u4ee5\u4e3a\u5f53\u524d\u56fe\u5c42\u6dfb\u52a0\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 3\u3001\u53e6\u5916\uff0c\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u50cf\u7d20\u8499\u7248\u201d\u6309\u94ae\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u5f53\u524d\u56fe\u5c42\u6dfb\u52a0\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002","title":"\u521b\u5efa\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_21","text":"1\u3001\u5982\u679c\u5f53\u524d\u56fe\u50cf\u4e2d\u5b58\u5728\u9009\u533a\uff0c\u5355\u51fb\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u201c\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u57fa\u4e8e\u5f53\u524d\u9009\u533a\u4e3a\u56fe\u5c42\u6dfb\u52a0\u56fe\u5c42\u8499\u7248\uff0c\u9009\u533a\u4ee5\u5916\u7684\u56fe\u50cf\u5c06\u88ab\u8499\u7248\u9690\u85cf\u3002 2\u3001\u521b\u5efa\u9009\u533a\u8499\u7248\u540e\uff0c\u53ef\u4ee5\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u8c03\u6574\u201c\u6d53\u5ea6\u201d\u548c\u201c\u7fbd\u5316\u201d\u6570\u503c\uff0c\u53ef\u4ee5\u5236\u4f5c\u51fa\u6726\u80e7\u7684\u6548\u679c\u3002","title":"\u4ece\u9009\u533a\u751f\u6210\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_22","text":"1\u3001\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u8499\u7248> \u505c\u7528\u201d\u547d\u4ee4\uff0c\u6216\u5728\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u505c\u7528\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\u3002\u505c\u7528\u8499\u7248\u540e\uff0c\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u7684\u7f29\u89c8\u56fe\u548c\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u8499\u7248\u7f29\u89c8\u56fe\u4e2d\u90fd\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7ea2\u8272\u7684\u4ea4\u53c9\u7ebf\uff08\u00d7\uff09\u3002 2\u3001\u9009\u62e9\u56fe\u5c42\u8499\u7248\uff0c\u7136\u540e\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e0b\u5355\u51fb\u201c\u505c\u7528/\u542f\u7528\u8499\u7248\u201d\u6309\u94ae \u3002","title":"\u505c\u7528\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_23","text":"\u5e94\u7528\u56fe\u5c42\u8499\u7248\u662f\u6307\u56fe\u50cf\u4e2d\u5bf9\u5e94\u8499\u7248\u4e2d\u7684\u9ed1\u8272\u533a\u57df\u5c06\u88ab\u5220\u9664\uff0c\u767d\u8272\u533a\u57df\u4fdd\u7559\u4e0b\u6765\uff0c\u800c\u7070\u8272\u533a\u57df\u5448\u900f\u660e\u6548\u679c\uff0c\u5e76\u4e14\u5220\u9664\u56fe\u5c42\u8499\u7248\u3002 1\u3001\u5728\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5e94\u7528\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u8499\u7248\u5e94\u7528\u5728\u5f53\u524d\u56fe\u5c42\u4e2d\u3002 2\u3001\u5e94\u7528\u56fe\u5c42\u8499\u7248\u540e\uff0c\u8499\u7248\u6548\u679c\u5c06\u4f1a\u5e94\u7528\u5230\u56fe\u50cf\u4e0a\uff0c\u4e5f \u5c31 \u662f \u8bf4\uff0c\u8499\u7248\u4e2d\u7684\u9ed1\u8272\u533a\u57df\u5c06\u88ab\u5220\u9664\uff0c\u767d\u8272\u533a\u57df\u5c06\u88ab\u4fdd\u7559\u4e0b\u6765\uff0c\u800c\u7070\u8272\u533a\u57df\u5c06\u5448\u900f\u660e\u6548\u679c\u3002","title":"\u5e94\u7528\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_24","text":"\u5728\u505c\u7528\u56fe\u5c42\u8499\u7248\u540e\uff0c\u5982\u679c\u8981\u91cd\u65b0\u542f\u7528\u56fe\u5c42\u8499\u7248\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b 3 \u79cd\u65b9\u6cd5\u6765\u5b8c\u6210\u3002 \uff081\uff09\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u8499\u7248 > \u542f\u7528\u201d\u547d\u4ee4\uff0c\u6216\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u542f\u7528\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\u3002 \uff082\uff09\u76f4\u63a5\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\uff0c\u4e5f\u53ef\u91cd\u65b0\u542f\u7528\u56fe\u5c42\u8499\u7248\u3002 \uff083\uff09\u9009\u62e9\u8499\u7248\uff0c\u7136\u540e\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u505c\u7528 / \u542f\u7528\u8499\u7248\u201d\u6309\u94ae\uff0c\u540c\u6837\u53ef\u4ee5\u91cd\u65b0\u542f\u7528\u56fe\u5c42\u8499\u7248\u3002","title":"\u542f\u7528\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_25","text":"\uff081\uff09\u5982\u679c\u8981\u5220\u9664\u56fe\u5c42\u8499\u7248\uff0c\u53ef\u4ee5\u9009\u4e2d\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 >\u56fe\u5c42\u8499\u7248 > \u5220\u9664\u201d\u547d\u4ee4\u3002 \uff082\uff09\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5220\u9664\u56fe\u5c42\u8499\u7248\u201d\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u56fe\u5c42\u8499\u7248\u3002 \uff083\uff09\u5c06\u8499\u7248\u7f29\u89c8\u56fe\u62d6\u62fd\u5230\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u56fe\u5c42\u201d\u6309\u94ae\u4e0a\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u5355 \u51fb\u201c\u5220\u9664\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5220\u9664\u8be5\u56fe\u5c42\u8499\u7248\u3002 \uff084\uff09\u9009\u62e9\u8499\u7248\uff0c\u7136\u540e\u76f4\u63a5\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u5220\u9664\u8499\u7248\u201d\u6309\u94ae\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u8be5\u56fe\u5c42\u8499\u7248\u3002","title":"\u5220\u9664\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_26","text":"\u5355\u51fb\u9009\u4e2d\u8981\u8f6c\u79fb\u7684\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u5e76\u5c06\u8499\u7248\u62d6\u62fd\u5230\u5176\u4ed6\u56fe\u5c42\u4e0a\uff0c\u5373\u53ef\u5c06\u8be5\u56fe\u5c42\u7684\u8499\u7248\u8f6c\u79fb\u5230\u5176\u4ed6\u56fe\u5c42\u4e0a\u3002","title":"\u8f6c\u79fb\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_27","text":"\u5982\u679c\u8981\u7528\u4e00\u4e2a\u56fe\u5c42\u7684\u8499\u7248\u66ff\u6362\u53e6\u5916\u4e00\u4e2a\u56fe\u5c42\u7684\u8499\u7248\uff0c\u53ef\u4ee5\u5c06\u8be5\u56fe\u5c42\u7684\u8499\u7248\u7f29\u89c8\u56fe\u62d6\u62fd\u5230\u53e6\u5916\u4e00\u4e2a\u56fe\u5c42\u7684\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u5355\u51fb\u201c\u662f\u201d\u6309\u94ae\u3002\u3002","title":"\u66ff\u6362\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_28","text":"\u5982 \u679c \u8981 \u5c06 \u4e00 \u4e2a \u56fe \u5c42 \u7684 \u8499 \u7248 \u590d \u5236 \u5230 \u53e6 \u5916 \u4e00 \u4e2a \u56fe \u5c42 \u4e0a\uff0c\u53ef \u4ee5 \u6309 \u4f4f Alt \u952e \u5c06 \u8499 \u7248 \u7f29 \u89c8 \u56fe \u62d6 \u62fd \u5230 \u53e6 \u5916 \u4e00 \u4e2a \u56fe \u5c42 \u4e0a\u3002","title":"\u590d\u5236\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_29","text":"\u5728\u56fe\u5c42\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u53ef\u4ee5\u770b\u5230 3 \u4e2a\u5173\u4e8e\u8499\u7248\u4e0e\u9009\u533a\u8fd0\u7b97\u7684\u547d\u4ee4\u3002","title":"\u8499\u7248\u4e0e\u9009\u533a\u7684\u8fd0\u7b97"},{"location":"PS/PS10/#_30","text":"\u5236\u4f5c\u5a5a\u7eb1\u6444\u5f71\u7248\u5f0f","title":"\u8499\u7248\u9009\u533a\u8fd0\u7b97\u7ec3\u4e60"},{"location":"PS/PS10/#_31","text":"","title":"\u77e2\u91cf\u8499\u7248"},{"location":"PS/PS10/#_32","text":"\u77e2\u91cf\u8499\u7248\u662f\u77e2\u91cf\u5de5\u5177\uff0c\u53ef\u4ee5\u94a2\u7b14\u6216\u5f62\u72b6\u5de5\u5177\u5728\u8499\u7248\u4e0a\u7ed8\u5236\u8def\u5f84\u5f62\u72b6\u63a7\u5236\u56fe\u50cf\u7684\u663e\u793a\u4e0e\u9690\u85cf\uff0c\u5e76\u4e14\u77e2\u91cf\u8499\u7248\u53ef\u4ee5\u8c03\u6574\u8def\u5f84\u8282\u70b9\uff0c\u4ece\u800c\u5236\u4f5c\u51fa\u7cbe\u786e\u7684\u8499\u7248\u533a\u57df\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS10/#_33","text":"\u9009\u62e9\u56fe\u5c42\uff0c\u5728\u201c\u5c5e\u6027\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u77e2\u91cf\u8499\u7248\u201d\u6309\u94ae\u5373\u53ef\u4e3a\u5176\u6dfb\u52a0\u4e00\u4e2a\u77e2\u91cf\u8499\u7248\u3002\u6dfb\u52a0\u77e2\u91cf\u8499\u7248\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u77e9\u5f62\u5de5\u5177\u201d \u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u4e00\u4e2a\u5706\u89d2\u77e9\u5f62\u8def\u5f84\uff0c\u6b64\u65f6\u77e9\u5f62\u5916\u7684\u56fe\u50cf\u5c06\u88ab\u9690\u85cf\u3002 \u7ed8\u5236\u5e76\u9009\u62e9\u95ed\u5408\u8def\u5f84\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u77e2\u91cf\u8499\u7248 >\u5f53\u524d\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u57fa\u4e8e\u5f53\u524d\u8def\u5f84\u4e3a\u56fe\u5c42\u521b\u5efa\u4e00\u4e2a\u77e2\u91cf\u8499\u7248\u3002","title":"\u521b\u5efa\u77e2\u91cf\u8499\u7248"},{"location":"PS/PS10/#_34","text":"\u521b\u5efa\u77e2\u91cf\u8499\u7248\u540e\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u94a2\u7b14\u5de5\u5177\u7ec4\u6216\u5f62\u72b6\u5de5\u5177\u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u5f62\u72b6\u3002","title":"\u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u5f62\u72b6"},{"location":"PS/PS10/#_35","text":"\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u6805\u683c\u5316\u77e2\u91cf\u8499\u7248\u201d\u547d\u4ee4\u3002\u6805\u683c\u5316\u77e2\u91cf\u8499\u7248\u540e\uff0c\u8499\u7248\u5c31\u4f1a\u8f6c\u6362\u4e3a\u56fe\u5c42\u8499\u7248\uff0c\u4e0d\u518d\u6709\u77e2\u91cf\u5f62\u72b6\u5b58\u5728\u3002","title":"\u5c06\u77e2\u91cf\u8499\u7248\u8f6c\u6362\u4e3a\u56fe\u5c42\u8499\u7248"},{"location":"PS/PS10/#_36","text":"\u53ef\u4ee5\u5728\u8499\u7248\u7f29\u89c8\u56fe\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5220\u9664\u77e2\u91cf\u8499\u7248\u201d\u547d\u4ee4\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u77e2\u91cf\u8499\u7248 > \u5220\u9664\u201d\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u5220\u9664\u77e2\u91cf\u8499\u7248\u3002","title":"\u5220\u9664\u77e2\u91cf\u8499\u7248"},{"location":"PS/PS10/#_37","text":"\u9488\u5bf9\u77e2\u91cf\u8499\u7248\u7684\u7f16\u8f91\u4e3b\u8981\u662f\u5bf9\u77e2\u91cf\u8499\u7248\u4e2d\u8def\u5f84\u7684\u7f16\u8f91\uff0c \u9664\u4e86\u53ef\u4ee5\u4f7f\u7528\u94a2\u7b14\u5de5\u5177\u7ec4\u3001\u5f62\u72b6\u5de5\u5177\u5728\u77e2\u91cf\u8499\u7248\u4e2d\u7ed8\u5236\u5f62\u72b6\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8def\u5f84\u951a\u70b9\u7684\u4f4d\u7f6e\u6539\u53d8\u77e2\u91cf\u8499 \u7248 \u7684 \u5916 \u5f62\uff0c \u6216 \u8005 \u901a\u8fc7\u53d8\u6362\u8def\u5f84\u8c03\u6574\u5176\u89d2\u5ea6\u5927\u5c0f\u7b49\u3002","title":"\u7f16\u8f91\u77e2\u91cf\u8499\u7248"},{"location":"PS/PS10/#_38","text":"\u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c\u56fe\u5c42\u4e0e\u77e2\u91cf\u8499\u7248\u662f\u94fe\u63a5\u5728\u4e00\u8d77\u7684\uff08\u94fe\u63a5\u5904\u6709\u4e00\u4e2a \u56fe\u6807\uff09\uff0c\u5f53\u79fb\u52a8\u3001\u53d8\u6362\u56fe\u5c42\u65f6\uff0c\u77e2\u91cf\u8499\u7248\u4e5f\u4f1a\u8ddf\u7740\u94fe\u63a5/\u53d6\u6d88\u94fe\u63a5\u77e2\u91cf\u8499\u7248\u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0c\u56fe\u5c42\u4e0e\u77e2\u91cf\u8499\u7248\u662f\u94fe\u63a5\u5728\u4e00\u8d77\u7684\uff08\u94fe\u63a5\u5904\u6709\u4e00\u4e2a \u56fe\u6807\uff09\uff0c\u5f53\u79fb\u52a8\u3001\u53d8\u6362\u56fe\u5c42\u65f6\uff0c\u77e2\u91cf\u8499\u7248\u4e5f\u4f1a\u8ddf\u7740\u53d1\u751f\u53d8\u5316\u3002\u5982\u679c\u4e0d\u60f3\u53d8\u6362\u56fe\u5c42\u6216\u77e2\u91cf\u8499\u7248\u65f6\u5f71\u54cd\u5bf9\u65b9\uff0c\u53ef\u4ee5\u5355\u51fb\u94fe\u63a5\u56fe\u6807 \u53d6\u6d88\u94fe\u63a5\u3002\u5982\u679c\u8981\u6062\u590d\u94fe\u63a5\uff0c\u53ef\u4ee5\u5728\u53d6\u6d88\u94fe\u63a5\u7684\u5730\u65b9\u5355\u51fb\uff0c\u6216\u8005\u6267\u884c\u201c\u56fe\u5c42 > \u77e2\u91cf\u8499\u7248 > \u94fe\u63a5\u201d\u547d\u4ee4\u3002","title":"\u94fe\u63a5/\u53d6\u6d88\u94fe\u63a5\u77e2\u91cf\u8499\u7248"},{"location":"PS/PS10/#_39","text":"\u53ef\u4ee5\u50cf\u5bf9\u666e\u901a\u56fe\u5c42\u4e00\u6837\uff0c\u5411\u77e2\u91cf\u8499\u7248\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u56fe\u5c42\u6837\u5f0f\u53ea\u5bf9\u77e2\u91cf\u8499\u7248\u4e2d\u7684\u5185\u5bb9\u8d77\u4f5c\u7528\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9690\u85cf\u7684\u90e8\u5206\u3002","title":"\u4e3a\u77e2\u91cf\u8499\u7248\u6dfb\u52a0\u6548\u679c"},{"location":"PS/PS10/#_40","text":"\u4f7f\u7528\u56fe\u5c42\u8499\u7248\u5c06\u6d77\u661f\u7d20\u6750\u5408\u6210\u5230\u74f6\u5b50\u4e2d \u4f7f\u7528\u8499\u7248\u5236\u4f5c\u83e0\u841d\u5899","title":"\u7ec3\u4e60"},{"location":"PS/PS2/","text":"\u8ba4\u8bc6\u9009\u533a \u00b6 \u9009\u533a\u7684\u57fa\u672c\u529f\u80fd \u00b6 \u5728 Photoshop \u4e2d\u5904\u7406\u56fe\u50cf\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u9488\u5bf9\u5c40\u90e8\u6548\u679c\u8fdb\u884c\u8c03\u6574\uff0c\u901a\u8fc7\u9009\u62e9\u7279\u5b9a\u533a\u57df\uff0c\u53ef\u4ee5\u5bf9\u8be5\u533a\u57df\u8fdb\u884c\u7f16\u8f91\u5e76\u4fdd\u6301\u672a\u9009\u5b9a\u533a\u57df\u4e0d\u4f1a\u88ab\u6539\u52a8\u3002\u8fd9\u65f6\u5c31\u9700\u8981\u4e3a\u56fe\u50cf\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u7684\u7f16\u8f91\u533a\u57df\u2014\u2014\u9009\u533a\u3002 \u82e5\u53ea\u9700\u8981\u6539\u53d8\u5361\u7247\u7684\u989c\u8272\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u6216\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u51fa\u9700\u8981\u8c03\u8272\u7684\u533a\u57df\u9009\u533a\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u533a\u57df\u8fdb\u884c\u5355\u72ec\u8c03\u8272\u5373\u53ef\u3002 \u9009\u533a\u7684\u53e6\u5916\u4e00\u9879\u91cd\u8981\u529f\u80fd\u662f\u56fe\u50cf\u5c40\u90e8\u7684\u5206\u79bb\uff0c\u4e5f\u5c31\u662f\u62a0\u56fe\u3002\u8981\u5c06\u56fe\u4e2d\u7684\u4e3b\u4f53\u7269\u5206\u79bb\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201c\u5feb\u901f\u9009\u62e9\u5de5\u5177\u201d\u6216\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u5236\u4f5c\u4e3b\u4f53\u90e8\u5206\u9009\u533a\uff0c\u63a5\u7740\u5c06\u9009\u533a\u4e2d\u7684\u5185\u5bb9\u590d\u5236\u3001\u7c98\u8d34\u5230\u5176\u4ed6\u5408\u9002\u7684\u80cc\u666f\u6587\u4ef6\u4e2d\uff0c\u5e76\u6dfb\u52a0\u5176\u4ed6\u5408\u6210\u5143\u7d20\uff0c\u5373\u53ef\u5b8c\u6210\u4e00\u4e2a\u5408\u6210\u4f5c\u54c1\u3002 \u5236\u4f5c\u9009\u533a\u5e38\u7528\u65b9\u6cd5 \u00b6 \u9009\u533a\u5de5\u5177\u9009\u62e9\u6cd5 \u00b6 \u5bf9\u4e8e\u6bd4\u8f83\u89c4\u5219\u7684\u5706\u5f62\u6216\u65b9\u5f62\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u9009\u6846\u5de5\u5177\u7ec4\u3002\u9009\u6846\u5de5\u5177\u7ec4\u662f Photoshop \u4e2d\u6700\u5e38\u7528\u7684\u9009\u533a\u5de5\u5177\uff0c\u9002\u5408\u4e8e\u5f62\u72b6\u6bd4\u8f83\u89c4\u5219\u7684\u56fe\u6848\uff08\u5982\u5706\u5f62\u3001\u692d\u5706\u5f62\u3001\u6b63\u65b9\u5f62\u3001\u957f\u65b9\u5f62\uff09\u3002 \u5bf9\u4e8e\u4e0d\u89c4\u5219\u9009\u533a\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5957\u7d22\u5de5\u5177\u7ec4\u3002\u5bf9\u4e8e\u8f6c\u6298\u5904\u6bd4\u8f83\u5f3a\u70c8\u7684\u56fe\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\u6765\u8fdb\u884c\u9009\u62e9\uff1b\u5bf9\u4e8e\u8f6c\u6298\u6bd4\u8f83\u67d4\u548c\u7684\u56fe\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u5957\u7d22\u5de5\u5177\u201d\u3002 \u8def\u5f84\u9009\u62e9\u6cd5 \u00b6 Photoshop \u4e2d\u7684\u201c\u94a2\u7b14\u5de5\u5177\u201d\u5c5e\u4e8e\u5178\u578b\u7684\u77e2\u91cf\u5de5\u5177\uff0c\u901a\u8fc7\u201c\u94a2\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u7ed8\u5236\u51fa\u5e73\u6ed1\u6216\u8005\u5c16\u9510\u7684\u4efb\u4f55\u5f62\u72b6\u8def\u5f84\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u76f8\u540c\u5f62\u72b6\u7684\u9009\u533a\uff0c\u4ece\u800c\u9009\u51fa\u5bf9\u8c61\u3002 \u8272\u8c03\u9009\u62e9\u6cd5 \u00b6 \u201c\u9b54\u68d2\u5de5\u5177\u201d\u3001\u201c\u5feb\u901f\u9009\u62e9\u5de5\u5177\u201d\u3001\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u548c\u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\u90fd\u53ef\u4ee5\u57fa\u4e8e\u8272\u8c03\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u521b\u5efa\u9009\u533a\u3002\u5982\u679c\u9700\u8981\u9009\u62e9\u7684\u5bf9\u8c61\u4e0e\u80cc\u666f\u4e4b\u95f4\u7684\u8272\u8c03\u5dee\u5f02\u6bd4\u8f83\u660e\u663e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u548c\u547d\u4ee4\u6765\u8fdb\u884c\u9009\u62e9\u3002 \u901a\u9053\u9009\u62e9\u6cd5 \u00b6 \u901a\u9053\u62a0\u56fe\u4e3b\u8981\u5229\u7528\u5177\u4f53\u56fe\u50cf\u7684\u8272\u76f8\u5dee\u522b\u6216\u8005\u660e\u5ea6\u5dee\u522b\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u5efa\u7acb\u9009\u533a\u3002\u901a\u9053\u62a0\u56fe\u6cd5\u975e\u5e38\u9002\u5408\u4e8e\u534a\u900f\u660e\u548c\u6bdb\u53d1\u7c7b\u5bf9\u8c61\u9009\u533a\u7684\u5236\u4f5c\uff0c\u5982\u679c\u8981\u62a0\u53d6\u6bdb\u53d1\u3001\u5a5a\u7eb1\u3001\u70df\u96fe\u3001\u73bb\u7483\u4ee5\u53ca\u5177\u6709\u8fd0\u52a8\u6a21\u7cca\u7684\u7269\u4f53\uff0c\u4f7f\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u5de5\u5177\u5c31\u5f88\u96be\u4fdd\u7559\u7cbe\u7ec6\u7684\u534a\u900f\u660e\u9009\u533a\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u4f7f\u7528\u901a\u9053\u6765\u8fdb\u884c\u62a0\u50cf\u3002 \u901a\u9053\u62a0\u56fe\u7ec3\u4e60 \u00b6 \u901a\u9053\u62a0\u56fe\u4e3a\u957f\u53d1\u7f8e\u5973\u6362\u80cc\u666f \u5feb\u901f\u8499\u7248\u9009\u62e9\u6cd5 \u00b6 \u5728\u5feb\u901f\u8499\u7248\u72b6\u6001\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u7ed8\u753b\u5de5\u5177\u548c\u6ee4\u955c\u5bf9\u9009\u533a\u8fdb\u884c\u7ec6\u81f4\u7684\u5904\u7406\u3002\u6bd4\u5982\uff0c\u5982\u679c\u8981\u5c06\u56fe\u4e2d\u7684\u524d\u666f\u5bf9\u8c61\u62a0\u9009\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165\u5feb\u901f\u8499\u7248\u72b6\u6001\uff0c\u7136\u540e\u4f7f\u7528\u201c\u753b\u7b14\u5de5\u5177\u201d\u5728\u5feb\u901f\u8499\u7248\u4e2d\u7684\u80cc\u666f\u90e8\u5206\u4e0a\u8fdb\u884c\u7ed8\u5236\uff08\u7ed8\u5236\u51fa\u7684\u9009\u533a\u4e3a\u7ea2\u8272\u72b6\u6001\uff09\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\u6309 Q \u952e\u9000\u51fa\u5feb\u901f\u8499\u7248\u72b6\u6001\uff0cPhotoshop \u4f1a\u81ea\u52a8\u521b\u5efa\u9009\u533a\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u5220\u9664\u80cc\u666f\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u524d\u666f\u5bf9\u8c61\u91cd\u65b0\u6dfb\u52a0\u80cc\u666f\u3002 \u4ece\u5f53\u524d\u56fe\u50cf\u521b\u5efa\u8499\u7248 \u6ca1\u6709\u9009\u533a\u7684\u72b6\u6001\u4e0b\uff0c\u5728\u5de5\u5177\u7bb1\u4e2d\u5355\u51fb\u201c\u4ee5\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u7f16\u8f91\u201d\u6309\u94ae\uff0c\u63a5\u7740\u4f7f\u7528\u7ed8\u753b\u5de5\u5177\u5728\u5feb\u901f\u8499\u7248\u72b6\u6001\u4e0b\u8fdb\u884c\u7ed8\u5236\uff0c\u6309 Q \u952e\u9000\u51fa\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u4ee5\u540e\uff0c\u7ea2\u8272\u4ee5\u5916\u7684\u533a\u57df\u5c31\u4f1a\u88ab\u9009\u4e2d\u3002 \u4f7f\u7528\u9009\u6846\u5de5\u5177 \u00b6 \u77e9\u5f62\u9009\u6846\u5de5\u5177 \u00b6 \u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u4e3b\u8981\u7528\u4e8e\u521b\u5efa\u77e9\u5f62\u9009\u533a\u4e0e\u6b63\u65b9\u5f62\u9009\u533a\uff0c\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\uff0c\u677e\u5f00\u9f20\u6807\u540e\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002\u6309\u4f4f Shift \u952e\u53ef\u4ee5\u521b\u5efa\u6b63\u65b9\u5f62\u9009\u533a\u3002 \u692d\u5706\u9009\u6846\u5de5\u5177 \u00b6 \u201c\u692d\u5706\u9009\u6846\u5de5\u5177\u201d\u4e3b\u8981\u7528\u6765\u5236\u4f5c\u692d\u5706\u9009\u533a\u548c\u6b63\u5706\u9009\u533a\uff0c\u6309\u4f4f Shift \u952e\u53ef\u4ee5\u521b\u5efa\u6b63\u5706\u9009\u533a\u3002 \u5355\u884c/\u5355\u5217\u9009\u6846\u5de5\u5177 \u00b6 \u201c\u5355\u884c\u9009\u6846\u5de5\u5177\u201d\u548c\u201c\u5355\u5217\u9009\u6846\u5de5\u5177\u201d\u4e3b\u8981\u7528\u6765\u521b\u5efa\u9ad8\u5ea6\u6216\u5bbd\u5ea6\u4e3a 1 \u50cf\u7d20\u7684\u9009\u533a\uff0c\u5e38\u7528\u6765\u5236\u4f5c\u7f51\u683c\u6548\u679c\u3002\u8fd9\u4e24\u79cd\u5de5\u5177\u4f7f\u7528\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u5728\u753b\u9762\u4e2d\u5355\u51fb\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002 \u9009\u533a\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u79fb\u52a8\u9009\u533a \u00b6 \u4f7f\u7528\u9009\u6846\u5de5\u5177\u521b\u5efa\u9009\u533a\u65f6\uff0c\u5728\u677e\u5f00\u9f20\u6807\u5de6\u952e\u4e4b\u524d\uff0c\u6309\u4f4f Space \u952e\uff08\u5373\u7a7a\u683c\u952e\uff09\u62d6\u62fd\u5149\u6807\uff0c\u53ef\u4ee5\u79fb\u52a8\u9009\u533a\u3002 \u53d8\u6362\u9009\u533a \u00b6 \u9996\u5148\u4f7f\u7528\u201c\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u7ed8\u5236\u4e00\u4e2a\u957f\u65b9\u5f62\u9009\u533a\u3002\u5bf9\u521b\u5efa\u597d\u7684\u9009\u533a\u6267\u884c\u201c\u9009\u62e9>\u53d8\u6362\u9009\u533a\u201d\u547d\u4ee4\u6216\u6309 Alt+S+T \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5bf9\u9009\u533a\u8fdb\u884c\u79fb\u52a8\u3002 \u5728\u9009\u533a\u53d8\u6362\u72b6\u6001\u4e0b\uff0c\u5728\u753b\u5e03\u4e2d\u53f3\u51fb\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u5176\u4ed6\u53d8\u6362\u65b9\u5f0f\u3002 \u5168\u9009\u4e0e\u53cd\u9009 \u00b6 \u5168\u9009\uff1a\u5168\u9009\u56fe\u50cf\u5e38\u7528\u4e8e\u590d\u5236\u6574\u4e2a\u6587\u6863\u4e2d\u7684\u56fe\u50cf\u3002\u6267\u884c\u201c \u9009 \u62e9 > \u5168 \u90e8 \u201d \u547d \u4ee4 \u6216 \u6309 Ctrl+A \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u9009\u62e9\u5f53\u524d\u6587\u6863\u8fb9\u754c\u5185\u7684\u6240\u6709\u56fe\u50cf\u793a\u3002 \u53cd\u9009\uff1a\u521b\u5efa\u9009\u533a\u4ee5\u540e\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u53cd\u5411\u9009\u62e9\u201d\u547d\u4ee4\u6216\u6309 Shift+Ctrl+I \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u9009\u62e9\u53cd\u76f8\u7684\u9009\u533a\uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u56fe\u50cf\u4e2d\u6ca1\u6709\u88ab\u9009\u62e9\u7684\u90e8\u5206\u3002 \u53d6\u6d88\u9009\u62e9\u4e0e\u91cd\u65b0\u9009\u62e9 \u00b6 \u6267\u884c\u201c\u9009\u62e9 > \u53d6\u6d88\u9009\u62e9\u201d\u547d\u4ee4\u6216\u6309 Ctrl+D \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u53d6\u6d88\u9009\u533a\u72b6\u6001\u3002 \u91cd\u65b0\u9009\u62e9 \u00b6 \u5982\u679c\u8981\u6062\u590d\u88ab\u53d6\u6d88\u7684\u9009\u533a\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u9009\u62e9 > \u91cd\u65b0\u9009\u62e9\u201d\u547d\u4ee4\u793a\u3002 \u9690\u85cf\u4e0e\u663e\u793a\u9009\u533a \u00b6 \u6267\u884c\u201c\u89c6\u56fe > \u663e\u793a > \u9009\u533a\u8fb9\u7f18\u201d\u547d\u4ee4\u53ef\u4ee5\u5207\u6362\u9009\u533a\u7684\u663e\u793a\u4e0e\u9690\u85cf\u3002\u521b\u5efa\u9009\u533a\u540e\uff0c\u6267\u884c\u201c\u89c6\u56fe > \u663e\u793a > \u9009\u533a\u8fb9\u7f18\u201d\u547d\u4ee4\u6216\u6309 Ctrl+H \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u9690\u85cf\u9009\u533a\uff08\u6ce8\u610f\uff0c\u9690\u85cf\u9009\u533a\u540e\uff0c\u9009\u533a\u4ecd\u7136\u5b58\u5728\uff09\uff1b\u5982\u679c\u8981\u5c06\u9690\u85cf\u7684\u9009\u533a\u663e\u793a\u51fa\u6765\uff0c\u53ef\u4ee5\u518d\u6b21\u6267\u884c\u201c\u89c6\u56fe > \u663e\u793a > \u9009\u533a\u8fb9\u7f18\u201d\u547d\u4ee4\u6216\u6309 Ctrl+H \u7ec4\u5408\u952e\u3002 \u9009\u533a\u7684\u8fd0\u7b97 \u00b6 \u5982\u679c\u5f53\u524d\u56fe\u50cf\u4e2d\u5305\u542b\u9009\u533a\uff0c\u5728\u4f7f\u7528\u4efb\u4f55\u9009\u6846\u5de5\u5177\u3001\u5957\u7d22\u5de5\u5177\u6216\u9b54\u68d2\u5de5\u5177\u521b\u5efa\u9009\u533a\u65f6\uff0c\u9009\u9879\u680f\u4e2d\u5c31\u4f1a\u51fa\u73b0\u9009\u533a\u8fd0\u7b97\u7684\u76f8\u5173\u5de5\u5177\u3002 \u6253\u5f00\u56fe\u7247\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528\u201c\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62\u9009\u6846\uff0c\u521b\u5efa\u65b0\u9009\u533a\u3002 \u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u5230\u9009\u533a\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u5f53\u524d\u521b\u5efa\u7684\u9009\u533a\u6dfb\u52a0\u5230\u539f\u6765\u7684\u9009\u533a\u4e2d\uff08\u6309\u4f4f Shift \u952e\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff09\u3002 \u5355\u51fb\u201c\u4ece\u9009\u533a\u51cf\u53bb\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u5f53\u524d\u5efa\u9009\u533a\u4ece\u539f\u6765\u7684\u9009\u533a\u4e2d\u51cf\u53bb\uff08\u6309\u4f4f Alt \u952e\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff09\u3002 \u5355\u51fb\u201c\u4e0e\u9009\u533a\u4ea4\u53c9\u201d\u6309\u94ae\uff0c\u65b0\u5efa\u9009\u533a\u65f6\u53ea\u4fdd\u7559\u539f\u6709\u9009\u533a\u4e0e\u65b0\u5efa\u9009\u533a\u76f8\u4ea4\u7684\u90e8\u5206\uff08\u6309\u4f4f Alt+Shift \u7ec4\u5408\u952e\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff09\u3002 \u9009\u533a\u8fd0\u7b97\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u9009\u533a\u5236\u4f5c\u5965\u8fd0\u4e94\u73af \u5b58\u50a8\u9009\u533a \u00b6 \u5728 Photoshop \u4e2d\uff0c\u9009\u533a\u53ef\u4ee5\u4f5c\u4e3a\u901a\u9053\u8fdb\u884c\u5b58\u50a8\u3002\u6267\u884c\u201c\u9009\u62e9 > \u5b58\u50a8\u9009\u533a\u201d\u547d\u4ee4\uff0c\u6216\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u5c06\u9009\u533a\u5b58\u50a8\u4e3a\u901a\u9053\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u5b58\u50a8\u4e3aAlpha \u901a\u9053\u8499\u7248\u3002\u6267\u884c\u201c\u9009\u62e9 > \u5b58\u50a8\u9009\u533a\u201d\u547d\u4ee4\uff0cPhotoshop \u4f1a\u5f39\u51fa\u201c\u5b58\u50a8\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u3002 \u8f7d\u5165\u9009\u533a \u00b6 \u6267\u884c\u201c\u9009\u62e9 > \u8f7d\u5165\u9009\u533a\u201d\u547d\u4ee4\uff0c\u6216\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u6309\u4f4f Ctrl \u952e\u7684\u540c\u65f6\u5355\u51fb\u5b58\u50a8\u9009\u533a\u7684\u901a\u9053\u8499\u7248\u7f29\u7565\u56fe\uff0c\u5373\u53ef\u91cd\u65b0\u8f7d\u5165\u5b58\u50a8\u8d77\u6765\u7684\u9009\u533a\u3002\u5f53\u6267\u884c\u201c\u9009\u62e9 > \u8f7d\u5165\u9009\u533a\u201d\u547d\u4ee4\u65f6\uff0cPhotoshop \u4f1a\u5f39\u51fa\u201c\u8f7d\u5165\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u3002 \u5957\u7d22\u5de5\u5177\u7ec4 \u00b6 \u5957\u7d22\u5de5\u5177 \u00b6 \u4f7f\u7528\u201c\u5957\u7d22\u5de5\u5177\u201d\u53ef\u4ee5\u975e\u5e38\u81ea\u7531\u5730\u7ed8\u5236\u51fa\u5f62\u72b6\u4e0d\u89c4\u5219\u7684\u9009\u533a\u3002\u9009\u62e9 \u201c\u5957\u7d22\u5de5\u5177\u201d\u540e\uff0c\u5728\u56fe\u50cf\u4e0a\u62d6\u62fd\u5149\u6807\u7ed8\u5236\u9009\u533a\u8fb9\u754c\uff0c\u5f53\u91ca\u653e\u9f20\u6807\u65f6\uff0c\u9009\u533a\u5c06\u81ea\u52a8\u95ed\u5408\u3002 \u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177 \u00b6 \u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\u4e0e\u201c\u5957\u7d22\u5de5\u5177\u201d\u7684\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\u3002\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\u9002\u5408\u4e8e\u521b\u5efa\u4e00\u4e9b\u8f6c\u89d2\u6bd4\u8f83\u5f3a\u70c8\u7684\u9009\u533a\u3002\u5728\u753b\u9762\u4e2d\u5355\u51fb\u786e\u5b9a\u9009\u533a\u7684\u8d77\u70b9\uff0c\u63a5\u7740\u79fb\u52a8\u5149\u6807\u5230\u5176\u4ed6\u4f4d\u7f6e\u518d\u6b21\u5355\u51fb\uff0c\u6700\u540e\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u8d77\u70b9\u5904\uff0c\u5355\u51fb\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002 \u591a\u8fb9\u5f62\u5957\u7d22\u7ec3\u4e60 \u00b6 \u5229\u7528\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u9009\u62e9\u7167\u7247 \u78c1\u6027\u5957\u7d22\u5de5\u5177 \u00b6 \u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u80fd\u591f\u4ee5\u989c\u8272\u4e0a\u7684\u5dee\u5f02\u81ea\u52a8\u8bc6\u522b\u5bf9\u8c61\u7684\u8fb9\u754c\uff0c\u7279\u522b\u9002\u5408\u4e8e\u5feb\u901f\u9009\u62e9\u4e0e\u80cc\u666f\u5bf9\u6bd4\u5f3a\u70c8\u4e14\u8fb9\u7f18\u590d\u6742\u7684\u5bf9\u8c61\u3002\u4f7f\u7528\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\uff0c\u5728\u8981\u9009\u53d6\u7684\u8fb9\u754c\u5904\u5355\u51fb\uff0c\u786e\u5b9a\u9009\u533a\u7684\u8d77\u70b9\uff0c\u63a5\u7740\u62d6\u52a8\u5149\u6807\uff0c\u5957\u7d22\u8fb9\u754c\u4f1a\u81ea\u52a8\u5bf9\u9f50\u56fe\u50cf\u7684\u8fb9\u7f18\u5e76\u7ed8\u5236\u9009\u533a\uff0c\u6700\u540e\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u9009\u533a\u8d77\u70b9\u5904\uff0c\u5355\u51fb\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002\u8fd8\u53ef\u4ee5\u6309\u4f4f Alt \u952e\u5207\u6362\u5230\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\uff0c\u4ee5\u52fe\u9009\u8f6c\u89d2\u6bd4\u8f83\u5f3a\u70c8\u7684\u8fb9\u7f18\u3002 \u78c1\u6027\u5957\u7d22\u7ec3\u4e60 \u00b6 \u5229\u7528\u78c1\u6027\u5957\u7d22\u5de5\u5177\u66f4\u6362\u80cc\u666f \u5feb\u901f\u9009\u62e9\u5de5\u5177\u7ec4 \u00b6 \u5feb\u901f\u9009\u62e9\u5de5\u5177 \u00b6 \u4f7f\u7528\u201c\u5feb\u901f\u9009\u62e9\u5de5\u5177\u201d\u53ef\u4ee5\u5229\u7528\u53ef\u8c03\u6574\u7684\u5706\u5f62\u7b14\u5c16\u8fc5\u901f\u5730\u7ed8\u5236\u51fa\u9009\u533a\u3002\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u9700\u8981\u9009\u62e9\u7684\u533a\u57df\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u62fd\uff0c\u5f53\u62d6\u62fd\u7b14\u5c16\u65f6\u9009\u53d6\u8303\u56f4\u4e0d\u4f46\u4f1a\u5411\u5916\u6269\u5f20\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u81ea\u52a8\u5bfb\u627e\u5e76\u6cbf\u7740\u56fe\u50cf\u7684\u8fb9\u7f18\u6765\u63cf\u7ed8\u9009\u533a\u3002 \u9b54\u68d2\u5de5\u5177 \u00b6 \u201c\u9b54\u68d2\u5de5\u5177\u201d\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u9891\u7387\u76f8\u5f53\u9ad8\uff0c\u4f7f\u7528\u201c\u9b54\u68d2\u5de5\u5177\u201d\u5728\u56fe\u50cf\u4e2d\u5355\u51fb\u5c31\u80fd\u9009\u53d6\u989c\u8272\u5dee\u522b\u5728\u5bb9\u5dee\u503c\u8303\u56f4\u4e4b\u5185\u7684\u533a\u57df\u3002 \u9b54\u68d2\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u9b54\u68d2\u66f4\u6362\u80cc\u666f \u4f7f\u7528 \u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4 \u00b6 \u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\u4e0e\u201c\u9b54\u68d2\u5de5\u5177\u201d\u76f8\u4f3c\uff0c\u53ef\u6839\u636e\u56fe\u50cf\u7684\u989c\u8272\u8303\u56f4\u521b\u5efa\u9009\u533a\uff0c\u4f46\u662f\u8be5\u547d\u4ee4\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u63a7\u5236\u9009\u9879\uff0c\u56e0\u6b64\u8be5\u547d\u4ee4\u7684\u9009\u62e9\u7cbe\u5ea6\u4e5f\u8981\u9ad8\u4e00\u4e9b\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\u4e0d\u53ef\u7528\u4e8e 32 \u4f4d / \u901a\u9053\u7684\u56fe\u50cf\u3002\u6267\u884c\u201c\u9009\u62e9 > \u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8272\u5f69\u8303\u56f4\u201d\u5bf9\u8bdd\u6846\u3002 \u9009\u533a\u7684\u7f16\u8f91 \u00b6 \u521b\u5efa\u8fb9\u754c\u9009\u533a \u00b6 \u521b\u5efa\u9009\u533a\u4ee5\u540e\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u8fb9\u754c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u7684\u8fb9\u754c\u5411\u5185\u6216\u5411\u5916\u8fdb\u884c\u6269\u5c55\uff0c\u6269\u5c55\u540e\u7684\u9009\u533a\u8fb9\u754c\u5c06\u4e0e\u539f\u6765\u7684\u9009\u533a\u8fb9\u754c\u5f62\u6210\u65b0\u7684\u9009\u533a\u3002 \u5e73\u6ed1\u9009\u533a \u00b6 \u5bf9\u9009\u533a\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u5e73\u6ed1\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002 \u6269\u5c55\u9009\u533a \u00b6 \u7ed8\u5236\u9009\u533a\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u6269\u5c55\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u5411\u5916\u8fdb\u884c\u6269\u5c55\u3002 \u6536\u7f29\u9009\u533a \u00b6 \u5982\u679c\u8981\u5411\u5185\u6536\u7f29\u9009\u533a\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u6536\u7f29\u201d\u547d\u4ee4\u3002 \u7fbd\u5316\u9009\u533a \u00b6 \u7fbd\u5316\u9009\u533a\u662f\u901a\u8fc7\u5efa\u7acb\u9009\u533a\u548c\u9009\u533a\u5468\u56f4\u50cf\u7d20\u4e4b\u95f4\u7684\u8f6c\u6362\u8fb9\u754c\u6765\u6a21\u7cca\u8fb9\u7f18\uff0c\u8fd9\u79cd\u6a21\u7cca\u65b9\u5f0f\u5c06\u4e22\u5931\u9009\u533a\u8fb9\u7f18\u7684\u4e00\u4e9b\u7ec6\u8282\u3002\u5bf9\u9009\u533a\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u7fbd\u5316\u201d\u547d\u4ee4\u6216\u6309 Shift+F6 \u7ec4\u5408\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u7fbd\u5316\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u4e2d\u5b9a\u4e49\u9009\u533a\u7684\u201c\u7fbd\u5316\u534a\u5f84\u201d\u5373\u53ef\u3002 \u6269\u5927\u9009\u53d6 \u00b6 \u201c\u6269\u5927\u9009\u53d6\u201d\u547d\u4ee4\u662f\u57fa\u4e8e\u201c\u9b54\u68d2\u5de5\u5177\u201d\u9009\u9879\u680f\u4e2d\u6307\u5b9a\u7684\u201c\u5bb9\u5dee\u201d\u8303\u56f4\u6765\u51b3\u5b9a\u9009\u533a\u7684\u6269\u5c55\u8303\u56f4\u3002\u6bd4\u5982\u4e0b\u56fe \u4e2d\u53ea\u9009\u62e9\u4e86\u4e00\u90e8\u5206\u7c89\u8272\u80cc\u666f\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u6269\u5927\u9009\u53d6\u201d\u547d\u4ee4\u540e\uff0cPhotoshop \u4f1a\u67e5\u627e\u5e76\u9009\u62e9\u90a3\u4e9b\u4e0e\u5f53\u524d\u9009\u533a\u4e2d\u50cf\u7d20\u8272\u8c03\u76f8\u8fd1\u7684\u50cf\u7d20\uff0c\u4ece\u800c\u6269\u5927\u9009\u62e9\u533a\u57df\u3002 \u9009\u53d6\u76f8\u4f3c \u00b6 \u201c\u9009\u53d6\u76f8\u4f3c\u201d\u547d\u4ee4\u4e0e\u201c\u6269\u5927\u9009\u53d6\u201d\u547d\u4ee4\u76f8\u4f3c\uff0c\u90fd\u662f\u57fa\u4e8e\u201c\u9b54\u68d2\u5de5\u5177\u201d\u9009\u9879\u680f\u4e2d\u6307\u5b9a\u7684\u201c\u5bb9\u5dee\u201d\u8303\u56f4\u6765\u51b3\u5b9a\u9009\u533a\u7684\u6269\u5c55\u8303\u56f4\u3002\u6bd4\u5982\uff0c\u4e0b\u56fe\u4e2d\u53ea\u9009\u62e9\u4e86\u4e00\u90e8\u5206\u7c89\u8272\u80cc\u666f\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u9009\u53d6\u76f8\u4f3c\u201d\u547d\u4ee4\u540e\uff0cPhotoshop \u540c\u6837\u4f1a\u67e5\u627e\u5e76\u9009\u62e9\u90a3\u4e9b\u4e0e\u5f53\u524d\u9009\u533a\u4e2d\u50cf\u7d20\u8272\u8c03\u76f8\u8fd1\u7684\u50cf\u7d20\uff0c\u4ece\u800c\u6269\u5927\u9009\u62e9\u533a\u57df\u3002 \u586b\u5145\u4e0e\u63cf\u8fb9 \u00b6 \u586b\u5145 \u00b6 \u5229\u7528\u201c\u586b\u5145\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u5f53\u524d\u56fe\u5c42\u6216\u9009\u533a\u5185\u586b\u5145\u989c\u8272\u6216\u56fe\u6848\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u586b\u5145\u65f6\u7684\u4e0d\u900f\u660e\u5ea6\u548c\u6df7\u5408\u6a21\u5f0f\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u586b\u5145\u201d\u547d\u4ee4\u6216\u6309 Shift+F4 \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u586b\u5145\u201d\u5bf9\u8bdd\u6846\u3002 \u63cf\u8fb9\u9009\u533a \u00b6 \u4f7f\u7528\u201c\u63cf\u8fb9\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u9009\u533a\u3001\u8def\u5f84\u6216\u56fe\u5c42\u5468\u56f4\u521b\u5efa\u5f69\u8272\u6216\u8005\u82b1\u7eb9\u7684\u8fb9\u6846\u6548\u679c\u3002\u521b\u5efa\u51fa\u9009\u533a\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u63cf\u8fb9\u201d\u547d\u4ee4\u6216\u6309 Alt+E+S \u7ec4\u5408\u952e\uff0c\u6253\u5f00\u201c\u63cf\u8fb9\u201d\u5bf9\u8bdd\u6846\u3002 \u7ec3\u4e60 \u00b6 \u5229\u7528\u9009\u533a\u5236\u4f5c\u592a\u6781 \u5236\u4f5c\u5fae\u4fe1\u56fe\u6807","title":"\u9009\u533a\u4e0e\u62a0\u56fe"},{"location":"PS/PS2/#_1","text":"","title":"\u8ba4\u8bc6\u9009\u533a"},{"location":"PS/PS2/#_2","text":"\u5728 Photoshop \u4e2d\u5904\u7406\u56fe\u50cf\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u9488\u5bf9\u5c40\u90e8\u6548\u679c\u8fdb\u884c\u8c03\u6574\uff0c\u901a\u8fc7\u9009\u62e9\u7279\u5b9a\u533a\u57df\uff0c\u53ef\u4ee5\u5bf9\u8be5\u533a\u57df\u8fdb\u884c\u7f16\u8f91\u5e76\u4fdd\u6301\u672a\u9009\u5b9a\u533a\u57df\u4e0d\u4f1a\u88ab\u6539\u52a8\u3002\u8fd9\u65f6\u5c31\u9700\u8981\u4e3a\u56fe\u50cf\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u7684\u7f16\u8f91\u533a\u57df\u2014\u2014\u9009\u533a\u3002 \u82e5\u53ea\u9700\u8981\u6539\u53d8\u5361\u7247\u7684\u989c\u8272\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u6216\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u51fa\u9700\u8981\u8c03\u8272\u7684\u533a\u57df\u9009\u533a\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u533a\u57df\u8fdb\u884c\u5355\u72ec\u8c03\u8272\u5373\u53ef\u3002 \u9009\u533a\u7684\u53e6\u5916\u4e00\u9879\u91cd\u8981\u529f\u80fd\u662f\u56fe\u50cf\u5c40\u90e8\u7684\u5206\u79bb\uff0c\u4e5f\u5c31\u662f\u62a0\u56fe\u3002\u8981\u5c06\u56fe\u4e2d\u7684\u4e3b\u4f53\u7269\u5206\u79bb\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201c\u5feb\u901f\u9009\u62e9\u5de5\u5177\u201d\u6216\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u5236\u4f5c\u4e3b\u4f53\u90e8\u5206\u9009\u533a\uff0c\u63a5\u7740\u5c06\u9009\u533a\u4e2d\u7684\u5185\u5bb9\u590d\u5236\u3001\u7c98\u8d34\u5230\u5176\u4ed6\u5408\u9002\u7684\u80cc\u666f\u6587\u4ef6\u4e2d\uff0c\u5e76\u6dfb\u52a0\u5176\u4ed6\u5408\u6210\u5143\u7d20\uff0c\u5373\u53ef\u5b8c\u6210\u4e00\u4e2a\u5408\u6210\u4f5c\u54c1\u3002","title":"\u9009\u533a\u7684\u57fa\u672c\u529f\u80fd"},{"location":"PS/PS2/#_3","text":"","title":"\u5236\u4f5c\u9009\u533a\u5e38\u7528\u65b9\u6cd5"},{"location":"PS/PS2/#_4","text":"\u5bf9\u4e8e\u6bd4\u8f83\u89c4\u5219\u7684\u5706\u5f62\u6216\u65b9\u5f62\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u9009\u6846\u5de5\u5177\u7ec4\u3002\u9009\u6846\u5de5\u5177\u7ec4\u662f Photoshop \u4e2d\u6700\u5e38\u7528\u7684\u9009\u533a\u5de5\u5177\uff0c\u9002\u5408\u4e8e\u5f62\u72b6\u6bd4\u8f83\u89c4\u5219\u7684\u56fe\u6848\uff08\u5982\u5706\u5f62\u3001\u692d\u5706\u5f62\u3001\u6b63\u65b9\u5f62\u3001\u957f\u65b9\u5f62\uff09\u3002 \u5bf9\u4e8e\u4e0d\u89c4\u5219\u9009\u533a\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5957\u7d22\u5de5\u5177\u7ec4\u3002\u5bf9\u4e8e\u8f6c\u6298\u5904\u6bd4\u8f83\u5f3a\u70c8\u7684\u56fe\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\u6765\u8fdb\u884c\u9009\u62e9\uff1b\u5bf9\u4e8e\u8f6c\u6298\u6bd4\u8f83\u67d4\u548c\u7684\u56fe\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528\u201c\u5957\u7d22\u5de5\u5177\u201d\u3002","title":"\u9009\u533a\u5de5\u5177\u9009\u62e9\u6cd5"},{"location":"PS/PS2/#_5","text":"Photoshop \u4e2d\u7684\u201c\u94a2\u7b14\u5de5\u5177\u201d\u5c5e\u4e8e\u5178\u578b\u7684\u77e2\u91cf\u5de5\u5177\uff0c\u901a\u8fc7\u201c\u94a2\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u7ed8\u5236\u51fa\u5e73\u6ed1\u6216\u8005\u5c16\u9510\u7684\u4efb\u4f55\u5f62\u72b6\u8def\u5f84\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u76f8\u540c\u5f62\u72b6\u7684\u9009\u533a\uff0c\u4ece\u800c\u9009\u51fa\u5bf9\u8c61\u3002","title":"\u8def\u5f84\u9009\u62e9\u6cd5"},{"location":"PS/PS2/#_6","text":"\u201c\u9b54\u68d2\u5de5\u5177\u201d\u3001\u201c\u5feb\u901f\u9009\u62e9\u5de5\u5177\u201d\u3001\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u548c\u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\u90fd\u53ef\u4ee5\u57fa\u4e8e\u8272\u8c03\u4e4b\u95f4\u7684\u5dee\u5f02\u6765\u521b\u5efa\u9009\u533a\u3002\u5982\u679c\u9700\u8981\u9009\u62e9\u7684\u5bf9\u8c61\u4e0e\u80cc\u666f\u4e4b\u95f4\u7684\u8272\u8c03\u5dee\u5f02\u6bd4\u8f83\u660e\u663e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u548c\u547d\u4ee4\u6765\u8fdb\u884c\u9009\u62e9\u3002","title":"\u8272\u8c03\u9009\u62e9\u6cd5"},{"location":"PS/PS2/#_7","text":"\u901a\u9053\u62a0\u56fe\u4e3b\u8981\u5229\u7528\u5177\u4f53\u56fe\u50cf\u7684\u8272\u76f8\u5dee\u522b\u6216\u8005\u660e\u5ea6\u5dee\u522b\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u5efa\u7acb\u9009\u533a\u3002\u901a\u9053\u62a0\u56fe\u6cd5\u975e\u5e38\u9002\u5408\u4e8e\u534a\u900f\u660e\u548c\u6bdb\u53d1\u7c7b\u5bf9\u8c61\u9009\u533a\u7684\u5236\u4f5c\uff0c\u5982\u679c\u8981\u62a0\u53d6\u6bdb\u53d1\u3001\u5a5a\u7eb1\u3001\u70df\u96fe\u3001\u73bb\u7483\u4ee5\u53ca\u5177\u6709\u8fd0\u52a8\u6a21\u7cca\u7684\u7269\u4f53\uff0c\u4f7f\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u5de5\u5177\u5c31\u5f88\u96be\u4fdd\u7559\u7cbe\u7ec6\u7684\u534a\u900f\u660e\u9009\u533a\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u4f7f\u7528\u901a\u9053\u6765\u8fdb\u884c\u62a0\u50cf\u3002","title":"\u901a\u9053\u9009\u62e9\u6cd5"},{"location":"PS/PS2/#_8","text":"\u901a\u9053\u62a0\u56fe\u4e3a\u957f\u53d1\u7f8e\u5973\u6362\u80cc\u666f","title":"\u901a\u9053\u62a0\u56fe\u7ec3\u4e60"},{"location":"PS/PS2/#_9","text":"\u5728\u5feb\u901f\u8499\u7248\u72b6\u6001\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u7ed8\u753b\u5de5\u5177\u548c\u6ee4\u955c\u5bf9\u9009\u533a\u8fdb\u884c\u7ec6\u81f4\u7684\u5904\u7406\u3002\u6bd4\u5982\uff0c\u5982\u679c\u8981\u5c06\u56fe\u4e2d\u7684\u524d\u666f\u5bf9\u8c61\u62a0\u9009\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165\u5feb\u901f\u8499\u7248\u72b6\u6001\uff0c\u7136\u540e\u4f7f\u7528\u201c\u753b\u7b14\u5de5\u5177\u201d\u5728\u5feb\u901f\u8499\u7248\u4e2d\u7684\u80cc\u666f\u90e8\u5206\u4e0a\u8fdb\u884c\u7ed8\u5236\uff08\u7ed8\u5236\u51fa\u7684\u9009\u533a\u4e3a\u7ea2\u8272\u72b6\u6001\uff09\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\u6309 Q \u952e\u9000\u51fa\u5feb\u901f\u8499\u7248\u72b6\u6001\uff0cPhotoshop \u4f1a\u81ea\u52a8\u521b\u5efa\u9009\u533a\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u5220\u9664\u80cc\u666f\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u524d\u666f\u5bf9\u8c61\u91cd\u65b0\u6dfb\u52a0\u80cc\u666f\u3002 \u4ece\u5f53\u524d\u56fe\u50cf\u521b\u5efa\u8499\u7248 \u6ca1\u6709\u9009\u533a\u7684\u72b6\u6001\u4e0b\uff0c\u5728\u5de5\u5177\u7bb1\u4e2d\u5355\u51fb\u201c\u4ee5\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u7f16\u8f91\u201d\u6309\u94ae\uff0c\u63a5\u7740\u4f7f\u7528\u7ed8\u753b\u5de5\u5177\u5728\u5feb\u901f\u8499\u7248\u72b6\u6001\u4e0b\u8fdb\u884c\u7ed8\u5236\uff0c\u6309 Q \u952e\u9000\u51fa\u5feb\u901f\u8499\u7248\u6a21\u5f0f\u4ee5\u540e\uff0c\u7ea2\u8272\u4ee5\u5916\u7684\u533a\u57df\u5c31\u4f1a\u88ab\u9009\u4e2d\u3002","title":"\u5feb\u901f\u8499\u7248\u9009\u62e9\u6cd5"},{"location":"PS/PS2/#_10","text":"","title":"\u4f7f\u7528\u9009\u6846\u5de5\u5177"},{"location":"PS/PS2/#_11","text":"\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u4e3b\u8981\u7528\u4e8e\u521b\u5efa\u77e9\u5f62\u9009\u533a\u4e0e\u6b63\u65b9\u5f62\u9009\u533a\uff0c\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\uff0c\u677e\u5f00\u9f20\u6807\u540e\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002\u6309\u4f4f Shift \u952e\u53ef\u4ee5\u521b\u5efa\u6b63\u65b9\u5f62\u9009\u533a\u3002","title":"\u77e9\u5f62\u9009\u6846\u5de5\u5177"},{"location":"PS/PS2/#_12","text":"\u201c\u692d\u5706\u9009\u6846\u5de5\u5177\u201d\u4e3b\u8981\u7528\u6765\u5236\u4f5c\u692d\u5706\u9009\u533a\u548c\u6b63\u5706\u9009\u533a\uff0c\u6309\u4f4f Shift \u952e\u53ef\u4ee5\u521b\u5efa\u6b63\u5706\u9009\u533a\u3002","title":"\u692d\u5706\u9009\u6846\u5de5\u5177"},{"location":"PS/PS2/#_13","text":"\u201c\u5355\u884c\u9009\u6846\u5de5\u5177\u201d\u548c\u201c\u5355\u5217\u9009\u6846\u5de5\u5177\u201d\u4e3b\u8981\u7528\u6765\u521b\u5efa\u9ad8\u5ea6\u6216\u5bbd\u5ea6\u4e3a 1 \u50cf\u7d20\u7684\u9009\u533a\uff0c\u5e38\u7528\u6765\u5236\u4f5c\u7f51\u683c\u6548\u679c\u3002\u8fd9\u4e24\u79cd\u5de5\u5177\u4f7f\u7528\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u5728\u753b\u9762\u4e2d\u5355\u51fb\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002","title":"\u5355\u884c/\u5355\u5217\u9009\u6846\u5de5\u5177"},{"location":"PS/PS2/#_14","text":"","title":"\u9009\u533a\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"PS/PS2/#_15","text":"\u4f7f\u7528\u9009\u6846\u5de5\u5177\u521b\u5efa\u9009\u533a\u65f6\uff0c\u5728\u677e\u5f00\u9f20\u6807\u5de6\u952e\u4e4b\u524d\uff0c\u6309\u4f4f Space \u952e\uff08\u5373\u7a7a\u683c\u952e\uff09\u62d6\u62fd\u5149\u6807\uff0c\u53ef\u4ee5\u79fb\u52a8\u9009\u533a\u3002","title":"\u79fb\u52a8\u9009\u533a"},{"location":"PS/PS2/#_16","text":"\u9996\u5148\u4f7f\u7528\u201c\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u7ed8\u5236\u4e00\u4e2a\u957f\u65b9\u5f62\u9009\u533a\u3002\u5bf9\u521b\u5efa\u597d\u7684\u9009\u533a\u6267\u884c\u201c\u9009\u62e9>\u53d8\u6362\u9009\u533a\u201d\u547d\u4ee4\u6216\u6309 Alt+S+T \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5bf9\u9009\u533a\u8fdb\u884c\u79fb\u52a8\u3002 \u5728\u9009\u533a\u53d8\u6362\u72b6\u6001\u4e0b\uff0c\u5728\u753b\u5e03\u4e2d\u53f3\u51fb\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u5176\u4ed6\u53d8\u6362\u65b9\u5f0f\u3002","title":"\u53d8\u6362\u9009\u533a"},{"location":"PS/PS2/#_17","text":"\u5168\u9009\uff1a\u5168\u9009\u56fe\u50cf\u5e38\u7528\u4e8e\u590d\u5236\u6574\u4e2a\u6587\u6863\u4e2d\u7684\u56fe\u50cf\u3002\u6267\u884c\u201c \u9009 \u62e9 > \u5168 \u90e8 \u201d \u547d \u4ee4 \u6216 \u6309 Ctrl+A \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u9009\u62e9\u5f53\u524d\u6587\u6863\u8fb9\u754c\u5185\u7684\u6240\u6709\u56fe\u50cf\u793a\u3002 \u53cd\u9009\uff1a\u521b\u5efa\u9009\u533a\u4ee5\u540e\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u53cd\u5411\u9009\u62e9\u201d\u547d\u4ee4\u6216\u6309 Shift+Ctrl+I \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u9009\u62e9\u53cd\u76f8\u7684\u9009\u533a\uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u56fe\u50cf\u4e2d\u6ca1\u6709\u88ab\u9009\u62e9\u7684\u90e8\u5206\u3002","title":"\u5168\u9009\u4e0e\u53cd\u9009"},{"location":"PS/PS2/#_18","text":"\u6267\u884c\u201c\u9009\u62e9 > \u53d6\u6d88\u9009\u62e9\u201d\u547d\u4ee4\u6216\u6309 Ctrl+D \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u53d6\u6d88\u9009\u533a\u72b6\u6001\u3002","title":"\u53d6\u6d88\u9009\u62e9\u4e0e\u91cd\u65b0\u9009\u62e9"},{"location":"PS/PS2/#_19","text":"\u5982\u679c\u8981\u6062\u590d\u88ab\u53d6\u6d88\u7684\u9009\u533a\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u9009\u62e9 > \u91cd\u65b0\u9009\u62e9\u201d\u547d\u4ee4\u793a\u3002","title":"\u91cd\u65b0\u9009\u62e9"},{"location":"PS/PS2/#_20","text":"\u6267\u884c\u201c\u89c6\u56fe > \u663e\u793a > \u9009\u533a\u8fb9\u7f18\u201d\u547d\u4ee4\u53ef\u4ee5\u5207\u6362\u9009\u533a\u7684\u663e\u793a\u4e0e\u9690\u85cf\u3002\u521b\u5efa\u9009\u533a\u540e\uff0c\u6267\u884c\u201c\u89c6\u56fe > \u663e\u793a > \u9009\u533a\u8fb9\u7f18\u201d\u547d\u4ee4\u6216\u6309 Ctrl+H \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u9690\u85cf\u9009\u533a\uff08\u6ce8\u610f\uff0c\u9690\u85cf\u9009\u533a\u540e\uff0c\u9009\u533a\u4ecd\u7136\u5b58\u5728\uff09\uff1b\u5982\u679c\u8981\u5c06\u9690\u85cf\u7684\u9009\u533a\u663e\u793a\u51fa\u6765\uff0c\u53ef\u4ee5\u518d\u6b21\u6267\u884c\u201c\u89c6\u56fe > \u663e\u793a > \u9009\u533a\u8fb9\u7f18\u201d\u547d\u4ee4\u6216\u6309 Ctrl+H \u7ec4\u5408\u952e\u3002","title":"\u9690\u85cf\u4e0e\u663e\u793a\u9009\u533a"},{"location":"PS/PS2/#_21","text":"\u5982\u679c\u5f53\u524d\u56fe\u50cf\u4e2d\u5305\u542b\u9009\u533a\uff0c\u5728\u4f7f\u7528\u4efb\u4f55\u9009\u6846\u5de5\u5177\u3001\u5957\u7d22\u5de5\u5177\u6216\u9b54\u68d2\u5de5\u5177\u521b\u5efa\u9009\u533a\u65f6\uff0c\u9009\u9879\u680f\u4e2d\u5c31\u4f1a\u51fa\u73b0\u9009\u533a\u8fd0\u7b97\u7684\u76f8\u5173\u5de5\u5177\u3002 \u6253\u5f00\u56fe\u7247\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528\u201c\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62\u9009\u6846\uff0c\u521b\u5efa\u65b0\u9009\u533a\u3002 \u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u5230\u9009\u533a\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u5f53\u524d\u521b\u5efa\u7684\u9009\u533a\u6dfb\u52a0\u5230\u539f\u6765\u7684\u9009\u533a\u4e2d\uff08\u6309\u4f4f Shift \u952e\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff09\u3002 \u5355\u51fb\u201c\u4ece\u9009\u533a\u51cf\u53bb\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u5f53\u524d\u5efa\u9009\u533a\u4ece\u539f\u6765\u7684\u9009\u533a\u4e2d\u51cf\u53bb\uff08\u6309\u4f4f Alt \u952e\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff09\u3002 \u5355\u51fb\u201c\u4e0e\u9009\u533a\u4ea4\u53c9\u201d\u6309\u94ae\uff0c\u65b0\u5efa\u9009\u533a\u65f6\u53ea\u4fdd\u7559\u539f\u6709\u9009\u533a\u4e0e\u65b0\u5efa\u9009\u533a\u76f8\u4ea4\u7684\u90e8\u5206\uff08\u6309\u4f4f Alt+Shift \u7ec4\u5408\u952e\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff09\u3002","title":"\u9009\u533a\u7684\u8fd0\u7b97"},{"location":"PS/PS2/#_22","text":"\u4f7f\u7528\u9009\u533a\u5236\u4f5c\u5965\u8fd0\u4e94\u73af","title":"\u9009\u533a\u8fd0\u7b97\u7ec3\u4e60"},{"location":"PS/PS2/#_23","text":"\u5728 Photoshop \u4e2d\uff0c\u9009\u533a\u53ef\u4ee5\u4f5c\u4e3a\u901a\u9053\u8fdb\u884c\u5b58\u50a8\u3002\u6267\u884c\u201c\u9009\u62e9 > \u5b58\u50a8\u9009\u533a\u201d\u547d\u4ee4\uff0c\u6216\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u5c06\u9009\u533a\u5b58\u50a8\u4e3a\u901a\u9053\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u5b58\u50a8\u4e3aAlpha \u901a\u9053\u8499\u7248\u3002\u6267\u884c\u201c\u9009\u62e9 > \u5b58\u50a8\u9009\u533a\u201d\u547d\u4ee4\uff0cPhotoshop \u4f1a\u5f39\u51fa\u201c\u5b58\u50a8\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u5b58\u50a8\u9009\u533a"},{"location":"PS/PS2/#_24","text":"\u6267\u884c\u201c\u9009\u62e9 > \u8f7d\u5165\u9009\u533a\u201d\u547d\u4ee4\uff0c\u6216\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u6309\u4f4f Ctrl \u952e\u7684\u540c\u65f6\u5355\u51fb\u5b58\u50a8\u9009\u533a\u7684\u901a\u9053\u8499\u7248\u7f29\u7565\u56fe\uff0c\u5373\u53ef\u91cd\u65b0\u8f7d\u5165\u5b58\u50a8\u8d77\u6765\u7684\u9009\u533a\u3002\u5f53\u6267\u884c\u201c\u9009\u62e9 > \u8f7d\u5165\u9009\u533a\u201d\u547d\u4ee4\u65f6\uff0cPhotoshop \u4f1a\u5f39\u51fa\u201c\u8f7d\u5165\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u8f7d\u5165\u9009\u533a"},{"location":"PS/PS2/#_25","text":"","title":"\u5957\u7d22\u5de5\u5177\u7ec4"},{"location":"PS/PS2/#_26","text":"\u4f7f\u7528\u201c\u5957\u7d22\u5de5\u5177\u201d\u53ef\u4ee5\u975e\u5e38\u81ea\u7531\u5730\u7ed8\u5236\u51fa\u5f62\u72b6\u4e0d\u89c4\u5219\u7684\u9009\u533a\u3002\u9009\u62e9 \u201c\u5957\u7d22\u5de5\u5177\u201d\u540e\uff0c\u5728\u56fe\u50cf\u4e0a\u62d6\u62fd\u5149\u6807\u7ed8\u5236\u9009\u533a\u8fb9\u754c\uff0c\u5f53\u91ca\u653e\u9f20\u6807\u65f6\uff0c\u9009\u533a\u5c06\u81ea\u52a8\u95ed\u5408\u3002","title":"\u5957\u7d22\u5de5\u5177"},{"location":"PS/PS2/#_27","text":"\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\u4e0e\u201c\u5957\u7d22\u5de5\u5177\u201d\u7684\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\u3002\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\u9002\u5408\u4e8e\u521b\u5efa\u4e00\u4e9b\u8f6c\u89d2\u6bd4\u8f83\u5f3a\u70c8\u7684\u9009\u533a\u3002\u5728\u753b\u9762\u4e2d\u5355\u51fb\u786e\u5b9a\u9009\u533a\u7684\u8d77\u70b9\uff0c\u63a5\u7740\u79fb\u52a8\u5149\u6807\u5230\u5176\u4ed6\u4f4d\u7f6e\u518d\u6b21\u5355\u51fb\uff0c\u6700\u540e\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u8d77\u70b9\u5904\uff0c\u5355\u51fb\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002","title":"\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177"},{"location":"PS/PS2/#_28","text":"\u5229\u7528\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u9009\u62e9\u7167\u7247","title":"\u591a\u8fb9\u5f62\u5957\u7d22\u7ec3\u4e60"},{"location":"PS/PS2/#_29","text":"\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u80fd\u591f\u4ee5\u989c\u8272\u4e0a\u7684\u5dee\u5f02\u81ea\u52a8\u8bc6\u522b\u5bf9\u8c61\u7684\u8fb9\u754c\uff0c\u7279\u522b\u9002\u5408\u4e8e\u5feb\u901f\u9009\u62e9\u4e0e\u80cc\u666f\u5bf9\u6bd4\u5f3a\u70c8\u4e14\u8fb9\u7f18\u590d\u6742\u7684\u5bf9\u8c61\u3002\u4f7f\u7528\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\uff0c\u5728\u8981\u9009\u53d6\u7684\u8fb9\u754c\u5904\u5355\u51fb\uff0c\u786e\u5b9a\u9009\u533a\u7684\u8d77\u70b9\uff0c\u63a5\u7740\u62d6\u52a8\u5149\u6807\uff0c\u5957\u7d22\u8fb9\u754c\u4f1a\u81ea\u52a8\u5bf9\u9f50\u56fe\u50cf\u7684\u8fb9\u7f18\u5e76\u7ed8\u5236\u9009\u533a\uff0c\u6700\u540e\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u9009\u533a\u8d77\u70b9\u5904\uff0c\u5355\u51fb\u5373\u53ef\u5f97\u5230\u9009\u533a\u3002\u8fd8\u53ef\u4ee5\u6309\u4f4f Alt \u952e\u5207\u6362\u5230\u201c\u591a\u8fb9\u5f62\u5957\u7d22\u5de5\u5177\u201d\uff0c\u4ee5\u52fe\u9009\u8f6c\u89d2\u6bd4\u8f83\u5f3a\u70c8\u7684\u8fb9\u7f18\u3002","title":"\u78c1\u6027\u5957\u7d22\u5de5\u5177"},{"location":"PS/PS2/#_30","text":"\u5229\u7528\u78c1\u6027\u5957\u7d22\u5de5\u5177\u66f4\u6362\u80cc\u666f","title":"\u78c1\u6027\u5957\u7d22\u7ec3\u4e60"},{"location":"PS/PS2/#_31","text":"","title":"\u5feb\u901f\u9009\u62e9\u5de5\u5177\u7ec4"},{"location":"PS/PS2/#_32","text":"\u4f7f\u7528\u201c\u5feb\u901f\u9009\u62e9\u5de5\u5177\u201d\u53ef\u4ee5\u5229\u7528\u53ef\u8c03\u6574\u7684\u5706\u5f62\u7b14\u5c16\u8fc5\u901f\u5730\u7ed8\u5236\u51fa\u9009\u533a\u3002\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u9700\u8981\u9009\u62e9\u7684\u533a\u57df\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u62fd\uff0c\u5f53\u62d6\u62fd\u7b14\u5c16\u65f6\u9009\u53d6\u8303\u56f4\u4e0d\u4f46\u4f1a\u5411\u5916\u6269\u5f20\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u81ea\u52a8\u5bfb\u627e\u5e76\u6cbf\u7740\u56fe\u50cf\u7684\u8fb9\u7f18\u6765\u63cf\u7ed8\u9009\u533a\u3002","title":"\u5feb\u901f\u9009\u62e9\u5de5\u5177"},{"location":"PS/PS2/#_33","text":"\u201c\u9b54\u68d2\u5de5\u5177\u201d\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u9891\u7387\u76f8\u5f53\u9ad8\uff0c\u4f7f\u7528\u201c\u9b54\u68d2\u5de5\u5177\u201d\u5728\u56fe\u50cf\u4e2d\u5355\u51fb\u5c31\u80fd\u9009\u53d6\u989c\u8272\u5dee\u522b\u5728\u5bb9\u5dee\u503c\u8303\u56f4\u4e4b\u5185\u7684\u533a\u57df\u3002","title":"\u9b54\u68d2\u5de5\u5177"},{"location":"PS/PS2/#_34","text":"\u4f7f\u7528\u9b54\u68d2\u66f4\u6362\u80cc\u666f","title":"\u9b54\u68d2\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS2/#_35","text":"\u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\u4e0e\u201c\u9b54\u68d2\u5de5\u5177\u201d\u76f8\u4f3c\uff0c\u53ef\u6839\u636e\u56fe\u50cf\u7684\u989c\u8272\u8303\u56f4\u521b\u5efa\u9009\u533a\uff0c\u4f46\u662f\u8be5\u547d\u4ee4\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u63a7\u5236\u9009\u9879\uff0c\u56e0\u6b64\u8be5\u547d\u4ee4\u7684\u9009\u62e9\u7cbe\u5ea6\u4e5f\u8981\u9ad8\u4e00\u4e9b\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\u4e0d\u53ef\u7528\u4e8e 32 \u4f4d / \u901a\u9053\u7684\u56fe\u50cf\u3002\u6267\u884c\u201c\u9009\u62e9 > \u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8272\u5f69\u8303\u56f4\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u4f7f\u7528 \u201c\u8272\u5f69\u8303\u56f4\u201d\u547d\u4ee4"},{"location":"PS/PS2/#_36","text":"","title":"\u9009\u533a\u7684\u7f16\u8f91"},{"location":"PS/PS2/#_37","text":"\u521b\u5efa\u9009\u533a\u4ee5\u540e\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u8fb9\u754c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u7684\u8fb9\u754c\u5411\u5185\u6216\u5411\u5916\u8fdb\u884c\u6269\u5c55\uff0c\u6269\u5c55\u540e\u7684\u9009\u533a\u8fb9\u754c\u5c06\u4e0e\u539f\u6765\u7684\u9009\u533a\u8fb9\u754c\u5f62\u6210\u65b0\u7684\u9009\u533a\u3002","title":"\u521b\u5efa\u8fb9\u754c\u9009\u533a"},{"location":"PS/PS2/#_38","text":"\u5bf9\u9009\u533a\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u5e73\u6ed1\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002","title":"\u5e73\u6ed1\u9009\u533a"},{"location":"PS/PS2/#_39","text":"\u7ed8\u5236\u9009\u533a\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u6269\u5c55\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u9009\u533a\u5411\u5916\u8fdb\u884c\u6269\u5c55\u3002","title":"\u6269\u5c55\u9009\u533a"},{"location":"PS/PS2/#_40","text":"\u5982\u679c\u8981\u5411\u5185\u6536\u7f29\u9009\u533a\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u6536\u7f29\u201d\u547d\u4ee4\u3002","title":"\u6536\u7f29\u9009\u533a"},{"location":"PS/PS2/#_41","text":"\u7fbd\u5316\u9009\u533a\u662f\u901a\u8fc7\u5efa\u7acb\u9009\u533a\u548c\u9009\u533a\u5468\u56f4\u50cf\u7d20\u4e4b\u95f4\u7684\u8f6c\u6362\u8fb9\u754c\u6765\u6a21\u7cca\u8fb9\u7f18\uff0c\u8fd9\u79cd\u6a21\u7cca\u65b9\u5f0f\u5c06\u4e22\u5931\u9009\u533a\u8fb9\u7f18\u7684\u4e00\u4e9b\u7ec6\u8282\u3002\u5bf9\u9009\u533a\u6267\u884c\u201c\u9009\u62e9 > \u4fee\u6539 > \u7fbd\u5316\u201d\u547d\u4ee4\u6216\u6309 Shift+F6 \u7ec4\u5408\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u7fbd\u5316\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u4e2d\u5b9a\u4e49\u9009\u533a\u7684\u201c\u7fbd\u5316\u534a\u5f84\u201d\u5373\u53ef\u3002","title":"\u7fbd\u5316\u9009\u533a"},{"location":"PS/PS2/#_42","text":"\u201c\u6269\u5927\u9009\u53d6\u201d\u547d\u4ee4\u662f\u57fa\u4e8e\u201c\u9b54\u68d2\u5de5\u5177\u201d\u9009\u9879\u680f\u4e2d\u6307\u5b9a\u7684\u201c\u5bb9\u5dee\u201d\u8303\u56f4\u6765\u51b3\u5b9a\u9009\u533a\u7684\u6269\u5c55\u8303\u56f4\u3002\u6bd4\u5982\u4e0b\u56fe \u4e2d\u53ea\u9009\u62e9\u4e86\u4e00\u90e8\u5206\u7c89\u8272\u80cc\u666f\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u6269\u5927\u9009\u53d6\u201d\u547d\u4ee4\u540e\uff0cPhotoshop \u4f1a\u67e5\u627e\u5e76\u9009\u62e9\u90a3\u4e9b\u4e0e\u5f53\u524d\u9009\u533a\u4e2d\u50cf\u7d20\u8272\u8c03\u76f8\u8fd1\u7684\u50cf\u7d20\uff0c\u4ece\u800c\u6269\u5927\u9009\u62e9\u533a\u57df\u3002","title":"\u6269\u5927\u9009\u53d6"},{"location":"PS/PS2/#_43","text":"\u201c\u9009\u53d6\u76f8\u4f3c\u201d\u547d\u4ee4\u4e0e\u201c\u6269\u5927\u9009\u53d6\u201d\u547d\u4ee4\u76f8\u4f3c\uff0c\u90fd\u662f\u57fa\u4e8e\u201c\u9b54\u68d2\u5de5\u5177\u201d\u9009\u9879\u680f\u4e2d\u6307\u5b9a\u7684\u201c\u5bb9\u5dee\u201d\u8303\u56f4\u6765\u51b3\u5b9a\u9009\u533a\u7684\u6269\u5c55\u8303\u56f4\u3002\u6bd4\u5982\uff0c\u4e0b\u56fe\u4e2d\u53ea\u9009\u62e9\u4e86\u4e00\u90e8\u5206\u7c89\u8272\u80cc\u666f\uff0c\u6267\u884c\u201c\u9009\u62e9 > \u9009\u53d6\u76f8\u4f3c\u201d\u547d\u4ee4\u540e\uff0cPhotoshop \u540c\u6837\u4f1a\u67e5\u627e\u5e76\u9009\u62e9\u90a3\u4e9b\u4e0e\u5f53\u524d\u9009\u533a\u4e2d\u50cf\u7d20\u8272\u8c03\u76f8\u8fd1\u7684\u50cf\u7d20\uff0c\u4ece\u800c\u6269\u5927\u9009\u62e9\u533a\u57df\u3002","title":"\u9009\u53d6\u76f8\u4f3c"},{"location":"PS/PS2/#_44","text":"","title":"\u586b\u5145\u4e0e\u63cf\u8fb9"},{"location":"PS/PS2/#_45","text":"\u5229\u7528\u201c\u586b\u5145\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u5f53\u524d\u56fe\u5c42\u6216\u9009\u533a\u5185\u586b\u5145\u989c\u8272\u6216\u56fe\u6848\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u586b\u5145\u65f6\u7684\u4e0d\u900f\u660e\u5ea6\u548c\u6df7\u5408\u6a21\u5f0f\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u586b\u5145\u201d\u547d\u4ee4\u6216\u6309 Shift+F4 \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u586b\u5145\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u586b\u5145"},{"location":"PS/PS2/#_46","text":"\u4f7f\u7528\u201c\u63cf\u8fb9\u201d\u547d\u4ee4\u53ef\u4ee5\u5728\u9009\u533a\u3001\u8def\u5f84\u6216\u56fe\u5c42\u5468\u56f4\u521b\u5efa\u5f69\u8272\u6216\u8005\u82b1\u7eb9\u7684\u8fb9\u6846\u6548\u679c\u3002\u521b\u5efa\u51fa\u9009\u533a\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u63cf\u8fb9\u201d\u547d\u4ee4\u6216\u6309 Alt+E+S \u7ec4\u5408\u952e\uff0c\u6253\u5f00\u201c\u63cf\u8fb9\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u63cf\u8fb9\u9009\u533a"},{"location":"PS/PS2/#_47","text":"\u5229\u7528\u9009\u533a\u5236\u4f5c\u592a\u6781 \u5236\u4f5c\u5fae\u4fe1\u56fe\u6807","title":"\u7ec3\u4e60"},{"location":"PS/PS3/","text":"\u989c\u8272\u8bbe\u7f6e \u00b6 \u524d\u666f\u8272\u4e0e\u80cc\u666f\u8272 \u00b6 \u524d\u666f\u901a\u5e38\u7528\u4e8e\u7ed8\u5236\u56fe\u50cf\u3001\u586b\u5145\u548c\u63cf\u8fb9\u9009\u533a\u7b49\uff1b\u80cc\u666f\u8272\u5e38\u7528\u4e8e\u751f\u6210\u6e10\u53d8\u586b\u5145\u548c\u586b\u5145\u56fe\u50cf\u4e2d\u5df2\u62b9\u9664\u7684\u533a\u57df\u3002\u5728 Photoshop \u5de5\u5177\u7bb1\u7684\u5e95\u90e8\u6709\u4e00\u7ec4\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\u8bbe\u7f6e\u6309\u94ae\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u524d\u666f\u8272\u4e3a\u9ed1\u8272\uff0c\u80cc\u666f\u8272\u4e3a\u767d\u8272\u3002 \u524d\u666f\u8272\uff1a\u5355\u51fb\u524d\u666f\u8272\u56fe\u6807\uff0c\u53ef\u4ee5\u5728\u5f39\u51fa\u7684\u201c\u62fe\u8272\u5668\u201d\u5bf9\u8bdd\u6846\u4e2d\u9009\u53d6\u4e00\u79cd\u989c\u8272\u4f5c\u4e3a\u524d\u666f\u8272\u3002 \u80cc\u666f\u8272\uff1a\u5355\u51fb\u80cc\u666f\u8272\u56fe\u6807\uff0c\u53ef\u4ee5\u5728\u5f39\u51fa\u7684\u201c\u62fe\u8272\u5668\u201d\u5bf9\u8bdd\u6846\u4e2d\u9009\u53d6\u4e00\u79cd\u989c\u8272\u4f5c\u4e3a\u80cc\u666f\u8272\u3002 \u5207\u6362\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\uff1a\u5feb\u6377\u952e\u4e3a X \u952e\u3002 \u9ed8\u8ba4\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\uff1a\u5feb\u6377\u952e\u4e3a D \u952e\u3002 \u4f7f\u7528\u201c\u5438\u7ba1\u5de5\u5177\u201d\u9009\u53d6\u989c\u8272 \u00b6 \u4f7f\u7528\u201c\u5438\u7ba1\u5de5\u5177\u201d\u53ef\u4ee5\u62fe\u53d6\u56fe\u50cf\u4e2d\u7684\u4efb\u610f\u989c\u8272\u4f5c\u4e3a\u524d\u666f\u8272\u3002\u6309\u4f4f Alt \u952e\u8fdb\u884c\u62fe\u53d6\u53ef\u5c06\u5f53\u524d\u62fe\u53d6\u7684\u989c\u8272\u4f5c\u4e3a\u80cc\u666f\u8272\u3002 \u201c\u989c\u8272\u201d\u9762\u677f \u00b6 \u201c\u989c\u8272\u201d\u9762\u677f\u4e2d\u663e\u793a\u4e86\u5f53\u524d\u8bbe\u7f6e\u7684\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\uff0c\u53ef\u4ee5\u5728\u8be5\u9762\u677f\u4e2d\u8bbe\u7f6e\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u989c\u8272\u201d\u547d \u4ee4\uff0c\u53ef\u53d1\u4ee5\u6253\u5f00\u201c\u989c\u8272\u201d\u9762\u677f\u3002 \u201c\u8272\u677f\u201d\u9762\u677f \u00b6 \u201c\u8272\u677f\u201d\u9762\u677f\u4e2d\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5305\u542b\u4e00\u4e9b\u7cfb\u7edf\u9884\u8bbe\u7684\u989c\u8272\uff0c\u5355\u51fb\u76f8\u5e94\u7684\u989c\u8272\u5373\u53ef\u5c06\u5176\u8bbe\u7f6e\u4e3a\u524d\u666f\u8272\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u8272\u677f\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8272\u677f\u201d\u9762\u677f\u3002 \u753b\u7b14\u9762\u677f \u00b6 \u8ba4\u8bc6\u201c\u753b\u7b14\u201d\u9762\u677f \u00b6 \u5728\u8ba4\u8bc6\u5176\u4ed6\u7ed8\u5236\u53ca\u4fee\u9970\u5de5\u5177\u4e4b\u524d\u9996\u5148\u9700\u8981\u638c\u63e1\u201c\u753b\u7b14\u201d\u9762\u677f\u3002\u201c\u753b\u7b14\u201d\u9762\u677f\u662f\u6700\u91cd\u8981\u7684\u9762\u677f\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u8bbe\u7f6e\u7ed8\u753b\u5de5\u5177\u548c\u4fee\u9970\u5de5\u5177\u7684\u7b14\u5237\u79cd\u7c7b\u3001\u753b\u7b14\u5927\u5c0f\u548c\u786c\u5ea6\u7b49\u5c5e\u6027\u3002 \u7b14\u5c16\u5f62\u72b6\u8bbe\u7f6e\uff1a\u5728\u201c\u753b\u7b14\u7b14\u5c16\u5f62\u72b6\u201d\u9009\u9879\u9762\u677f\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u753b\u7b14\u7684\u5f62\u72b6\u3001\u5927\u5c0f\u3001\u786c\u5ea6\u548c\u95f4\u8ddd\u7b49\u5c5e\u6027 \u201c\u5f62\u72b6\u52a8\u6001\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u201c\u5f62\u72b6\u52a8\u6001\u201d\u53ef\u4ee5\u51b3\u5b9a\u63cf\u8fb9\u4e2d\u753b\u7b14\u7b14\u8ff9\u7684\u53d8\u5316\u3002\u5b83\u53ef\u4ee5\u4f7f\u753b\u7b14\u7684\u5927\u5c0f\u3001\u5706\u5ea6\u7b49\u4ea7\u751f\u968f\u673a\u53d8\u5316\u7684\u6548\u679c\u3002 \u201c\u6563\u5e03\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u5728\u201c\u6563\u5e03\u201d\u9009\u9879\u9762\u677f\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u63cf\u8fb9\u4e2d\u7b14\u8ff9\u7684\u6570\u76ee\u548c\u4f4d\u7f6e\u3002\u4f7f\u753b\u7b14\u7b14\u8ff9\u6cbf\u7740\u7ed8\u5236\u7684\u7ebf\u6761\u6269\u6563\u3002 \u201c\u989c\u8272\u52a8\u6001\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u9009\u4e2d\u201c\u989c\u8272\u52a8\u6001\u201d\u9009\u9879\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u9009\u9879\u7ed8\u5236\u51fa\u989c\u8272\u53d8\u5316\u7684\u6548\u679c\u3002 \u201c\u7eb9\u7406\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u4f7f\u7528\u201c\u7eb9\u7406\u201d\u9009\u9879\u53ef\u4ee5\u7ed8\u5236\u51fa\u5e26\u6709\u7eb9\u7406\u8d28\u611f\u7684\u7b14\u89e6\uff0c\u4f8b\u5982\u53ef\u4ee5\u5728\u5e26\u7eb9\u7406\u7684\u753b\u5e03\u4e0a\u7ed8\u5236\u6548\u679c\u7b49\u3002 \u201c\u53cc\u91cd\u753b\u7b14\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u9996\u9009\u8bbe\u7f6e\u201c\u753b\u7b14\u7b14\u5c16\u5f62\u72b6\u201d\u4e3b\u753b\u7b14\u53c2\u6570\u5c5e\u6027\uff0c\u7136\u540e\u9009\u62e9\u201c\u53cc\u91cd\u753b\u7b14\u201d\u9009\u9879\uff0c\u5e76\u4ece\u5176 \u9762\u677f\u4e2d\u9009\u62e9\u53e6\u5916\u4e00\u4e2a\u7b14\u5c16\uff08\u5373\u53cc\u91cd\u7b14\u5c16\uff09\u3002 \u201c\u4f20\u9012\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u201c\u4f20\u9012\u201d\u9009\u9879\u4e2d\u5305\u542b\u4e0d\u900f\u660e\u5ea6\u3001\u6d41\u91cf\u3001\u6e7f\u5ea6\u3001\u6df7\u5408\u7b49\u6296\u52a8\u7684\u63a7\u5236\u3002\u53ef\u4ee5\u7528\u6765\u786e\u5b9a\u6cb9\u5f69\u5728\u63cf\u8fb9\u8def\u7ebf\u4e2d\u7684\u6539\u53d8\u65b9\u5f0f\u3002 \u201c\u753b\u7b14\u7b14\u52bf\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u201c\u753b\u7b14\u7b14\u52bf\u201d\u9009\u9879\u7528\u4e8e\u8c03\u6574\u6bdb\u5237\u753b\u7b14\u7b14\u5c16\u3001\u4fb5\u8680\u753b\u7b14\u7b14\u5c16\u7684\u89d2\u5ea6\u3002 \u753b\u7b14\u7ec3\u4e60 \u00b6 \u7ed8\u5236\u7eb7\u98de\u7684\u82b1\u6735 \u7ed8\u5236\u5de5\u5177 \u00b6 \u753b\u7b14\u5de5\u5177 \u00b6 \u201c\u753b\u7b14\u5de5\u5177\u201d\u662f\u4f7f\u7528\u9891\u7387\u6700\u9ad8\u7684\u5de5\u5177\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u524d\u666f\u8272\u7ed8\u5236\u51fa\u5404\u79cd\u7ebf\u6761\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u4fee\u6539\u901a\u9053\u548c\u8499\u7248\u3002\u5355\u51fb\u8be5\u5de5\u5177\uff0c\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5408\u9002\u7684\u753b\u7b14\u5927\u5c0f\u548c\u753b\u7b14\u6837\u5f0f\uff0c\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\u5373\u53ef\u4ee5\u524d\u666f\u8272\u8fdb\u884c\u7ed8\u5236\u3002 \u94c5\u7b14\u5de5\u5177 \u00b6 \u4f7f\u7528\u65b9\u6cd5\u4e0e\u753b\u7b14\u7c7b\u4f3c\u3002\u53ef\u4ee5\u7ed8\u5236\u51fa\u786c\u8fb9\u7ebf\u6761\uff0c\u4f8b\u5982\u8fd1\u5e74\u6765 \u6bd4\u8f83\u6d41\u884c\u7684\u50cf\u7d20\u753b\uff0c\u4ee5\u53ca\u50cf\u7d20\u6e38\u620f\u3002 \u989c\u8272\u66ff\u6362\u5de5\u5177 \u00b6 \u201c\u989c\u8272\u66ff\u6362\u5de5\u5177\u201d\u53ef\u4ee5\u5c06\u9009\u5b9a\u7684\u989c\u8272\u66ff\u6362\u4e3a\u5176\u4ed6\u989c\u8272\u3002\u5355\u51fb\u8be5\u5de5\u5177\uff0c\u8bbe\u7f6e\u76ee\u6807\u989c\u8272\u4e3a\u524d\u666f\u8272\uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u66ff\u6362\u6a21\u5f0f\u3001\u53d6\u6837\u7b49\u53c2\u6570\uff0c\u7136\u540e\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u6d82\u62b9\uff0c\u88ab\u6d82\u62b9\u7684\u533a\u57df\u53d1\u751f\u989c\u8272\u53d8\u5316\u3002 \u56fe\u50cf\u64e6\u9664\u5de5\u5177 \u00b6 \u6a61\u76ae\u64e6\u5de5\u5177 \u00b6 \u201c\u6a61\u76ae\u64e6\u5de5\u5177\u201d\u53ef\u4ee5\u5c06\u50cf\u7684\u50cf\u7d20\u5c06\u53d8\u6210\u900f\u660e\u7d20\u66f4\u6539\u4e3a\u80cc\u666f\u8272\u6216\u900f\u660e\u3002\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u56fe\u5c42\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\u5373\u53ef\u8fdb\u884c\u64e6\u9664\uff0c\u5728\u666e\u901a\u56fe\u5c42\u4e2d\u64e6\u9664\uff0c\u5728\u201c\u80cc\u666f\u201d\u56fe\u5c42\u6216\u9501\u5b9a\u4e86\u900f\u660e\u50cf\u7d20\u7684\u56fe\u5c42\u4e2d\u8fdb\u884c\u64e6\u9664\uff0c\u5219\u64e6\u9664\u7684\u50cf\u7d20\u5c06\u53d8\u6210\u80cc\u666f\u8272\u3002 \u80cc\u666f\u6a61\u76ae\u64e6\u5de5\u5177 \u00b6 \u201c\u80cc\u666f\u6a61\u76ae\u64e6\u5de5\u5177\u201d\u662f\u4e00\u79cd\u57fa\u4e8e\u8272\u5f69\u5dee\u5f02\u7684\u667a\u80fd\u5316\u64e6\u9664\u5de5\u5177\u3002\u5176\u529f\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u9664\u4e86\u53ef\u4ee5\u7528\u6765\u64e6\u9664\u56fe\u50cf\u4ee5\u5916\uff0c\u6700\u91cd\u8981\u7684\u65b9\u9762\u662f\u8fd0\u7528\u5728\u62a0\u56fe\u4e2d\u3002\u8bbe\u7f6e\u597d\u80cc\u666f\u8272\u4ee5\u540e\uff0c\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u4ee5\u5728\u62b9\u9664\u80cc\u666f\u7684\u540c\u65f6\u4fdd\u7559\u524d\u666f\u5bf9\u8c61\u7684\u8fb9\u7f18\u3002 \u9b54\u672f\u6a61\u76ae\u64e6\u5de5\u5177 \u00b6 \u4f7f\u7528\u201c\u9b54\u672f\u6a61\u76ae\u64e6\u5de5\u5177\u201d\u5728\u56fe\u50cf\u4e2d\u5355\u51fb\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u76f8\u4f3c\u7684\u50cf\u7d20\u66f4\u6539\u4e3a\u900f\u660e\uff08\u5982\u679c\u5728\u5df2\u9501\u5b9a\u4e86\u900f\u660e\u50cf\u7d20\u7684\u56fe\u5c42 \u4e2d\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u50cf\u7d20\u5c06\u66f4\u6539\u4e3a\u80cc\u666f\u8272\uff09\u3002 \u6a61\u76ae\u64e6\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u9b54\u672f\u6a61\u76ae\u64e6\u4e3a\u5a5a\u7eb1\u7167\u6362\u80cc\u666f \u7528\u591a\u79cd\u64e6\u9664\u5de5\u5177\u53bb\u9664\u80cc\u666f \u56fe\u50cf\u586b\u5145\u5de5\u5177 \u00b6 \u6e10\u53d8\u5de5\u5177 \u00b6 \u201c\u6e10\u53d8\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u6574\u4e2a\u6587\u6863\u6216\u9009\u533a\u5185\u586b\u5145\u6e10\u53d8\u8272\uff0c\u5e76\u4e14\u53ef\u4ee5\u521b\u5efa\u591a\u79cd\u989c\u8272\u95f4\u7684\u6df7\u5408\u6548\u679c\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u6e10\u53d8\u5de5\u5177\u201d\u6309\u94ae\uff0c\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u6e10\u53d8\u989c\u8272\u6761\u201d\uff0c\u5728\u5f39\u51fa\u7684\u201c\u6e10\u53d8\u7f16\u8f91\u5668\u201d\u4e2d\u7f16\u8f91\u6e10\u53d8\u989c\u8272\uff0c\u63a5\u7740\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5408\u9002\u7684\u6e10\u53d8\u7c7b\u578b\u4ee5\u53ca\u6a21\u5f0f\u3001\u4e0d\u900f\u660e\u5ea6\u7b49\u53c2\u6570\uff0c\u8bbe\u7f6e\u5b8c\u6bd5\u540e\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u62fd\uff0c\u677e\u5f00\u5149\u6807\u540e\u5373\u53ef\u5728\u753b\u9762\u4e2d\u586b\u5145\u6e10\u53d8\u3002 \u6cb9\u6f06\u6876\u5de5\u5177 \u00b6 \u201c\u6cb9\u6f06\u6876\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u56fe\u50cf\u4e2d\u586b\u5145\u524d\u666f\u8272\u6216\u56fe\u6848\uff0c\u5982\u679c\u521b\u5efa\u4e86\u9009\u533a\uff0c\u586b\u5145\u7684\u533a\u57df\u4e3a\u5f53\u524d\u9009\u533a\uff1b\u5982\u679c\u6ca1\u6709\u521b\u5efa\u9009\u533a\uff0c\u586b\u5145\u7684\u662f\u4e0e\u9f20\u6807\u5355\u51fb\u5904\u989c\u8272\u76f8\u8fd1\u7684\u533a\u57df\u3002 \u586b\u5145\u7ec3\u4e60 \u00b6 \u7528\u586b\u5145\u5236\u4f5c\u7c89\u7d2b\u8272\u68a6\u5e7b\u6548\u679c","title":"\u56fe\u50cf\u7ed8\u5236"},{"location":"PS/PS3/#_1","text":"","title":"\u989c\u8272\u8bbe\u7f6e"},{"location":"PS/PS3/#_2","text":"\u524d\u666f\u901a\u5e38\u7528\u4e8e\u7ed8\u5236\u56fe\u50cf\u3001\u586b\u5145\u548c\u63cf\u8fb9\u9009\u533a\u7b49\uff1b\u80cc\u666f\u8272\u5e38\u7528\u4e8e\u751f\u6210\u6e10\u53d8\u586b\u5145\u548c\u586b\u5145\u56fe\u50cf\u4e2d\u5df2\u62b9\u9664\u7684\u533a\u57df\u3002\u5728 Photoshop \u5de5\u5177\u7bb1\u7684\u5e95\u90e8\u6709\u4e00\u7ec4\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\u8bbe\u7f6e\u6309\u94ae\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u524d\u666f\u8272\u4e3a\u9ed1\u8272\uff0c\u80cc\u666f\u8272\u4e3a\u767d\u8272\u3002 \u524d\u666f\u8272\uff1a\u5355\u51fb\u524d\u666f\u8272\u56fe\u6807\uff0c\u53ef\u4ee5\u5728\u5f39\u51fa\u7684\u201c\u62fe\u8272\u5668\u201d\u5bf9\u8bdd\u6846\u4e2d\u9009\u53d6\u4e00\u79cd\u989c\u8272\u4f5c\u4e3a\u524d\u666f\u8272\u3002 \u80cc\u666f\u8272\uff1a\u5355\u51fb\u80cc\u666f\u8272\u56fe\u6807\uff0c\u53ef\u4ee5\u5728\u5f39\u51fa\u7684\u201c\u62fe\u8272\u5668\u201d\u5bf9\u8bdd\u6846\u4e2d\u9009\u53d6\u4e00\u79cd\u989c\u8272\u4f5c\u4e3a\u80cc\u666f\u8272\u3002 \u5207\u6362\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\uff1a\u5feb\u6377\u952e\u4e3a X \u952e\u3002 \u9ed8\u8ba4\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\uff1a\u5feb\u6377\u952e\u4e3a D \u952e\u3002","title":"\u524d\u666f\u8272\u4e0e\u80cc\u666f\u8272"},{"location":"PS/PS3/#_3","text":"\u4f7f\u7528\u201c\u5438\u7ba1\u5de5\u5177\u201d\u53ef\u4ee5\u62fe\u53d6\u56fe\u50cf\u4e2d\u7684\u4efb\u610f\u989c\u8272\u4f5c\u4e3a\u524d\u666f\u8272\u3002\u6309\u4f4f Alt \u952e\u8fdb\u884c\u62fe\u53d6\u53ef\u5c06\u5f53\u524d\u62fe\u53d6\u7684\u989c\u8272\u4f5c\u4e3a\u80cc\u666f\u8272\u3002","title":"\u4f7f\u7528\u201c\u5438\u7ba1\u5de5\u5177\u201d\u9009\u53d6\u989c\u8272"},{"location":"PS/PS3/#_4","text":"\u201c\u989c\u8272\u201d\u9762\u677f\u4e2d\u663e\u793a\u4e86\u5f53\u524d\u8bbe\u7f6e\u7684\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\uff0c\u53ef\u4ee5\u5728\u8be5\u9762\u677f\u4e2d\u8bbe\u7f6e\u524d\u666f\u8272\u548c\u80cc\u666f\u8272\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u989c\u8272\u201d\u547d \u4ee4\uff0c\u53ef\u53d1\u4ee5\u6253\u5f00\u201c\u989c\u8272\u201d\u9762\u677f\u3002","title":"\u201c\u989c\u8272\u201d\u9762\u677f"},{"location":"PS/PS3/#_5","text":"\u201c\u8272\u677f\u201d\u9762\u677f\u4e2d\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5305\u542b\u4e00\u4e9b\u7cfb\u7edf\u9884\u8bbe\u7684\u989c\u8272\uff0c\u5355\u51fb\u76f8\u5e94\u7684\u989c\u8272\u5373\u53ef\u5c06\u5176\u8bbe\u7f6e\u4e3a\u524d\u666f\u8272\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u8272\u677f\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8272\u677f\u201d\u9762\u677f\u3002","title":"\u201c\u8272\u677f\u201d\u9762\u677f"},{"location":"PS/PS3/#_6","text":"","title":"\u753b\u7b14\u9762\u677f"},{"location":"PS/PS3/#_7","text":"\u5728\u8ba4\u8bc6\u5176\u4ed6\u7ed8\u5236\u53ca\u4fee\u9970\u5de5\u5177\u4e4b\u524d\u9996\u5148\u9700\u8981\u638c\u63e1\u201c\u753b\u7b14\u201d\u9762\u677f\u3002\u201c\u753b\u7b14\u201d\u9762\u677f\u662f\u6700\u91cd\u8981\u7684\u9762\u677f\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u8bbe\u7f6e\u7ed8\u753b\u5de5\u5177\u548c\u4fee\u9970\u5de5\u5177\u7684\u7b14\u5237\u79cd\u7c7b\u3001\u753b\u7b14\u5927\u5c0f\u548c\u786c\u5ea6\u7b49\u5c5e\u6027\u3002 \u7b14\u5c16\u5f62\u72b6\u8bbe\u7f6e\uff1a\u5728\u201c\u753b\u7b14\u7b14\u5c16\u5f62\u72b6\u201d\u9009\u9879\u9762\u677f\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u753b\u7b14\u7684\u5f62\u72b6\u3001\u5927\u5c0f\u3001\u786c\u5ea6\u548c\u95f4\u8ddd\u7b49\u5c5e\u6027 \u201c\u5f62\u72b6\u52a8\u6001\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u201c\u5f62\u72b6\u52a8\u6001\u201d\u53ef\u4ee5\u51b3\u5b9a\u63cf\u8fb9\u4e2d\u753b\u7b14\u7b14\u8ff9\u7684\u53d8\u5316\u3002\u5b83\u53ef\u4ee5\u4f7f\u753b\u7b14\u7684\u5927\u5c0f\u3001\u5706\u5ea6\u7b49\u4ea7\u751f\u968f\u673a\u53d8\u5316\u7684\u6548\u679c\u3002 \u201c\u6563\u5e03\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u5728\u201c\u6563\u5e03\u201d\u9009\u9879\u9762\u677f\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u63cf\u8fb9\u4e2d\u7b14\u8ff9\u7684\u6570\u76ee\u548c\u4f4d\u7f6e\u3002\u4f7f\u753b\u7b14\u7b14\u8ff9\u6cbf\u7740\u7ed8\u5236\u7684\u7ebf\u6761\u6269\u6563\u3002 \u201c\u989c\u8272\u52a8\u6001\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u9009\u4e2d\u201c\u989c\u8272\u52a8\u6001\u201d\u9009\u9879\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u9009\u9879\u7ed8\u5236\u51fa\u989c\u8272\u53d8\u5316\u7684\u6548\u679c\u3002 \u201c\u7eb9\u7406\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u4f7f\u7528\u201c\u7eb9\u7406\u201d\u9009\u9879\u53ef\u4ee5\u7ed8\u5236\u51fa\u5e26\u6709\u7eb9\u7406\u8d28\u611f\u7684\u7b14\u89e6\uff0c\u4f8b\u5982\u53ef\u4ee5\u5728\u5e26\u7eb9\u7406\u7684\u753b\u5e03\u4e0a\u7ed8\u5236\u6548\u679c\u7b49\u3002 \u201c\u53cc\u91cd\u753b\u7b14\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u9996\u9009\u8bbe\u7f6e\u201c\u753b\u7b14\u7b14\u5c16\u5f62\u72b6\u201d\u4e3b\u753b\u7b14\u53c2\u6570\u5c5e\u6027\uff0c\u7136\u540e\u9009\u62e9\u201c\u53cc\u91cd\u753b\u7b14\u201d\u9009\u9879\uff0c\u5e76\u4ece\u5176 \u9762\u677f\u4e2d\u9009\u62e9\u53e6\u5916\u4e00\u4e2a\u7b14\u5c16\uff08\u5373\u53cc\u91cd\u7b14\u5c16\uff09\u3002 \u201c\u4f20\u9012\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u201c\u4f20\u9012\u201d\u9009\u9879\u4e2d\u5305\u542b\u4e0d\u900f\u660e\u5ea6\u3001\u6d41\u91cf\u3001\u6e7f\u5ea6\u3001\u6df7\u5408\u7b49\u6296\u52a8\u7684\u63a7\u5236\u3002\u53ef\u4ee5\u7528\u6765\u786e\u5b9a\u6cb9\u5f69\u5728\u63cf\u8fb9\u8def\u7ebf\u4e2d\u7684\u6539\u53d8\u65b9\u5f0f\u3002 \u201c\u753b\u7b14\u7b14\u52bf\u201d\u9009\u9879\u7684\u8bbe\u7f6e\uff1a\u201c\u753b\u7b14\u7b14\u52bf\u201d\u9009\u9879\u7528\u4e8e\u8c03\u6574\u6bdb\u5237\u753b\u7b14\u7b14\u5c16\u3001\u4fb5\u8680\u753b\u7b14\u7b14\u5c16\u7684\u89d2\u5ea6\u3002","title":"\u8ba4\u8bc6\u201c\u753b\u7b14\u201d\u9762\u677f"},{"location":"PS/PS3/#_8","text":"\u7ed8\u5236\u7eb7\u98de\u7684\u82b1\u6735","title":"\u753b\u7b14\u7ec3\u4e60"},{"location":"PS/PS3/#_9","text":"","title":"\u7ed8\u5236\u5de5\u5177"},{"location":"PS/PS3/#_10","text":"\u201c\u753b\u7b14\u5de5\u5177\u201d\u662f\u4f7f\u7528\u9891\u7387\u6700\u9ad8\u7684\u5de5\u5177\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u524d\u666f\u8272\u7ed8\u5236\u51fa\u5404\u79cd\u7ebf\u6761\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u4fee\u6539\u901a\u9053\u548c\u8499\u7248\u3002\u5355\u51fb\u8be5\u5de5\u5177\uff0c\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5408\u9002\u7684\u753b\u7b14\u5927\u5c0f\u548c\u753b\u7b14\u6837\u5f0f\uff0c\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\u5373\u53ef\u4ee5\u524d\u666f\u8272\u8fdb\u884c\u7ed8\u5236\u3002","title":"\u753b\u7b14\u5de5\u5177"},{"location":"PS/PS3/#_11","text":"\u4f7f\u7528\u65b9\u6cd5\u4e0e\u753b\u7b14\u7c7b\u4f3c\u3002\u53ef\u4ee5\u7ed8\u5236\u51fa\u786c\u8fb9\u7ebf\u6761\uff0c\u4f8b\u5982\u8fd1\u5e74\u6765 \u6bd4\u8f83\u6d41\u884c\u7684\u50cf\u7d20\u753b\uff0c\u4ee5\u53ca\u50cf\u7d20\u6e38\u620f\u3002","title":"\u94c5\u7b14\u5de5\u5177"},{"location":"PS/PS3/#_12","text":"\u201c\u989c\u8272\u66ff\u6362\u5de5\u5177\u201d\u53ef\u4ee5\u5c06\u9009\u5b9a\u7684\u989c\u8272\u66ff\u6362\u4e3a\u5176\u4ed6\u989c\u8272\u3002\u5355\u51fb\u8be5\u5de5\u5177\uff0c\u8bbe\u7f6e\u76ee\u6807\u989c\u8272\u4e3a\u524d\u666f\u8272\uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u66ff\u6362\u6a21\u5f0f\u3001\u53d6\u6837\u7b49\u53c2\u6570\uff0c\u7136\u540e\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u6d82\u62b9\uff0c\u88ab\u6d82\u62b9\u7684\u533a\u57df\u53d1\u751f\u989c\u8272\u53d8\u5316\u3002","title":"\u989c\u8272\u66ff\u6362\u5de5\u5177"},{"location":"PS/PS3/#_13","text":"","title":"\u56fe\u50cf\u64e6\u9664\u5de5\u5177"},{"location":"PS/PS3/#_14","text":"\u201c\u6a61\u76ae\u64e6\u5de5\u5177\u201d\u53ef\u4ee5\u5c06\u50cf\u7684\u50cf\u7d20\u5c06\u53d8\u6210\u900f\u660e\u7d20\u66f4\u6539\u4e3a\u80cc\u666f\u8272\u6216\u900f\u660e\u3002\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u56fe\u5c42\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\u5373\u53ef\u8fdb\u884c\u64e6\u9664\uff0c\u5728\u666e\u901a\u56fe\u5c42\u4e2d\u64e6\u9664\uff0c\u5728\u201c\u80cc\u666f\u201d\u56fe\u5c42\u6216\u9501\u5b9a\u4e86\u900f\u660e\u50cf\u7d20\u7684\u56fe\u5c42\u4e2d\u8fdb\u884c\u64e6\u9664\uff0c\u5219\u64e6\u9664\u7684\u50cf\u7d20\u5c06\u53d8\u6210\u80cc\u666f\u8272\u3002","title":"\u6a61\u76ae\u64e6\u5de5\u5177"},{"location":"PS/PS3/#_15","text":"\u201c\u80cc\u666f\u6a61\u76ae\u64e6\u5de5\u5177\u201d\u662f\u4e00\u79cd\u57fa\u4e8e\u8272\u5f69\u5dee\u5f02\u7684\u667a\u80fd\u5316\u64e6\u9664\u5de5\u5177\u3002\u5176\u529f\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u9664\u4e86\u53ef\u4ee5\u7528\u6765\u64e6\u9664\u56fe\u50cf\u4ee5\u5916\uff0c\u6700\u91cd\u8981\u7684\u65b9\u9762\u662f\u8fd0\u7528\u5728\u62a0\u56fe\u4e2d\u3002\u8bbe\u7f6e\u597d\u80cc\u666f\u8272\u4ee5\u540e\uff0c\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u4ee5\u5728\u62b9\u9664\u80cc\u666f\u7684\u540c\u65f6\u4fdd\u7559\u524d\u666f\u5bf9\u8c61\u7684\u8fb9\u7f18\u3002","title":"\u80cc\u666f\u6a61\u76ae\u64e6\u5de5\u5177"},{"location":"PS/PS3/#_16","text":"\u4f7f\u7528\u201c\u9b54\u672f\u6a61\u76ae\u64e6\u5de5\u5177\u201d\u5728\u56fe\u50cf\u4e2d\u5355\u51fb\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u76f8\u4f3c\u7684\u50cf\u7d20\u66f4\u6539\u4e3a\u900f\u660e\uff08\u5982\u679c\u5728\u5df2\u9501\u5b9a\u4e86\u900f\u660e\u50cf\u7d20\u7684\u56fe\u5c42 \u4e2d\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u50cf\u7d20\u5c06\u66f4\u6539\u4e3a\u80cc\u666f\u8272\uff09\u3002","title":"\u9b54\u672f\u6a61\u76ae\u64e6\u5de5\u5177"},{"location":"PS/PS3/#_17","text":"\u4f7f\u7528\u9b54\u672f\u6a61\u76ae\u64e6\u4e3a\u5a5a\u7eb1\u7167\u6362\u80cc\u666f \u7528\u591a\u79cd\u64e6\u9664\u5de5\u5177\u53bb\u9664\u80cc\u666f","title":"\u6a61\u76ae\u64e6\u7ec3\u4e60"},{"location":"PS/PS3/#_18","text":"","title":"\u56fe\u50cf\u586b\u5145\u5de5\u5177"},{"location":"PS/PS3/#_19","text":"\u201c\u6e10\u53d8\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u6574\u4e2a\u6587\u6863\u6216\u9009\u533a\u5185\u586b\u5145\u6e10\u53d8\u8272\uff0c\u5e76\u4e14\u53ef\u4ee5\u521b\u5efa\u591a\u79cd\u989c\u8272\u95f4\u7684\u6df7\u5408\u6548\u679c\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u6e10\u53d8\u5de5\u5177\u201d\u6309\u94ae\uff0c\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u6e10\u53d8\u989c\u8272\u6761\u201d\uff0c\u5728\u5f39\u51fa\u7684\u201c\u6e10\u53d8\u7f16\u8f91\u5668\u201d\u4e2d\u7f16\u8f91\u6e10\u53d8\u989c\u8272\uff0c\u63a5\u7740\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5408\u9002\u7684\u6e10\u53d8\u7c7b\u578b\u4ee5\u53ca\u6a21\u5f0f\u3001\u4e0d\u900f\u660e\u5ea6\u7b49\u53c2\u6570\uff0c\u8bbe\u7f6e\u5b8c\u6bd5\u540e\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u62fd\uff0c\u677e\u5f00\u5149\u6807\u540e\u5373\u53ef\u5728\u753b\u9762\u4e2d\u586b\u5145\u6e10\u53d8\u3002","title":"\u6e10\u53d8\u5de5\u5177"},{"location":"PS/PS3/#_20","text":"\u201c\u6cb9\u6f06\u6876\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u56fe\u50cf\u4e2d\u586b\u5145\u524d\u666f\u8272\u6216\u56fe\u6848\uff0c\u5982\u679c\u521b\u5efa\u4e86\u9009\u533a\uff0c\u586b\u5145\u7684\u533a\u57df\u4e3a\u5f53\u524d\u9009\u533a\uff1b\u5982\u679c\u6ca1\u6709\u521b\u5efa\u9009\u533a\uff0c\u586b\u5145\u7684\u662f\u4e0e\u9f20\u6807\u5355\u51fb\u5904\u989c\u8272\u76f8\u8fd1\u7684\u533a\u57df\u3002","title":"\u6cb9\u6f06\u6876\u5de5\u5177"},{"location":"PS/PS3/#_21","text":"\u7528\u586b\u5145\u5236\u4f5c\u7c89\u7d2b\u8272\u68a6\u5e7b\u6548\u679c","title":"\u586b\u5145\u7ec3\u4e60"},{"location":"PS/PS4/","text":"\u56fe\u7ae0\u5de5\u5177\u7ec4 \u00b6 \u4eff\u5236\u56fe\u7ae0\u5de5\u5177 \u00b6 \u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u53ef\u4ee5\u5c06\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u7ed8\u5236\u5230\u540c\u4e00\u56fe\u50cf\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u3002 \u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u5bf9\u4e8e\u590d\u5236\u5bf9\u8c61\u6216\u4fee\u590d\u56fe\u50cf\u4e2d\u7684\u7f3a\u9677\u975e\u5e38\u6709\u7528\u3002\u5355\u51fb\u8be5\u5de5\u5177\uff0c\u5728\u4eff\u5236\u7684\u6837\u672c\u533a\u57df\u6309\u4f4f Alt \u952e\u5e76\u5355\u51fb\uff0c\u8fdb\u884c\u53d6\u6837\u3002\u7136\u540e\u5230\u9700\u8981\u7ed8\u5236\u7684\u533a\u57df\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\uff0c\u521a\u521a\u53d6\u6837\u533a\u57df\u7684\u50cf\u7d20\u4f1a\u88ab\u7ed8\u5236\u5230\u5f53\u524d\u4f4d\u7f6e\u3002 \u5355\u51fb\u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u6309\u94ae\uff0c\u8bbe\u7f6e\u5408\u9002\u7684\u7b14\u5c16\uff0c\u7136\u540e\u5728\u53d6\u6837\u7684\u4f4d\u7f6e\u6309\u4f4f Alt \u952e\u5355\u51fb\u8fdb\u884c\u62fe\u53d6\u3002\u7136\u540e\u5728\u9700\u8981\u4fee\u8865\u7684\u4f4d\u7f6e\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u62d3\u5c55\u8fdb\u884c\u8986\u76d6\u3002 \u4eff\u5236\u56fe\u7ae0\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u4eff\u5236\u6e90\u9762\u677f\u4e0e\u4eff\u5236\u56fe\u7ae0\u5de5\u5177 \u4f7f\u7528\u4eff\u5236\u56fe\u7ae0\u4fee\u8865\u5929\u7a7a \u56fe\u6848\u56fe\u7ae0\u5de5\u5177 \u00b6 \u201c\u56fe\u6848\u56fe\u7ae0\u5de5\u5177\u201d\u53ef\u4ee5\u4f7f\u7528\u9884\u8bbe\u56fe\u6848\u6216\u8f7d\u5165\u7684\u56fe\u6848\u8fdb\u884c\u7ed8\u753b\uff0c\u9996\u5148\u5728\u9009\u9879\u680f\u4e2d\u9009\u62e9\u4e00\u79cd\u5408\u9002\u7684\u56fe\u6848\uff0c\u5e76\u8bbe\u7f6e\u6df7\u5408\u6a21\u5f0f\u4ee5\u53ca\u753b\u7b14\u7684\u4e0d\u900f\u660e\u5ea6\uff0c\u63a5\u7740\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\u5373\u53ef\u7ed8\u5236\u51fa\u56fe\u6848\u3002 \u53ef\u901a\u8fc7\u81ea\u5b9a\u4e49\u56fe\u6848\u6765\u8fbe\u5230\u201c\u76d6\u7ae0\u201d\u7684\u76ee\u7684\u3002 \u4fee\u590d\u5de5\u5177\u7ec4 \u00b6 \u6c61\u70b9\u4fee\u590d\u753b\u7b14\u5de5\u5177 \u00b6 \u4f7f\u7528\u201c\u6c61\u70b9\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u6d88\u9664\u56fe\u50cf\u4e2d\u7684\u6c61\u70b9\u548c\u67d0\u4e2a\u5bf9\u8c61\u3002\u201c\u6c61\u70b9\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u4e0d\u9700\u8981\u8bbe\u7f6e\u53d6\u6837\u70b9\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5728\u7455\u75b5\u5904\u5355\u51fb\uff0c\u5e76\u81ea\u52a8\u4ece\u6240\u4fee\u9970\u533a\u57df\u7684\u5468\u56f4\u8fdb\u884c\u53d6\u6837\u6765\u4fee\u590d\u5355\u51fb\u7684\u533a\u57df. \u6c61\u70b9\u4fee\u590d\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u6c61\u70b9\u4fee\u590d\u5de5\u5177\u53bb\u9664\u7455\u75b5 \u4fee\u590d\u753b\u7b14\u5de5\u5177 \u00b6 \u4e0e\u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\uff0c\u201c\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u4fee\u590d\u56fe\u50cf\u7684\u7455\u75b5\uff0c\u4e5f\u53ef\u4ee5\u7528\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u4f5c\u4e3a\u6837\u672c\u8fdb\u884c\u7ed8\u5236\u3002\u4e0d\u540c\u7684\u662f\uff0c\u201c\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u8fd8\u53ef\u5c06\u6837\u672c\u50cf\u7d20\u7684\u7eb9\u7406\u3001\u5149\u7167\u3001\u900f\u660e\u5ea6\u548c\u9634\u5f71\u4e0e\u6240\u4fee\u590d\u7684\u50cf\u7d20\u8fdb\u884c\u5339\u914d\uff0c\u4ece\u800c\u4f7f\u4fee\u590d\u540e\u7684\u50cf\u7d20\u4e0d\u7559\u75d5\u8ff9\u5730\u878d\u5165\u56fe\u50cf\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4fee\u590d\u753b\u7b14\u5de5\u5177\u5728\u8fdb\u884c\u4eff\u5236\u5b9a\u4e49\u6e90\u7684\u540c\u65f6\uff0c\u6d82\u62b9\u7684\u533a\u57df\u4e0e\u5f53\u524d\u5149\u6807\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u8fdb\u884c\u989c\u8272\u8ba1\u7b97\uff0c\u5b9e\u73b0\u989c\u8272\u7684\u81ea\u7136\u8fc7\u6e21\u3002\u5bf9\u4e8e\u56fe\u50cf\u4e2d\u591a\u4f59\u7684\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u795e\u5947\u7684\u201c\u6d88\u5931\u201d\u3002 \u4fee\u590d\u753b\u7b14\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u4fee\u590d\u753b\u7b14\u53bb\u9664\u9762\u90e8\u7ec6\u7eb9 \u4fee\u8865\u5de5\u5177 \u00b6 \u4fee\u8865\u5de5\u5177\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u533a\u57df\u6216\u56fe\u6848\u4e2d\u7684\u50cf\u7d20\u6765\u4fee\u590d\u9009\u4e2d\u7684\u533a\u57df\u3002\u4fee\u8865\u5de5\u5177\u4f1a\u5c06\u9009\u533a\u5185\u50cf\u7d20\u7684\u7eb9\u7406\u3001\u5149\u7167\u548c\u9634\u5f71\u7b49\u5185\u5bb9\u4e0e\u6e90\u50cf\u7d20\u8fdb\u884c\u5339\u914d\uff0c\u8ba1\u7b97\u51fa\u6700\u4f73\u7684\u4fee\u590d\u6548\u679c\u3002 \u4fee\u8865\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u4fee\u8865\u5de5\u5177\u53bb\u9664\u6587\u5b57 \u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177 \u00b6 \u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177\u662fCS6\u7248\u672c\u4e2d\u65b0\u589e\u52a0\u7684\u667a\u80fd\u5de5\u5177\uff0c\u6839\u636e\u8bbe\u7f6e\u7684\u5c5e\u6027\u662f\u6269\u5c55\uff08\u590d\u5236\uff09\u6216\u79fb\u52a8\uff0c\u5b9e\u73b0\u9009\u62e9\u5185\u5bb9\u7684\u590d\u5236\u6216\u662f\u79fb\u52a8\u64cd\u4f5c\uff0c\u7531\u7cfb\u7edf\u81ea\u52a8\u5bf9\u9009\u533a\u7684\u8fb9\u7f18\u8fdb\u884c\u8ba1\u7b97\uff0c\u8f7b\u677e\u5b9e\u73b0\u201c\u4e7e\u5764\u5927\u632a\u79fb\u201d\u3002 \u4f7f\u7528\u201c\u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u65e0\u9700\u590d\u6742\u56fe\u5c42\u6216\u6162\u901f\u7cbe\u786e\u7684\u9009\u62e9\u9009\u533a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u5730\u91cd\u6784\u56fe\u50cf\u3002\u9996\u5148\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177\u201d\uff0c\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u533a\u57df\uff0c\u5e76\u5c06\u5f71\u50cf\u4efb\u610f\u5730\u79fb\u52a8\u5230\u6307\u5b9a\u7684\u533a\u5757\u4e2d\uff0c\u8fd9\u65f6 Photoshop \u5c31\u4f1a\u81ea\u52a8\u5c06\u5f71\u50cf\u4e0e\u56db\u5468\u7684\u666f\u7269\u878d\u5408\u5728\u4e00\u8d77\uff0c\u800c\u539f\u59cb\u7684\u533a\u57df\u5219\u4f1a\u8fdb\u884c\u667a\u80fd\u586b\u5145\u3002 \u7ea2\u773c\u5de5\u5177 \u00b6 \u5728\u5149\u7ebf\u8f83\u6697\u7684\u73af\u5883\u4e2d\u7167\u76f8\u65f6\uff0c\u7531\u4e8e\u4e3b\u4f53\u7684\u8679\u819c\u5f20\u5f00\u5f97\u5f88\u5bbd\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u201c\u7ea2\u773c\u201d\u73b0\u8c61\u3002\u201c\u7ea2\u773c\u5de5\u5177\u201d\u53ef\u4ee5\u901a\u8fc7\u5728\u77b3\u5b54\u5904\u5355\u51fb\uff0c\u5feb\u901f\u53bb\u9664\u7531\u95ea\u5149\u706f\u5bfc\u81f4\u7684\u7ea2\u8272\u53cd\u5149\u3002 \u5386\u53f2\u8bb0\u5f55\u5de5\u5177\u7ec4 \u00b6 \u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177 \u00b6 \u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u7406\u6027\u3001\u771f\u5b9e\u5730\u8fd8\u539f\u67d0\u4e00\u533a\u57df\u7684\u67d0\u4e00\u6b65\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u6807\u8bb0\u7684\u5386\u53f2\u8bb0\u5f55\u72b6\u6001\u6216\u5feb\u7167\u7528\u4f5c\u6e90\u6570\u636e\u5bf9\u56fe\u50cf\u8fdb\u884c\u4fee\u6539\u3002\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177\u201d\u9700\u8981\u4e0e\u201c\u5386\u53f2\u8bb0\u5f55\u9762\u677f\u201d\u5171\u540c\u4f7f\u7528\uff0c\u9996\u5148\u9700\u8981\u5728\u201c\u5386\u53f2\u8bb0\u5f55\u9762\u677f\u201d\u4e2d\u6807\u8bb0\u4e00\u4e2a\u64cd\u4f5c\u6b65\u9aa4\uff0c\u7136\u540e\u4f7f\u7528\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u201d\u5728\u753b\u9762\u4e2d\u7ed8\u5236\uff0c\u88ab\u7ed8\u5236\u7684\u533a\u57df\u4f1a\u5448\u73b0\u51fa\u6807\u8bb0\u6b65\u9aa4\u7684\u72b6\u6001\u3002 \u5386\u53f2\u753b\u7b14\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u8fd8\u539f\u5c40\u90e8\u6548\u679c \u5386\u53f2\u8bb0\u5f55\u827a\u672f\u753b\u7b14\u5de5\u5177 \u00b6 \u4e0e\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177\u201d\u76f8\u4f3c\uff0c\u201c\u5386\u53f2\u8bb0\u5f55\u827a\u672f\u753b\u7b14\u5de5\u5177\u201d\u4e5f\u53ef\u4ee5\u5c06\u6807\u8bb0\u7684\u5386\u53f2\u8bb0\u5f55\u72b6\u6001\u6216\u5feb\u7167\u7528\u4f5c\u6e90\u6570\u636e\u5bf9\u56fe\u50cf\u8fdb\u884c\u4fee\u6539\u3002\u4e0d\u540c\u7684\u662f\uff0c\u201c\u5386\u53f2\u8bb0\u5f55\u827a\u672f\u753b\u7b14\u5de5\u5177\u201d\u5728\u4f7f\u7528\u539f\u59cb\u6570\u636e\u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u4e3a\u56fe\u50cf\u521b\u5efa\u4e0d\u540c\u7684\u989c\u8272\u548c\u827a\u672f\u98ce\u683c\u3002 \u6a21\u7cca\u9510\u5316\u5de5\u5177\u7ec4 \u00b6 \u6a21\u7cca\u5de5\u5177 \u00b6 \u201c\u6a21\u7cca\u5de5\u5177\u201d\u53ef\u67d4\u5316\u786c\u8fb9\u7f18\u6216\u51cf\u5c11\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u3002\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u67d0\u4e2a\u533a\u57df\u4e0a\u65b9\u7ed8\u5236\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u8be5\u533a\u57df\u5c31\u8d8a\u6a21 \u7cca\u3002 \u9510\u5316\u5de5\u5177 \u00b6 \u201c\u9510\u5316\u5de5\u5177\u201d\u4e0e\u201c\u6a21\u7cca\u5de5\u5177\u201d\u76f8\u53cd\uff0c\u53ef\u4ee5\u589e\u5f3a\u56fe\u50cf\u4e2d\u76f8\u90bb\u50cf\u7d20\u4e4b\u95f4\u7684\u5bf9\u6bd4\uff0c\u4ee5\u63d0\u9ad8\u56fe\u50cf\u7684\u6e05\u6670\u5ea6\u3002 \u6d82\u62b9\u5de5\u5177 \u00b6 \u201c\u6d82\u62b9\u5de5\u5177\u201d\u53ef\u4ee5\u6a21\u62df\u624b\u6307\u5212\u8fc7\u6e7f\u6cb9\u6f06\u65f6\u6240\u4ea7\u751f\u7684\u6548\u679c\u3002\u8be5\u5de5\u5177\u53ef\u4ee5\u62fe\u53d6\u9f20\u6807\u5355\u51fb\u5904\u7684\u989c\u8272\uff0c\u5e76\u6cbf\u7740\u62d6\u62fd\u7684\u65b9\u5411\u5c55\u5f00\u8fd9\u79cd\u989c\u8272\u3002 \u51cf\u6de1\u52a0\u6df1\u5de5\u5177\u7ec4 \u00b6 \u51cf\u6de1\u5de5\u5177 \u00b6 \u201c\u51cf\u6de1\u5de5\u5177\u201d\u53ef\u4ee5\u5bf9\u56fe\u50cf\u4eae\u90e8\u3001\u4e2d\u95f4\u8c03\u548c\u6697\u90e8\u5206\u522b\u8fdb\u884c\u51cf\u6de1\u5904\u7406\uff0c\u5728\u67d0\u4e2a\u533a\u57df\u4e0a\u65b9\u7ed8\u5236\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u8be5\u533a\u57df\u5c31\u4f1a\u53d8\u5f97\u8d8a\u4eae\u3002 \u51cf\u6de1\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u51cf\u6de1\u5de5\u5177\u7f8e\u767d\u4eba\u50cf \u52a0\u6df1\u5de5\u5177 \u00b6 \u201c\u52a0\u6df1\u5de5\u5177\u201d\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u52a0\u6df1\u5904\u7406\uff0c\u5728\u67d0\u4e2a\u533a\u57df\u4e0a\u65b9\u7ed8\u5236\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u8be5\u533a\u57df\u5c31\u4f1a\u53d8\u5f97\u8d8a\u6697\u3002 \u52a0\u6df1\u5de5\u5177\u7ec3\u4e60 \u00b6 \u5229\u7528\u52a0\u6df1\u51cf\u6de1\u5de5\u5177\u8fdb\u884c\u901a\u9053\u62a0\u56fe \u6d77\u7ef5\u5de5\u5177 \u00b6 \u201c\u6d77\u7ef5\u5de5\u5177\u201d\u53ef\u4ee5\u589e\u52a0\u6216\u964d\u4f4e\u56fe\u50cf\u4e2d\u67d0\u4e2a\u533a\u57df\u7684\u9971\u548c\u5ea6\u3002\u5982\u679c\u662f\u7070\u5ea6\u56fe\u50cf\uff0c\u8be5\u5de5\u5177\u5c06\u901a\u8fc7\u7070\u9636\u8fdc\u79bb\u6216\u9760\u8fd1\u4e2d\u95f4\u7070\u8272\u6765\u589e\u52a0\u6216\u964d\u4f4e\u5bf9\u6bd4\u5ea6\u3002 \u6d77\u7ef5\u5de5\u5177\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u6d77\u7ef5\u5de5\u5177\u5236\u4f5c\u590d\u53e4\u6548\u679c \u7ec3\u4e60 \u00b6 \u53bb\u9664\u76b1\u7eb9\u8fd8\u539f\u5e74\u8f7b\u6001 \u4f7f\u7528\u6d82\u62b9\u5de5\u5177\u5236\u4f5c\u70ab\u5f69\u5986\u9762","title":"\u4fee\u590d\u5de5\u5177\u4e0e\u56fe\u50cf\u6da6\u8272\u5de5\u5177"},{"location":"PS/PS4/#_1","text":"","title":"\u56fe\u7ae0\u5de5\u5177\u7ec4"},{"location":"PS/PS4/#_2","text":"\u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u53ef\u4ee5\u5c06\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u7ed8\u5236\u5230\u540c\u4e00\u56fe\u50cf\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u3002 \u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u5bf9\u4e8e\u590d\u5236\u5bf9\u8c61\u6216\u4fee\u590d\u56fe\u50cf\u4e2d\u7684\u7f3a\u9677\u975e\u5e38\u6709\u7528\u3002\u5355\u51fb\u8be5\u5de5\u5177\uff0c\u5728\u4eff\u5236\u7684\u6837\u672c\u533a\u57df\u6309\u4f4f Alt \u952e\u5e76\u5355\u51fb\uff0c\u8fdb\u884c\u53d6\u6837\u3002\u7136\u540e\u5230\u9700\u8981\u7ed8\u5236\u7684\u533a\u57df\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\uff0c\u521a\u521a\u53d6\u6837\u533a\u57df\u7684\u50cf\u7d20\u4f1a\u88ab\u7ed8\u5236\u5230\u5f53\u524d\u4f4d\u7f6e\u3002 \u5355\u51fb\u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u6309\u94ae\uff0c\u8bbe\u7f6e\u5408\u9002\u7684\u7b14\u5c16\uff0c\u7136\u540e\u5728\u53d6\u6837\u7684\u4f4d\u7f6e\u6309\u4f4f Alt \u952e\u5355\u51fb\u8fdb\u884c\u62fe\u53d6\u3002\u7136\u540e\u5728\u9700\u8981\u4fee\u8865\u7684\u4f4d\u7f6e\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u62d3\u5c55\u8fdb\u884c\u8986\u76d6\u3002","title":"\u4eff\u5236\u56fe\u7ae0\u5de5\u5177"},{"location":"PS/PS4/#_3","text":"\u4f7f\u7528\u4eff\u5236\u6e90\u9762\u677f\u4e0e\u4eff\u5236\u56fe\u7ae0\u5de5\u5177 \u4f7f\u7528\u4eff\u5236\u56fe\u7ae0\u4fee\u8865\u5929\u7a7a","title":"\u4eff\u5236\u56fe\u7ae0\u7ec3\u4e60"},{"location":"PS/PS4/#_4","text":"\u201c\u56fe\u6848\u56fe\u7ae0\u5de5\u5177\u201d\u53ef\u4ee5\u4f7f\u7528\u9884\u8bbe\u56fe\u6848\u6216\u8f7d\u5165\u7684\u56fe\u6848\u8fdb\u884c\u7ed8\u753b\uff0c\u9996\u5148\u5728\u9009\u9879\u680f\u4e2d\u9009\u62e9\u4e00\u79cd\u5408\u9002\u7684\u56fe\u6848\uff0c\u5e76\u8bbe\u7f6e\u6df7\u5408\u6a21\u5f0f\u4ee5\u53ca\u753b\u7b14\u7684\u4e0d\u900f\u660e\u5ea6\uff0c\u63a5\u7740\u5728\u753b\u9762\u4e2d\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u5e76\u62d6\u52a8\u5373\u53ef\u7ed8\u5236\u51fa\u56fe\u6848\u3002 \u53ef\u901a\u8fc7\u81ea\u5b9a\u4e49\u56fe\u6848\u6765\u8fbe\u5230\u201c\u76d6\u7ae0\u201d\u7684\u76ee\u7684\u3002","title":"\u56fe\u6848\u56fe\u7ae0\u5de5\u5177"},{"location":"PS/PS4/#_5","text":"","title":"\u4fee\u590d\u5de5\u5177\u7ec4"},{"location":"PS/PS4/#_6","text":"\u4f7f\u7528\u201c\u6c61\u70b9\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u6d88\u9664\u56fe\u50cf\u4e2d\u7684\u6c61\u70b9\u548c\u67d0\u4e2a\u5bf9\u8c61\u3002\u201c\u6c61\u70b9\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u4e0d\u9700\u8981\u8bbe\u7f6e\u53d6\u6837\u70b9\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5728\u7455\u75b5\u5904\u5355\u51fb\uff0c\u5e76\u81ea\u52a8\u4ece\u6240\u4fee\u9970\u533a\u57df\u7684\u5468\u56f4\u8fdb\u884c\u53d6\u6837\u6765\u4fee\u590d\u5355\u51fb\u7684\u533a\u57df.","title":"\u6c61\u70b9\u4fee\u590d\u753b\u7b14\u5de5\u5177"},{"location":"PS/PS4/#_7","text":"\u4f7f\u7528\u6c61\u70b9\u4fee\u590d\u5de5\u5177\u53bb\u9664\u7455\u75b5","title":"\u6c61\u70b9\u4fee\u590d\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_8","text":"\u4e0e\u201c\u4eff\u5236\u56fe\u7ae0\u5de5\u5177\u201d\u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\uff0c\u201c\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u4fee\u590d\u56fe\u50cf\u7684\u7455\u75b5\uff0c\u4e5f\u53ef\u4ee5\u7528\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u4f5c\u4e3a\u6837\u672c\u8fdb\u884c\u7ed8\u5236\u3002\u4e0d\u540c\u7684\u662f\uff0c\u201c\u4fee\u590d\u753b\u7b14\u5de5\u5177\u201d\u8fd8\u53ef\u5c06\u6837\u672c\u50cf\u7d20\u7684\u7eb9\u7406\u3001\u5149\u7167\u3001\u900f\u660e\u5ea6\u548c\u9634\u5f71\u4e0e\u6240\u4fee\u590d\u7684\u50cf\u7d20\u8fdb\u884c\u5339\u914d\uff0c\u4ece\u800c\u4f7f\u4fee\u590d\u540e\u7684\u50cf\u7d20\u4e0d\u7559\u75d5\u8ff9\u5730\u878d\u5165\u56fe\u50cf\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4fee\u590d\u753b\u7b14\u5de5\u5177\u5728\u8fdb\u884c\u4eff\u5236\u5b9a\u4e49\u6e90\u7684\u540c\u65f6\uff0c\u6d82\u62b9\u7684\u533a\u57df\u4e0e\u5f53\u524d\u5149\u6807\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u8fdb\u884c\u989c\u8272\u8ba1\u7b97\uff0c\u5b9e\u73b0\u989c\u8272\u7684\u81ea\u7136\u8fc7\u6e21\u3002\u5bf9\u4e8e\u56fe\u50cf\u4e2d\u591a\u4f59\u7684\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u795e\u5947\u7684\u201c\u6d88\u5931\u201d\u3002","title":"\u4fee\u590d\u753b\u7b14\u5de5\u5177"},{"location":"PS/PS4/#_9","text":"\u4f7f\u7528\u4fee\u590d\u753b\u7b14\u53bb\u9664\u9762\u90e8\u7ec6\u7eb9","title":"\u4fee\u590d\u753b\u7b14\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_10","text":"\u4fee\u8865\u5de5\u5177\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u533a\u57df\u6216\u56fe\u6848\u4e2d\u7684\u50cf\u7d20\u6765\u4fee\u590d\u9009\u4e2d\u7684\u533a\u57df\u3002\u4fee\u8865\u5de5\u5177\u4f1a\u5c06\u9009\u533a\u5185\u50cf\u7d20\u7684\u7eb9\u7406\u3001\u5149\u7167\u548c\u9634\u5f71\u7b49\u5185\u5bb9\u4e0e\u6e90\u50cf\u7d20\u8fdb\u884c\u5339\u914d\uff0c\u8ba1\u7b97\u51fa\u6700\u4f73\u7684\u4fee\u590d\u6548\u679c\u3002","title":"\u4fee\u8865\u5de5\u5177"},{"location":"PS/PS4/#_11","text":"\u4f7f\u7528\u4fee\u8865\u5de5\u5177\u53bb\u9664\u6587\u5b57","title":"\u4fee\u8865\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_12","text":"\u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177\u662fCS6\u7248\u672c\u4e2d\u65b0\u589e\u52a0\u7684\u667a\u80fd\u5de5\u5177\uff0c\u6839\u636e\u8bbe\u7f6e\u7684\u5c5e\u6027\u662f\u6269\u5c55\uff08\u590d\u5236\uff09\u6216\u79fb\u52a8\uff0c\u5b9e\u73b0\u9009\u62e9\u5185\u5bb9\u7684\u590d\u5236\u6216\u662f\u79fb\u52a8\u64cd\u4f5c\uff0c\u7531\u7cfb\u7edf\u81ea\u52a8\u5bf9\u9009\u533a\u7684\u8fb9\u7f18\u8fdb\u884c\u8ba1\u7b97\uff0c\u8f7b\u677e\u5b9e\u73b0\u201c\u4e7e\u5764\u5927\u632a\u79fb\u201d\u3002 \u4f7f\u7528\u201c\u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177\u201d\u53ef\u4ee5\u5728\u65e0\u9700\u590d\u6742\u56fe\u5c42\u6216\u6162\u901f\u7cbe\u786e\u7684\u9009\u62e9\u9009\u533a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u5730\u91cd\u6784\u56fe\u50cf\u3002\u9996\u5148\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177\u201d\uff0c\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u533a\u57df\uff0c\u5e76\u5c06\u5f71\u50cf\u4efb\u610f\u5730\u79fb\u52a8\u5230\u6307\u5b9a\u7684\u533a\u5757\u4e2d\uff0c\u8fd9\u65f6 Photoshop \u5c31\u4f1a\u81ea\u52a8\u5c06\u5f71\u50cf\u4e0e\u56db\u5468\u7684\u666f\u7269\u878d\u5408\u5728\u4e00\u8d77\uff0c\u800c\u539f\u59cb\u7684\u533a\u57df\u5219\u4f1a\u8fdb\u884c\u667a\u80fd\u586b\u5145\u3002","title":"\u5185\u5bb9\u611f\u77e5\u79fb\u52a8\u5de5\u5177"},{"location":"PS/PS4/#_13","text":"\u5728\u5149\u7ebf\u8f83\u6697\u7684\u73af\u5883\u4e2d\u7167\u76f8\u65f6\uff0c\u7531\u4e8e\u4e3b\u4f53\u7684\u8679\u819c\u5f20\u5f00\u5f97\u5f88\u5bbd\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u201c\u7ea2\u773c\u201d\u73b0\u8c61\u3002\u201c\u7ea2\u773c\u5de5\u5177\u201d\u53ef\u4ee5\u901a\u8fc7\u5728\u77b3\u5b54\u5904\u5355\u51fb\uff0c\u5feb\u901f\u53bb\u9664\u7531\u95ea\u5149\u706f\u5bfc\u81f4\u7684\u7ea2\u8272\u53cd\u5149\u3002","title":"\u7ea2\u773c\u5de5\u5177"},{"location":"PS/PS4/#_14","text":"","title":"\u5386\u53f2\u8bb0\u5f55\u5de5\u5177\u7ec4"},{"location":"PS/PS4/#_15","text":"\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177\u201d\u53ef\u4ee5\u7406\u6027\u3001\u771f\u5b9e\u5730\u8fd8\u539f\u67d0\u4e00\u533a\u57df\u7684\u67d0\u4e00\u6b65\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u6807\u8bb0\u7684\u5386\u53f2\u8bb0\u5f55\u72b6\u6001\u6216\u5feb\u7167\u7528\u4f5c\u6e90\u6570\u636e\u5bf9\u56fe\u50cf\u8fdb\u884c\u4fee\u6539\u3002\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177\u201d\u9700\u8981\u4e0e\u201c\u5386\u53f2\u8bb0\u5f55\u9762\u677f\u201d\u5171\u540c\u4f7f\u7528\uff0c\u9996\u5148\u9700\u8981\u5728\u201c\u5386\u53f2\u8bb0\u5f55\u9762\u677f\u201d\u4e2d\u6807\u8bb0\u4e00\u4e2a\u64cd\u4f5c\u6b65\u9aa4\uff0c\u7136\u540e\u4f7f\u7528\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u201d\u5728\u753b\u9762\u4e2d\u7ed8\u5236\uff0c\u88ab\u7ed8\u5236\u7684\u533a\u57df\u4f1a\u5448\u73b0\u51fa\u6807\u8bb0\u6b65\u9aa4\u7684\u72b6\u6001\u3002","title":"\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177"},{"location":"PS/PS4/#_16","text":"\u4f7f\u7528\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u8fd8\u539f\u5c40\u90e8\u6548\u679c","title":"\u5386\u53f2\u753b\u7b14\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_17","text":"\u4e0e\u201c\u5386\u53f2\u8bb0\u5f55\u753b\u7b14\u5de5\u5177\u201d\u76f8\u4f3c\uff0c\u201c\u5386\u53f2\u8bb0\u5f55\u827a\u672f\u753b\u7b14\u5de5\u5177\u201d\u4e5f\u53ef\u4ee5\u5c06\u6807\u8bb0\u7684\u5386\u53f2\u8bb0\u5f55\u72b6\u6001\u6216\u5feb\u7167\u7528\u4f5c\u6e90\u6570\u636e\u5bf9\u56fe\u50cf\u8fdb\u884c\u4fee\u6539\u3002\u4e0d\u540c\u7684\u662f\uff0c\u201c\u5386\u53f2\u8bb0\u5f55\u827a\u672f\u753b\u7b14\u5de5\u5177\u201d\u5728\u4f7f\u7528\u539f\u59cb\u6570\u636e\u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u4e3a\u56fe\u50cf\u521b\u5efa\u4e0d\u540c\u7684\u989c\u8272\u548c\u827a\u672f\u98ce\u683c\u3002","title":"\u5386\u53f2\u8bb0\u5f55\u827a\u672f\u753b\u7b14\u5de5\u5177"},{"location":"PS/PS4/#_18","text":"","title":"\u6a21\u7cca\u9510\u5316\u5de5\u5177\u7ec4"},{"location":"PS/PS4/#_19","text":"\u201c\u6a21\u7cca\u5de5\u5177\u201d\u53ef\u67d4\u5316\u786c\u8fb9\u7f18\u6216\u51cf\u5c11\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u3002\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u67d0\u4e2a\u533a\u57df\u4e0a\u65b9\u7ed8\u5236\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u8be5\u533a\u57df\u5c31\u8d8a\u6a21 \u7cca\u3002","title":"\u6a21\u7cca\u5de5\u5177"},{"location":"PS/PS4/#_20","text":"\u201c\u9510\u5316\u5de5\u5177\u201d\u4e0e\u201c\u6a21\u7cca\u5de5\u5177\u201d\u76f8\u53cd\uff0c\u53ef\u4ee5\u589e\u5f3a\u56fe\u50cf\u4e2d\u76f8\u90bb\u50cf\u7d20\u4e4b\u95f4\u7684\u5bf9\u6bd4\uff0c\u4ee5\u63d0\u9ad8\u56fe\u50cf\u7684\u6e05\u6670\u5ea6\u3002","title":"\u9510\u5316\u5de5\u5177"},{"location":"PS/PS4/#_21","text":"\u201c\u6d82\u62b9\u5de5\u5177\u201d\u53ef\u4ee5\u6a21\u62df\u624b\u6307\u5212\u8fc7\u6e7f\u6cb9\u6f06\u65f6\u6240\u4ea7\u751f\u7684\u6548\u679c\u3002\u8be5\u5de5\u5177\u53ef\u4ee5\u62fe\u53d6\u9f20\u6807\u5355\u51fb\u5904\u7684\u989c\u8272\uff0c\u5e76\u6cbf\u7740\u62d6\u62fd\u7684\u65b9\u5411\u5c55\u5f00\u8fd9\u79cd\u989c\u8272\u3002","title":"\u6d82\u62b9\u5de5\u5177"},{"location":"PS/PS4/#_22","text":"","title":"\u51cf\u6de1\u52a0\u6df1\u5de5\u5177\u7ec4"},{"location":"PS/PS4/#_23","text":"\u201c\u51cf\u6de1\u5de5\u5177\u201d\u53ef\u4ee5\u5bf9\u56fe\u50cf\u4eae\u90e8\u3001\u4e2d\u95f4\u8c03\u548c\u6697\u90e8\u5206\u522b\u8fdb\u884c\u51cf\u6de1\u5904\u7406\uff0c\u5728\u67d0\u4e2a\u533a\u57df\u4e0a\u65b9\u7ed8\u5236\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u8be5\u533a\u57df\u5c31\u4f1a\u53d8\u5f97\u8d8a\u4eae\u3002","title":"\u51cf\u6de1\u5de5\u5177"},{"location":"PS/PS4/#_24","text":"\u4f7f\u7528\u51cf\u6de1\u5de5\u5177\u7f8e\u767d\u4eba\u50cf","title":"\u51cf\u6de1\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_25","text":"\u201c\u52a0\u6df1\u5de5\u5177\u201d\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u52a0\u6df1\u5904\u7406\uff0c\u5728\u67d0\u4e2a\u533a\u57df\u4e0a\u65b9\u7ed8\u5236\u7684\u6b21\u6570\u8d8a\u591a\uff0c\u8be5\u533a\u57df\u5c31\u4f1a\u53d8\u5f97\u8d8a\u6697\u3002","title":"\u52a0\u6df1\u5de5\u5177"},{"location":"PS/PS4/#_26","text":"\u5229\u7528\u52a0\u6df1\u51cf\u6de1\u5de5\u5177\u8fdb\u884c\u901a\u9053\u62a0\u56fe","title":"\u52a0\u6df1\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_27","text":"\u201c\u6d77\u7ef5\u5de5\u5177\u201d\u53ef\u4ee5\u589e\u52a0\u6216\u964d\u4f4e\u56fe\u50cf\u4e2d\u67d0\u4e2a\u533a\u57df\u7684\u9971\u548c\u5ea6\u3002\u5982\u679c\u662f\u7070\u5ea6\u56fe\u50cf\uff0c\u8be5\u5de5\u5177\u5c06\u901a\u8fc7\u7070\u9636\u8fdc\u79bb\u6216\u9760\u8fd1\u4e2d\u95f4\u7070\u8272\u6765\u589e\u52a0\u6216\u964d\u4f4e\u5bf9\u6bd4\u5ea6\u3002","title":"\u6d77\u7ef5\u5de5\u5177"},{"location":"PS/PS4/#_28","text":"\u4f7f\u7528\u6d77\u7ef5\u5de5\u5177\u5236\u4f5c\u590d\u53e4\u6548\u679c","title":"\u6d77\u7ef5\u5de5\u5177\u7ec3\u4e60"},{"location":"PS/PS4/#_29","text":"\u53bb\u9664\u76b1\u7eb9\u8fd8\u539f\u5e74\u8f7b\u6001 \u4f7f\u7528\u6d82\u62b9\u5de5\u5177\u5236\u4f5c\u70ab\u5f69\u5986\u9762","title":"\u7ec3\u4e60"},{"location":"PS/PS5/","text":"\u4e86\u89e3\u7ed8\u56fe\u6a21\u5f0f \u00b6 \u5f62\u72b6\uff1a\u5728\u5355\u72ec\u7684\u56fe\u5c42\u4e2d\u7ed8\u5236\u4e00\u4e2a\u6216\u591a\u4e2a\u5f62\u72b6\u3002 \u8def\u5f84\uff1a\u5728\u5f53\u524d\u56fe\u5c42\u4e2d\u7ed8\u5236\u4e00\u4e2a\u4e34\u65f6\u5de5\u4f5c\u8def\u5f84\uff0c\u53ef\u968f\u540e\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u9009\u533a\u548c\u77e2\u91cf\u8499\u7248\uff0c\u6216\u8005\u4f7f\u7528\u989c\u8272\u586b\u5145\u548c\u63cf\u8fb9\u4ee5\u521b\u5efa\u6805\u683c\u56fe\u5f62\u3002\u7ed8\u5236\u5b8c\u6210\u540e\u53ef\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u8fdb\u884c\u5b58\u50a8\u3002 \u50cf\u7d20\uff1a\u76f4\u63a5\u5728\u9009\u4e2d\u56fe\u5c42\u4e0a\u7ed8\u5236\uff0c\u4e0e\u7ed8\u753b\u5de5\u5177\u7684\u529f\u80fd\u975e\u5e38\u7c7b\u4f3c\u3002\u5728\u6b64\u6a21\u5f0f\u4e2d\u5de5\u4f5c\u65f6\uff0c\u521b\u5efa\u7684\u662f\u4f4d\u56fe\u56fe\u50cf\uff0c\u800c\u4e0d\u662f\u77e2\u91cf\u56fe\u5f62\u3002\u53ef\u4ee5\u50cf\u5904\u7406\u4efb\u4f55\u6805\u683c\u56fe\u50cf\u4e00\u6837\u6765\u5904\u7406\u7ed8\u5236\u7684\u5f62\u72b6\u3002\u5728\u6b64\u6a21\u5f0f\u4e2d\u53ea\u80fd\u4f7f\u7528\u5f62\u72b6\u5de5\u5177\u3002 \u8ba4\u8bc6\u8def\u5f84 \u00b6 \u8def\u5f84\u662f\u4e00\u79cd\u4e0d\u5305\u542b\u50cf\u7d20\u7684\u8f6e\u5ed3\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u989c\u8272\u586b\u5145\u6216\u63cf\u8fb9\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4f5c\u4e3a\u77e2\u91cf\u8499\u7248\u6765\u63a7\u5236\u56fe\u5c42\u7684\u663e\u793a\u533a \u57df\uff0c\u53ef\u4ee5\u88ab\u4fdd\u5b58\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u6216\u8005\u8f6c\u6362\u4e3a\u9009\u533a\u3002\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u548c\u5f62\u72b6\u5de5\u5177\u90fd\u53ef\u4ee5\u7ed8\u5236\u8def\u5f84\uff0c\u800c\u4e14\u7ed8\u5236\u7684\u8def\u5f84\u53ef\u4ee5\u662f\u5f00\u653e\u5f0f\u3001\u95ed\u5408\u5f0f\u6216\u7ec4\u5408\u5f0f\u3002 \u8ba4\u8bc6\u951a\u70b9 \u00b6 \u8def\u5f84\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u76f4\u7ebf\u6bb5\u6216\u66f2\u7ebf\u6bb5\u7ec4\u6210\uff0c\u951a\u70b9\u6807\u8bb0\u8def\u5f84\u6bb5\u7684\u7aef\u70b9\u3002\u5728\u66f2\u7ebf\u6bb5\u4e0a\uff0c\u6bcf\u4e2a\u9009\u4e2d\u7684\u951a\u70b9\u663e\u793a\u4e00\u6761\u6216\u4e24\u6761\u65b9\u5411\u7ebf\uff0c\u65b9\u5411\u7ebf\u4ee5\u65b9\u5411\u70b9\u7ed3\u675f\uff0c\u65b9\u5411\u7ebf\u548c\u65b9\u5411\u70b9\u7684\u4f4d\u7f6e\u5171\u540c\u51b3\u5b9a\u4e86\u66f2\u7ebf\u6bb5\u7684\u5927\u5c0f\u548c\u5f62\u72b6\u3002 A \u8868\u793a\u66f2\u7ebf\u6bb5\uff0cB \u8868\u793a\u65b9\u5411\u70b9\uff0cC \u8868\u793a\u65b9\u5411\u7ebf\uff0cD \u8868\u793a\u9009\u4e2d\u7684\u951a\u70b9\uff0cE \u8868\u793a\u672a\u9009\u4e2d\u7684\u951a\u70b9\u3002 \u951a\u70b9\u5206\u4e3a\u5e73\u6ed1\u70b9\u548c\u89d2\u70b9\u4e24\u79cd\u7c7b\u578b\u3002\u7531\u5e73\u6ed1\u70b9\u8fde\u63a5\u7684\u8def\u5f84\u6bb5\u53ef\u4ee5\u5f62\u6210\u5e73\u6ed1\u7684\u66f2\u7ebf\uff1b\u7531\u89d2\u70b9\u8fde\u63a5\u7684\u8def\u5f84\u6bb5\u53ef\u4ee5\u5f62\u6210\u76f4\u7ebf\u6216\u8f6c\u6298\u66f2\u7ebf\u3002 \u201d\u5f62\u72b6\u201c\u6a21\u5f0f \u00b6 \u8bbe\u7f6e\u7ed8\u5236\u6a21\u5f0f\u4e3a\u201c\u5f62\u72b6\u201d\u540e\uff0c\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u586b\u5145\u7c7b\u578b\uff0c\u5355\u51fb\u201c\u586b\u5145\u201d\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u201c\u586b\u5145\u201d\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u4ece\u201c\u65e0\u989c\u8272\u201d\u3001\u201c\u7eaf\u8272\u201d\u3001\u201c\u6e10\u53d8\u201d\u548c\u201c\u56fe\u6848\u201d4 \u4e2a\u7c7b\u578b\u4e2d\u9009\u62e9\u4e00\u79cd\u3002 \u5355\u51fb\u201c\u65e0\u989c\u8272\u201d\u6309\u94ae \u5373\u53ef\u53d6\u6d88\u586b\u5145\uff1b\u5355\u51fb\u201c\u7eaf\u8272\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u4ece\u989c\u8272\u5217\u8868\u4e2d\u9009\u62e9\u9884\u8bbe\u989c\u8272\uff0c\u6216\u5355\u51fb\u201c\u62fe\u8272\u5668\u201d\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u62fe\u8272\u5668\u4e2d\u9009\u62e9\u6240\u9700\u989c\u8272\uff1b\u5355\u51fb\u201c\u6e10\u53d8\u201d\u6309\u94ae\uff0c\u5373\u53ef\u8bbe\u7f6e\u6e10\u53d8\u6548\u679c\u7684\u586b\u5145\uff1b\u5355\u51fb\u201c\u56fe\u6848\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u9009\u62e9\u67d0\u79cd\u56fe\u6848\uff0c\u5e76\u8bbe\u7f6e\u5408\u9002\u7684\u7f29\u653e\u6570\u503c\u3002 \u63cf\u8fb9\u4e5f\u53ef\u4ee5\u8fdb\u884c\u201c\u65e0\u989c\u8272\u201d\u3001\u201c\u7eaf\u8272\u201d\u3001\u201c\u6e10\u53d8\u201d\u3001\u201c\u56fe\u6848\u201d4 \u79cd\u7c7b\u578b\u7684\u8bbe\u7f6e\u3002\u8fd8\u53ef\u4ee5\u5bf9\u5f62\u72b6\u63cf\u8fb9\u7c7b\u578b\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u4e0b\u62c9\u5217\u8868\uff0c\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u9009\u62e9\u9884\u8bbe\u7684\u63cf\u8fb9\u7c7b\u578b\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u63cf\u8fb9\u7684\u5bf9\u9f50\u65b9\u5f0f\u3001\u7aef\u70b9\u7c7b\u578b\u4ee5\u53ca\u89d2\u70b9\u7c7b\u578b\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u201c\u66f4\u591a\u9009\u9879\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5728\u5f39\u51fa\u7684\u201c\u63cf\u8fb9\u201d\u5bf9\u8bdd\u6846\u4e2d\u521b\u5efa\u65b0\u7684\u63cf\u8fb9\u7c7b\u578b\u3002 \u201c\u8def\u5f84\u201d\u6a21\u5f0f \u00b6 \u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u5f62\u72b6\u5de5\u5177\uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u8def\u5f84\u201d\u9009\u9879 \uff0c\u53ef\u4ee5\u521b\u5efa\u5de5\u4f5c\u8def\u5f84\u3002\u7ed8\u5236\u5b8c\u6bd5\u540e\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u5feb\u901f\u5730\u5c06\u8def\u5f84\u8f6c\u6362\u4e3a\u9009\u533a\u3001\u8499\u7248\u6216\u5f62\u72b6\u3002 \u201c\u50cf\u7d20\u201d\u6a21\u5f0f \u00b6 \u5728\u4f7f\u7528\u5f62\u72b6\u5de5\u5177\u72b6\u6001\u4e0b\u53ef\u4ee5\u9009\u62e9\u201c\u50cf\u7d20\u201d\u65b9\u5f0f\u3002\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u7ed8\u5236\u6a21\u5f0f\u4e3a\u201c\u50cf\u7d20\u201d\uff0c\u53ef\u8bbe\u7f6e\u5408\u9002\u7684\u6df7\u5408\u6a21\u5f0f\u4e0e\u4e0d\u900f\u660e\u5ea6\u3002\u8fd9\u79cd\u7ed8\u56fe\u6a21\u5f0f\u4f1a\u4ee5\u5f53\u524d\u524d\u666f\u8272\u5728\u6240\u9009\u56fe\u5c42\u4e2d\u8fdb\u884c\u7ed8\u5236\u3002 \u94a2\u7b14\u5de5\u5177\u7ec4 \u00b6 \u94a2\u7b14\u5de5\u5177\u7ec4\u5305\u62ec\u201c\u94a2\u7b14\u5de5\u5177\u201d\u3001\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d \u3001\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d \u3001\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d\u3001\u201c\u8f6c\u6362\u70b9\u5de5\u5177\u201d5\u79cd\u5de5\u5177\uff0c\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u53c8\u53ef\u4ee5\u6269\u5c55\u4e3a\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\u3002\u4f7f\u7528\u94a2\u7b14\u5de5\u5177\u7ec4\u53ef\u4ee5\u7ed8\u5236\u591a\u79cd\u591a\u6837\u7684\u77e2\u91cf\u56fe\u5f62\u3002 \u201c\u94a2\u7b14\u5de5\u5177\u201d \u00b6 \u201c\u94a2\u7b14\u5de5\u5177\u201d\u662f\u6700\u57fa\u672c\u3001\u6700\u5e38\u7528\u7684\u8def\u5f84\u7ed8\u5236\u5de5\u5177\uff0c\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u4ee5\u7ed8\u5236\u4efb\u610f\u5f62\u72b6\u7684\u76f4\u7ebf\u6216\u66f2\u7ebf\u8def\u5f84\u3002\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\u680f\u4e2d\u6709\u4e00\u4e2a\u201c\u6a61\u76ae\u5e26\u201d\u590d\u9009\u6846\uff0c\u9009\u4e2d\u8be5\u590d\u9009\u6846\u540e\uff0c\u53ef\u4ee5\u5728\u79fb\u52a8\u6307\u9488\u65f6\u9884\u89c8\u4e24\u6b21\u5355\u51fb\u4e4b\u95f4\u7684\u8def\u5f84\u6bb5\u3002 \u9009\u4e2d\u201c\u81ea\u52a8\u6dfb\u52a0 / \u5220\u9664\u201d\u590d\u9009\u6846\u540e\uff0c\u5c06\u201c\u94a2\u7b14\u5de5\u5177\u201d\u5b9a\u4f4d\u5230\u6240\u9009\u8def\u5f84\u4e0a\u65b9\u65f6\uff0c\u5b83\u4f1a\u53d8\u6210\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d\uff1b\u5f53\u5c06\u201c\u94a2\u7b14\u5de5\u5177\u201d\u5b9a\u4f4d\u5230\u951a\u70b9\u4e0a\u65b9\u65f6\uff0c\u5b83\u4f1a\u53d8\u6210\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d\u3002 \u9009\u62e9\u8def\u5f84\u533a\u57df\u9009\u9879\u4ee5\u786e\u5b9a\u91cd\u53e0\u8def\u5f84\u7ec4\u4ef6\u5982\u4f55\u4ea4\u53c9\u3002\u5728\u4f7f\u7528\u5f62\u72b6\u5de5\u5177\u7ed8\u5236\u65f6\uff0c\u6309\u4f4f Shift \u952e\u53ef\u4e34\u65f6\u9009\u62e9\u201c\u5408\u5e76\u5f62\u72b6\u201d\u9009\u9879\uff1b\u6309\u4f4f Alt \u952e\u53ef\u4e34\u65f6\u9009\u62e9\u201c\u51cf\u53bb\u9876\u5c42\u5f62\u72b6\u201d\u9009\u9879\u3002 \u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u76f4\u7ebf \u00b6 \u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6309\u94ae\uff0c\u5728\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u8def\u5f84\u201d\u9009\u9879 \uff0c\u5c06\u5149\u6807\u79fb\u81f3\u753b\u9762\u4e2d\uff0c\u5355\u51fb\u53ef\u521b\u5efa\u4e00\u4e2a\u951a \u70b9\u3002\u91ca\u653e\u9f20\u6807\uff0c\u5c06\u5149\u6807\u79fb\u81f3\u4e0b\u4e00\u5904\u5355\u51fb\u53ef\u521b\u5efa\u7b2c\u4e8c\u4e2a\u951a\u70b9\u3002\u4e24\u4e2a\u951a\u70b9\u4f1a\u8fde\u63a5\u6210\u4e00\u6761\u7531\u89d2\u70b9\u5b9a\u4e49\u7684\u76f4\u7ebf\u8def\u5f84\u3002 \u5982\u679c\u8981\u7ed3\u675f\u4e00\u6bb5\u5f00\u653e\u5f0f\u8def\u5f84\u7684\u7ed8\u5236\uff0c\u53ef\u4ee5\u6309\u4f4f Ctrl \u952e\u5e76\u5728\u753b\u9762\u7684\u7a7a\u767d\u5904\u5355\u51fb\u3001\u5355\u51fb\u5176\u4ed6\u5de5\u5177\u6216\u6309 Esc \u952e\u7ed3\u675f\u8def\u5f84\u7684\u7ed8\u5236\u3002 \u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u6ce2\u6d6a\u66f2\u7ebf \u00b6 \u5728\u753b\u5e03\u4e2d\u5355\u51fb\u5373\u53ef\u51fa\u73b0\u4e00\u4e2a\u951a\u70b9\uff0c\u91ca\u653e\u9f20\u6807\uff0c\u79fb\u52a8\u5149\u6807\u5230\u53e6\u5916\u7684\u4f4d\u7f6e\u5355\u51fb\u5e76\u62d6\u52a8\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u5e73\u6ed1\u70b9\u3002 \u5c06\u5149\u6807\u653e\u7f6e\u5728\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5355\u51fb\u5e76\u62d6\u62fd\u5149\u6807\u521b\u5efa\u7b2c\u4e8c\u4e2a\u5e73\u6ed1\u70b9\uff0c\u6ce8\u610f\u8981\u63a7\u5236\u597d\u66f2\u7ebf\u7684\u8d70\u5411\u3002 \u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u591a\u8fb9\u5f62 \u00b6 \u9009\u62e9\u201c \u94a2 \u7b14 \u5de5 \u5177 \u201d\uff0c \u7136 \u540e \u5728 \u9009 \u9879 \u680f \u4e2d \u5355 \u51fb\u201c \u8def\u5f84\u201d\u6309\u94ae,\u7136\u540e\u5728\u753b\u9762\u4e2d\u786e\u5b9a\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u5904\uff0c\u7136\u540e\u5355\u51fb\u521b\u5efa\u4e00\u4e2a\u951a\u70b9\uff0c\u4e24\u4e2a\u951a\u70b9\u4f1a\u8fde\u63a5\u4e3a\u4e00\u6761\u76f4\u7ebf\u8def\u5f84\u3002 \u7ee7\u7eed\u521b\u5efa\u51fa\u951a\u70b9\uff0c\u6700\u540e\u5c06\u5149\u6807\u653e\u7f6e\u5728\u8d77\u70b9\u4e0a\uff0c\u5f53\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\uff0c\u5355\u51fb\u95ed\u5408\u8def\u5f84\uff0c\u5b8c\u6210\u591a\u8fb9\u5f62\u7684\u7ed8\u5236\u3002 \u4f7f\u7528\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u56fe \u00b6 \u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u6bd4\u8f83\u9002\u5408\u7ed8\u5236\u8f83\u968f\u610f\u7684\u56fe\u5f62\uff0c\u5c31\u50cf\u7528\u94c5\u7b14\u5728\u7eb8\u4e0a\u7ed8\u56fe\u4e00\u6837\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5bf9\u8def\u5f84\u8fdb\u884c\u8fdb \u4e00\u6b65\u7684\u8c03\u6574\u3002\u9009\u4e2d\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\uff0c\u5728\u753b\u5e03\u4e2d\u5355\u51fb\u786e\u5b9a\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u7684\u540c\u65f6\u62d6\u52a8\u5149\u6807\uff0c\u753b\u5e03\u4e2d \u4f1a\u81ea\u52a8\u4ee5\u5149\u6807\u6ed1\u52a8\u7684\u8f68\u8ff9\u521b\u5efa\u8def\u5f84\uff0c\u5176\u95f4\u5c06\u5728\u8def\u5f84\u4e0a\u81ea\u52a8\u6dfb\u52a0\u951a\u70b9\u3002 \u5728\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u9009\u9879\u680f\u4e2d\u5305\u542b\u201c\u66f2\u7ebf\u62df\u5408\u201d\u53c2\u6570\u7684\u63a7\u5236\uff0c\u8be5\u503c\u8d8a\u5927\uff0c\u521b\u5efa\u7684\u8def\u5f84\u951a\u70b9\u8d8a\u5c11\uff0c\u8def\u5f84\u8d8a\u7b80\u5355\uff1b\u8be5\u503c\u8d8a\u5c0f\uff0c\u521b\u5efa\u7684\u8def\u5f84\u951a\u70b9\u8d8a\u591a\uff0c\u8def\u5f84\u7ec6\u8282\u8d8a\u591a\u3002 \u4f7f\u7528\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u56fe \u00b6 \u5728\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\u680f\u4e2d\u6709\u4e00\u4e2a\u201c\u78c1\u6027\u7684\u201d\u590d\u9009\u6846\uff0c\u9009\u4e2d\u8be5\u590d\u9009\u6846\uff0c\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u5c06\u5207\u6362\u4e3a\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\uff0c\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u4ee5\u50cf\u4f7f\u7528\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u4e00\u6837\u5feb\u901f\u52fe\u52d2\u51fa\u5bf9\u8c61\u7684\u8f6e\u5ed3\u8def\u5f84\u3002\u5728\u9009\u9879\u680f\u4e2d\u53ef\u6253\u5f00\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\uff0c\u8fd9\u540c\u65f6\u4e5f\u662f\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\u3002 \u4f7f\u7528\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d \u00b6 \u4f7f\u7528\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d\u53ef\u4ee5\u76f4\u63a5\u5728\u8def\u5f84\u4e0a\u6dfb\u52a0\u951a\u70b9\u3002\u5728\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7684\u72b6\u6001\u4e0b\uff0c\u5c06\u5149\u6807\u653e\u5728\u8def\u5f84\u4e0a\uff0c\u5f85\u5149\u6807\u53d8\u6210 \u5f62\u72b6\u65f6\uff0c\u5728\u8def\u5f84\u4e0a\u5355\u51fb\uff0c\u4e5f\u53ef\u6dfb\u52a0\u4e00\u4e2a\u951a\u70b9\u3002 \u4f7f\u7528\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d \u00b6 \u4f7f\u7528\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d\u53ef\u4ee5\u5220\u9664\u8def\u5f84\u4e0a\u7684\u951a\u70b9\u3002\u5c06\u5149\u6807\u653e\u5728\u951a\u70b9\u4e0a\uff0c\u5f53\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\uff0c\u5355\u51fb\u5373\u53ef\u5220\u9664\u951a\u70b9\u3002\u5728\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7684\u72b6\u6001\u4e0b\uff0c\u76f4\u63a5\u5c06\u5149\u6807\u79fb\u52a8\u5230\u951a\u70b9\u4e0a\uff0c\u5149\u6807\u4e5f\u4f1a\u6539\u53d8\u5f62\u72b6\u3002 \u4f7f\u7528\u201c\u8f6c\u6362\u70b9\u5de5\u5177\u201d\u8c03\u6574\u8def\u5f84\u5f27\u5ea6 \u00b6 \u4f7f\u7528\u8be5\u5de5\u5177\u5728\u89d2\u70b9\u4e0a\u5355\u51fb\uff0c\u53ef\u4ee5\u5c06\u89d2\u70b9\u8f6c\u6362\u4e3a\u5e73\u6ed1\u70b9\u3002\u5728\u5e73\u6ed1\u70b9\u4e0a\u5355\u51fb\uff0c\u53ef\u4ee5\u5c06\u5e73\u6ed1\u70b9\u8f6c\u6362\u4e3a\u89d2\u70b9\u3002 \u8def\u5f84\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u9009\u62e9\u5e76\u79fb\u52a8\u8def\u5f84 \u00b6 \u4f7f\u7528\u201c\u8def\u5f84\u9009\u62e9\u5de5\u5177\u201d\uff0c\u5355\u51fb\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c \u53ef\u4ee5\u9009\u62e9\u5355\u4e2a\u7684\u8def\u5f84\uff1b\u6309\u4f4f shift \u952e\u5355\u51fb\u53ef\u53cc\u9009\u62e9\u591a\u4e2a\u8def\u5f84\uff0c\u540c\u65f6\u5b83\u53ef\u7528\u6765\u79fb\u52a8\u3001\u7ec4\u5408\u3001\u5bf9\u9f50\u548c\u5206\u5e03\u8def\u5f84\u3002\u6309\u4f4f ctrl \u952e\u5e76\u5355\u51fb\u53ef\u53cc\u5c06\u5f53\u524d\u5de5\u5177\u8f6c\u5316\u4e3a\u201c\u76f4\u63a5\u9009\u62e9\u5de5\u5177\u201d\u3002 \u9009\u62e9\u5e76\u8c03\u6574\u951a\u70b9 \u00b6 \u201c\u76f4\u63a5\u9009\u62e9\u5de5\u5177\u201d\uff0c\u4e3b\u8981\u7528\u6765\u9009\u62e9\u8def\u5f84\u4e0a\u7684\u5355\u4e2a\u6216\u4e2a\u951a\u70b9\uff0c\u53ef\u79fb\u52a8\u951a\u70b9\u3001\u8c03\u6574\u65b9\u5411\u7ebf\u3002\u5355\u51fb\u53ef\u4ee5\u9009\u4e2d\u5176\u4e2d\u67d0\u4e00\u4e2a\u951a\u70b9\uff1b\u6846\u9009\u6216\u6309\u4f4f Shift \u952e\u5355\u51fb\u53ef\u4ee5\u9009\u62e9\u591a\u4e2a\u951a\u70b9\uff1b\u6309\u4f4f ctrl \u952e\u5e76\u5355\u51fb\u53ef\u53cc\u5c06\u5f53\u524d\u5de5\u5177\u8f6c\u5316\u4e3a\u201c\u8def\u5f84\u9009\u62e9\u5de5\u5177\u201d\u3002 \u53d8\u6362\u8def\u5f84 \u00b6 \u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u9009\u62e9\u8def\u5f84\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u53d8\u6362\u8def\u5f84\u201d\u83dc\u5355\u4e0b\u7684\u547d\u4ee4\u5373\u53ef\u5bf9\u5176\u8fdb\u884c\u76f8\u5e94\u7684\u53d8\u6362\u3002\u53d8\u6362\u8def\u5f84\u4e0e\u53d8\u6362\u56fe\u50cf\u7684\u65b9\u6cd5\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8fdb\u884c\u91cd\u590d\u8bb2\u89e3\u3002 \u5b9a\u4e49\u4e3a\u81ea\u5b9a\u5f62\u72b6 \u00b6 \u5b9a\u4e49\u5f62\u72b6\u4e0e\u5b9a\u4e49\u56fe\u6848\u3001\u6837\u5f0f\u753b\u7b14\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4fdd\u5b58\u5230\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u7684\u5f62\u72b6\u9884\u8bbe\u4e2d\uff0c\u4ee5\u540e\u5982\u679c\u9700\u8981\u7ed8\u5236\u76f8\u540c\u7684\u5f62\u72b6\uff0c\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u81ea\u5b9a\u7684\u5f62\u72b6\u3002\u7ed8\u5236\u8def\u5f84\u4ee5\u540e\uff0c\u6267\u884c\u201c\u7f16\u8f91> \u5b9a\u4e49\u81ea\u5b9a\u5f62\u72b6\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u5f62\u72b6\u3002 \u5728\u5f39\u51fa\u7684\u201c\u5f62\u72b6\u540d\u79f0\u201d\u5bf9\u8bdd\u6846\u4e2d\u4e3a\u5f62\u72b6\u53d6\u4e00\u4e2a\u540d\u5b57\u3002\u5728\u5de5\u5177\u7bb1\u4e2d\u5355\u51fb\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u6309\u94ae \uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u5f62\u72b6\u201d\u9009\u9879\u540e\u9762\u7684\u5012\u4e09\u89d2\u5f62\u56fe\u6807 \uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u81ea\u5b9a\u5f62\u72b6\u201d\u9762\u677f\u4e2d\u5c31\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u3002 \u5c06\u8def\u5f84\u8f6c\u6362\u4e3a\u9009\u533a \u00b6 \u5728\u8def\u5f84\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5efa\u7acb\u9009\u533a\u201d\u547d\u4ee4\uff0c\u5728\u5f39\u51fa\u7684\u201c\u5efa\u7acb\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u76f8\u5173\u53c2\u6570\u3002\u6309\u4f4f Ctrl \u952e\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8def\u5f84\u7684\u7f29\u7565\u56fe\uff0c\u6216\u5355\u51fb\u201c\u5c06\u8def\u5f84\u4f5c\u4e3a\u9009\u533a\u8f7d\u5165\u201d\u6309\u94ae\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5feb\u6377\u952e\uff0c\u6309 Ctrl+Enter \u7ec4\u5408\u952e\u5c06\u8def\u5f84\u8f6c\u6362\u4e3a\u9009\u533a\u3002 \u586b\u5145\u8def\u5f84 \u00b6 \u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6216\u5f62\u72b6\u5de5\u5177\uff08\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u9664\u5916\uff09\u72b6\u6001\u4e0b\uff0c\u5728\u7ed8\u5236\u5b8c\u6210\u7684\u8def\u5f84\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u9009\u62e9\u201c\u586b\u5145\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u586b\u5145\u5b50\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u201c\u586b\u5145\u5b50\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u5bf9\u586b\u5145\u5185\u5bb9\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u5305\u542b\u591a\u79cd\u7c7b\u578b\u7684\u586b\u5145\u5185\u5bb9\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u586b\u5145\u5185\u5bb9\u7684\u6df7\u5408\u6a21\u5f0f\u4ee5\u53ca\u4e0d\u900f\u660e\u5ea6\u7b49\u5c5e\u6027\u3002 \u63cf\u8fb9\u8def\u5f84 \u00b6 \u5728\u63cf\u8fb9\u4e4b\u524d\u9700\u8981\u5148\u8bbe\u7f6e\u597d\u63cf\u8fb9\u5de5\u5177\u7684\u53c2\u6570\u3002\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6216\u5f62\u72b6\u5de5\u5177\u7ed8\u5236\u51fa\u8def\u5f84\u3002\u5728\u8def\u5f84\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u63cf\u8fb9\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u63cf\u8fb9\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u9009\u62e9\u63cf\u8fb9\u7684\u5de5\u5177\u3002 \u8def\u5f84\u9762\u677f \u00b6 \u201c\u8def\u5f84\u201d\u9762\u677f \u00b6 \u6267\u884c\u201c\u7a97\u53e3 > \u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8def\u5f84\u201d\u9762\u677f\u3002 \u5b58\u50a8\u5de5\u4f5c\u8def\u5f84 \u00b6 \u5de5\u4f5c\u8def\u5f84\u662f\u4e34\u65f6\u8def\u5f84\uff0c\u662f\u5728\u6ca1\u6709\u65b0\u5efa\u8def\u5f84\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7b49\u7ed8\u5236\u7684\u8def\u5f84\uff0c\u4e00\u65e6\u91cd\u65b0\u7ed8\u5236\u4e86\u8def\u5f84\uff0c\u539f\u6709\u7684\u8def\u5f84\u5c06\u88ab\u5f53\u524d\u8def\u5f84\u6240\u66ff\u4ee3\u3002 \u5982\u679c\u4e0d\u60f3\u5de5\u4f5c\u8def\u5f84\u88ab\u66ff\u6362\u6389\uff0c\u53ef\u4ee5\u53cc\u51fb\u5176\u7f29\u7565\u56fe\uff0c\u6253\u5f00\u201c\u5b58\u50a8\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\uff0c\u5c06\u5176\u4fdd\u5b58\u8d77\u6765 \u65b0\u5efa\u8def\u5f84 \u00b6 \u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e0b\u5355\u51fb\u201c\u521b\u5efa\u65b0\u8def\u5f84\u201d\u6309\u94ae \uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u8def\u5f84\u5c42\uff0c\u6b64\u540e\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7b49\u7ed8\u5236\u7684\u8def\u5f84\u90fd\u5c06 \u5305\u542b\u5728\u8be5\u8def\u5f84\u5c42\u4e2d\u3002\u6309\u4f4f Alt \u952e\u7684\u540c\u65f6\u5355\u51fb\u201c\u521b\u5efa\u65b0\u8def\u5f84\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5f39\u51fa\u201c\u65b0\u5efa\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\uff0c\u53ef\u4ece\u4e2d\u8fdb\u884c\u540d\u79f0\u7684\u8bbe\u7f6e\u3002 \u590d\u5236/\u7c98\u8d34\u8def\u5f84 \u00b6 \u5982\u679c\u8981\u590d\u5236\u8def\u5f84\uff0c\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u62d6\u62fd\u9700\u8981\u590d\u5236\u7684\u8def\u5f84\u5230 \u201c\u521b\u5efa\u65b0\u8def\u5f84\u201d\u6309\u94ae \u4e0a\uff0c\u5373\u53ef\u590d\u5236\u51fa\u8def\u5f84\u7684\u526f\u672c\u3002\u5982\u679c\u8981\u5c06\u5f53\u524d\u6587\u6863\u4e2d\u7684\u8def\u5f84\u590d\u5236\u5230\u5176\u4ed6\u6587\u6863\u4e2d\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u7f16\u8f91 > \u62f7\u8d1d\u201d\u547d\u4ee4\uff0c\u7136\u540e\u5207\u6362\u5230\u5176\u4ed6\u6587\u6863\uff0c\u6267\u884c\u201c\u7f16\u8f91> \u7c98\u8d34\u201d\u547d\u4ee4\u5373\u53ef\u3002 \u5220\u9664\u8def\u5f84 \u00b6 \u5982\u679c\u8981\u5220\u9664\u67d0\u4e2a\u4e0d\u9700\u8981\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5c06\u5176\u62d6\u62fd\u5230\u201c\u8def\u5f84\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u5f53\u524d\u8def\u5f84\u201d\u6309\u94ae\u4e0a\uff0c\u6216\u8005\u76f4\u63a5\u6309 Delete \u952e\u5c06\u5176\u5220\u9664\u3002 \u663e\u793a\u8def\u5f84 \u00b6 \u5982\u679c\u8981\u5c06\u8def\u5f84\u5728\u6587\u6863\u7a97\u53e3\u4e2d\u663e\u793a\u51fa\u6765\uff0c\u53ef\u4ee5\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8be5\u8def\u5f84\u3002 \u9690\u85cf\u8def\u5f84 \u00b6 \u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8def\u5f84\u4ee5\u540e\uff0c\u6587\u6863\u7a97\u53e3\u4e2d\u5c31\u4f1a\u59cb\u7ec8\u663e\u793a\u8be5\u8def\u5f84\uff0c\u5982\u679c\u5e0c\u671b\u5c06\u5176\u9690\u85cf\uff0c\u53ef\u4ee5\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u7684\u7a7a\u767d\u533a\u57df\u5355\u51fb\uff0c\u5373\u53ef\u53d6\u6d88\u5bf9\u8def\u5f84\u7684\u9009\u62e9\u3002 \u5f62\u72b6\u5de5\u5177\u7ec4 \u00b6 Photoshop \u7684\u5f62\u72b6\u5de5\u5177\u7ec4\u4e2d\u5305\u542b\u591a\u79cd\u77e2\u91cf\u5f62\u72b6\u5de5\u5177\uff0c\u5982\u201c\u77e9\u5f62\u5de5\u5177\u201d \u3001\u201c\u5706\u89d2\u77e9\u5f62\u5de5\u5177\u201d \u3001\u201c\u692d\u5706\u5de5\u5177\u201d \u3001\u201c\u591a\u8fb9\u5f62\u5de5\u5177\u201d \u3001\u201c\u76f4\u7ebf\u5de5\u5177\u201d \u548c\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d \uff0c\u800c\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d \u4e2d\u53c8\u5305\u542b\u975e\u5e38\u591a\u7684\u5f62\u72b6\uff0c\u5e76\u4e14\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u5176\u4ed6\u5f62\u72b6\u3002 \u4f7f\u7528\u201c\u77e9\u5f62\u5de5\u5177\u201d \u00b6 \u201c\u77e9\u5f62\u5de5\u5177\u201d\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e\u201c\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u7ed8\u5236\u51fa\u6b63\u65b9\u5f62\u548c\u77e9\u5f62\u3002\u7ed8\u5236\u65f6\u6309\u4f4f Shift \u952e\u53ef\u4ee5\u7ed8\u5236\u51fa\u6b63\u65b9\u5f62\uff1b\u6309\u4f4f Alt \u952e\u53ef\u4ee5\u4ee5\u9f20\u6807\u5355\u51fb\u70b9\u4e3a\u4e2d\u5fc3\u7ed8\u5236\u77e9\u5f62\uff1b\u6309\u4f4f Shift+Alt \u7ec4\u5408\u952e\u53ef\u4ee5\u4ee5\u9f20\u6807\u5355\u51fb\u70b9\u4e3a\u4e2d\u5fc3\u7ed8\u5236\u6b63\u65b9\u5f62\u3002\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb \u56fe\u6807\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u77e9\u5f62\u5de5\u5177\u201d\u7684\u8bbe\u7f6e\u9009\u9879\u3002 \u4f7f\u7528\u201c\u5706\u89d2\u77e9\u5f62\u5de5\u5177\u201d \u00b6 \u201c\u5706\u89d2\u77e9\u5f62\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u5177\u6709\u5706\u89d2\u6548\u679c\u7684\u77e9\u5f62\uff0c\u5176\u521b\u5efa\u65b9\u6cd5\u53ca\u9009\u9879\u4e0e\u201c\u77e9\u5f62\u5de5\u5177\u201d\u5b8c\u5168\u76f8\u540c\u3002\u5728\u9009\u9879\u680f\u4e2d\u53ef\u4ee5 \u5bf9\u201c\u534a\u5f84\u201d\u6570\u503c\u8fdb\u884c\u8bbe\u7f6e\uff0c\u201c\u534a\u5f84\u201d\u9009\u9879\u7528\u6765\u8bbe\u7f6e\u5706\u89d2\u7684\u534a\u5f84\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u5706\u89d2\u8d8a\u5927\u3002 \u4f7f\u7528\u201c\u692d\u5706\u5de5\u5177\u201d \u00b6 \u5982\u679c\u8981\u521b\u5efa\u692d\u5706\uff0c\u76f4\u63a5\u62d6\u62fd\u9f20\u6807\u8fdb\u884c\u521b\u5efa\u5373\u53ef\uff1b\u5982\u679c\u8981\u521b\u5efa\u5706\u5f62\uff0c\u53ef\u4ee5\u6309\u4f4f Shift \u952e\u6216 Shift+Alt \u7ec4\u5408\u952e\uff08\u4ee5\u9f20\u6807\u5355\u51fb\u70b9\u4e3a\u4e2d\u5fc3\uff09\u8fdb\u884c\u521b\u5efa\u3002 \u4f7f\u7528\u201c\u591a\u8fb9\u5f62\u5de5\u5177\u201d \u00b6 \u4f7f\u7528\u201c\u591a\u8fb9\u5f62\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u6b63\u591a\u8fb9\u5f62\uff08\u6700\u5c11\u4e3a 3 \u6761\u8fb9\uff09\u548c\u661f\u5f62\uff0c\u5176\u8bbe\u7f6e\u9009\u9879\u5982\u56fe\u3002 \u4f7f\u7528\u201c\u76f4\u7ebf\u5de5\u5177\u201d \u00b6 \u4f7f\u7528\u201c\u76f4\u7ebf\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u76f4\u7ebf\u548c\u5e26\u6709\u7bad\u5934\u7684\u8def\u5f84\u3002 \u4f7f\u7528\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d \u00b6 \u4f7f\u7528\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u975e\u5e38\u591a\u7684\u5f62\u72b6\u3002\u8fd9\u4e9b\u5f62\u72b6\u65e2\u53ef\u4ee5\u662f Photoshop\u7684\u9884\u8bbe\uff0c\u4e5f\u53ef\u4ee5\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u6216\u52a0\u8f7d\u7684\u5916\u90e8\u5f62\u72b6\u3002","title":"\u77e2\u91cf\u5de5\u5177\u4e0e\u8def\u5f84"},{"location":"PS/PS5/#_1","text":"\u5f62\u72b6\uff1a\u5728\u5355\u72ec\u7684\u56fe\u5c42\u4e2d\u7ed8\u5236\u4e00\u4e2a\u6216\u591a\u4e2a\u5f62\u72b6\u3002 \u8def\u5f84\uff1a\u5728\u5f53\u524d\u56fe\u5c42\u4e2d\u7ed8\u5236\u4e00\u4e2a\u4e34\u65f6\u5de5\u4f5c\u8def\u5f84\uff0c\u53ef\u968f\u540e\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u9009\u533a\u548c\u77e2\u91cf\u8499\u7248\uff0c\u6216\u8005\u4f7f\u7528\u989c\u8272\u586b\u5145\u548c\u63cf\u8fb9\u4ee5\u521b\u5efa\u6805\u683c\u56fe\u5f62\u3002\u7ed8\u5236\u5b8c\u6210\u540e\u53ef\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u8fdb\u884c\u5b58\u50a8\u3002 \u50cf\u7d20\uff1a\u76f4\u63a5\u5728\u9009\u4e2d\u56fe\u5c42\u4e0a\u7ed8\u5236\uff0c\u4e0e\u7ed8\u753b\u5de5\u5177\u7684\u529f\u80fd\u975e\u5e38\u7c7b\u4f3c\u3002\u5728\u6b64\u6a21\u5f0f\u4e2d\u5de5\u4f5c\u65f6\uff0c\u521b\u5efa\u7684\u662f\u4f4d\u56fe\u56fe\u50cf\uff0c\u800c\u4e0d\u662f\u77e2\u91cf\u56fe\u5f62\u3002\u53ef\u4ee5\u50cf\u5904\u7406\u4efb\u4f55\u6805\u683c\u56fe\u50cf\u4e00\u6837\u6765\u5904\u7406\u7ed8\u5236\u7684\u5f62\u72b6\u3002\u5728\u6b64\u6a21\u5f0f\u4e2d\u53ea\u80fd\u4f7f\u7528\u5f62\u72b6\u5de5\u5177\u3002","title":"\u4e86\u89e3\u7ed8\u56fe\u6a21\u5f0f"},{"location":"PS/PS5/#_2","text":"\u8def\u5f84\u662f\u4e00\u79cd\u4e0d\u5305\u542b\u50cf\u7d20\u7684\u8f6e\u5ed3\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u989c\u8272\u586b\u5145\u6216\u63cf\u8fb9\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4f5c\u4e3a\u77e2\u91cf\u8499\u7248\u6765\u63a7\u5236\u56fe\u5c42\u7684\u663e\u793a\u533a \u57df\uff0c\u53ef\u4ee5\u88ab\u4fdd\u5b58\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u6216\u8005\u8f6c\u6362\u4e3a\u9009\u533a\u3002\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u548c\u5f62\u72b6\u5de5\u5177\u90fd\u53ef\u4ee5\u7ed8\u5236\u8def\u5f84\uff0c\u800c\u4e14\u7ed8\u5236\u7684\u8def\u5f84\u53ef\u4ee5\u662f\u5f00\u653e\u5f0f\u3001\u95ed\u5408\u5f0f\u6216\u7ec4\u5408\u5f0f\u3002","title":"\u8ba4\u8bc6\u8def\u5f84"},{"location":"PS/PS5/#_3","text":"\u8def\u5f84\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u76f4\u7ebf\u6bb5\u6216\u66f2\u7ebf\u6bb5\u7ec4\u6210\uff0c\u951a\u70b9\u6807\u8bb0\u8def\u5f84\u6bb5\u7684\u7aef\u70b9\u3002\u5728\u66f2\u7ebf\u6bb5\u4e0a\uff0c\u6bcf\u4e2a\u9009\u4e2d\u7684\u951a\u70b9\u663e\u793a\u4e00\u6761\u6216\u4e24\u6761\u65b9\u5411\u7ebf\uff0c\u65b9\u5411\u7ebf\u4ee5\u65b9\u5411\u70b9\u7ed3\u675f\uff0c\u65b9\u5411\u7ebf\u548c\u65b9\u5411\u70b9\u7684\u4f4d\u7f6e\u5171\u540c\u51b3\u5b9a\u4e86\u66f2\u7ebf\u6bb5\u7684\u5927\u5c0f\u548c\u5f62\u72b6\u3002 A \u8868\u793a\u66f2\u7ebf\u6bb5\uff0cB \u8868\u793a\u65b9\u5411\u70b9\uff0cC \u8868\u793a\u65b9\u5411\u7ebf\uff0cD \u8868\u793a\u9009\u4e2d\u7684\u951a\u70b9\uff0cE \u8868\u793a\u672a\u9009\u4e2d\u7684\u951a\u70b9\u3002 \u951a\u70b9\u5206\u4e3a\u5e73\u6ed1\u70b9\u548c\u89d2\u70b9\u4e24\u79cd\u7c7b\u578b\u3002\u7531\u5e73\u6ed1\u70b9\u8fde\u63a5\u7684\u8def\u5f84\u6bb5\u53ef\u4ee5\u5f62\u6210\u5e73\u6ed1\u7684\u66f2\u7ebf\uff1b\u7531\u89d2\u70b9\u8fde\u63a5\u7684\u8def\u5f84\u6bb5\u53ef\u4ee5\u5f62\u6210\u76f4\u7ebf\u6216\u8f6c\u6298\u66f2\u7ebf\u3002","title":"\u8ba4\u8bc6\u951a\u70b9"},{"location":"PS/PS5/#_4","text":"\u8bbe\u7f6e\u7ed8\u5236\u6a21\u5f0f\u4e3a\u201c\u5f62\u72b6\u201d\u540e\uff0c\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u586b\u5145\u7c7b\u578b\uff0c\u5355\u51fb\u201c\u586b\u5145\u201d\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u201c\u586b\u5145\u201d\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u4ece\u201c\u65e0\u989c\u8272\u201d\u3001\u201c\u7eaf\u8272\u201d\u3001\u201c\u6e10\u53d8\u201d\u548c\u201c\u56fe\u6848\u201d4 \u4e2a\u7c7b\u578b\u4e2d\u9009\u62e9\u4e00\u79cd\u3002 \u5355\u51fb\u201c\u65e0\u989c\u8272\u201d\u6309\u94ae \u5373\u53ef\u53d6\u6d88\u586b\u5145\uff1b\u5355\u51fb\u201c\u7eaf\u8272\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u4ece\u989c\u8272\u5217\u8868\u4e2d\u9009\u62e9\u9884\u8bbe\u989c\u8272\uff0c\u6216\u5355\u51fb\u201c\u62fe\u8272\u5668\u201d\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u62fe\u8272\u5668\u4e2d\u9009\u62e9\u6240\u9700\u989c\u8272\uff1b\u5355\u51fb\u201c\u6e10\u53d8\u201d\u6309\u94ae\uff0c\u5373\u53ef\u8bbe\u7f6e\u6e10\u53d8\u6548\u679c\u7684\u586b\u5145\uff1b\u5355\u51fb\u201c\u56fe\u6848\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u9009\u62e9\u67d0\u79cd\u56fe\u6848\uff0c\u5e76\u8bbe\u7f6e\u5408\u9002\u7684\u7f29\u653e\u6570\u503c\u3002 \u63cf\u8fb9\u4e5f\u53ef\u4ee5\u8fdb\u884c\u201c\u65e0\u989c\u8272\u201d\u3001\u201c\u7eaf\u8272\u201d\u3001\u201c\u6e10\u53d8\u201d\u3001\u201c\u56fe\u6848\u201d4 \u79cd\u7c7b\u578b\u7684\u8bbe\u7f6e\u3002\u8fd8\u53ef\u4ee5\u5bf9\u5f62\u72b6\u63cf\u8fb9\u7c7b\u578b\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u4e0b\u62c9\u5217\u8868\uff0c\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u9009\u62e9\u9884\u8bbe\u7684\u63cf\u8fb9\u7c7b\u578b\uff0c\u8fd8\u53ef\u4ee5\u5bf9\u63cf\u8fb9\u7684\u5bf9\u9f50\u65b9\u5f0f\u3001\u7aef\u70b9\u7c7b\u578b\u4ee5\u53ca\u89d2\u70b9\u7c7b\u578b\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u201c\u66f4\u591a\u9009\u9879\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5728\u5f39\u51fa\u7684\u201c\u63cf\u8fb9\u201d\u5bf9\u8bdd\u6846\u4e2d\u521b\u5efa\u65b0\u7684\u63cf\u8fb9\u7c7b\u578b\u3002","title":"\u201d\u5f62\u72b6\u201c\u6a21\u5f0f"},{"location":"PS/PS5/#_5","text":"\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u5f62\u72b6\u5de5\u5177\uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u8def\u5f84\u201d\u9009\u9879 \uff0c\u53ef\u4ee5\u521b\u5efa\u5de5\u4f5c\u8def\u5f84\u3002\u7ed8\u5236\u5b8c\u6bd5\u540e\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u5feb\u901f\u5730\u5c06\u8def\u5f84\u8f6c\u6362\u4e3a\u9009\u533a\u3001\u8499\u7248\u6216\u5f62\u72b6\u3002","title":"\u201c\u8def\u5f84\u201d\u6a21\u5f0f"},{"location":"PS/PS5/#_6","text":"\u5728\u4f7f\u7528\u5f62\u72b6\u5de5\u5177\u72b6\u6001\u4e0b\u53ef\u4ee5\u9009\u62e9\u201c\u50cf\u7d20\u201d\u65b9\u5f0f\u3002\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u7ed8\u5236\u6a21\u5f0f\u4e3a\u201c\u50cf\u7d20\u201d\uff0c\u53ef\u8bbe\u7f6e\u5408\u9002\u7684\u6df7\u5408\u6a21\u5f0f\u4e0e\u4e0d\u900f\u660e\u5ea6\u3002\u8fd9\u79cd\u7ed8\u56fe\u6a21\u5f0f\u4f1a\u4ee5\u5f53\u524d\u524d\u666f\u8272\u5728\u6240\u9009\u56fe\u5c42\u4e2d\u8fdb\u884c\u7ed8\u5236\u3002","title":"\u201c\u50cf\u7d20\u201d\u6a21\u5f0f"},{"location":"PS/PS5/#_7","text":"\u94a2\u7b14\u5de5\u5177\u7ec4\u5305\u62ec\u201c\u94a2\u7b14\u5de5\u5177\u201d\u3001\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d \u3001\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d \u3001\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d\u3001\u201c\u8f6c\u6362\u70b9\u5de5\u5177\u201d5\u79cd\u5de5\u5177\uff0c\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u53c8\u53ef\u4ee5\u6269\u5c55\u4e3a\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\u3002\u4f7f\u7528\u94a2\u7b14\u5de5\u5177\u7ec4\u53ef\u4ee5\u7ed8\u5236\u591a\u79cd\u591a\u6837\u7684\u77e2\u91cf\u56fe\u5f62\u3002","title":"\u94a2\u7b14\u5de5\u5177\u7ec4"},{"location":"PS/PS5/#_8","text":"\u201c\u94a2\u7b14\u5de5\u5177\u201d\u662f\u6700\u57fa\u672c\u3001\u6700\u5e38\u7528\u7684\u8def\u5f84\u7ed8\u5236\u5de5\u5177\uff0c\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u4ee5\u7ed8\u5236\u4efb\u610f\u5f62\u72b6\u7684\u76f4\u7ebf\u6216\u66f2\u7ebf\u8def\u5f84\u3002\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\u680f\u4e2d\u6709\u4e00\u4e2a\u201c\u6a61\u76ae\u5e26\u201d\u590d\u9009\u6846\uff0c\u9009\u4e2d\u8be5\u590d\u9009\u6846\u540e\uff0c\u53ef\u4ee5\u5728\u79fb\u52a8\u6307\u9488\u65f6\u9884\u89c8\u4e24\u6b21\u5355\u51fb\u4e4b\u95f4\u7684\u8def\u5f84\u6bb5\u3002 \u9009\u4e2d\u201c\u81ea\u52a8\u6dfb\u52a0 / \u5220\u9664\u201d\u590d\u9009\u6846\u540e\uff0c\u5c06\u201c\u94a2\u7b14\u5de5\u5177\u201d\u5b9a\u4f4d\u5230\u6240\u9009\u8def\u5f84\u4e0a\u65b9\u65f6\uff0c\u5b83\u4f1a\u53d8\u6210\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d\uff1b\u5f53\u5c06\u201c\u94a2\u7b14\u5de5\u5177\u201d\u5b9a\u4f4d\u5230\u951a\u70b9\u4e0a\u65b9\u65f6\uff0c\u5b83\u4f1a\u53d8\u6210\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d\u3002 \u9009\u62e9\u8def\u5f84\u533a\u57df\u9009\u9879\u4ee5\u786e\u5b9a\u91cd\u53e0\u8def\u5f84\u7ec4\u4ef6\u5982\u4f55\u4ea4\u53c9\u3002\u5728\u4f7f\u7528\u5f62\u72b6\u5de5\u5177\u7ed8\u5236\u65f6\uff0c\u6309\u4f4f Shift \u952e\u53ef\u4e34\u65f6\u9009\u62e9\u201c\u5408\u5e76\u5f62\u72b6\u201d\u9009\u9879\uff1b\u6309\u4f4f Alt \u952e\u53ef\u4e34\u65f6\u9009\u62e9\u201c\u51cf\u53bb\u9876\u5c42\u5f62\u72b6\u201d\u9009\u9879\u3002","title":"\u201c\u94a2\u7b14\u5de5\u5177\u201d"},{"location":"PS/PS5/#_9","text":"\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6309\u94ae\uff0c\u5728\u9009\u9879\u680f\u4e2d\u9009\u62e9\u201c\u8def\u5f84\u201d\u9009\u9879 \uff0c\u5c06\u5149\u6807\u79fb\u81f3\u753b\u9762\u4e2d\uff0c\u5355\u51fb\u53ef\u521b\u5efa\u4e00\u4e2a\u951a \u70b9\u3002\u91ca\u653e\u9f20\u6807\uff0c\u5c06\u5149\u6807\u79fb\u81f3\u4e0b\u4e00\u5904\u5355\u51fb\u53ef\u521b\u5efa\u7b2c\u4e8c\u4e2a\u951a\u70b9\u3002\u4e24\u4e2a\u951a\u70b9\u4f1a\u8fde\u63a5\u6210\u4e00\u6761\u7531\u89d2\u70b9\u5b9a\u4e49\u7684\u76f4\u7ebf\u8def\u5f84\u3002 \u5982\u679c\u8981\u7ed3\u675f\u4e00\u6bb5\u5f00\u653e\u5f0f\u8def\u5f84\u7684\u7ed8\u5236\uff0c\u53ef\u4ee5\u6309\u4f4f Ctrl \u952e\u5e76\u5728\u753b\u9762\u7684\u7a7a\u767d\u5904\u5355\u51fb\u3001\u5355\u51fb\u5176\u4ed6\u5de5\u5177\u6216\u6309 Esc \u952e\u7ed3\u675f\u8def\u5f84\u7684\u7ed8\u5236\u3002","title":"\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u76f4\u7ebf"},{"location":"PS/PS5/#_10","text":"\u5728\u753b\u5e03\u4e2d\u5355\u51fb\u5373\u53ef\u51fa\u73b0\u4e00\u4e2a\u951a\u70b9\uff0c\u91ca\u653e\u9f20\u6807\uff0c\u79fb\u52a8\u5149\u6807\u5230\u53e6\u5916\u7684\u4f4d\u7f6e\u5355\u51fb\u5e76\u62d6\u52a8\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u5e73\u6ed1\u70b9\u3002 \u5c06\u5149\u6807\u653e\u7f6e\u5728\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5355\u51fb\u5e76\u62d6\u62fd\u5149\u6807\u521b\u5efa\u7b2c\u4e8c\u4e2a\u5e73\u6ed1\u70b9\uff0c\u6ce8\u610f\u8981\u63a7\u5236\u597d\u66f2\u7ebf\u7684\u8d70\u5411\u3002","title":"\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u6ce2\u6d6a\u66f2\u7ebf"},{"location":"PS/PS5/#_11","text":"\u9009\u62e9\u201c \u94a2 \u7b14 \u5de5 \u5177 \u201d\uff0c \u7136 \u540e \u5728 \u9009 \u9879 \u680f \u4e2d \u5355 \u51fb\u201c \u8def\u5f84\u201d\u6309\u94ae,\u7136\u540e\u5728\u753b\u9762\u4e2d\u786e\u5b9a\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u5904\uff0c\u7136\u540e\u5355\u51fb\u521b\u5efa\u4e00\u4e2a\u951a\u70b9\uff0c\u4e24\u4e2a\u951a\u70b9\u4f1a\u8fde\u63a5\u4e3a\u4e00\u6761\u76f4\u7ebf\u8def\u5f84\u3002 \u7ee7\u7eed\u521b\u5efa\u51fa\u951a\u70b9\uff0c\u6700\u540e\u5c06\u5149\u6807\u653e\u7f6e\u5728\u8d77\u70b9\u4e0a\uff0c\u5f53\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\uff0c\u5355\u51fb\u95ed\u5408\u8def\u5f84\uff0c\u5b8c\u6210\u591a\u8fb9\u5f62\u7684\u7ed8\u5236\u3002","title":"\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u5236\u591a\u8fb9\u5f62"},{"location":"PS/PS5/#_12","text":"\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u6bd4\u8f83\u9002\u5408\u7ed8\u5236\u8f83\u968f\u610f\u7684\u56fe\u5f62\uff0c\u5c31\u50cf\u7528\u94c5\u7b14\u5728\u7eb8\u4e0a\u7ed8\u56fe\u4e00\u6837\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5bf9\u8def\u5f84\u8fdb\u884c\u8fdb \u4e00\u6b65\u7684\u8c03\u6574\u3002\u9009\u4e2d\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\uff0c\u5728\u753b\u5e03\u4e2d\u5355\u51fb\u786e\u5b9a\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u7684\u540c\u65f6\u62d6\u52a8\u5149\u6807\uff0c\u753b\u5e03\u4e2d \u4f1a\u81ea\u52a8\u4ee5\u5149\u6807\u6ed1\u52a8\u7684\u8f68\u8ff9\u521b\u5efa\u8def\u5f84\uff0c\u5176\u95f4\u5c06\u5728\u8def\u5f84\u4e0a\u81ea\u52a8\u6dfb\u52a0\u951a\u70b9\u3002 \u5728\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u9009\u9879\u680f\u4e2d\u5305\u542b\u201c\u66f2\u7ebf\u62df\u5408\u201d\u53c2\u6570\u7684\u63a7\u5236\uff0c\u8be5\u503c\u8d8a\u5927\uff0c\u521b\u5efa\u7684\u8def\u5f84\u951a\u70b9\u8d8a\u5c11\uff0c\u8def\u5f84\u8d8a\u7b80\u5355\uff1b\u8be5\u503c\u8d8a\u5c0f\uff0c\u521b\u5efa\u7684\u8def\u5f84\u951a\u70b9\u8d8a\u591a\uff0c\u8def\u5f84\u7ec6\u8282\u8d8a\u591a\u3002","title":"\u4f7f\u7528\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u56fe"},{"location":"PS/PS5/#_13","text":"\u5728\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\u680f\u4e2d\u6709\u4e00\u4e2a\u201c\u78c1\u6027\u7684\u201d\u590d\u9009\u6846\uff0c\u9009\u4e2d\u8be5\u590d\u9009\u6846\uff0c\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u5c06\u5207\u6362\u4e3a\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\uff0c\u4f7f\u7528\u8be5\u5de5\u5177\u53ef\u4ee5\u50cf\u4f7f\u7528\u201c\u78c1\u6027\u5957\u7d22\u5de5\u5177\u201d\u4e00\u6837\u5feb\u901f\u52fe\u52d2\u51fa\u5bf9\u8c61\u7684\u8f6e\u5ed3\u8def\u5f84\u3002\u5728\u9009\u9879\u680f\u4e2d\u53ef\u6253\u5f00\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\uff0c\u8fd9\u540c\u65f6\u4e5f\u662f\u201c\u81ea\u7531\u94a2\u7b14\u5de5\u5177\u201d\u7684\u9009\u9879\u3002","title":"\u4f7f\u7528\u201c\u78c1\u6027\u94a2\u7b14\u5de5\u5177\u201d\u7ed8\u56fe"},{"location":"PS/PS5/#_14","text":"\u4f7f\u7528\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d\u53ef\u4ee5\u76f4\u63a5\u5728\u8def\u5f84\u4e0a\u6dfb\u52a0\u951a\u70b9\u3002\u5728\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7684\u72b6\u6001\u4e0b\uff0c\u5c06\u5149\u6807\u653e\u5728\u8def\u5f84\u4e0a\uff0c\u5f85\u5149\u6807\u53d8\u6210 \u5f62\u72b6\u65f6\uff0c\u5728\u8def\u5f84\u4e0a\u5355\u51fb\uff0c\u4e5f\u53ef\u6dfb\u52a0\u4e00\u4e2a\u951a\u70b9\u3002","title":"\u4f7f\u7528\u201c\u6dfb\u52a0\u951a\u70b9\u5de5\u5177\u201d"},{"location":"PS/PS5/#_15","text":"\u4f7f\u7528\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d\u53ef\u4ee5\u5220\u9664\u8def\u5f84\u4e0a\u7684\u951a\u70b9\u3002\u5c06\u5149\u6807\u653e\u5728\u951a\u70b9\u4e0a\uff0c\u5f53\u5149\u6807\u6539\u53d8\u5f62\u72b6\u65f6\uff0c\u5355\u51fb\u5373\u53ef\u5220\u9664\u951a\u70b9\u3002\u5728\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7684\u72b6\u6001\u4e0b\uff0c\u76f4\u63a5\u5c06\u5149\u6807\u79fb\u52a8\u5230\u951a\u70b9\u4e0a\uff0c\u5149\u6807\u4e5f\u4f1a\u6539\u53d8\u5f62\u72b6\u3002","title":"\u4f7f\u7528\u201c\u5220\u9664\u951a\u70b9\u5de5\u5177\u201d"},{"location":"PS/PS5/#_16","text":"\u4f7f\u7528\u8be5\u5de5\u5177\u5728\u89d2\u70b9\u4e0a\u5355\u51fb\uff0c\u53ef\u4ee5\u5c06\u89d2\u70b9\u8f6c\u6362\u4e3a\u5e73\u6ed1\u70b9\u3002\u5728\u5e73\u6ed1\u70b9\u4e0a\u5355\u51fb\uff0c\u53ef\u4ee5\u5c06\u5e73\u6ed1\u70b9\u8f6c\u6362\u4e3a\u89d2\u70b9\u3002","title":"\u4f7f\u7528\u201c\u8f6c\u6362\u70b9\u5de5\u5177\u201d\u8c03\u6574\u8def\u5f84\u5f27\u5ea6"},{"location":"PS/PS5/#_17","text":"","title":"\u8def\u5f84\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"PS/PS5/#_18","text":"\u4f7f\u7528\u201c\u8def\u5f84\u9009\u62e9\u5de5\u5177\u201d\uff0c\u5355\u51fb\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c \u53ef\u4ee5\u9009\u62e9\u5355\u4e2a\u7684\u8def\u5f84\uff1b\u6309\u4f4f shift \u952e\u5355\u51fb\u53ef\u53cc\u9009\u62e9\u591a\u4e2a\u8def\u5f84\uff0c\u540c\u65f6\u5b83\u53ef\u7528\u6765\u79fb\u52a8\u3001\u7ec4\u5408\u3001\u5bf9\u9f50\u548c\u5206\u5e03\u8def\u5f84\u3002\u6309\u4f4f ctrl \u952e\u5e76\u5355\u51fb\u53ef\u53cc\u5c06\u5f53\u524d\u5de5\u5177\u8f6c\u5316\u4e3a\u201c\u76f4\u63a5\u9009\u62e9\u5de5\u5177\u201d\u3002","title":"\u9009\u62e9\u5e76\u79fb\u52a8\u8def\u5f84"},{"location":"PS/PS5/#_19","text":"\u201c\u76f4\u63a5\u9009\u62e9\u5de5\u5177\u201d\uff0c\u4e3b\u8981\u7528\u6765\u9009\u62e9\u8def\u5f84\u4e0a\u7684\u5355\u4e2a\u6216\u4e2a\u951a\u70b9\uff0c\u53ef\u79fb\u52a8\u951a\u70b9\u3001\u8c03\u6574\u65b9\u5411\u7ebf\u3002\u5355\u51fb\u53ef\u4ee5\u9009\u4e2d\u5176\u4e2d\u67d0\u4e00\u4e2a\u951a\u70b9\uff1b\u6846\u9009\u6216\u6309\u4f4f Shift \u952e\u5355\u51fb\u53ef\u4ee5\u9009\u62e9\u591a\u4e2a\u951a\u70b9\uff1b\u6309\u4f4f ctrl \u952e\u5e76\u5355\u51fb\u53ef\u53cc\u5c06\u5f53\u524d\u5de5\u5177\u8f6c\u5316\u4e3a\u201c\u8def\u5f84\u9009\u62e9\u5de5\u5177\u201d\u3002","title":"\u9009\u62e9\u5e76\u8c03\u6574\u951a\u70b9"},{"location":"PS/PS5/#_20","text":"\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u9009\u62e9\u8def\u5f84\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u53d8\u6362\u8def\u5f84\u201d\u83dc\u5355\u4e0b\u7684\u547d\u4ee4\u5373\u53ef\u5bf9\u5176\u8fdb\u884c\u76f8\u5e94\u7684\u53d8\u6362\u3002\u53d8\u6362\u8def\u5f84\u4e0e\u53d8\u6362\u56fe\u50cf\u7684\u65b9\u6cd5\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8fdb\u884c\u91cd\u590d\u8bb2\u89e3\u3002","title":"\u53d8\u6362\u8def\u5f84"},{"location":"PS/PS5/#_21","text":"\u5b9a\u4e49\u5f62\u72b6\u4e0e\u5b9a\u4e49\u56fe\u6848\u3001\u6837\u5f0f\u753b\u7b14\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4fdd\u5b58\u5230\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u7684\u5f62\u72b6\u9884\u8bbe\u4e2d\uff0c\u4ee5\u540e\u5982\u679c\u9700\u8981\u7ed8\u5236\u76f8\u540c\u7684\u5f62\u72b6\uff0c\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u81ea\u5b9a\u7684\u5f62\u72b6\u3002\u7ed8\u5236\u8def\u5f84\u4ee5\u540e\uff0c\u6267\u884c\u201c\u7f16\u8f91> \u5b9a\u4e49\u81ea\u5b9a\u5f62\u72b6\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u5f62\u72b6\u3002 \u5728\u5f39\u51fa\u7684\u201c\u5f62\u72b6\u540d\u79f0\u201d\u5bf9\u8bdd\u6846\u4e2d\u4e3a\u5f62\u72b6\u53d6\u4e00\u4e2a\u540d\u5b57\u3002\u5728\u5de5\u5177\u7bb1\u4e2d\u5355\u51fb\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u6309\u94ae \uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u5f62\u72b6\u201d\u9009\u9879\u540e\u9762\u7684\u5012\u4e09\u89d2\u5f62\u56fe\u6807 \uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u81ea\u5b9a\u5f62\u72b6\u201d\u9762\u677f\u4e2d\u5c31\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u3002","title":"\u5b9a\u4e49\u4e3a\u81ea\u5b9a\u5f62\u72b6"},{"location":"PS/PS5/#_22","text":"\u5728\u8def\u5f84\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5efa\u7acb\u9009\u533a\u201d\u547d\u4ee4\uff0c\u5728\u5f39\u51fa\u7684\u201c\u5efa\u7acb\u9009\u533a\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u76f8\u5173\u53c2\u6570\u3002\u6309\u4f4f Ctrl \u952e\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8def\u5f84\u7684\u7f29\u7565\u56fe\uff0c\u6216\u5355\u51fb\u201c\u5c06\u8def\u5f84\u4f5c\u4e3a\u9009\u533a\u8f7d\u5165\u201d\u6309\u94ae\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5feb\u6377\u952e\uff0c\u6309 Ctrl+Enter \u7ec4\u5408\u952e\u5c06\u8def\u5f84\u8f6c\u6362\u4e3a\u9009\u533a\u3002","title":"\u5c06\u8def\u5f84\u8f6c\u6362\u4e3a\u9009\u533a"},{"location":"PS/PS5/#_23","text":"\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6216\u5f62\u72b6\u5de5\u5177\uff08\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u9664\u5916\uff09\u72b6\u6001\u4e0b\uff0c\u5728\u7ed8\u5236\u5b8c\u6210\u7684\u8def\u5f84\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u9009\u62e9\u201c\u586b\u5145\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u586b\u5145\u5b50\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u201c\u586b\u5145\u5b50\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u5bf9\u586b\u5145\u5185\u5bb9\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd9\u91cc\u5305\u542b\u591a\u79cd\u7c7b\u578b\u7684\u586b\u5145\u5185\u5bb9\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u586b\u5145\u5185\u5bb9\u7684\u6df7\u5408\u6a21\u5f0f\u4ee5\u53ca\u4e0d\u900f\u660e\u5ea6\u7b49\u5c5e\u6027\u3002","title":"\u586b\u5145\u8def\u5f84"},{"location":"PS/PS5/#_24","text":"\u5728\u63cf\u8fb9\u4e4b\u524d\u9700\u8981\u5148\u8bbe\u7f6e\u597d\u63cf\u8fb9\u5de5\u5177\u7684\u53c2\u6570\u3002\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6216\u5f62\u72b6\u5de5\u5177\u7ed8\u5236\u51fa\u8def\u5f84\u3002\u5728\u8def\u5f84\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u63cf\u8fb9\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u63cf\u8fb9\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u9009\u62e9\u63cf\u8fb9\u7684\u5de5\u5177\u3002","title":"\u63cf\u8fb9\u8def\u5f84"},{"location":"PS/PS5/#_25","text":"","title":"\u8def\u5f84\u9762\u677f"},{"location":"PS/PS5/#_26","text":"\u6267\u884c\u201c\u7a97\u53e3 > \u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8def\u5f84\u201d\u9762\u677f\u3002","title":"\u201c\u8def\u5f84\u201d\u9762\u677f"},{"location":"PS/PS5/#_27","text":"\u5de5\u4f5c\u8def\u5f84\u662f\u4e34\u65f6\u8def\u5f84\uff0c\u662f\u5728\u6ca1\u6709\u65b0\u5efa\u8def\u5f84\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7b49\u7ed8\u5236\u7684\u8def\u5f84\uff0c\u4e00\u65e6\u91cd\u65b0\u7ed8\u5236\u4e86\u8def\u5f84\uff0c\u539f\u6709\u7684\u8def\u5f84\u5c06\u88ab\u5f53\u524d\u8def\u5f84\u6240\u66ff\u4ee3\u3002 \u5982\u679c\u4e0d\u60f3\u5de5\u4f5c\u8def\u5f84\u88ab\u66ff\u6362\u6389\uff0c\u53ef\u4ee5\u53cc\u51fb\u5176\u7f29\u7565\u56fe\uff0c\u6253\u5f00\u201c\u5b58\u50a8\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\uff0c\u5c06\u5176\u4fdd\u5b58\u8d77\u6765","title":"\u5b58\u50a8\u5de5\u4f5c\u8def\u5f84"},{"location":"PS/PS5/#_28","text":"\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e0b\u5355\u51fb\u201c\u521b\u5efa\u65b0\u8def\u5f84\u201d\u6309\u94ae \uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u8def\u5f84\u5c42\uff0c\u6b64\u540e\u4f7f\u7528\u201c\u94a2\u7b14\u5de5\u5177\u201d\u7b49\u7ed8\u5236\u7684\u8def\u5f84\u90fd\u5c06 \u5305\u542b\u5728\u8be5\u8def\u5f84\u5c42\u4e2d\u3002\u6309\u4f4f Alt \u952e\u7684\u540c\u65f6\u5355\u51fb\u201c\u521b\u5efa\u65b0\u8def\u5f84\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u5f39\u51fa\u201c\u65b0\u5efa\u8def\u5f84\u201d\u5bf9\u8bdd\u6846\uff0c\u53ef\u4ece\u4e2d\u8fdb\u884c\u540d\u79f0\u7684\u8bbe\u7f6e\u3002","title":"\u65b0\u5efa\u8def\u5f84"},{"location":"PS/PS5/#_29","text":"\u5982\u679c\u8981\u590d\u5236\u8def\u5f84\uff0c\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u62d6\u62fd\u9700\u8981\u590d\u5236\u7684\u8def\u5f84\u5230 \u201c\u521b\u5efa\u65b0\u8def\u5f84\u201d\u6309\u94ae \u4e0a\uff0c\u5373\u53ef\u590d\u5236\u51fa\u8def\u5f84\u7684\u526f\u672c\u3002\u5982\u679c\u8981\u5c06\u5f53\u524d\u6587\u6863\u4e2d\u7684\u8def\u5f84\u590d\u5236\u5230\u5176\u4ed6\u6587\u6863\u4e2d\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u7f16\u8f91 > \u62f7\u8d1d\u201d\u547d\u4ee4\uff0c\u7136\u540e\u5207\u6362\u5230\u5176\u4ed6\u6587\u6863\uff0c\u6267\u884c\u201c\u7f16\u8f91> \u7c98\u8d34\u201d\u547d\u4ee4\u5373\u53ef\u3002","title":"\u590d\u5236/\u7c98\u8d34\u8def\u5f84"},{"location":"PS/PS5/#_30","text":"\u5982\u679c\u8981\u5220\u9664\u67d0\u4e2a\u4e0d\u9700\u8981\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5c06\u5176\u62d6\u62fd\u5230\u201c\u8def\u5f84\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u5f53\u524d\u8def\u5f84\u201d\u6309\u94ae\u4e0a\uff0c\u6216\u8005\u76f4\u63a5\u6309 Delete \u952e\u5c06\u5176\u5220\u9664\u3002","title":"\u5220\u9664\u8def\u5f84"},{"location":"PS/PS5/#_31","text":"\u5982\u679c\u8981\u5c06\u8def\u5f84\u5728\u6587\u6863\u7a97\u53e3\u4e2d\u663e\u793a\u51fa\u6765\uff0c\u53ef\u4ee5\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8be5\u8def\u5f84\u3002","title":"\u663e\u793a\u8def\u5f84"},{"location":"PS/PS5/#_32","text":"\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8def\u5f84\u4ee5\u540e\uff0c\u6587\u6863\u7a97\u53e3\u4e2d\u5c31\u4f1a\u59cb\u7ec8\u663e\u793a\u8be5\u8def\u5f84\uff0c\u5982\u679c\u5e0c\u671b\u5c06\u5176\u9690\u85cf\uff0c\u53ef\u4ee5\u5728\u201c\u8def\u5f84\u201d\u9762\u677f\u7684\u7a7a\u767d\u533a\u57df\u5355\u51fb\uff0c\u5373\u53ef\u53d6\u6d88\u5bf9\u8def\u5f84\u7684\u9009\u62e9\u3002","title":"\u9690\u85cf\u8def\u5f84"},{"location":"PS/PS5/#_33","text":"Photoshop \u7684\u5f62\u72b6\u5de5\u5177\u7ec4\u4e2d\u5305\u542b\u591a\u79cd\u77e2\u91cf\u5f62\u72b6\u5de5\u5177\uff0c\u5982\u201c\u77e9\u5f62\u5de5\u5177\u201d \u3001\u201c\u5706\u89d2\u77e9\u5f62\u5de5\u5177\u201d \u3001\u201c\u692d\u5706\u5de5\u5177\u201d \u3001\u201c\u591a\u8fb9\u5f62\u5de5\u5177\u201d \u3001\u201c\u76f4\u7ebf\u5de5\u5177\u201d \u548c\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d \uff0c\u800c\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d \u4e2d\u53c8\u5305\u542b\u975e\u5e38\u591a\u7684\u5f62\u72b6\uff0c\u5e76\u4e14\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u5176\u4ed6\u5f62\u72b6\u3002","title":"\u5f62\u72b6\u5de5\u5177\u7ec4"},{"location":"PS/PS5/#_34","text":"\u201c\u77e9\u5f62\u5de5\u5177\u201d\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e\u201c\u77e9\u5f62\u9009\u6846\u5de5\u5177\u201d\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u7ed8\u5236\u51fa\u6b63\u65b9\u5f62\u548c\u77e9\u5f62\u3002\u7ed8\u5236\u65f6\u6309\u4f4f Shift \u952e\u53ef\u4ee5\u7ed8\u5236\u51fa\u6b63\u65b9\u5f62\uff1b\u6309\u4f4f Alt \u952e\u53ef\u4ee5\u4ee5\u9f20\u6807\u5355\u51fb\u70b9\u4e3a\u4e2d\u5fc3\u7ed8\u5236\u77e9\u5f62\uff1b\u6309\u4f4f Shift+Alt \u7ec4\u5408\u952e\u53ef\u4ee5\u4ee5\u9f20\u6807\u5355\u51fb\u70b9\u4e3a\u4e2d\u5fc3\u7ed8\u5236\u6b63\u65b9\u5f62\u3002\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb \u56fe\u6807\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u77e9\u5f62\u5de5\u5177\u201d\u7684\u8bbe\u7f6e\u9009\u9879\u3002","title":"\u4f7f\u7528\u201c\u77e9\u5f62\u5de5\u5177\u201d"},{"location":"PS/PS5/#_35","text":"\u201c\u5706\u89d2\u77e9\u5f62\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u5177\u6709\u5706\u89d2\u6548\u679c\u7684\u77e9\u5f62\uff0c\u5176\u521b\u5efa\u65b9\u6cd5\u53ca\u9009\u9879\u4e0e\u201c\u77e9\u5f62\u5de5\u5177\u201d\u5b8c\u5168\u76f8\u540c\u3002\u5728\u9009\u9879\u680f\u4e2d\u53ef\u4ee5 \u5bf9\u201c\u534a\u5f84\u201d\u6570\u503c\u8fdb\u884c\u8bbe\u7f6e\uff0c\u201c\u534a\u5f84\u201d\u9009\u9879\u7528\u6765\u8bbe\u7f6e\u5706\u89d2\u7684\u534a\u5f84\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u5706\u89d2\u8d8a\u5927\u3002","title":"\u4f7f\u7528\u201c\u5706\u89d2\u77e9\u5f62\u5de5\u5177\u201d"},{"location":"PS/PS5/#_36","text":"\u5982\u679c\u8981\u521b\u5efa\u692d\u5706\uff0c\u76f4\u63a5\u62d6\u62fd\u9f20\u6807\u8fdb\u884c\u521b\u5efa\u5373\u53ef\uff1b\u5982\u679c\u8981\u521b\u5efa\u5706\u5f62\uff0c\u53ef\u4ee5\u6309\u4f4f Shift \u952e\u6216 Shift+Alt \u7ec4\u5408\u952e\uff08\u4ee5\u9f20\u6807\u5355\u51fb\u70b9\u4e3a\u4e2d\u5fc3\uff09\u8fdb\u884c\u521b\u5efa\u3002","title":"\u4f7f\u7528\u201c\u692d\u5706\u5de5\u5177\u201d"},{"location":"PS/PS5/#_37","text":"\u4f7f\u7528\u201c\u591a\u8fb9\u5f62\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u6b63\u591a\u8fb9\u5f62\uff08\u6700\u5c11\u4e3a 3 \u6761\u8fb9\uff09\u548c\u661f\u5f62\uff0c\u5176\u8bbe\u7f6e\u9009\u9879\u5982\u56fe\u3002","title":"\u4f7f\u7528\u201c\u591a\u8fb9\u5f62\u5de5\u5177\u201d"},{"location":"PS/PS5/#_38","text":"\u4f7f\u7528\u201c\u76f4\u7ebf\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u76f4\u7ebf\u548c\u5e26\u6709\u7bad\u5934\u7684\u8def\u5f84\u3002","title":"\u4f7f\u7528\u201c\u76f4\u7ebf\u5de5\u5177\u201d"},{"location":"PS/PS5/#_39","text":"\u4f7f\u7528\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d\u53ef\u4ee5\u521b\u5efa\u51fa\u975e\u5e38\u591a\u7684\u5f62\u72b6\u3002\u8fd9\u4e9b\u5f62\u72b6\u65e2\u53ef\u4ee5\u662f Photoshop\u7684\u9884\u8bbe\uff0c\u4e5f\u53ef\u4ee5\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u6216\u52a0\u8f7d\u7684\u5916\u90e8\u5f62\u72b6\u3002","title":"\u4f7f\u7528\u201c\u81ea\u5b9a\u5f62\u72b6\u5de5\u5177\u201d"},{"location":"PS/PS6/","text":"\u8ba4\u8bc6\u6587\u5b57\u5de5\u5177\u4e0e\u9762\u677f \u00b6 \u8ba4\u8bc6\u6587\u5b57\u5de5\u5177 \u00b6 Photoshop \u4e2d \u5305 \u62ec \u4e24 \u79cd \u6587 \u5b57 \u5de5 \u5177\uff0c \u5206\u522b\u662f\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d \u548c\u201c\u76f4\u6392\u6587\u5b57\u5de5\u5177\u201d \u3002\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d \u53ef\u4ee5\u7528\u6765\u8f93\u5165\u6a2a\u5411\u6392\u5217\u7684\u6587\u5b57\u3002 \u8bbe\u7f6e\u6587\u672c\u65b9\u5411 \u00b6 \u9009\u4e2d\u6587\u672c\uff0c\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u5207\u6362\u6587\u672c\u53d6\u5411\u201d\u6309\u94ae\uff0c\u6216\u8005\u6267\u884c\u201c\u7c7b\u578b >\u6587\u672c\u6392\u5217\u65b9\u5411\u201d\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u66f4\u6539\u6587\u5b57\u65b9\u5411\uff0c\u53ef\u4ee5\u5c06\u6a2a\u5411\u6392\u5217\u7684\u6587\u5b57\u66f4\u6539\u4e3a\u76f4\u5411\u6392\u5217\u7684\u6587\u5b57\u3002 \u8bbe\u7f6e\u5b57\u4f53 \u00b6 \u8f93\u5165\u5b57\u4f53\u4e4b\u524d\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u8bbe\u7f6e\u5b57\u4f53\u7cfb\u5217\u201d\u4e0b\u62c9\u5012\u4e09\u89d2\u56fe\u6807\uff0c\u9009\u62e9\u5408\u9002\u7684\u5b57\u4f53\u3002\u6216\u8005\u6267\u884c\u201c\u7a97\u53e3 > \u5b57\u7b26\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u5b57\u7b26\u201d\u9762\u677f\uff0c\u5e76\u5728\u201c\u5b57\u7b26\u201d\u9762\u677f\u4e2d\u9009\u62e9\u5408\u9002\u5b57\u4f53\u3002 \u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5b57\u4f53\u6837\u5f0f \u00b6 \u5b57\u4f53\u6837\u5f0f\u53ea\u9488\u5bf9\u90e8\u5206\u82f1\u6587\u5b57\u4f53\u6709\u6548\u3002\u8f93\u5165\u5b57\u7b26\u540e\uff0c\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5b57\u4f53\u7684\u6837\u5f0f\uff0c\u5305\u62ec Regular\uff08\u89c4\u5219\uff09\u3001Italic\uff08\u659c\u4f53\uff09\u3001Bold\uff08\u7c97\u4f53\uff09\u548c Bold Italic\uff08\u7c97\u659c\u4f53\uff09\u3002 \u8bbe\u7f6e\u5b57\u53f7 \u00b6 \u53ef\u4ee5\u5728\u9009\u62e9\u6587\u5b57\u5bf9\u8c61\u7684\u72b6\u6001\u4e0b\u76f4\u63a5\u5728\u9009\u9879\u680f\u4e2d\u8f93\u5165\u6570\u503c\uff0c\u6216\u5728\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u9884\u8bbe\u7684\u5b57\u53f7\uff0c\u6216\u8005\u4e5f\u53ef\u5728\u6253\u5f00\u7684\u201c\u5b57\u7b26\u201d\u9762\u677f\u4e2d\u8fdb\u884c\u5b57\u53f7\u7684\u8bbe\u7f6e\u3002 \u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u6d88\u9664\u952f\u9f7f\u65b9\u5f0f \u00b6 \u8f93\u5165\u6587\u5b57\u4ee5\u540e\uff0c\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u4e3a\u6587\u5b57\u6307\u5b9a\u4e00\u79cd\u6d88\u9664\u952f\u9f7f\u7684\u65b9\u5f0f\uff0c\u5176\u5dee\u522b\u4e3b\u8981\u4f53\u73b0\u5728\u6587\u5b57\u7684\u8fb9\u7f18\u5904\u3002 \u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u6587\u672c\u5bf9\u9f50 \u00b6 \u6587\u672c\u5bf9\u9f50\u662f\u6839\u636e\u8f93\u5165\u5b57\u7b26\u65f6\u5149\u6807\u7684\u4f4d\u7f6e\u6765\u8bbe\u7f6e\u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\u7684\u3002\u5728\u6587\u5b57\u5de5\u5177\u7684\u9009\u9879\u680f\u4e2d\u63d0\u4f9b\u4e86 3 \u79cd\u8bbe\u7f6e\u6587\u672c\u6bb5\u843d\u5bf9\u9f50\u65b9\u5f0f\u7684\u6309\u94ae\uff1a\u201c\u5de6\u5bf9\u9f50\u6587\u672c\u201d \u3001\u201c\u5c45\u4e2d\u5bf9\u9f50\u6587\u672c\u201d \u548c\u201c\u53f3\u5bf9\u9f50\u6587\u672c\u201d \u3002\u9009\u62e9\u6587\u672c\u4ee5\u540e\uff0c\u5355\u51fb\u6240\u9700\u8981\u7684\u5bf9\u9f50\u6309\u94ae\uff0c\u5c31\u53ef\u4ee5\u4f7f\u6587\u672c\u6309\u6307\u5b9a\u7684\u65b9\u5f0f\u5bf9\u9f50\u3002 \u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u6587\u672c\u989c\u8272 \u00b6 \u8f93\u5165\u6587\u672c\u65f6\uff0c\u6587\u672c\u989c\u8272\u9ed8\u8ba4\u4e3a\u524d\u666f\u8272\u3002\u5982\u679c\u8981\u4fee\u6539\u6587\u5b57\u989c\u8272\uff0c\u53ef\u4ee5\u5148\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u6587\u672c\u56fe\u5c42\uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u989c\u8272\u5757\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u9009\u62e9\u6587\u672c\u989c\u8272\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u6240\u9700\u8981\u7684\u989c\u8272\u3002\u5982\u679c\u8981\u66f4\u6539\u90e8\u5206\u6587\u5b57\u989c\u8272\uff0c\u9700\u8981\u6846\u9009\u8fd9\u90e8\u5206\u6587\u5b57\u540e\u8fdb\u884c\u66f4\u6539\u3002 \u8ba4\u8bc6\u6587\u5b57\u8499\u7248\u5de5\u5177 \u00b6 \u4f7f\u7528\u6587\u5b57\u8499\u7248\u5de5\u5177\u53ef\u4ee5\u521b\u5efa\u6587\u5b57\u9009\u533a\u3002\u6587\u5b57\u8499\u7248\u5de5\u5177\u5305\u62ec\u201c\u6a2a\u6392\u6587\u5b57\u8499\u7248\u5de5\u5177\u201d \u548c\u201c\u76f4\u6392\u6587\u5b57\u8499\u7248\u5de5\u5177\u201d \u4e24\u79cd\u3002\u4f7f\u7528\u6587\u5b57\u8499\u7248\u5de5\u5177\u8f93\u5165\u6587\u5b57\u4ee5\u540e\uff0c\u6587\u5b57\u5c06\u4ee5\u9009\u533a\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u5728\u6587\u5b57\u9009\u533a\u4e2d\uff0c\u53ef\u4ee5\u586b\u5145\u524d\u666f\u8272\u3001\u80cc\u666f\u8272\u4ee5\u53ca\u6e10\u53d8\u8272\u7b49\u3002 \u8be6\u89e3\u201c\u5b57\u7b26\u201d\u9762\u677f \u00b6 \u5728\u6587\u5b57\u5de5\u5177\u7684\u9009\u9879\u680f\u4e2d\uff0c\u53ef\u4ee5\u5feb\u6377\u5730\u5bf9\u6587\u672c\u7684\u90e8\u5206\u5c5e\u6027\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u8981\u5bf9\u6587\u672c\u8fdb\u884c\u66f4\u591a\u7684\u8bbe\u7f6e\uff0c\u5c31\u9700\u8981\u4f7f\u7528 \u201c\u5b57 \u7b26\u201d\u9762\u677f\u3002\u5728\u201c\u5b57\u7b26\u201d\u9762\u677f\u4e2d\uff0c\u9664\u4e86\u5305\u62ec\u5e38\u89c1\u7684\u5b57\u4f53\u7cfb\u5217\u3001\u5b57\u4f53\u6837\u5f0f\u3001\u5b57\u53f7\u3001\u6587\u672c\u989c\u8272\u548c\u6d88\u9664\u952f\u9f7f\u7b49\u8bbe\u7f6e\uff0c\u8fd8\u5305\u62ec\u884c\u8ddd\u3001\u5b57\u8ddd\u7b49\u5e38\u89c1\u8bbe\u7f6e\u3002 \u8be6\u89e3\u6bb5\u843d\u9762\u677f \u00b6 \u201c\u6bb5\u843d\u201d\u9762\u677f\u63d0\u4f9b\u4e86\u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u7f16\u6392\u683c\u5f0f\u7684\u6240\u6709\u9009\u9879\u3002\u901a\u8fc7\u201c\u6bb5\u843d\u201d\u9762\u677f\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u7684\u5bf9\u9f50\u65b9\u5f0f\u548c\u7f29\u8fdb\u91cf\u7b49\u53c2\u6570\u3002 \u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f \u00b6 \u5728\u8fdb\u884c\u4e66\u7c4d\u3001\u62a5\u520a\u6742\u5fd7\u7b49\u5305\u542b\u5927\u91cf\u6587\u5b57\u6392\u7248\u7684\u4efb\u52a1\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u4e3a\u591a\u4e2a\u6587\u5b57\u56fe\u5c42\u8d4b\u4e88\u76f8\u540c\u7684\u6837\u5f0f\uff0c\u800c\u5728 Photoshop \u4e2d\u63d0\u4f9b\u7684\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f\u4e3a\u6b64\u7c7b\u64cd\u4f5c\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u64cd\u4f5c\u65b9\u5f0f\u3002\u5728\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u53ef\u4ee5\u521b\u5efa\u5b57\u7b26\u6837\u5f0f\u3001\u66f4 \u6539\u5b57\u7b26\u5c5e\u6027\uff0c\u5e76\u5c06\u5b57\u7b26\u5c5e\u6027\u5b58\u50a8\u5728\u5b57\u7b26\u6837\u5f0f\u9762\u677f\u4e2d\u3002\u5728\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u53ea\u9700\u8981\u9009\u4e2d\u6587\u5b57\u56fe\u5c42\uff0c\u5e76\u5355\u51fb\u76f8\u5e94\u5b57\u7b26\u6837\u5f0f\u5373 \u53ef\u3002 \u201c\u6bb5\u843d\u6837\u5f0f\u201d\u9762\u677f \u00b6 \u201c\u6bb5\u843d\u6837\u5f0f\u201d\u9762\u677f\u4e0e\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f\u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\uff0c\u90fd\u53ef\u4ee5\u8fdb\u884c\u6837\u5f0f\u7684\u5b9a\u4e49\u3001\u7f16\u8f91\u4e0e\u8c03\u7528\u3002\u5b57\u7b26\u6837\u5f0f\u4e3b\u8981\u7528\u4e8e\u7c7b\u4f3c\u6807\u9898\u7684\u8f83\u5c11\u6587\u5b57\u7684\u6392\u7248\uff0c\u800c\u6bb5\u843d\u6837\u5f0f\u7684\u8bbe\u7f6e\u9009\u9879\u591a\u5e94\u7528\u4e8e\u7c7b\u4f3c\u6b63\u6587\u7684\u5927\u6bb5\u6587\u5b57\u7684\u6392\u7248\u3002 \u8bbe\u7f6e\u6bb5\u843d\u5bf9\u9f50 \u00b6 \u5728\u201c\u6bb5\u843d\u201d\u9762\u677f\u9876\u90e8\u53ef\u4ee5\u5bf9\u6bb5\u843d\u7684\u5bf9\u9f50\u65b9\u5f0f\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u201c\u5de6\u5bf9\u9f50\u6587\u672c\u201d\u6309\u94ae\u53ef\u4f7f\u6587\u5b57\u5de6\u5bf9\u9f50\uff0c\u6bb5\u843d\u53f3\u7aef\u53c2\u5dee\u4e0d\u9f50\u3002 \u5728\u201c\u6bb5\u843d\u201d\u9762\u677f\u9876\u90e8\u53ef\u4ee5\u5bf9\u6bb5\u843d\u7684\u5bf9\u9f50\u65b9\u5f0f\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u201c\u5de6\u5bf9\u9f50\u6587\u672c\u201d\u6309\u94ae\u53ef\u4f7f\u6587\u5b57\u5de6\u5bf9\u9f50\uff0c\u6bb5\u843d\u53f3\u7aef\u53c2\u5dee\u4e0d\u9f50\u3002 \u5355\u51fb\u201c\u6700\u540e\u4e00\u884c\u5de6\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u4f7f\u6700\u540e\u4e00\u884c\u5de6\u5bf9\u9f50\uff0c\u5176\u4ed6\u884c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002\u5355\u51fb\u201c\u6700\u540e\u4e00\u884c\u5c45\u4e2d\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u4f7f\u6700\u540e\u4e00\u884c\u5c45\u4e2d\u5bf9\u9f50\uff0c\u5176\u4ed6\u884c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002 \u5355\u51fb\u201c\u6700\u540e\u4e00\u884c\u53f3\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u4f7f\u6700\u540e\u4e00\u884c\u53f3\u5bf9\u9f50\uff0c\u5176\u4ed6\u884c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002\u5355\u51fb\u201c\u5168\u90e8\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u5728\u5b57\u7b26\u95f4\u6dfb\u52a0\u989d\u5916\u7684\u95f4\u8ddd\uff0c\u4f7f\u6587\u672c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002 \u8bbe\u7f6e\u6bb5\u843d\u7f29\u8fdb \u00b6 \u201c\u5de6\u7f29\u8fdb\u201d\u6309\u94ae \u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u5411\u53f3\uff08\u6a2a\u6392\u6587\u5b57\uff09\u6216\u5411\u4e0b\uff08\u76f4\u6392\u6587\u5b57\uff09\u7684\u7f29\u8fdb\u91cf\u3002 \u201c\u53f3\u7f29\u8fdb\u201d\u6309\u94ae \u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u5411\u5de6\uff08\u6a2a\u6392\u6587\u5b57\uff09\u6216\u5411\u4e0a\uff08\u76f4\u6392\u6587\u5b57\uff09\u7684\u7f29\u8fdb\u91cf\u3002 \u201c\u9996\u884c\u7f29\u8fdb\u201d\u6309\u94ae \u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u4e2d\u6bcf\u4e2a\u6bb5\u843d\u7684\u7b2c 1 \u884c\u5411\u53f3\uff08\u6a2a\u6392\u6587\u5b57\uff09\u6216\u7b2c 1 \u5217\u6587\u5b57\u5411\u4e0b\uff08\u76f4\u6392\u6587\u5b57\uff09\u7684\u7f29\u8fdb\u91cf\u3002 \u8bbe\u7f6e\u6bb5\u843d\u7a7a\u683c \u00b6 \u5355\u51fb\u201c\u6bb5\u524d\u6dfb\u52a0\u7a7a\u683c\u201d\u6309\u94ae\uff0c\u8bbe\u7f6e\u5149\u6807\u6240\u5728\u6bb5\u843d\u4e0e\u524d\u4e00\u4e2a\u6bb5\u843d\u4e4b\u95f4\u7684\u95f4\u9694\u8ddd\u79bb\u3002 \u5355\u51fb\u201c\u6bb5\u540e\u6dfb\u52a0\u7a7a\u683c\u201d\u6309\u94ae\uff0c\u8bbe\u7f6e\u5f53\u524d\u6bb5\u843d\u4e0e\u540e\u4e00\u4e2a\u6bb5\u843d\u4e4b\u95f4\u7684\u95f4\u9694\u8ddd\u79bb\u3002 \u521b\u5efa\u6587\u5b57 \u00b6 \u70b9\u6587\u5b57 \u00b6 \u70b9\u6587\u5b57\u662f\u4e00\u4e2a\u6c34\u5e73\u6216\u5782\u76f4\u7684\u6587\u672c\u884c\uff0c\u6bcf\u884c\u6587\u5b57\u90fd\u662f\u72ec\u7acb\u7684\u3002\u884c\u7684\u957f\u5ea6\u968f\u7740\u6587\u5b57\u7684\u8f93\u5165\u800c\u4e0d\u65ad\u589e\u52a0\uff0c\u4e0d\u4f1a\u8fdb\u884c\u81ea\u52a8\u6362\u884c\uff0c\u9700\u8981\u624b\u52a8\u6309 Enter \u952e\u8fdb\u884c\u6362\u884c\u3002\u4f7f\u7528\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d\u5728\u753b\u9762\u4e2d\u5355\u51fb\u63d2\u5165\u5149\u6807\uff0c\u7136\u540e\u952e\u5165\u6587\u5b57\u3002 \u6bb5\u843d\u6587\u5b57 \u00b6 \u6bb5\u843d\u6587\u5b57\u5728\u5e73\u9762\u8bbe\u8ba1\u4e2d\u7684\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\uff0c\u7531\u4e8e\u5177\u6709\u81ea\u52a8\u6362\u884c\u3001\u53ef\u8c03\u6574\u6587\u5b57\u533a\u57df\u5927\u5c0f\u7b49\u4f18\u52bf\uff0c\u6240\u4ee5\u5e38\u7528\u4e8e\u5927\u91cf\u7684\u6587\u672c\u6392\u7248\u4e2d\uff0c\u5982\u6d77\u62a5\u3001\u753b\u518c\u3001\u6742\u5fd7\u6392\u7248\u7b49\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d\u6309\u94ae\uff0c\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5408\u9002\u7684\u5b57\u4f53\u53ca\u5927\u5c0f\uff0c\u5728\u64cd\u4f5c\u754c\u9762\u5355\u51fb\u5e76\u62d6\u62fd\u5149\u6807\u521b\u5efa\u51fa\u6587\u672c\u6846\uff0c\u7136\u540e\u8f93\u5165\u6240\u9700\u6587\u5b57\u3002 \u8def\u5f84\u6587\u5b57 \u00b6 \u8def\u5f84\u6587\u5b57\u5e38\u7528\u4e8e\u521b\u5efa\u8d70\u5411\u4e0d\u89c4\u5219\u7684\u6587\u5b57\u884c\uff0c\u5728 Photoshop \u4e2d\u4e3a\u4e86\u5236\u4f5c\u8def\u5f84\u6587\u5b57\u9700\u8981\u5148\u7ed8\u5236\u8def\u5f84\uff0c\u7136\u540e\u5c06\u6587\u5b57\u5de5\u5177\u6307\u5b9a\u5230\u8def\u5f84\u4e0a\uff0c\u521b\u5efa \u7684 \u6587 \u5b57 \u4f1a \u6cbf \u7740 \u8def \u5f84 \u6392 \u5217\u3002 \u6539 \u53d8 \u8def \u5f84 \u5f62 \u72b6\u65f6\uff0c\u6587\u5b57\u7684\u6392\u5217\u65b9\u5f0f\u4e5f\u4f1a\u968f\u4e4b\u53d1\u751f\u6539\u53d8\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6309\u94ae\uff0c\u6cbf\u4eba\u50cf\u5916\u8f6e\u5ed3\u8fb9\u7f18\u7ed8\u5236\u4e00\u6bb5\u5f27\u5f62\u8def\u5f84\u3002\u7136\u540e\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d\u6309\u94ae\uff0c\u9009\u62e9\u5408\u9002\u7684\u5b57\u4f53\u53ca\u5927\u5c0f\uff0c\u5c06\u5149\u6807\u79fb\u52a8\u5230\u8def\u5f84\u7684\u4e00\u7aef\u4e0a\uff0c\u5f53\u5149\u6807\u6539\u53d8\u65f6\u8f93\u5165\u6587\u5b57 \u7ec3\u4e60\uff1a \u8def\u5f84\u6587\u5b57\u7ec3\u4e60 \u53d8\u5f62\u6587\u5b57 \u00b6 \u5728 Photoshop \u4e2d\uff0c\u6587\u5b57\u5bf9\u8c61\u53ef\u4ee5\u8fdb\u884c\u4e00\u7cfb\u5217\u5185\u7f6e\u7684\u53d8\u5f62\u6548\u679c\uff0c\u901a\u8fc7\u8fd9\u4e9b\u53d8\u5f62\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e0d\u6805\u683c\u5316\u6587\u5b57\u56fe\u5c42\u7684\u72b6\u6001\u4e0b\u5236\u4f5c\u591a\u79cd\u53d8\u5f62\u6587\u5b57\u3002\u8f93\u5165\u6587\u5b57\u4ee5\u540e\uff0c\u5728\u6587\u5b57\u5de5\u5177\u7684\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u521b\u5efa\u6587\u5b57\u53d8\u5f62\u201d\u6309\u94ae ,\u6253\u5f00\u201c\u53d8\u5f62\u6587\u5b57\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u5355\u51fb\u201c\u6837\u5f0f\u201d\u5217\u8868\u53ef\u4ee5\u9009\u62e9\u53d8\u5f62\u65b9\u5f0f\u3002 \u7f16\u8f91\u6587\u672c \u00b6 \u8c03\u6574\u6587\u5b57\u5916\u6846 \u00b6 \u5728\u8f93\u5165\u6587\u5b57\u72b6\u6001\u4e0b\u6309\u4f4f Ctrl \u952e\uff0c\u6587\u5b57\u56db\u5468\u4f1a\u51fa\u73b0\u6587\u672c\u5916\u6846\uff0c\u62d6\u62fd\u53d8\u6362\u6587\u672c\u6846\uff0c\u53ef\u4ee5\u6539\u53d8\u6587\u5b57\u5927\u5c0f\u3001\u89d2\u5ea6\u3001\u65b9\u5411\u7b49. \u62fc\u5199\u68c0\u67e5 \u00b6 \u5982\u679c\u8981\u68c0\u67e5\u5f53\u524d\u6587\u672c\u4e2d\u7684\u82f1\u6587\u5355\u8bcd\u62fc\u5199\u662f\u5426\u6709\u8bef\uff0c\u53ef\u4ee5\u5148\u9009\u62e9\u6587\u672c\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u62fc\u5199\u68c0\u67e5\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u62fc\u5199\u68c0\u67e5\u201d\u5bf9\u8bdd\u6846\uff0cPhotoshop \u4f1a\u63d0\u4f9b\u4fee\u6539\u5efa\u8bae\u3002 \u67e5\u627e\u548c\u66ff\u6362\u6587\u672c \u00b6 \u4f7f\u7528\u201c\u67e5\u627e\u548c\u66ff\u6362\u6587\u672c\u201d\u547d\u4ee4\u80fd\u591f\u5feb\u901f\u5730\u67e5\u627e\u548c\u66ff\u6362\u6307\u5b9a\u7684\u6587\u5b57\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u67e5\u627e\u548c\u66ff\u6362\u6587\u672c\u201d\u547d\u4ee4\u3002\u53ef\u4ee5\u6253\u5f00\u201c\u67e5\u627e\u548c\u66ff\u6362\u6587\u672c\u201d\u5bf9\u8bdd\u6846\uff0c\u4ece\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u67e5\u627e\u548c\u66ff\u6362\u53c2\u6570\u3002 \u70b9\u6587\u672c\u548c\u6bb5\u843d\u6587\u672c\u7684\u8f6c\u6362 \u00b6 \u4e0e\u66f4\u6539\u6587\u5b57\u7684\u65b9\u5411\u76f8\u540c\uff0c\u70b9\u6587\u672c\u4e0e\u6bb5\u843d\u6587\u672c\u4e5f\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\u7684\uff0c\u5982\u679c\u5f53\u524d\u9009\u62e9\u7684\u662f\u70b9\u6587\u672c\uff0c\u6267\u884c\u201c\u7c7b\u578b > \u8f6c\u6362\u4e3a\u6bb5\u843d\u6587\u672c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u70b9\u6587\u672c\u8f6c\u6362\u4e3a\u6bb5\u843d\u6587\u672c\uff1b\u5982\u679c\u5f53\u524d\u9009\u62e9\u7684\u662f\u6bb5\u843d\u6587\u672c\uff0c\u6267\u884c\u201c\u7c7b\u578b > \u8f6c\u6362\u4e3a\u70b9\u6587\u672c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u6bb5\u843d\u6587\u672c\u8f6c\u6362\u4e3a\u70b9\u6587\u672c\u3002 \u7f16\u8f91\u6bb5\u843d\u6587\u672c \u00b6 \u521b\u5efa\u6bb5\u843d\u6587\u672c\u4ee5\u540e\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u6765\u8c03\u6574\u6587\u672c\u6846\u7684\u5927\u5c0f\uff0c\u6587\u5b57\u4f1a\u81ea\u52a8\u5728\u8c03\u6574\u540e\u7684\u6587\u672c\u6846\u5185\u91cd\u65b0\u6392\u5217\u3002\u53e6\u5916\uff0c \u901a\u8fc7\u6587\u672c\u6846\u8fd8\u53ef\u4ee5\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u659c\u5207\u6587\u5b57\u3002 \u8f6c\u6362\u6587\u5b57\u56fe\u5c42 \u00b6 \u5c06\u6587\u5b57\u56fe\u5c42\u8f6c\u5316\u4e3a\u666e\u901a\u56fe\u5c42 \u00b6 Photoshop \u4e2d\u7684\u6587\u5b57\u56fe\u5c42\u4e0d\u80fd\u76f4\u63a5\u5e94\u7528\u6ee4\u955c\u6216\u8fdb\u884c\u6d82\u62b9\u7ed8\u5236\u7b49\u53d8\u6362\u64cd\u4f5c\uff0c\u82e5\u8981\u5bf9\u6587\u672c\u5e94\u7528\u8fd9\u4e9b\u6ee4\u955c\u6216\u53d8\u6362\uff0c\u5c31\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\uff0c\u4f7f\u77e2\u91cf\u6587\u5b57\u5bf9\u8c61\u53d8\u6210\u50cf\u7d20\u56fe\u50cf\u3002\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u6587\u5b57\u56fe\u5c42\uff0c\u7136\u540e\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u6805\u683c\u5316\u6587\u5b57\u201d\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5c06\u6587\u5b57\u56fe\u5c42\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\u3002 \u5c06\u6587\u5b57\u8f6c\u5316\u4e3a\u5f62\u72b6 \u00b6 \u9009\u62e9\u6587\u5b57\u56fe\u5c42\uff0c\u7136\u540e\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u8f6c\u6362\u4e3a\u5f62\u72b6\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u6587\u5b57\u8f6c\u6362\u4e3a\u5f62\u72b6\u56fe\u5c42\u3002 \u521b\u5efa\u6587\u5b57\u7684\u5de5\u4f5c\u8def\u5f84 \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u6587\u5b57\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u7c7b\u578b > \u521b\u5efa\u5de5\u4f5c\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u6587\u5b57\u7684\u8f6e\u5ed3\u8f6c\u6362\u4e3a\u5de5\u4f5c\u8def\u5f84\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u65e2\u80fd\u591f\u5f97\u5230\u6587\u5b57\u8def\u5f84\uff0c\u53c8\u4e0d\u7834\u574f\u6587\u5b57\u56fe\u5c42\u3002 \u7ec3\u4e60 \u00b6 \u4f7f\u7528\u6587\u5b57\u5de5\u5177\u5236\u4f5c\u6e05\u65b0\u81ea\u7136\u98ce\u827a\u672f\u5b57","title":"\u6587\u5b57\u7684\u827a\u672f"},{"location":"PS/PS6/#_1","text":"","title":"\u8ba4\u8bc6\u6587\u5b57\u5de5\u5177\u4e0e\u9762\u677f"},{"location":"PS/PS6/#_2","text":"Photoshop \u4e2d \u5305 \u62ec \u4e24 \u79cd \u6587 \u5b57 \u5de5 \u5177\uff0c \u5206\u522b\u662f\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d \u548c\u201c\u76f4\u6392\u6587\u5b57\u5de5\u5177\u201d \u3002\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d \u53ef\u4ee5\u7528\u6765\u8f93\u5165\u6a2a\u5411\u6392\u5217\u7684\u6587\u5b57\u3002","title":"\u8ba4\u8bc6\u6587\u5b57\u5de5\u5177"},{"location":"PS/PS6/#_3","text":"\u9009\u4e2d\u6587\u672c\uff0c\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u5207\u6362\u6587\u672c\u53d6\u5411\u201d\u6309\u94ae\uff0c\u6216\u8005\u6267\u884c\u201c\u7c7b\u578b >\u6587\u672c\u6392\u5217\u65b9\u5411\u201d\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u66f4\u6539\u6587\u5b57\u65b9\u5411\uff0c\u53ef\u4ee5\u5c06\u6a2a\u5411\u6392\u5217\u7684\u6587\u5b57\u66f4\u6539\u4e3a\u76f4\u5411\u6392\u5217\u7684\u6587\u5b57\u3002","title":"\u8bbe\u7f6e\u6587\u672c\u65b9\u5411"},{"location":"PS/PS6/#_4","text":"\u8f93\u5165\u5b57\u4f53\u4e4b\u524d\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u8bbe\u7f6e\u5b57\u4f53\u7cfb\u5217\u201d\u4e0b\u62c9\u5012\u4e09\u89d2\u56fe\u6807\uff0c\u9009\u62e9\u5408\u9002\u7684\u5b57\u4f53\u3002\u6216\u8005\u6267\u884c\u201c\u7a97\u53e3 > \u5b57\u7b26\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u5b57\u7b26\u201d\u9762\u677f\uff0c\u5e76\u5728\u201c\u5b57\u7b26\u201d\u9762\u677f\u4e2d\u9009\u62e9\u5408\u9002\u5b57\u4f53\u3002","title":"\u8bbe\u7f6e\u5b57\u4f53"},{"location":"PS/PS6/#_5","text":"\u5b57\u4f53\u6837\u5f0f\u53ea\u9488\u5bf9\u90e8\u5206\u82f1\u6587\u5b57\u4f53\u6709\u6548\u3002\u8f93\u5165\u5b57\u7b26\u540e\uff0c\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5b57\u4f53\u7684\u6837\u5f0f\uff0c\u5305\u62ec Regular\uff08\u89c4\u5219\uff09\u3001Italic\uff08\u659c\u4f53\uff09\u3001Bold\uff08\u7c97\u4f53\uff09\u548c Bold Italic\uff08\u7c97\u659c\u4f53\uff09\u3002","title":"\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5b57\u4f53\u6837\u5f0f"},{"location":"PS/PS6/#_6","text":"\u53ef\u4ee5\u5728\u9009\u62e9\u6587\u5b57\u5bf9\u8c61\u7684\u72b6\u6001\u4e0b\u76f4\u63a5\u5728\u9009\u9879\u680f\u4e2d\u8f93\u5165\u6570\u503c\uff0c\u6216\u5728\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u9884\u8bbe\u7684\u5b57\u53f7\uff0c\u6216\u8005\u4e5f\u53ef\u5728\u6253\u5f00\u7684\u201c\u5b57\u7b26\u201d\u9762\u677f\u4e2d\u8fdb\u884c\u5b57\u53f7\u7684\u8bbe\u7f6e\u3002","title":"\u8bbe\u7f6e\u5b57\u53f7"},{"location":"PS/PS6/#_7","text":"\u8f93\u5165\u6587\u5b57\u4ee5\u540e\uff0c\u53ef\u4ee5\u5728\u9009\u9879\u680f\u4e2d\u4e3a\u6587\u5b57\u6307\u5b9a\u4e00\u79cd\u6d88\u9664\u952f\u9f7f\u7684\u65b9\u5f0f\uff0c\u5176\u5dee\u522b\u4e3b\u8981\u4f53\u73b0\u5728\u6587\u5b57\u7684\u8fb9\u7f18\u5904\u3002","title":"\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u6d88\u9664\u952f\u9f7f\u65b9\u5f0f"},{"location":"PS/PS6/#_8","text":"\u6587\u672c\u5bf9\u9f50\u662f\u6839\u636e\u8f93\u5165\u5b57\u7b26\u65f6\u5149\u6807\u7684\u4f4d\u7f6e\u6765\u8bbe\u7f6e\u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\u7684\u3002\u5728\u6587\u5b57\u5de5\u5177\u7684\u9009\u9879\u680f\u4e2d\u63d0\u4f9b\u4e86 3 \u79cd\u8bbe\u7f6e\u6587\u672c\u6bb5\u843d\u5bf9\u9f50\u65b9\u5f0f\u7684\u6309\u94ae\uff1a\u201c\u5de6\u5bf9\u9f50\u6587\u672c\u201d \u3001\u201c\u5c45\u4e2d\u5bf9\u9f50\u6587\u672c\u201d \u548c\u201c\u53f3\u5bf9\u9f50\u6587\u672c\u201d \u3002\u9009\u62e9\u6587\u672c\u4ee5\u540e\uff0c\u5355\u51fb\u6240\u9700\u8981\u7684\u5bf9\u9f50\u6309\u94ae\uff0c\u5c31\u53ef\u4ee5\u4f7f\u6587\u672c\u6309\u6307\u5b9a\u7684\u65b9\u5f0f\u5bf9\u9f50\u3002","title":"\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u6587\u672c\u5bf9\u9f50"},{"location":"PS/PS6/#_9","text":"\u8f93\u5165\u6587\u672c\u65f6\uff0c\u6587\u672c\u989c\u8272\u9ed8\u8ba4\u4e3a\u524d\u666f\u8272\u3002\u5982\u679c\u8981\u4fee\u6539\u6587\u5b57\u989c\u8272\uff0c\u53ef\u4ee5\u5148\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u6587\u672c\u56fe\u5c42\uff0c\u7136\u540e\u5728\u9009\u9879\u680f\u4e2d\u5355\u51fb\u989c\u8272\u5757\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u9009\u62e9\u6587\u672c\u989c\u8272\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u6240\u9700\u8981\u7684\u989c\u8272\u3002\u5982\u679c\u8981\u66f4\u6539\u90e8\u5206\u6587\u5b57\u989c\u8272\uff0c\u9700\u8981\u6846\u9009\u8fd9\u90e8\u5206\u6587\u5b57\u540e\u8fdb\u884c\u66f4\u6539\u3002","title":"\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u6587\u672c\u989c\u8272"},{"location":"PS/PS6/#_10","text":"\u4f7f\u7528\u6587\u5b57\u8499\u7248\u5de5\u5177\u53ef\u4ee5\u521b\u5efa\u6587\u5b57\u9009\u533a\u3002\u6587\u5b57\u8499\u7248\u5de5\u5177\u5305\u62ec\u201c\u6a2a\u6392\u6587\u5b57\u8499\u7248\u5de5\u5177\u201d \u548c\u201c\u76f4\u6392\u6587\u5b57\u8499\u7248\u5de5\u5177\u201d \u4e24\u79cd\u3002\u4f7f\u7528\u6587\u5b57\u8499\u7248\u5de5\u5177\u8f93\u5165\u6587\u5b57\u4ee5\u540e\uff0c\u6587\u5b57\u5c06\u4ee5\u9009\u533a\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u5728\u6587\u5b57\u9009\u533a\u4e2d\uff0c\u53ef\u4ee5\u586b\u5145\u524d\u666f\u8272\u3001\u80cc\u666f\u8272\u4ee5\u53ca\u6e10\u53d8\u8272\u7b49\u3002","title":"\u8ba4\u8bc6\u6587\u5b57\u8499\u7248\u5de5\u5177"},{"location":"PS/PS6/#_11","text":"\u5728\u6587\u5b57\u5de5\u5177\u7684\u9009\u9879\u680f\u4e2d\uff0c\u53ef\u4ee5\u5feb\u6377\u5730\u5bf9\u6587\u672c\u7684\u90e8\u5206\u5c5e\u6027\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u8981\u5bf9\u6587\u672c\u8fdb\u884c\u66f4\u591a\u7684\u8bbe\u7f6e\uff0c\u5c31\u9700\u8981\u4f7f\u7528 \u201c\u5b57 \u7b26\u201d\u9762\u677f\u3002\u5728\u201c\u5b57\u7b26\u201d\u9762\u677f\u4e2d\uff0c\u9664\u4e86\u5305\u62ec\u5e38\u89c1\u7684\u5b57\u4f53\u7cfb\u5217\u3001\u5b57\u4f53\u6837\u5f0f\u3001\u5b57\u53f7\u3001\u6587\u672c\u989c\u8272\u548c\u6d88\u9664\u952f\u9f7f\u7b49\u8bbe\u7f6e\uff0c\u8fd8\u5305\u62ec\u884c\u8ddd\u3001\u5b57\u8ddd\u7b49\u5e38\u89c1\u8bbe\u7f6e\u3002","title":"\u8be6\u89e3\u201c\u5b57\u7b26\u201d\u9762\u677f"},{"location":"PS/PS6/#_12","text":"\u201c\u6bb5\u843d\u201d\u9762\u677f\u63d0\u4f9b\u4e86\u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u7f16\u6392\u683c\u5f0f\u7684\u6240\u6709\u9009\u9879\u3002\u901a\u8fc7\u201c\u6bb5\u843d\u201d\u9762\u677f\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u7684\u5bf9\u9f50\u65b9\u5f0f\u548c\u7f29\u8fdb\u91cf\u7b49\u53c2\u6570\u3002","title":"\u8be6\u89e3\u6bb5\u843d\u9762\u677f"},{"location":"PS/PS6/#_13","text":"\u5728\u8fdb\u884c\u4e66\u7c4d\u3001\u62a5\u520a\u6742\u5fd7\u7b49\u5305\u542b\u5927\u91cf\u6587\u5b57\u6392\u7248\u7684\u4efb\u52a1\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u4e3a\u591a\u4e2a\u6587\u5b57\u56fe\u5c42\u8d4b\u4e88\u76f8\u540c\u7684\u6837\u5f0f\uff0c\u800c\u5728 Photoshop \u4e2d\u63d0\u4f9b\u7684\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f\u4e3a\u6b64\u7c7b\u64cd\u4f5c\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u64cd\u4f5c\u65b9\u5f0f\u3002\u5728\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u53ef\u4ee5\u521b\u5efa\u5b57\u7b26\u6837\u5f0f\u3001\u66f4 \u6539\u5b57\u7b26\u5c5e\u6027\uff0c\u5e76\u5c06\u5b57\u7b26\u5c5e\u6027\u5b58\u50a8\u5728\u5b57\u7b26\u6837\u5f0f\u9762\u677f\u4e2d\u3002\u5728\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u53ea\u9700\u8981\u9009\u4e2d\u6587\u5b57\u56fe\u5c42\uff0c\u5e76\u5355\u51fb\u76f8\u5e94\u5b57\u7b26\u6837\u5f0f\u5373 \u53ef\u3002","title":"\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f"},{"location":"PS/PS6/#_14","text":"\u201c\u6bb5\u843d\u6837\u5f0f\u201d\u9762\u677f\u4e0e\u201c\u5b57\u7b26\u6837\u5f0f\u201d\u9762\u677f\u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\uff0c\u90fd\u53ef\u4ee5\u8fdb\u884c\u6837\u5f0f\u7684\u5b9a\u4e49\u3001\u7f16\u8f91\u4e0e\u8c03\u7528\u3002\u5b57\u7b26\u6837\u5f0f\u4e3b\u8981\u7528\u4e8e\u7c7b\u4f3c\u6807\u9898\u7684\u8f83\u5c11\u6587\u5b57\u7684\u6392\u7248\uff0c\u800c\u6bb5\u843d\u6837\u5f0f\u7684\u8bbe\u7f6e\u9009\u9879\u591a\u5e94\u7528\u4e8e\u7c7b\u4f3c\u6b63\u6587\u7684\u5927\u6bb5\u6587\u5b57\u7684\u6392\u7248\u3002","title":"\u201c\u6bb5\u843d\u6837\u5f0f\u201d\u9762\u677f"},{"location":"PS/PS6/#_15","text":"\u5728\u201c\u6bb5\u843d\u201d\u9762\u677f\u9876\u90e8\u53ef\u4ee5\u5bf9\u6bb5\u843d\u7684\u5bf9\u9f50\u65b9\u5f0f\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u201c\u5de6\u5bf9\u9f50\u6587\u672c\u201d\u6309\u94ae\u53ef\u4f7f\u6587\u5b57\u5de6\u5bf9\u9f50\uff0c\u6bb5\u843d\u53f3\u7aef\u53c2\u5dee\u4e0d\u9f50\u3002 \u5728\u201c\u6bb5\u843d\u201d\u9762\u677f\u9876\u90e8\u53ef\u4ee5\u5bf9\u6bb5\u843d\u7684\u5bf9\u9f50\u65b9\u5f0f\u8fdb\u884c\u8bbe\u7f6e\u3002\u5355\u51fb\u201c\u5de6\u5bf9\u9f50\u6587\u672c\u201d\u6309\u94ae\u53ef\u4f7f\u6587\u5b57\u5de6\u5bf9\u9f50\uff0c\u6bb5\u843d\u53f3\u7aef\u53c2\u5dee\u4e0d\u9f50\u3002 \u5355\u51fb\u201c\u6700\u540e\u4e00\u884c\u5de6\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u4f7f\u6700\u540e\u4e00\u884c\u5de6\u5bf9\u9f50\uff0c\u5176\u4ed6\u884c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002\u5355\u51fb\u201c\u6700\u540e\u4e00\u884c\u5c45\u4e2d\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u4f7f\u6700\u540e\u4e00\u884c\u5c45\u4e2d\u5bf9\u9f50\uff0c\u5176\u4ed6\u884c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002 \u5355\u51fb\u201c\u6700\u540e\u4e00\u884c\u53f3\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u4f7f\u6700\u540e\u4e00\u884c\u53f3\u5bf9\u9f50\uff0c\u5176\u4ed6\u884c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002\u5355\u51fb\u201c\u5168\u90e8\u5bf9\u9f50\u201d\u6309\u94ae \u53ef\u5728\u5b57\u7b26\u95f4\u6dfb\u52a0\u989d\u5916\u7684\u95f4\u8ddd\uff0c\u4f7f\u6587\u672c\u5de6\u53f3\u4e24\u7aef\u5f3a\u5236\u5bf9\u9f50\u3002","title":"\u8bbe\u7f6e\u6bb5\u843d\u5bf9\u9f50"},{"location":"PS/PS6/#_16","text":"\u201c\u5de6\u7f29\u8fdb\u201d\u6309\u94ae \u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u5411\u53f3\uff08\u6a2a\u6392\u6587\u5b57\uff09\u6216\u5411\u4e0b\uff08\u76f4\u6392\u6587\u5b57\uff09\u7684\u7f29\u8fdb\u91cf\u3002 \u201c\u53f3\u7f29\u8fdb\u201d\u6309\u94ae \u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u5411\u5de6\uff08\u6a2a\u6392\u6587\u5b57\uff09\u6216\u5411\u4e0a\uff08\u76f4\u6392\u6587\u5b57\uff09\u7684\u7f29\u8fdb\u91cf\u3002 \u201c\u9996\u884c\u7f29\u8fdb\u201d\u6309\u94ae \u7528\u4e8e\u8bbe\u7f6e\u6bb5\u843d\u6587\u672c\u4e2d\u6bcf\u4e2a\u6bb5\u843d\u7684\u7b2c 1 \u884c\u5411\u53f3\uff08\u6a2a\u6392\u6587\u5b57\uff09\u6216\u7b2c 1 \u5217\u6587\u5b57\u5411\u4e0b\uff08\u76f4\u6392\u6587\u5b57\uff09\u7684\u7f29\u8fdb\u91cf\u3002","title":"\u8bbe\u7f6e\u6bb5\u843d\u7f29\u8fdb"},{"location":"PS/PS6/#_17","text":"\u5355\u51fb\u201c\u6bb5\u524d\u6dfb\u52a0\u7a7a\u683c\u201d\u6309\u94ae\uff0c\u8bbe\u7f6e\u5149\u6807\u6240\u5728\u6bb5\u843d\u4e0e\u524d\u4e00\u4e2a\u6bb5\u843d\u4e4b\u95f4\u7684\u95f4\u9694\u8ddd\u79bb\u3002 \u5355\u51fb\u201c\u6bb5\u540e\u6dfb\u52a0\u7a7a\u683c\u201d\u6309\u94ae\uff0c\u8bbe\u7f6e\u5f53\u524d\u6bb5\u843d\u4e0e\u540e\u4e00\u4e2a\u6bb5\u843d\u4e4b\u95f4\u7684\u95f4\u9694\u8ddd\u79bb\u3002","title":"\u8bbe\u7f6e\u6bb5\u843d\u7a7a\u683c"},{"location":"PS/PS6/#_18","text":"","title":"\u521b\u5efa\u6587\u5b57"},{"location":"PS/PS6/#_19","text":"\u70b9\u6587\u5b57\u662f\u4e00\u4e2a\u6c34\u5e73\u6216\u5782\u76f4\u7684\u6587\u672c\u884c\uff0c\u6bcf\u884c\u6587\u5b57\u90fd\u662f\u72ec\u7acb\u7684\u3002\u884c\u7684\u957f\u5ea6\u968f\u7740\u6587\u5b57\u7684\u8f93\u5165\u800c\u4e0d\u65ad\u589e\u52a0\uff0c\u4e0d\u4f1a\u8fdb\u884c\u81ea\u52a8\u6362\u884c\uff0c\u9700\u8981\u624b\u52a8\u6309 Enter \u952e\u8fdb\u884c\u6362\u884c\u3002\u4f7f\u7528\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d\u5728\u753b\u9762\u4e2d\u5355\u51fb\u63d2\u5165\u5149\u6807\uff0c\u7136\u540e\u952e\u5165\u6587\u5b57\u3002","title":"\u70b9\u6587\u5b57"},{"location":"PS/PS6/#_20","text":"\u6bb5\u843d\u6587\u5b57\u5728\u5e73\u9762\u8bbe\u8ba1\u4e2d\u7684\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\uff0c\u7531\u4e8e\u5177\u6709\u81ea\u52a8\u6362\u884c\u3001\u53ef\u8c03\u6574\u6587\u5b57\u533a\u57df\u5927\u5c0f\u7b49\u4f18\u52bf\uff0c\u6240\u4ee5\u5e38\u7528\u4e8e\u5927\u91cf\u7684\u6587\u672c\u6392\u7248\u4e2d\uff0c\u5982\u6d77\u62a5\u3001\u753b\u518c\u3001\u6742\u5fd7\u6392\u7248\u7b49\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d\u6309\u94ae\uff0c\u5728\u9009\u9879\u680f\u4e2d\u8bbe\u7f6e\u5408\u9002\u7684\u5b57\u4f53\u53ca\u5927\u5c0f\uff0c\u5728\u64cd\u4f5c\u754c\u9762\u5355\u51fb\u5e76\u62d6\u62fd\u5149\u6807\u521b\u5efa\u51fa\u6587\u672c\u6846\uff0c\u7136\u540e\u8f93\u5165\u6240\u9700\u6587\u5b57\u3002","title":"\u6bb5\u843d\u6587\u5b57"},{"location":"PS/PS6/#_21","text":"\u8def\u5f84\u6587\u5b57\u5e38\u7528\u4e8e\u521b\u5efa\u8d70\u5411\u4e0d\u89c4\u5219\u7684\u6587\u5b57\u884c\uff0c\u5728 Photoshop \u4e2d\u4e3a\u4e86\u5236\u4f5c\u8def\u5f84\u6587\u5b57\u9700\u8981\u5148\u7ed8\u5236\u8def\u5f84\uff0c\u7136\u540e\u5c06\u6587\u5b57\u5de5\u5177\u6307\u5b9a\u5230\u8def\u5f84\u4e0a\uff0c\u521b\u5efa \u7684 \u6587 \u5b57 \u4f1a \u6cbf \u7740 \u8def \u5f84 \u6392 \u5217\u3002 \u6539 \u53d8 \u8def \u5f84 \u5f62 \u72b6\u65f6\uff0c\u6587\u5b57\u7684\u6392\u5217\u65b9\u5f0f\u4e5f\u4f1a\u968f\u4e4b\u53d1\u751f\u6539\u53d8\u3002\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u94a2\u7b14\u5de5\u5177\u201d\u6309\u94ae\uff0c\u6cbf\u4eba\u50cf\u5916\u8f6e\u5ed3\u8fb9\u7f18\u7ed8\u5236\u4e00\u6bb5\u5f27\u5f62\u8def\u5f84\u3002\u7136\u540e\u5355\u51fb\u5de5\u5177\u7bb1\u4e2d\u7684\u201c\u6a2a\u6392\u6587\u5b57\u5de5\u5177\u201d\u6309\u94ae\uff0c\u9009\u62e9\u5408\u9002\u7684\u5b57\u4f53\u53ca\u5927\u5c0f\uff0c\u5c06\u5149\u6807\u79fb\u52a8\u5230\u8def\u5f84\u7684\u4e00\u7aef\u4e0a\uff0c\u5f53\u5149\u6807\u6539\u53d8\u65f6\u8f93\u5165\u6587\u5b57 \u7ec3\u4e60\uff1a \u8def\u5f84\u6587\u5b57\u7ec3\u4e60","title":"\u8def\u5f84\u6587\u5b57"},{"location":"PS/PS6/#_22","text":"\u5728 Photoshop \u4e2d\uff0c\u6587\u5b57\u5bf9\u8c61\u53ef\u4ee5\u8fdb\u884c\u4e00\u7cfb\u5217\u5185\u7f6e\u7684\u53d8\u5f62\u6548\u679c\uff0c\u901a\u8fc7\u8fd9\u4e9b\u53d8\u5f62\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e0d\u6805\u683c\u5316\u6587\u5b57\u56fe\u5c42\u7684\u72b6\u6001\u4e0b\u5236\u4f5c\u591a\u79cd\u53d8\u5f62\u6587\u5b57\u3002\u8f93\u5165\u6587\u5b57\u4ee5\u540e\uff0c\u5728\u6587\u5b57\u5de5\u5177\u7684\u9009\u9879\u680f\u4e2d\u5355\u51fb\u201c\u521b\u5efa\u6587\u5b57\u53d8\u5f62\u201d\u6309\u94ae ,\u6253\u5f00\u201c\u53d8\u5f62\u6587\u5b57\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u5355\u51fb\u201c\u6837\u5f0f\u201d\u5217\u8868\u53ef\u4ee5\u9009\u62e9\u53d8\u5f62\u65b9\u5f0f\u3002","title":"\u53d8\u5f62\u6587\u5b57"},{"location":"PS/PS6/#_23","text":"","title":"\u7f16\u8f91\u6587\u672c"},{"location":"PS/PS6/#_24","text":"\u5728\u8f93\u5165\u6587\u5b57\u72b6\u6001\u4e0b\u6309\u4f4f Ctrl \u952e\uff0c\u6587\u5b57\u56db\u5468\u4f1a\u51fa\u73b0\u6587\u672c\u5916\u6846\uff0c\u62d6\u62fd\u53d8\u6362\u6587\u672c\u6846\uff0c\u53ef\u4ee5\u6539\u53d8\u6587\u5b57\u5927\u5c0f\u3001\u89d2\u5ea6\u3001\u65b9\u5411\u7b49.","title":"\u8c03\u6574\u6587\u5b57\u5916\u6846"},{"location":"PS/PS6/#_25","text":"\u5982\u679c\u8981\u68c0\u67e5\u5f53\u524d\u6587\u672c\u4e2d\u7684\u82f1\u6587\u5355\u8bcd\u62fc\u5199\u662f\u5426\u6709\u8bef\uff0c\u53ef\u4ee5\u5148\u9009\u62e9\u6587\u672c\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91 > \u62fc\u5199\u68c0\u67e5\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u62fc\u5199\u68c0\u67e5\u201d\u5bf9\u8bdd\u6846\uff0cPhotoshop \u4f1a\u63d0\u4f9b\u4fee\u6539\u5efa\u8bae\u3002","title":"\u62fc\u5199\u68c0\u67e5"},{"location":"PS/PS6/#_26","text":"\u4f7f\u7528\u201c\u67e5\u627e\u548c\u66ff\u6362\u6587\u672c\u201d\u547d\u4ee4\u80fd\u591f\u5feb\u901f\u5730\u67e5\u627e\u548c\u66ff\u6362\u6307\u5b9a\u7684\u6587\u5b57\u3002\u6267\u884c\u201c\u7f16\u8f91 > \u67e5\u627e\u548c\u66ff\u6362\u6587\u672c\u201d\u547d\u4ee4\u3002\u53ef\u4ee5\u6253\u5f00\u201c\u67e5\u627e\u548c\u66ff\u6362\u6587\u672c\u201d\u5bf9\u8bdd\u6846\uff0c\u4ece\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u67e5\u627e\u548c\u66ff\u6362\u53c2\u6570\u3002","title":"\u67e5\u627e\u548c\u66ff\u6362\u6587\u672c"},{"location":"PS/PS6/#_27","text":"\u4e0e\u66f4\u6539\u6587\u5b57\u7684\u65b9\u5411\u76f8\u540c\uff0c\u70b9\u6587\u672c\u4e0e\u6bb5\u843d\u6587\u672c\u4e5f\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\u7684\uff0c\u5982\u679c\u5f53\u524d\u9009\u62e9\u7684\u662f\u70b9\u6587\u672c\uff0c\u6267\u884c\u201c\u7c7b\u578b > \u8f6c\u6362\u4e3a\u6bb5\u843d\u6587\u672c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u70b9\u6587\u672c\u8f6c\u6362\u4e3a\u6bb5\u843d\u6587\u672c\uff1b\u5982\u679c\u5f53\u524d\u9009\u62e9\u7684\u662f\u6bb5\u843d\u6587\u672c\uff0c\u6267\u884c\u201c\u7c7b\u578b > \u8f6c\u6362\u4e3a\u70b9\u6587\u672c\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u6bb5\u843d\u6587\u672c\u8f6c\u6362\u4e3a\u70b9\u6587\u672c\u3002","title":"\u70b9\u6587\u672c\u548c\u6bb5\u843d\u6587\u672c\u7684\u8f6c\u6362"},{"location":"PS/PS6/#_28","text":"\u521b\u5efa\u6bb5\u843d\u6587\u672c\u4ee5\u540e\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u6765\u8c03\u6574\u6587\u672c\u6846\u7684\u5927\u5c0f\uff0c\u6587\u5b57\u4f1a\u81ea\u52a8\u5728\u8c03\u6574\u540e\u7684\u6587\u672c\u6846\u5185\u91cd\u65b0\u6392\u5217\u3002\u53e6\u5916\uff0c \u901a\u8fc7\u6587\u672c\u6846\u8fd8\u53ef\u4ee5\u65cb\u8f6c\u3001\u7f29\u653e\u548c\u659c\u5207\u6587\u5b57\u3002","title":"\u7f16\u8f91\u6bb5\u843d\u6587\u672c"},{"location":"PS/PS6/#_29","text":"","title":"\u8f6c\u6362\u6587\u5b57\u56fe\u5c42"},{"location":"PS/PS6/#_30","text":"Photoshop \u4e2d\u7684\u6587\u5b57\u56fe\u5c42\u4e0d\u80fd\u76f4\u63a5\u5e94\u7528\u6ee4\u955c\u6216\u8fdb\u884c\u6d82\u62b9\u7ed8\u5236\u7b49\u53d8\u6362\u64cd\u4f5c\uff0c\u82e5\u8981\u5bf9\u6587\u672c\u5e94\u7528\u8fd9\u4e9b\u6ee4\u955c\u6216\u53d8\u6362\uff0c\u5c31\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\uff0c\u4f7f\u77e2\u91cf\u6587\u5b57\u5bf9\u8c61\u53d8\u6210\u50cf\u7d20\u56fe\u50cf\u3002\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u6587\u5b57\u56fe\u5c42\uff0c\u7136\u540e\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u6805\u683c\u5316\u6587\u5b57\u201d\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5c06\u6587\u5b57\u56fe\u5c42\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\u3002","title":"\u5c06\u6587\u5b57\u56fe\u5c42\u8f6c\u5316\u4e3a\u666e\u901a\u56fe\u5c42"},{"location":"PS/PS6/#_31","text":"\u9009\u62e9\u6587\u5b57\u56fe\u5c42\uff0c\u7136\u540e\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u8f6c\u6362\u4e3a\u5f62\u72b6\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u6587\u5b57\u8f6c\u6362\u4e3a\u5f62\u72b6\u56fe\u5c42\u3002","title":"\u5c06\u6587\u5b57\u8f6c\u5316\u4e3a\u5f62\u72b6"},{"location":"PS/PS6/#_32","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u6587\u5b57\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u7c7b\u578b > \u521b\u5efa\u5de5\u4f5c\u8def\u5f84\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u6587\u5b57\u7684\u8f6e\u5ed3\u8f6c\u6362\u4e3a\u5de5\u4f5c\u8def\u5f84\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u65e2\u80fd\u591f\u5f97\u5230\u6587\u5b57\u8def\u5f84\uff0c\u53c8\u4e0d\u7834\u574f\u6587\u5b57\u56fe\u5c42\u3002","title":"\u521b\u5efa\u6587\u5b57\u7684\u5de5\u4f5c\u8def\u5f84"},{"location":"PS/PS6/#_33","text":"\u4f7f\u7528\u6587\u5b57\u5de5\u5177\u5236\u4f5c\u6e05\u65b0\u81ea\u7136\u98ce\u827a\u672f\u5b57","title":"\u7ec3\u4e60"},{"location":"PS/PS7/","text":"\u56fe\u5c42\u7684\u57fa\u7840\u77e5\u8bc6 \u00b6 \u8ba4\u8bc6\u201c\u56fe\u5c42\u201d\u9762\u677f \u00b6 \u201c\u56fe\u5c42\u201d\u9762\u677f\u662f\u7528\u4e8e\u521b\u5efa\u3001\u7f16\u8f91\u548c\u7ba1\u7406\u56fe\u5c42\u4ee5\u53ca\u56fe\u5c42\u6837\u5f0f\u7684\u4e00\u79cd\u76f4\u89c2\u7684\u201c\u63a7\u5236\u5668\u201d\u3002\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\uff0c\u56fe\u5c42\u540d\u79f0\u7684\u5de6\u4fa7\u662f\u56fe\u5c42\u7684\u7f29\u89c8\u56fe\uff0c\u5b83\u663e\u793a\u4e86\u56fe\u5c42\u4e2d\u5305\u542b\u7684\u56fe\u50cf\u5185\u5bb9\uff0c\u800c\u7f29\u89c8\u56fe\u4e2d\u7684\u68cb\u76d8\u683c\u4ee3\u8868\u56fe\u50cf\u7684\u900f\u660e\u533a\u57df\u3002 \u4e86\u89e3\u56fe\u5c42\u7684\u7c7b\u578b \u00b6 Photoshop \u4e2d\u6709\u5f88\u591a\u79cd\u7c7b\u578b\u7684\u56fe\u5c42\uff0c\u5982\u89c6\u9891\u56fe\u5c42\u3001\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u30013D \u56fe\u5c42\u7b49\uff0c\u800c\u6bcf\u79cd\u56fe\u5c42\u90fd\u6709\u4e0d\u540c\u7684\u529f\u80fd\u548c\u7528\u9014\uff1b \u4e5f\u6709\u5904\u4e8e\u4e0d\u540c\u72b6\u6001\u7684\u56fe\u5c42\uff0c\u5982\u9009\u4e2d\u72b6\u6001\u3001\u9501\u5b9a\u72b6\u6001\u3001\u94fe\u63a5\u72b6\u6001\u7b49\uff0c\u5f53\u7136\u5b83\u4eec\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u663e\u793a\u72b6\u6001\u4e5f\u4e0d\u76f8\u540c\u3002 \u65b0\u5efa\u56fe\u5c42 \u00b6 \u521b\u5efa\u666e\u901a\u56fe\u5c42 \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u5e95\u90e8\u5355\u51fb\u201c\u521b\u5efa\u65b0\u56fe\u5c42\u201d\u6309\u94ae\uff0c\u5373\u53ef\u5728\u5f53\u524d\u56fe\u5c42\u7684\u4e0a\u4e00\u5c42\u65b0\u5efa\u4e00\u4e2a\u56fe\u5c42\u3002 \u901a\u8fc7\u62f7\u8d1d\u521b\u5efa\u56fe\u5c42 \u00b6 \u6309 Ctrl+J \u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u5c06\u5f53\u524d\u56fe\u5c42\u590d\u5236\u4e00\u4efd\u3002 \u62f7\u8d1d\u526a\u5207\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u62f7\u8d1d\u526a\u5207\u6cd5\u521b\u5efa\u56fe\u5c42 \u521b\u5efa\u7eaf\u8272\u586b\u5145\u56fe\u5c42 \u00b6 \u7eaf\u8272\u586b\u5145\u56fe\u5c42\u53ef\u4ee5\u7528\u4e00\u79cd\u989c\u8272\u586b\u5145\u56fe\u5c42\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 \u6267\u884c\u201c\u56fe\u5c42 > \u65b0\u5efa\u586b\u5145\u56fe\u5c42 > \u7eaf\u8272\u201d\u547d\u4ee4\u3002\u5728\u201c\u65b0\u5efa\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u76f8\u5173\u9009\u9879\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u6253\u5f00\u201c\u62fe\u53d6\u5b9e\u8272\u201d\u5bf9\u8bdd\u6846\u3002\u7136\u540e\u62fe\u53d6\u4e00\u79cd\u989c\u8272\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u7eaf\u8272\u586b\u5145\u56fe\u5c42\u3002 \u521b\u5efa\u6e10\u53d8\u586b\u5145\u56fe\u5c42 \u00b6 \u6e10\u53d8\u586b\u5145\u56fe\u5c42\u53ef\u4ee5\u7528\u4e00\u79cd\u6e10\u53d8\u8272\u586b\u5145\u56fe\u5c42\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u65b0\u5efa\u586b\u5145\u56fe\u5c42 > \u6e10\u53d8\u201d\u547d\u4ee4\uff0c\u5728\u201c\u65b0\u5efa\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u76f8\u5173\u9009\u9879\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u6253\u5f00\u201c\u6e10\u53d8\u586b\u5145\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u6e10\u53d8\u7684\u989c\u8272\u3001\u6837\u5f0f\u3001\u89d2\u5ea6\u548c\u7f29\u653e\u7b49\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u6e10\u53d8\u586b\u5145\u56fe\u5c42\u3002 \u521b\u5efa\u56fe\u6848\u586b\u5145\u56fe\u5c42 \u00b6 \u56fe\u6848\u586b\u5145\u56fe\u5c42\u53ef\u4ee5\u7528\u4e00\u79cd\u56fe\u6848\u586b\u5145\u56fe\u5c42\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u65b0\u5efa\u586b\u5145\u56fe\u5c42 > \u56fe\u6848\u201d\u547d\u4ee4\uff0c\u5728\u201c\u65b0\u5efa\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u76f8\u5173\u9009\u9879\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u6253\u5f00\u201c\u56fe\u6848\u586b\u5145\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u9009\u62e9\u4e00\u79cd\u56fe\u6848\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u56fe\u6848\u7684\u7f29\u653e\u6bd4\u4f8b\u7b49\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u56fe\u6848\u586b\u5145\u56fe\u5c42\u3002 \u56fe\u5c42\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u9009\u62e9/\u53d6\u6d88\u9009\u62e9\u56fe\u5c42 \u00b6 \u9009\u62e9\u591a\u4e2a\u8fde\u7eed\u7684\u56fe\u5c42 \u00b6 \u5148\u9009\u62e9\u4f4d\u4e8e\u8fde\u7eed\u56fe\u5c42\u9876\u7aef\u7684\u56fe\u5c42\uff0c\u7136\u540e\u6309\u4f4f Shift \u952e\u5355\u51fb\u4f4d\u4e8e\u8fde\u7eed\u56fe\u5c42\u5e95\u7aef\u7684\u56fe\u5c42\uff0c\u5373\u53ef\u9009\u62e9\u8fd9\u4e9b\u8fde\u7eed\u7684\u56fe\u5c42 \u9009\u62e9\u591a\u4e2a\u975e\u8fde\u7eed\u7684\u56fe\u5c42 \u00b6 \u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6309\u4f4f Ctrl \u952e\u5355\u51fb\u5176\u4ed6\u56fe\u5c42\u7684\u540d\u79f0\u3002 \u9009\u62e9\u6240\u6709\u56fe\u5c42 \u00b6 \u6267\u884c\u201c\u9009\u62e9 > \u6240\u6709\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+A \u7ec4\u5408\u952e\u3002\u4f7f\u7528\u8be5\u547d\u4ee4\u53ea\u80fd\u9009\u62e9\u201c\u80cc\u666f\u201d\u56fe\u5c42\u4ee5\u5916\u7684\u56fe\u5c42\uff0c\u5982\u679c\u8981\u9009\u62e9\u5305\u542b\u201c\u80cc\u666f\u201d\u56fe\u5c42\u5728\u5185\u7684\u6240\u6709\u56fe\u5c42\uff0c\u53ef\u4ee5\u6309\u4f4f Ctrl \u952e\u5355\u51fb\u201c\u80cc\u666f\u201d\u56fe\u5c42\u7684\u540d\u79f0\u3002 \u5728\u753b\u5e03\u4e2d\u5feb\u901f\u9009\u62e9\u67d0\u4e00\u56fe\u5c42 \u00b6 \u5f53\u753b\u5e03\u4e2d\u5305\u542b\u5f88\u591a\u76f8\u4e92\u91cd\u53e0\u7684\u56fe\u5c42\uff0c\u96be\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u8fdb\u884c\u8fa8\u522b\u65f6\uff0c\u53ef\u4ee5\u5728\u4f7f\u7528\u201c\u79fb\u52a8\u5de5\u5177\u201d\u72b6\u6001\u4e0b\u53f3\u51fb\u76ee\u6807\u56fe\u50cf\u7684\u4f4d\u7f6e\uff0c\u5728\u663e\u793a\u51fa\u7684\u5f53\u524d\u91cd\u53e0\u56fe\u5c42\u5217\u8868\u4e2d\u9009\u62e9\u9700\u8981\u7684\u56fe\u5c42\u3002 \u5feb\u901f\u9009\u62e9\u94fe\u63a5\u7684\u56fe\u5c42 \u00b6 \u5982\u679c\u8981\u9009\u62e9\u94fe\u63a5\u7684\u56fe\u5c42\uff0c\u53ef\u4ee5\u5148\u9009\u62e9\u4e00\u4e2a\u94fe\u63a5\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u9009\u62e9\u94fe\u63a5\u56fe\u5c42\u201d\u547d\u4ee4\u3002 \u53d6\u6d88\u9009\u62e9\u56fe\u5c42 \u00b6 \u5982\u679c\u4e0d\u60f3\u9009\u62e9\u4efb\u4f55\u56fe\u5c42\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u9009\u62e9 > \u53d6\u6d88\u9009\u62e9\u56fe\u5c42\u201d\u547d\u4ee4\u3002\u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u6700\u4e0b\u9762\u7684\u7a7a\u767d\u5904\u5355\u51fb\uff0c\u5373\u53ef\u53d6\u6d88\u9009\u62e9\u6240\u6709\u56fe\u5c42\u3002 \u8c03\u6574\u56fe\u5c42\u7684\u6392\u5217\u987a\u5e8f \u00b6 \u5982\u679c\u8981\u6539\u53d8\u56fe\u5c42\u7684\u6392\u5217\u987a\u5e8f\uff0c\u53ef\u4ee5\u5c06\u8be5\u56fe\u5c42\u62d6\u62fd\u5230\u53e6\u5916\u4e00\u4e2a\u56fe\u5c42\u7684\u4e0a\u9762\u6216\u4e0b\u9762\u3002 \u4f7f\u7528\u56fe\u5c42\u7ec4\u7ba1\u7406\u56fe\u5c42 \u00b6 \u521b\u5efa\u56fe\u5c42\u7ec4 \u00b6 \u5355\u51fb\u201c\u56fe\u5c42\u201d\u9762\u677f\u5e95\u90e8\u7684\u201c\u521b\u5efa\u65b0\u7ec4\u201d\u6309\u94ae\uff0c\u5373\u53ef\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u521b\u5efa\u65b0\u7684\u56fe\u5c42\u7ec4\u3002\u4e5f\u53ef\u4ee5\u4ece\u56fe\u5c42\u5efa\u7acb\u56fe\u5c42\u7ec4\u3002\u9996\u5148\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u6309\u4f4fAlt \u952e\u9009\u62e9\u9700\u8981\u7684\u56fe\u5c42\uff0c\u7136\u540e\u5355\u51fb\u5e76\u62d6\u62fd\u81f3\u201c\u65b0\u5efa\u7ec4\u201d\u6309\u94ae\u4e0a\u3002 \u590d\u5236\u56fe\u5c42 \u00b6 \u9009\u62e9\u8981\u8fdb\u884c\u590d\u5236\u7684\u56fe\u5c42\uff0c\u7136\u540e\u5728\u5176\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u590d\u5236\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u6b64\u65f6\u5f39\u51fa\u201c\u590d\u5236\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u5373\u53ef\u3002 \u5220\u9664\u56fe\u5c42 \u00b6 \u5982\u679c\u8981\u5feb\u901f\u5220\u9664\u56fe\u5c42\uff0c\u53ef\u4ee5\u5c06\u5176\u62d6\u62fd\u5230\u201c\u5220\u9664\u56fe\u5c42\u201d\u6309\u94ae \u4e0a\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6309 Delete \u952e\u3002\uff09\u6267\u884c\u201c\u56fe\u5c42 > \u5220\u9664 > \u9690\u85cf\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5220\u9664\u6240\u6709\u9690\u85cf\u7684\u56fe\u5c42\u3002 \u663e\u793a\u4e0e\u9690\u85cf\u56fe\u5c42/\u56fe\u5c42\u7ec4 \u00b6 \u56fe\u5c42\u7f29\u89c8\u56fe\u5de6\u4fa7\u7684\u56fe\u6807\u53ef\u7528\u6765\u63a7\u5236\u56fe\u5c42\u7684\u53ef\u89c1\u6027 \u94fe\u63a5\u56fe\u5c42\u4e0e\u53d6\u6d88\u94fe\u63a5 \u00b6 \u9009\u62e9\u9700\u8981\u8fdb\u884c\u94fe\u63a5\u7684\u56fe\u5c42\uff08\u4e24\u4e2a\u6216\u591a\u4e2a\u56fe\u5c42\uff09\u3002\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u94fe\u63a5\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u5355\u51fb\u56fe \u5c42\u9762\u677f\u5e95\u90e8\u7684\u201c\u94fe\u63a5\u56fe\u5c42\u201d\u6309\u94ae \uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u56fe\u5c42\u94fe\u63a5\u8d77\u6765\u3002 \u4fee\u6539\u56fe\u5c42\u7684\u540d\u79f0\u4e0e\u989c\u8272 \u00b6 \u5728\u56fe\u5c42\u8f83\u591a\u7684\u6587\u6863\u4e2d\uff0c\u4fee\u6539\u56fe\u5c42\u540d\u79f0\u53ca\u5176\u989c\u8272\u6709\u52a9\u4e8e\u5feb\u901f\u627e\u5230\u76f8\u5e94\u7684\u56fe\u5c42\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u91cd\u547d\u540d\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u6216\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u53cc\u51fb\uff0c\u6fc0\u6d3b\u540d\u79f0\u6587\u672c\u6846\uff0c\u7136\u540e\u8f93\u5165\u540d\u79f0\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u56fe\u5c42\u540d\u79f0\u3002 \u66f4\u6539\u56fe\u5c42\u989c\u8272\u4e5f\u662f\u4e00\u79cd\u4fbf\u4e8e\u5feb\u901f\u627e\u5230\u56fe\u5c42\u7684\u65b9\u6cd5\uff0c\u5728\u56fe\u5c42\u4e0a\u5355\u51fb\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u83dc\u5355\u7684\u4e0b\u534a\u90e8\u5206\u53ef\u4ee5\u770b\u5230\u591a\u79cd\u989c\u8272\u540d\u79f0\uff0c\u5355\u51fb\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u66f4\u6539\u5f53\u524d\u56fe\u5c42\u524d\u65b9\u7684\u8272\u5757\u6548\u679c\uff0c\u9009\u62e9\u201c\u65e0\u989c\u8272\u201d\u5373\u53ef\u53bb\u9664\u989c\u8272\u6548\u679c\u3002 \u9501\u5b9a\u56fe\u5c42 \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u7684\u4e0a\u534a\u90e8\u5206\u6709\u591a\u4e2a\u9501\u5b9a\u6309\u94ae\uff0c\u9501\u5b9a\u6309\u94ae\u4e3b\u8981\u7528\u6765\u4fdd\u62a4\u56fe\u5c42\u900f\u660e\u533a\u57df\u3001\u56fe\u50cf\u50cf\u7d20\u548c\u4f4d\u7f6e\u7684\u9501\u5b9a\u529f\u80fd\uff0c \u4f7f\u7528\u8fd9\u4e9b\u6309\u94ae\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5b8c\u5168\u9501\u5b9a\u6216\u90e8\u5206\u9501\u5b9a\u56fe\u5c42\uff0c\u4ee5\u514d\u56e0\u64cd\u4f5c\u5931\u8bef\u800c\u5bf9\u56fe\u5c42\u7684\u5185\u5bb9\u9020\u6210\u7834\u574f\u3002 \u6805\u683c\u5316\u56fe\u5c42\u5185\u5bb9 \u00b6 \u6587\u5b57\u56fe\u5c42\u30013D \u56fe\u5c42\u3001\u5f62\u72b6\u56fe\u5c42\u3001\u77e2\u91cf\u8499\u7248\u56fe\u5c42\u6216\u667a\u80fd\u5bf9\u8c61\u7b49\u5305\u542b\u77e2\u91cf\u6570\u636e\u7684\u56fe\u5c42\u662f\u4e0d\u80fd\u591f\u76f4\u63a5\u8fdb\u884c\u7f16\u8f91\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5c06\u5176\u6805\u683c\u5316\u4ee5\u540e\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u7684\u7f16\u8f91\u3002\u9009\u62e9\u9700\u8981\u6805\u683c\u5316\u7684\u56fe\u5c42\u3002\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u6805\u683c\u5316\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u76f8\u5e94\u7684\u56fe\u5c42\u6805\u683c\u5316\u3002\u6216\u8005\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u4e2d\u8be5\u56fe\u5c42\u5e76\u5355\u51fb\u53f3\u952e\u6267\u884c\u6805\u683c\u5316\u547d\u4ee4\u3002 \u5bf9\u9f50\u4e0e\u5206\u5e03\u56fe\u5c42 \u00b6 \u5bf9\u9f50\u56fe\u5c42 \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u591a\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u5bf9\u9f50\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u56fe\u5c42\u8fdb\u884c\u5bf9\u9f50\u3002 \u5c06\u56fe\u5c42\u4e0e\u9009\u533a\u5bf9\u9f50 \u00b6 \u5f53\u753b\u9762\u4e2d\u5b58\u5728\u9009\u533a\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u5c06\u56fe\u5c42\u4e0e\u9009\u533a\u5bf9\u9f50\u201d\u547d\u4ee4\uff0c\u5728\u5b50\u83dc\u5355\u4e2d\u5373\u53ef\u9009\u62e9\u4e00\u79cd\u5bf9\u9f50\u65b9\u6cd5\uff0c\u6240\u9009\u56fe\u5c42\u5373\u53ef\u4ee5\u9009\u62e9\u7684\u65b9\u6cd5\u8fdb\u884c\u5bf9\u9f50\u3002 \u5206\u5e03\u56fe\u5c42 \u00b6 \u5f53\u4e00\u4e2a\u6587\u6863\u4e2d\u5305\u542b\u591a\u4e2a\u56fe\u5c42\uff08\u81f3\u5c11\u4e3a 3 \u4e2a\u56fe\u5c42\uff0c\u4e14\u201c\u80cc\u666f\u201d\u56fe\u5c42\u9664\u5916\uff09\u65f6\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u5206\u5e03\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\u53ef\u5c06\u8fd9\u4e9b\u56fe\u5c42\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5f8b\u5747\u5300\u5206\u5e03\u3002 \u4f7f\u7528\u56fe\u5c42\u7ec4\u7ba1\u7406\u56fe\u5c42 \u00b6 \u5c06\u56fe\u5c42\u79fb\u5165\u6216\u79fb\u51fa\u56fe\u5c42\u7ec4 \u00b6 1\u3001\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u5c06\u5176\u62d6\u62fd\u5230\u56fe\u5c42\u7ec4\u5185\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u79fb\u5165\u5230\u8be5\u7ec4\u4e2d\u3002 2\u3001\u5c06\u56fe\u5c42\u7ec4\u4e2d\u7684\u56fe\u5c42\u62d6\u62fd\u5230\u7ec4\u5916\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u4ece\u56fe\u5c42\u7ec4\u4e2d\u79fb\u51fa\u3002 \u81ea\u52a8\u5bf9\u9f50\u4e0e\u81ea\u52a8\u6df7\u5408 \u00b6 \u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42 \u00b6 \u8bf4\u660e \u00b6 \u5229\u7528\u201c\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u56fe\u5c42\u4e2d\u7684\u76f8\u4f3c\u5185\u5bb9\uff08\u5982\u89d2\u548c\u8fb9\uff09\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u3002 \u5f88\u591a\u65f6\u5019\u4e3a\u4e86\u8282\u7ea6\u6210\u672c\uff0c\u62cd\u6444\u5168\u666f\u56fe\u50cf\u65f6\u7ecf\u5e38\u9700\u8981\u62cd\u6444\u591a\u5f20\u56fe\u7247\uff0c\u7136\u540e\u5728\u540e\u671f\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u63a5\u63a5\u3002 \u64cd\u4f5c\u65b9\u6cd5\uff1a\u6267\u884c\u201c\u7f16\u8f91>\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u201d\u547d\u4ee4 \u201c\u5168\u666f\u56fe\u201d\uff1a\u5c06\u91cd\u53e0\u7684\u56fe\u5c42\u6df7\u5408\u6210\u5168\u666f\u56fe\u3002 \u201c\u5806\u53e0\u56fe\u50cf\u201d\uff1a\u6df7\u5408\u6bcf\u4e2a\u76f8\u5e94\u533a\u57df\u4e2d\u7684\u6700\u4f73\u7ec6\u8282\u3002\u8be5\u9009\u9879\u6700\u9002\u5408\u4e8e\u5df2\u5bf9\u9f50\u7684\u56fe\u5c42\u3002 \u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u7ec3\u4e60 \u00b6 \u81ea\u52a8\u5bf9\u9f50\u5236\u4f5c\u5168\u666f\u56fe \u81ea\u52a8\u6df7\u5408\u56fe\u5c42 \u00b6 \u8bf4\u660e \u00b6 \u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u4ec5\u9002\u7528 \u4e8eRGB\u6216\u7070\u5ea6\u56fe\u50cf\uff0c\u4e0d\u9002\u7528\u4e8e\u667a\u80fd\u5bf9\u8c61\u3001\u89c6\u9891\u56fe\u5c42\u30013D\u56fe\u5c42\u3001\u6216\u80cc\u666f\u56fe\u5c42\u3002 \u9009\u62e9\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91>\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\uff0c\u8bbe\u7f6e\u5408\u9002\u7684\u6df7\u5408\u65b9\u5f0f\uff0c\u5373\u53ef\u5c06\u591a\u4e2a\u56fe\u5c42\u8fdb\u884c\u6df7\u5408\u3002 \u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u81ea\u52a8\u6df7\u5408\u547d\u4ee4\u5408\u6210\u56fe\u50cf \u5236\u4f5c\u65e0\u666f\u6df1\u7684\u98ce\u666f\u7167\u7247 \u5408\u5e76\u4e0e\u76d6\u5370\u56fe\u5c42 \u00b6 \u5408\u5e76\u56fe\u5c42 \u00b6 \u5982\u679c\u8981\u5c06\u591a\u4e2a\u56fe\u5c42\u5408\u5e76\u4e3a\u4e00\u4e2a\u56fe\u5c42\uff0c\u53ef\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u8981\u5408\u5e76\u7684\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u5408\u5e76\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u6309 Ctrl+E \u7ec4\u5408\u952e\uff0c\u5408\u5e76\u4ee5\u540e\u7684\u56fe\u5c42\u4f7f\u7528\u4e0a\u9762\u56fe\u5c42\u7684\u540d\u79f0\u3002 \u5411\u4e0b\u5408\u5e76\u56fe\u5c42 \u00b6 \u6267\u884c\u201c\u56fe\u5c42 > \u5411\u4e0b\u5408\u5e76\u201d\u547d\u4ee4\u6216\u6309 Ctrl+E \u7ec4\u5408\u952e\uff0c\u53ef\u5c06\u4e00\u4e2a\u56fe\u5c42\u4e0e\u5b83\u4e0b\u9762\u7684\u56fe\u5c42\u5408\u5e76\u3002\u5408\u5e76\u4ee5\u540e\u7684\u56fe\u5c42\u4f7f\u7528\u4e0b\u9762\u56fe\u5c42\u7684\u540d\u79f0\u3002 \u5408\u5e76\u53ef\u89c1\u56fe\u5c42 \u00b6 \u6267\u884c\u201c\u56fe\u5c42 > \u5408\u5e76\u53ef\u89c1\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u6309 Ctrl+Shift+E \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5408\u5e76\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u6240\u6709\u53ef\u89c1\u56fe\u5c42\u3002 \u62fc\u5408\u56fe\u50cf \u00b6 \u6267\u884c\u201c\u56fe\u5c42 > \u62fc\u5408\u56fe\u50cf\u201d\u547d\u4ee4\u53ef\u4ee5\u5c06\u6240\u6709\u56fe\u5c42\u90fd\u62fc\u5408\u5230\u201c\u80cc\u666f\u201d\u56fe\u5c42\u4e2d\u3002\u5982\u679c\u6709\u9690\u85cf\u7684\u56fe\u5c42\uff0c\u5219\u4f1a\u5f39\u51fa\u4e00\u4e2a\u63d0\u793a\u5bf9\u8bdd\u6846\uff0c\u63d0\u9192\u7528\u6237\u662f\u5426\u8981\u6254\u6389\u9690\u85cf\u7684\u56fe\u5c42\u3002 \u76d6\u5370\u56fe\u5c42 \u00b6 \u76d6\u5370\u662f\u4e00\u79cd\u5408\u5e76\u56fe\u5c42\u7684\u7279\u6b8a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u56fe\u5c42\u7684\u5185\u5bb9\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u4ed6\u56fe\u5c42\u4e0d\u53d8\u3002\u76d6\u5370\u56fe\u5c42\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7ecf\u5e38\u7528\u5230\uff0c\u662f\u4e00\u79cd\u5f88\u5b9e\u7528\u7684\u56fe\u5c42\u5408\u5e76\u65b9\u6cd5\u3002 \u5411\u4e0b\u76d6\u5370\u56fe\u5c42\uff1a\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6309 Ctrl+Alt+E \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u8be5\u56fe\u5c42\u4e2d\u7684\u56fe\u50cf\u76d6\u5370\u5230\u4e0b\u9762\u7684\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u7684\u5185\u5bb9\u4fdd\u6301\u4e0d\u53d8\u3002 \u76d6\u5370\u591a\u4e2a\u56fe\u5c42\uff1a\u9009\u62e9\u591a\u4e2a\u56fe\u5c42\u5e76\u4f7f\u7528\u76d6\u5370\u56fe\u5c42\u5feb\u6377\u952e Ctrl+Alt+E \uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u56fe\u5c42\u4e2d\u7684\u56fe\u50cf\u76d6\u5370\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u7684\u5185\u5bb9\u4fdd\u6301\u4e0d\u53d8\u3002 \u76d6\u5370\u53ef\u89c1\u56fe\u5c42\uff1a\u6309 Ctrl+Shift+Alt+E \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u53ef\u89c1\u56fe\u5c42\u76d6\u5370\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\u3002 \u76d6\u5370\u56fe\u5c42\u7ec4\uff1a\u9009\u62e9\u56fe\u5c42\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u5feb\u6377\u952e Ctrl+Alt+E \uff0c\u53ef\u4ee5\u5c06\u7ec4\u4e2d\u6240\u6709\u56fe\u5c42\u5185\u5bb9\u76d6\u5370\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u7ec4\u4e2d\u7684\u5185\u5bb9\u4fdd\u6301\u4e0d\u53d8\u3002 \u667a\u80fd\u5bf9\u8c61\u56fe\u5c42 \u00b6 \u8bf4\u660e \u00b6 \u5728Photoshop\u4e2d\uff0c\u667a\u80fd\u5bf9\u8c61\u53ef\u4ee5\u770b\u4f5c\u5d4c\u5165\u5f53\u524d\u6587\u4ef6\u7684\u4e00\u4e2a\u72ec\u7acb\u6587\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u4f4d\u56fe\uff0c\u4e5f\u53ef\u4ee5\u5305\u542bIllustrator\u4e2d\u521b\u5efa\u7684\u77e2\u91cf\u56fe\u5f62\u3002\u800c\u4e14\u5728\u9886\u56de\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u7834\u574f\u667a\u80fd\u5bf9\u8c61\u7684\u539f\u59cb\u6570\u636e\uff0c\u56e0\u6b64\u5bf9\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u6240\u6267\u884c\u7684\u64cd\u4f5c\u90fd\u662f\u975e\u7834\u574f\u6027\u64cd\u4f5c\u3002 \u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u7ec3\u4e60 \u00b6 \u7f16\u8f91\u667a\u80fd\u5bf9\u8c61 \u66ff\u6362\u667a\u80fd\u5bf9\u8c61\u5185\u5bb9","title":"\u56fe\u5c42\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"PS/PS7/#_1","text":"","title":"\u56fe\u5c42\u7684\u57fa\u7840\u77e5\u8bc6"},{"location":"PS/PS7/#_2","text":"\u201c\u56fe\u5c42\u201d\u9762\u677f\u662f\u7528\u4e8e\u521b\u5efa\u3001\u7f16\u8f91\u548c\u7ba1\u7406\u56fe\u5c42\u4ee5\u53ca\u56fe\u5c42\u6837\u5f0f\u7684\u4e00\u79cd\u76f4\u89c2\u7684\u201c\u63a7\u5236\u5668\u201d\u3002\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\uff0c\u56fe\u5c42\u540d\u79f0\u7684\u5de6\u4fa7\u662f\u56fe\u5c42\u7684\u7f29\u89c8\u56fe\uff0c\u5b83\u663e\u793a\u4e86\u56fe\u5c42\u4e2d\u5305\u542b\u7684\u56fe\u50cf\u5185\u5bb9\uff0c\u800c\u7f29\u89c8\u56fe\u4e2d\u7684\u68cb\u76d8\u683c\u4ee3\u8868\u56fe\u50cf\u7684\u900f\u660e\u533a\u57df\u3002","title":"\u8ba4\u8bc6\u201c\u56fe\u5c42\u201d\u9762\u677f"},{"location":"PS/PS7/#_3","text":"Photoshop \u4e2d\u6709\u5f88\u591a\u79cd\u7c7b\u578b\u7684\u56fe\u5c42\uff0c\u5982\u89c6\u9891\u56fe\u5c42\u3001\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u30013D \u56fe\u5c42\u7b49\uff0c\u800c\u6bcf\u79cd\u56fe\u5c42\u90fd\u6709\u4e0d\u540c\u7684\u529f\u80fd\u548c\u7528\u9014\uff1b \u4e5f\u6709\u5904\u4e8e\u4e0d\u540c\u72b6\u6001\u7684\u56fe\u5c42\uff0c\u5982\u9009\u4e2d\u72b6\u6001\u3001\u9501\u5b9a\u72b6\u6001\u3001\u94fe\u63a5\u72b6\u6001\u7b49\uff0c\u5f53\u7136\u5b83\u4eec\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u663e\u793a\u72b6\u6001\u4e5f\u4e0d\u76f8\u540c\u3002","title":"\u4e86\u89e3\u56fe\u5c42\u7684\u7c7b\u578b"},{"location":"PS/PS7/#_4","text":"","title":"\u65b0\u5efa\u56fe\u5c42"},{"location":"PS/PS7/#_5","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u5e95\u90e8\u5355\u51fb\u201c\u521b\u5efa\u65b0\u56fe\u5c42\u201d\u6309\u94ae\uff0c\u5373\u53ef\u5728\u5f53\u524d\u56fe\u5c42\u7684\u4e0a\u4e00\u5c42\u65b0\u5efa\u4e00\u4e2a\u56fe\u5c42\u3002","title":"\u521b\u5efa\u666e\u901a\u56fe\u5c42"},{"location":"PS/PS7/#_6","text":"\u6309 Ctrl+J \u5feb\u6377\u952e\uff0c\u53ef\u4ee5\u5c06\u5f53\u524d\u56fe\u5c42\u590d\u5236\u4e00\u4efd\u3002","title":"\u901a\u8fc7\u62f7\u8d1d\u521b\u5efa\u56fe\u5c42"},{"location":"PS/PS7/#_7","text":"\u4f7f\u7528\u62f7\u8d1d\u526a\u5207\u6cd5\u521b\u5efa\u56fe\u5c42","title":"\u62f7\u8d1d\u526a\u5207\u7ec3\u4e60"},{"location":"PS/PS7/#_8","text":"\u7eaf\u8272\u586b\u5145\u56fe\u5c42\u53ef\u4ee5\u7528\u4e00\u79cd\u989c\u8272\u586b\u5145\u56fe\u5c42\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002 \u6267\u884c\u201c\u56fe\u5c42 > \u65b0\u5efa\u586b\u5145\u56fe\u5c42 > \u7eaf\u8272\u201d\u547d\u4ee4\u3002\u5728\u201c\u65b0\u5efa\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u76f8\u5173\u9009\u9879\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u6253\u5f00\u201c\u62fe\u53d6\u5b9e\u8272\u201d\u5bf9\u8bdd\u6846\u3002\u7136\u540e\u62fe\u53d6\u4e00\u79cd\u989c\u8272\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u7eaf\u8272\u586b\u5145\u56fe\u5c42\u3002","title":"\u521b\u5efa\u7eaf\u8272\u586b\u5145\u56fe\u5c42"},{"location":"PS/PS7/#_9","text":"\u6e10\u53d8\u586b\u5145\u56fe\u5c42\u53ef\u4ee5\u7528\u4e00\u79cd\u6e10\u53d8\u8272\u586b\u5145\u56fe\u5c42\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u65b0\u5efa\u586b\u5145\u56fe\u5c42 > \u6e10\u53d8\u201d\u547d\u4ee4\uff0c\u5728\u201c\u65b0\u5efa\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u76f8\u5173\u9009\u9879\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u6253\u5f00\u201c\u6e10\u53d8\u586b\u5145\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u6e10\u53d8\u7684\u989c\u8272\u3001\u6837\u5f0f\u3001\u89d2\u5ea6\u548c\u7f29\u653e\u7b49\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u6e10\u53d8\u586b\u5145\u56fe\u5c42\u3002","title":"\u521b\u5efa\u6e10\u53d8\u586b\u5145\u56fe\u5c42"},{"location":"PS/PS7/#_10","text":"\u56fe\u6848\u586b\u5145\u56fe\u5c42\u53ef\u4ee5\u7528\u4e00\u79cd\u56fe\u6848\u586b\u5145\u56fe\u5c42\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u56fe\u5c42\u8499\u7248\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u65b0\u5efa\u586b\u5145\u56fe\u5c42 > \u56fe\u6848\u201d\u547d\u4ee4\uff0c\u5728\u201c\u65b0\u5efa\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u76f8\u5173\u9009\u9879\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u6253\u5f00\u201c\u56fe\u6848\u586b\u5145\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u53ef\u4ee5\u9009\u62e9\u4e00\u79cd\u56fe\u6848\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u56fe\u6848\u7684\u7f29\u653e\u6bd4\u4f8b\u7b49\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\u5373\u53ef\u521b\u5efa\u4e00\u4e2a\u56fe\u6848\u586b\u5145\u56fe\u5c42\u3002","title":"\u521b\u5efa\u56fe\u6848\u586b\u5145\u56fe\u5c42"},{"location":"PS/PS7/#_11","text":"","title":"\u56fe\u5c42\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"PS/PS7/#_12","text":"","title":"\u9009\u62e9/\u53d6\u6d88\u9009\u62e9\u56fe\u5c42"},{"location":"PS/PS7/#_13","text":"\u5148\u9009\u62e9\u4f4d\u4e8e\u8fde\u7eed\u56fe\u5c42\u9876\u7aef\u7684\u56fe\u5c42\uff0c\u7136\u540e\u6309\u4f4f Shift \u952e\u5355\u51fb\u4f4d\u4e8e\u8fde\u7eed\u56fe\u5c42\u5e95\u7aef\u7684\u56fe\u5c42\uff0c\u5373\u53ef\u9009\u62e9\u8fd9\u4e9b\u8fde\u7eed\u7684\u56fe\u5c42","title":"\u9009\u62e9\u591a\u4e2a\u8fde\u7eed\u7684\u56fe\u5c42"},{"location":"PS/PS7/#_14","text":"\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6309\u4f4f Ctrl \u952e\u5355\u51fb\u5176\u4ed6\u56fe\u5c42\u7684\u540d\u79f0\u3002","title":"\u9009\u62e9\u591a\u4e2a\u975e\u8fde\u7eed\u7684\u56fe\u5c42"},{"location":"PS/PS7/#_15","text":"\u6267\u884c\u201c\u9009\u62e9 > \u6240\u6709\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u6309 Alt+Ctrl+A \u7ec4\u5408\u952e\u3002\u4f7f\u7528\u8be5\u547d\u4ee4\u53ea\u80fd\u9009\u62e9\u201c\u80cc\u666f\u201d\u56fe\u5c42\u4ee5\u5916\u7684\u56fe\u5c42\uff0c\u5982\u679c\u8981\u9009\u62e9\u5305\u542b\u201c\u80cc\u666f\u201d\u56fe\u5c42\u5728\u5185\u7684\u6240\u6709\u56fe\u5c42\uff0c\u53ef\u4ee5\u6309\u4f4f Ctrl \u952e\u5355\u51fb\u201c\u80cc\u666f\u201d\u56fe\u5c42\u7684\u540d\u79f0\u3002","title":"\u9009\u62e9\u6240\u6709\u56fe\u5c42"},{"location":"PS/PS7/#_16","text":"\u5f53\u753b\u5e03\u4e2d\u5305\u542b\u5f88\u591a\u76f8\u4e92\u91cd\u53e0\u7684\u56fe\u5c42\uff0c\u96be\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u8fdb\u884c\u8fa8\u522b\u65f6\uff0c\u53ef\u4ee5\u5728\u4f7f\u7528\u201c\u79fb\u52a8\u5de5\u5177\u201d\u72b6\u6001\u4e0b\u53f3\u51fb\u76ee\u6807\u56fe\u50cf\u7684\u4f4d\u7f6e\uff0c\u5728\u663e\u793a\u51fa\u7684\u5f53\u524d\u91cd\u53e0\u56fe\u5c42\u5217\u8868\u4e2d\u9009\u62e9\u9700\u8981\u7684\u56fe\u5c42\u3002","title":"\u5728\u753b\u5e03\u4e2d\u5feb\u901f\u9009\u62e9\u67d0\u4e00\u56fe\u5c42"},{"location":"PS/PS7/#_17","text":"\u5982\u679c\u8981\u9009\u62e9\u94fe\u63a5\u7684\u56fe\u5c42\uff0c\u53ef\u4ee5\u5148\u9009\u62e9\u4e00\u4e2a\u94fe\u63a5\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u9009\u62e9\u94fe\u63a5\u56fe\u5c42\u201d\u547d\u4ee4\u3002","title":"\u5feb\u901f\u9009\u62e9\u94fe\u63a5\u7684\u56fe\u5c42"},{"location":"PS/PS7/#_18","text":"\u5982\u679c\u4e0d\u60f3\u9009\u62e9\u4efb\u4f55\u56fe\u5c42\uff0c\u53ef\u4ee5\u6267\u884c\u201c\u9009\u62e9 > \u53d6\u6d88\u9009\u62e9\u56fe\u5c42\u201d\u547d\u4ee4\u3002\u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u6700\u4e0b\u9762\u7684\u7a7a\u767d\u5904\u5355\u51fb\uff0c\u5373\u53ef\u53d6\u6d88\u9009\u62e9\u6240\u6709\u56fe\u5c42\u3002","title":"\u53d6\u6d88\u9009\u62e9\u56fe\u5c42"},{"location":"PS/PS7/#_19","text":"\u5982\u679c\u8981\u6539\u53d8\u56fe\u5c42\u7684\u6392\u5217\u987a\u5e8f\uff0c\u53ef\u4ee5\u5c06\u8be5\u56fe\u5c42\u62d6\u62fd\u5230\u53e6\u5916\u4e00\u4e2a\u56fe\u5c42\u7684\u4e0a\u9762\u6216\u4e0b\u9762\u3002","title":"\u8c03\u6574\u56fe\u5c42\u7684\u6392\u5217\u987a\u5e8f"},{"location":"PS/PS7/#_20","text":"","title":"\u4f7f\u7528\u56fe\u5c42\u7ec4\u7ba1\u7406\u56fe\u5c42"},{"location":"PS/PS7/#_21","text":"\u5355\u51fb\u201c\u56fe\u5c42\u201d\u9762\u677f\u5e95\u90e8\u7684\u201c\u521b\u5efa\u65b0\u7ec4\u201d\u6309\u94ae\uff0c\u5373\u53ef\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u521b\u5efa\u65b0\u7684\u56fe\u5c42\u7ec4\u3002\u4e5f\u53ef\u4ee5\u4ece\u56fe\u5c42\u5efa\u7acb\u56fe\u5c42\u7ec4\u3002\u9996\u5148\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u6309\u4f4fAlt \u952e\u9009\u62e9\u9700\u8981\u7684\u56fe\u5c42\uff0c\u7136\u540e\u5355\u51fb\u5e76\u62d6\u62fd\u81f3\u201c\u65b0\u5efa\u7ec4\u201d\u6309\u94ae\u4e0a\u3002","title":"\u521b\u5efa\u56fe\u5c42\u7ec4"},{"location":"PS/PS7/#_22","text":"\u9009\u62e9\u8981\u8fdb\u884c\u590d\u5236\u7684\u56fe\u5c42\uff0c\u7136\u540e\u5728\u5176\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u590d\u5236\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u6b64\u65f6\u5f39\u51fa\u201c\u590d\u5236\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u5373\u53ef\u3002","title":"\u590d\u5236\u56fe\u5c42"},{"location":"PS/PS7/#_23","text":"\u5982\u679c\u8981\u5feb\u901f\u5220\u9664\u56fe\u5c42\uff0c\u53ef\u4ee5\u5c06\u5176\u62d6\u62fd\u5230\u201c\u5220\u9664\u56fe\u5c42\u201d\u6309\u94ae \u4e0a\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6309 Delete \u952e\u3002\uff09\u6267\u884c\u201c\u56fe\u5c42 > \u5220\u9664 > \u9690\u85cf\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5220\u9664\u6240\u6709\u9690\u85cf\u7684\u56fe\u5c42\u3002","title":"\u5220\u9664\u56fe\u5c42"},{"location":"PS/PS7/#_24","text":"\u56fe\u5c42\u7f29\u89c8\u56fe\u5de6\u4fa7\u7684\u56fe\u6807\u53ef\u7528\u6765\u63a7\u5236\u56fe\u5c42\u7684\u53ef\u89c1\u6027","title":"\u663e\u793a\u4e0e\u9690\u85cf\u56fe\u5c42/\u56fe\u5c42\u7ec4"},{"location":"PS/PS7/#_25","text":"\u9009\u62e9\u9700\u8981\u8fdb\u884c\u94fe\u63a5\u7684\u56fe\u5c42\uff08\u4e24\u4e2a\u6216\u591a\u4e2a\u56fe\u5c42\uff09\u3002\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u94fe\u63a5\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u5355\u51fb\u56fe \u5c42\u9762\u677f\u5e95\u90e8\u7684\u201c\u94fe\u63a5\u56fe\u5c42\u201d\u6309\u94ae \uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u56fe\u5c42\u94fe\u63a5\u8d77\u6765\u3002","title":"\u94fe\u63a5\u56fe\u5c42\u4e0e\u53d6\u6d88\u94fe\u63a5"},{"location":"PS/PS7/#_26","text":"\u5728\u56fe\u5c42\u8f83\u591a\u7684\u6587\u6863\u4e2d\uff0c\u4fee\u6539\u56fe\u5c42\u540d\u79f0\u53ca\u5176\u989c\u8272\u6709\u52a9\u4e8e\u5feb\u901f\u627e\u5230\u76f8\u5e94\u7684\u56fe\u5c42\u3002\u6267\u884c\u201c\u56fe\u5c42 > \u91cd\u547d\u540d\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u6216\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u53cc\u51fb\uff0c\u6fc0\u6d3b\u540d\u79f0\u6587\u672c\u6846\uff0c\u7136\u540e\u8f93\u5165\u540d\u79f0\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u56fe\u5c42\u540d\u79f0\u3002 \u66f4\u6539\u56fe\u5c42\u989c\u8272\u4e5f\u662f\u4e00\u79cd\u4fbf\u4e8e\u5feb\u901f\u627e\u5230\u56fe\u5c42\u7684\u65b9\u6cd5\uff0c\u5728\u56fe\u5c42\u4e0a\u5355\u51fb\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u83dc\u5355\u7684\u4e0b\u534a\u90e8\u5206\u53ef\u4ee5\u770b\u5230\u591a\u79cd\u989c\u8272\u540d\u79f0\uff0c\u5355\u51fb\u5176\u4e2d\u4e00\u79cd\u5373\u53ef\u66f4\u6539\u5f53\u524d\u56fe\u5c42\u524d\u65b9\u7684\u8272\u5757\u6548\u679c\uff0c\u9009\u62e9\u201c\u65e0\u989c\u8272\u201d\u5373\u53ef\u53bb\u9664\u989c\u8272\u6548\u679c\u3002","title":"\u4fee\u6539\u56fe\u5c42\u7684\u540d\u79f0\u4e0e\u989c\u8272"},{"location":"PS/PS7/#_27","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u7684\u4e0a\u534a\u90e8\u5206\u6709\u591a\u4e2a\u9501\u5b9a\u6309\u94ae\uff0c\u9501\u5b9a\u6309\u94ae\u4e3b\u8981\u7528\u6765\u4fdd\u62a4\u56fe\u5c42\u900f\u660e\u533a\u57df\u3001\u56fe\u50cf\u50cf\u7d20\u548c\u4f4d\u7f6e\u7684\u9501\u5b9a\u529f\u80fd\uff0c \u4f7f\u7528\u8fd9\u4e9b\u6309\u94ae\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5b8c\u5168\u9501\u5b9a\u6216\u90e8\u5206\u9501\u5b9a\u56fe\u5c42\uff0c\u4ee5\u514d\u56e0\u64cd\u4f5c\u5931\u8bef\u800c\u5bf9\u56fe\u5c42\u7684\u5185\u5bb9\u9020\u6210\u7834\u574f\u3002","title":"\u9501\u5b9a\u56fe\u5c42"},{"location":"PS/PS7/#_28","text":"\u6587\u5b57\u56fe\u5c42\u30013D \u56fe\u5c42\u3001\u5f62\u72b6\u56fe\u5c42\u3001\u77e2\u91cf\u8499\u7248\u56fe\u5c42\u6216\u667a\u80fd\u5bf9\u8c61\u7b49\u5305\u542b\u77e2\u91cf\u6570\u636e\u7684\u56fe\u5c42\u662f\u4e0d\u80fd\u591f\u76f4\u63a5\u8fdb\u884c\u7f16\u8f91\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5c06\u5176\u6805\u683c\u5316\u4ee5\u540e\u624d\u80fd\u8fdb\u884c\u76f8\u5e94\u7684\u7f16\u8f91\u3002\u9009\u62e9\u9700\u8981\u6805\u683c\u5316\u7684\u56fe\u5c42\u3002\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u6805\u683c\u5316\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u76f8\u5e94\u7684\u56fe\u5c42\u6805\u683c\u5316\u3002\u6216\u8005\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u4e2d\u8be5\u56fe\u5c42\u5e76\u5355\u51fb\u53f3\u952e\u6267\u884c\u6805\u683c\u5316\u547d\u4ee4\u3002","title":"\u6805\u683c\u5316\u56fe\u5c42\u5185\u5bb9"},{"location":"PS/PS7/#_29","text":"","title":"\u5bf9\u9f50\u4e0e\u5206\u5e03\u56fe\u5c42"},{"location":"PS/PS7/#_30","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u591a\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u5bf9\u9f50\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u56fe\u5c42\u8fdb\u884c\u5bf9\u9f50\u3002","title":"\u5bf9\u9f50\u56fe\u5c42"},{"location":"PS/PS7/#_31","text":"\u5f53\u753b\u9762\u4e2d\u5b58\u5728\u9009\u533a\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u5c06\u56fe\u5c42\u4e0e\u9009\u533a\u5bf9\u9f50\u201d\u547d\u4ee4\uff0c\u5728\u5b50\u83dc\u5355\u4e2d\u5373\u53ef\u9009\u62e9\u4e00\u79cd\u5bf9\u9f50\u65b9\u6cd5\uff0c\u6240\u9009\u56fe\u5c42\u5373\u53ef\u4ee5\u9009\u62e9\u7684\u65b9\u6cd5\u8fdb\u884c\u5bf9\u9f50\u3002","title":"\u5c06\u56fe\u5c42\u4e0e\u9009\u533a\u5bf9\u9f50"},{"location":"PS/PS7/#_32","text":"\u5f53\u4e00\u4e2a\u6587\u6863\u4e2d\u5305\u542b\u591a\u4e2a\u56fe\u5c42\uff08\u81f3\u5c11\u4e3a 3 \u4e2a\u56fe\u5c42\uff0c\u4e14\u201c\u80cc\u666f\u201d\u56fe\u5c42\u9664\u5916\uff09\u65f6\uff0c\u6267\u884c\u201c\u56fe\u5c42 > \u5206\u5e03\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\u53ef\u5c06\u8fd9\u4e9b\u56fe\u5c42\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5f8b\u5747\u5300\u5206\u5e03\u3002","title":"\u5206\u5e03\u56fe\u5c42"},{"location":"PS/PS7/#_33","text":"","title":"\u4f7f\u7528\u56fe\u5c42\u7ec4\u7ba1\u7406\u56fe\u5c42"},{"location":"PS/PS7/#_34","text":"1\u3001\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u5c06\u5176\u62d6\u62fd\u5230\u56fe\u5c42\u7ec4\u5185\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u79fb\u5165\u5230\u8be5\u7ec4\u4e2d\u3002 2\u3001\u5c06\u56fe\u5c42\u7ec4\u4e2d\u7684\u56fe\u5c42\u62d6\u62fd\u5230\u7ec4\u5916\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u4ece\u56fe\u5c42\u7ec4\u4e2d\u79fb\u51fa\u3002","title":"\u5c06\u56fe\u5c42\u79fb\u5165\u6216\u79fb\u51fa\u56fe\u5c42\u7ec4"},{"location":"PS/PS7/#_35","text":"","title":"\u81ea\u52a8\u5bf9\u9f50\u4e0e\u81ea\u52a8\u6df7\u5408"},{"location":"PS/PS7/#_36","text":"","title":"\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42"},{"location":"PS/PS7/#_37","text":"\u5229\u7528\u201c\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u56fe\u5c42\u4e2d\u7684\u76f8\u4f3c\u5185\u5bb9\uff08\u5982\u89d2\u548c\u8fb9\uff09\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u3002 \u5f88\u591a\u65f6\u5019\u4e3a\u4e86\u8282\u7ea6\u6210\u672c\uff0c\u62cd\u6444\u5168\u666f\u56fe\u50cf\u65f6\u7ecf\u5e38\u9700\u8981\u62cd\u6444\u591a\u5f20\u56fe\u7247\uff0c\u7136\u540e\u5728\u540e\u671f\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u63a5\u63a5\u3002 \u64cd\u4f5c\u65b9\u6cd5\uff1a\u6267\u884c\u201c\u7f16\u8f91>\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u201d\u547d\u4ee4 \u201c\u5168\u666f\u56fe\u201d\uff1a\u5c06\u91cd\u53e0\u7684\u56fe\u5c42\u6df7\u5408\u6210\u5168\u666f\u56fe\u3002 \u201c\u5806\u53e0\u56fe\u50cf\u201d\uff1a\u6df7\u5408\u6bcf\u4e2a\u76f8\u5e94\u533a\u57df\u4e2d\u7684\u6700\u4f73\u7ec6\u8282\u3002\u8be5\u9009\u9879\u6700\u9002\u5408\u4e8e\u5df2\u5bf9\u9f50\u7684\u56fe\u5c42\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS7/#_38","text":"\u81ea\u52a8\u5bf9\u9f50\u5236\u4f5c\u5168\u666f\u56fe","title":"\u81ea\u52a8\u5bf9\u9f50\u56fe\u5c42\u7ec3\u4e60"},{"location":"PS/PS7/#_39","text":"","title":"\u81ea\u52a8\u6df7\u5408\u56fe\u5c42"},{"location":"PS/PS7/#_40","text":"\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u4ec5\u9002\u7528 \u4e8eRGB\u6216\u7070\u5ea6\u56fe\u50cf\uff0c\u4e0d\u9002\u7528\u4e8e\u667a\u80fd\u5bf9\u8c61\u3001\u89c6\u9891\u56fe\u5c42\u30013D\u56fe\u5c42\u3001\u6216\u80cc\u666f\u56fe\u5c42\u3002 \u9009\u62e9\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u7f16\u8f91>\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u201d\u5bf9\u8bdd\u6846\uff0c\u8bbe\u7f6e\u5408\u9002\u7684\u6df7\u5408\u65b9\u5f0f\uff0c\u5373\u53ef\u5c06\u591a\u4e2a\u56fe\u5c42\u8fdb\u884c\u6df7\u5408\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS7/#_41","text":"\u4f7f\u7528\u81ea\u52a8\u6df7\u5408\u547d\u4ee4\u5408\u6210\u56fe\u50cf \u5236\u4f5c\u65e0\u666f\u6df1\u7684\u98ce\u666f\u7167\u7247","title":"\u81ea\u52a8\u6df7\u5408\u56fe\u5c42\u7ec3\u4e60"},{"location":"PS/PS7/#_42","text":"","title":"\u5408\u5e76\u4e0e\u76d6\u5370\u56fe\u5c42"},{"location":"PS/PS7/#_43","text":"\u5982\u679c\u8981\u5c06\u591a\u4e2a\u56fe\u5c42\u5408\u5e76\u4e3a\u4e00\u4e2a\u56fe\u5c42\uff0c\u53ef\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u8981\u5408\u5e76\u7684\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u5408\u5e76\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u6309 Ctrl+E \u7ec4\u5408\u952e\uff0c\u5408\u5e76\u4ee5\u540e\u7684\u56fe\u5c42\u4f7f\u7528\u4e0a\u9762\u56fe\u5c42\u7684\u540d\u79f0\u3002","title":"\u5408\u5e76\u56fe\u5c42"},{"location":"PS/PS7/#_44","text":"\u6267\u884c\u201c\u56fe\u5c42 > \u5411\u4e0b\u5408\u5e76\u201d\u547d\u4ee4\u6216\u6309 Ctrl+E \u7ec4\u5408\u952e\uff0c\u53ef\u5c06\u4e00\u4e2a\u56fe\u5c42\u4e0e\u5b83\u4e0b\u9762\u7684\u56fe\u5c42\u5408\u5e76\u3002\u5408\u5e76\u4ee5\u540e\u7684\u56fe\u5c42\u4f7f\u7528\u4e0b\u9762\u56fe\u5c42\u7684\u540d\u79f0\u3002","title":"\u5411\u4e0b\u5408\u5e76\u56fe\u5c42"},{"location":"PS/PS7/#_45","text":"\u6267\u884c\u201c\u56fe\u5c42 > \u5408\u5e76\u53ef\u89c1\u56fe\u5c42\u201d\u547d\u4ee4\u6216\u6309 Ctrl+Shift+E \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5408\u5e76\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u6240\u6709\u53ef\u89c1\u56fe\u5c42\u3002","title":"\u5408\u5e76\u53ef\u89c1\u56fe\u5c42"},{"location":"PS/PS7/#_46","text":"\u6267\u884c\u201c\u56fe\u5c42 > \u62fc\u5408\u56fe\u50cf\u201d\u547d\u4ee4\u53ef\u4ee5\u5c06\u6240\u6709\u56fe\u5c42\u90fd\u62fc\u5408\u5230\u201c\u80cc\u666f\u201d\u56fe\u5c42\u4e2d\u3002\u5982\u679c\u6709\u9690\u85cf\u7684\u56fe\u5c42\uff0c\u5219\u4f1a\u5f39\u51fa\u4e00\u4e2a\u63d0\u793a\u5bf9\u8bdd\u6846\uff0c\u63d0\u9192\u7528\u6237\u662f\u5426\u8981\u6254\u6389\u9690\u85cf\u7684\u56fe\u5c42\u3002","title":"\u62fc\u5408\u56fe\u50cf"},{"location":"PS/PS7/#_47","text":"\u76d6\u5370\u662f\u4e00\u79cd\u5408\u5e76\u56fe\u5c42\u7684\u7279\u6b8a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u56fe\u5c42\u7684\u5185\u5bb9\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u4ed6\u56fe\u5c42\u4e0d\u53d8\u3002\u76d6\u5370\u56fe\u5c42\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7ecf\u5e38\u7528\u5230\uff0c\u662f\u4e00\u79cd\u5f88\u5b9e\u7528\u7684\u56fe\u5c42\u5408\u5e76\u65b9\u6cd5\u3002 \u5411\u4e0b\u76d6\u5370\u56fe\u5c42\uff1a\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6309 Ctrl+Alt+E \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u8be5\u56fe\u5c42\u4e2d\u7684\u56fe\u50cf\u76d6\u5370\u5230\u4e0b\u9762\u7684\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u7684\u5185\u5bb9\u4fdd\u6301\u4e0d\u53d8\u3002 \u76d6\u5370\u591a\u4e2a\u56fe\u5c42\uff1a\u9009\u62e9\u591a\u4e2a\u56fe\u5c42\u5e76\u4f7f\u7528\u76d6\u5370\u56fe\u5c42\u5feb\u6377\u952e Ctrl+Alt+E \uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u56fe\u5c42\u4e2d\u7684\u56fe\u50cf\u76d6\u5370\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u7684\u5185\u5bb9\u4fdd\u6301\u4e0d\u53d8\u3002 \u76d6\u5370\u53ef\u89c1\u56fe\u5c42\uff1a\u6309 Ctrl+Shift+Alt+E \u7ec4\u5408\u952e\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u53ef\u89c1\u56fe\u5c42\u76d6\u5370\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\u3002 \u76d6\u5370\u56fe\u5c42\u7ec4\uff1a\u9009\u62e9\u56fe\u5c42\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u5feb\u6377\u952e Ctrl+Alt+E \uff0c\u53ef\u4ee5\u5c06\u7ec4\u4e2d\u6240\u6709\u56fe\u5c42\u5185\u5bb9\u76d6\u5370\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u7ec4\u4e2d\u7684\u5185\u5bb9\u4fdd\u6301\u4e0d\u53d8\u3002","title":"\u76d6\u5370\u56fe\u5c42"},{"location":"PS/PS7/#_48","text":"","title":"\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42"},{"location":"PS/PS7/#_49","text":"\u5728Photoshop\u4e2d\uff0c\u667a\u80fd\u5bf9\u8c61\u53ef\u4ee5\u770b\u4f5c\u5d4c\u5165\u5f53\u524d\u6587\u4ef6\u7684\u4e00\u4e2a\u72ec\u7acb\u6587\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u4f4d\u56fe\uff0c\u4e5f\u53ef\u4ee5\u5305\u542bIllustrator\u4e2d\u521b\u5efa\u7684\u77e2\u91cf\u56fe\u5f62\u3002\u800c\u4e14\u5728\u9886\u56de\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u7834\u574f\u667a\u80fd\u5bf9\u8c61\u7684\u539f\u59cb\u6570\u636e\uff0c\u56e0\u6b64\u5bf9\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u6240\u6267\u884c\u7684\u64cd\u4f5c\u90fd\u662f\u975e\u7834\u574f\u6027\u64cd\u4f5c\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS7/#_50","text":"\u7f16\u8f91\u667a\u80fd\u5bf9\u8c61 \u66ff\u6362\u667a\u80fd\u5bf9\u8c61\u5185\u5bb9","title":"\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u7ec3\u4e60"},{"location":"PS/PS8/","text":"\u56fe\u5c42\u4e0d\u900f\u660e\u5ea6 \u00b6 \u8c03\u6574\u56fe\u5c42\u4e0d\u900f\u660e\u5ea6 \u00b6 \u201c\u4e0d\u900f\u660e\u5ea6\u201d\u9009\u9879\u63a7\u5236\u7740\u6574\u4e2a\u56fe\u5c42\u7684\u900f\u660e\u5c5e\u6027\uff0c\u5305\u62ec\u56fe\u5c42\u4e2d\u7684\u5f62\u72b6\u3001\u50cf\u7d20\u4ee5\u53ca\u56fe\u5c42\u6837\u5f0f\u3002\u9ed8\u8ba4\u56fe\u5c42\u7684\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u4e3a 100%\uff0c\u5982\u679c\u5c06\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u8c03\u6574\u4e3a 50%\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u6587\u5b57\u90e8\u5206\u53d8\u4e3a\u534a\u900f\u660e\u6548\u679c\u3002 \u8c03\u6574\u56fe\u5c42\u586b\u5145\u900f\u660e\u5ea6 \u00b6 \u201c\u586b\u5145\u201d\u9009\u9879\u53ea\u5f71\u54cd\u56fe\u5c42\u4e2d\u7ed8\u5236\u7684\u50cf\u7d20\u548c\u5f62\u72b6\u7684\u4e0d\u900f\u660e\u5ea6\u3002\u4e0e\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u9009\u9879\u4e0d\u540c\uff0c\u5c06\u201c\u586b\u5145\u201d\u8c03\u6574\u4e3a 50%\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u6587\u5b57\u90e8\u5206\u53d8\u4e3a\u534a\u900f\u660e\u6548\u679c\uff0c\u800c\u6295\u5f71\u548c\u63cf\u8fb9\u6548\u679c\u5219\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u53d8\u5316\u3002 \u56fe\u5c42\u7684\u6df7\u5408\u6a21\u5f0f \u00b6 \u8bf4\u660e \u00b6 \u6240\u8c13\u56fe\u5c42\u6df7\u5408\u6a21\u5f0f\u662f\u6307\u4e00\u4e2a\u56fe\u5c42\u4e0e\u5176\u4e0b\u56fe\u5c42\u7684\u8272\u5f69\u53e0\u52a0\u65b9\u5f0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u65b0\u5efa\u56fe\u5c42\u7684\u6df7\u5408\u6a21\u5f0f\u4e3a\u6b63\u5e38\uff0c\u9664\u4e86\u6b63\u5e38\u4ee5 \u5916\uff0c\u8fd8\u6709\u5f88\u591a\u79cd\u6df7\u5408\u6a21\u5f0f\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u4ea7\u751f\u98ce\u683c\u8fe5\u5f02\u7684\u5408\u6210\u6548\u679c\u3002\u5728\u7ed8\u753b\u5de5\u5177\u548c\u4fee\u9970\u5de5\u5177\u7684\u9009\u9879\u680f\uff0c\u4ee5\u53ca\u201c\u6e10\u9690\u201d\u3001\u201c\u586b\u5145\u201d\u3001\u201c\u63cf\u8fb9\u201d\u547d\u4ee4\u548c\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u90fd\u5305\u542b\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u9009\u9879\u3002 \u6df7\u5408\u6a21\u5f0f\u7684\u7c7b\u578b \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u5355\u51fb\u9762\u677f\u9876\u90e8\u7684\u4e0b\u62c9\u6309\u94ae \uff0c\u5728\u5f39\u51fa\u7684\u4e0b\u62c9\u5217\u8868\u4e2d\u53ef\u4ee5\u9009\u62e9\u4e00\u79cd\u6df7\u5408\u6a21\u5f0f\u3002\u56fe\u5c42 \u7684\u6df7\u5408\u6a21\u5f0f\u5206\u4e3a 6 \u7ec4\uff0c\u5171 27 \u79cd\u3002 \u6df7\u5408\u6a21\u5f0f\u7ec3\u4e60 \u00b6 \u4f7f\u7528\u7ebf\u6027\u52a0\u6df1\u6df7\u5408\u6a21\u5f0f\u5236\u4f5c\u95ea\u7535\u6548\u679c \u4f7f\u7528\u6df7\u5408\u6a21\u5f0f\u4e0e\u56fe\u5c42\u8499\u7248\u5236\u4f5c\u74f6\u4e2d\u98ce\u666f \u4f7f\u7528\u6df7\u5408\u6a21\u5f0f\u6253\u9020\u7c89\u7d2b\u8272\u68a6\u5e7b \u4f7f\u7528\u56fe\u5c42\u6837\u5f0f \u00b6 \u8bf4\u660e \u00b6 \u56fe \u5c42 \u6837 \u5f0f \u548c \u6548 \u679c \u7684 \u51fa \u73b0\uff0c \u662f Photoshop\u4e00 \u4e2a \u5212 \u65f6 \u4ee3 \u7684 \u8fdb \u6b65\u3002 \u5728 Photoshop \u4e2d\uff0c \u56fe \u5c42\u6837\u5f0f\u51e0\u4e4e\u662f\u5236\u4f5c\u8d28\u611f\u3001\u6548\u679c\u7684\u201c\u7edd\u5bf9\u5229\u5668\u201d\uff0cPhotoshop \u4e2d\u7684\u56fe\u5c42\u6837\u5f0f\u4ee5\u5176\u4f7f\u7528\u7b80\u5355\u3001\u4fee\u6539\u65b9\u4fbf\u7684\u7279\u6027\u5e7f\u53d7\u7528\u6237\u7684\u9752\u7750\uff0c\u5c24\u5176\u662f\u6d89\u53ca\u521b\u610f\u6587\u5b57\u6216\u662f LOGO \u8bbe\u8ba1\u65f6\uff0c\u56fe\u5c42\u6837\u5f0f\u66f4\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\u3002 \u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f \u00b6 \u5982\u679c\u8981\u4e3a\u4e00\u4e2a\u56fe\u5c42\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b 3 \u79cd\u65b9\u6cd5\u6765\u5b8c\u6210\u3002 1\u3001\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\uff0c\u6b64\u65f6\u5c06\u5f39\u51fa\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\uff0c\u8c03\u6574\u597d\u76f8\u5e94\u7684\u8bbe\u7f6e\u5373\u53ef\u3002 2\u3001\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\u201d\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u4e00\u79cd\u6837\u5f0f\u5373\u53ef\u6253\u5f00\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846 \u719f\u6089\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846 \u00b6 \u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u7684\u5de6\u4fa7\u5217\u51fa\u4e86 10 \u79cd\u6837\u5f0f\u3002\u6837\u5f0f\u540d\u79f0\u524d\u9762\u7684\u590d\u9009\u6846\u5185\u6709\u6807\u8bb0\uff0c\u8868\u793a\u5728\u56fe\u5c42\u4e2d\u6dfb\u52a0\u4e86\u8be5\u6837\u5f0f\u3002\u5355\u51fb\u4e00\u4e2a\u6837\u5f0f\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u9009\u4e2d\u8be5\u6837\u5f0f\uff0c\u540c\u65f6\u5207\u6362\u5230\u8be5\u6837\u5f0f\u7684\u8bbe\u7f6e\u9762\u677f\u3002\u5728\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u6837\u5f0f\u53c2\u6570\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u5373\u53ef\u4e3a\u56fe\u5c42\u6dfb\u52a0\u6837\u5f0f\uff0c\u6dfb\u52a0\u4e86\u6837\u5f0f\u7684\u56fe\u5c42\u53f3\u4fa7\u4f1a\u51fa\u73b0fx\u56fe\u6807\u3002 \u663e\u793a\u4e0e\u9690\u85cf\u56fe\u5c42\u6837\u5f0f \u00b6 \u5982\u679c\u8981\u9690\u85cf\u4e00\u4e2a\u6837\u5f0f\uff0c\u53ef\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8be5\u6837\u5f0f\u524d\u9762\u7684\u773c\u775b\u56fe\u6807 \u3002\u5982\u679c\u8981\u9690\u85cf\u67d0\u4e2a\u56fe\u5c42\u4e2d\u7684\u6240\u6709\u6837\u5f0f\uff0c\u53ef\u4ee5\u5355\u51fb\u201c\u6548\u679c\u201d\u524d\u9762\u7684\u773c\u775b\u56fe\u6807\u3002 \u4fee\u6539\u56fe\u5c42\u6837\u5f0f \u00b6 \u5bf9\u56fe\u5c42\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\u6216\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u53cc\u51fb\u8be5\u6837\u5f0f\u7684\u540d\u79f0\uff0c\u53ef\u5f39\u51fa\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\uff0c\u8fdb\u884c\u53c2\u6570\u7684\u4fee\u6539\u5373\u53ef\u3002 \u590d\u5236/\u7c98\u8d34\u56fe\u5c42\u6837\u5f0f \u00b6 \u9009\u62e9\u8be5\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f> \u62f7\u8d1d\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u6216\u8005\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u62f7\u8d1d\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u63a5\u7740\u9009\u62e9\u76ee\u6807\u56fe\u5c42\uff0c\u518d\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f > \u7c98\u8d34\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u6216\u8005\u5728\u76ee\u6807\u56fe\u5c42\u7684\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u7c98\u8d34\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\u3002 \u6309\u4f4f Alt \u952e\u7684\u540c\u65f6\u5c06\u201c\u6548\u679c\u201d\u62d6\u62fd\u5230\u76ee\u6807\u56fe\u5c42\u4e0a\uff0c\u53ef\u4ee5\u590d\u5236 / \u7c98\u8d34\u6240\u6709\u6837\u5f0f\u3002\u6309\u4f4f Alt \u952e\u7684\u540c\u65f6\u5c06\u5355\u4e2a\u6837\u5f0f\u62d6\u62fd\u5230\u76ee\u6807\u56fe\u5c42\u4e0a\uff0c\u53ef\u4ee5\u590d\u5236 / \u7c98\u8d34\u8be5\u6837\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u6309\u4f4f Alt \u952e\uff0c\u5219\u662f\u5c06\u6837 \u5f0f\u79fb\u52a8\u5230\u76ee\u6807\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u4e0d\u518d\u6709\u6837\u5f0f\u3002 \u6e05\u9664/\u6805\u683c\u5316\u56fe\u5c42\u6837\u5f0f \u00b6 \u5c06\u67d0\u4e00\u6837\u5f0f\u62d6\u62fd\u5230\u201c\u5220\u9664\u56fe\u5c42\u201d\u6309\u94ae\u4e0a\uff0c\u5c31\u53ef\u4ee5\u5220\u9664\u8be5\u56fe\u5c42\u6837\u5f0f\u3002\u5982\u679c\u8981\u5220\u9664\u67d0\u4e2a\u56fe\u5c42\u4e2d\u7684\u6240\u6709\u6837\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9\u8be5\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f > \u6e05\u9664\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u6216\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u6e05\u9664\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\u3002 \u6267\u884c\u201c\u56fe\u5c42 > \u6805\u683c\u5316 > \u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u5373\u53ef\u5c06\u5f53\u524d\u56fe\u5c42\u7684\u56fe\u5c42\u6837\u5f0f\u6805\u683c\u5316\u5230\u5f53\u524d\u56fe\u5c42\u4e2d\uff0c\u6805\u683c\u5316\u7684\u6837\u5f0f\u90e8\u5206\u53ef\u4ee5\u50cf\u666e\u901a\u56fe\u5c42\u7684\u5176\u4ed6\u90e8\u5206\u4e00\u6837\u8fdb\u884c\u7f16\u8f91\u5904\u7406\uff0c\u4f46\u662f\u4e0d\u518d\u5177\u6709\u53ef\u4ee5\u8c03\u6574\u56fe\u5c42\u53c2\u6570\u7684\u529f\u80fd\u3002 \u56fe\u5c42\u6837\u5f0f\u8be6\u89e3 \u00b6 \u8bf4\u660e \u00b6 \u5728 Photoshop \u4e2d\u5305\u542b 10 \u79cd\u56fe\u5c42\u6837\u5f0f\uff0c\u5305\u62ec\u659c\u9762\u548c\u6d6e\u96d5\u3001\u63cf\u8fb9\u3001\u5185\u9634\u5f71\u3001\u5185\u53d1\u5149\u3001\u5149\u6cfd\u3001\u989c\u8272\u53e0\u52a0\u3001\u6e10\u53d8\u53e0\u52a0\u3001\u56fe\u6848\u53e0\u52a0\u3001\u5916\u53d1\u5149\u4e0e\u6295\u5f71\u6837\u5f0f\u7684\u6548\u679c\uff0c\u4ece\u6bcf\u79cd\u56fe\u5c42\u6837\u5f0f\u7684\u540d\u79f0\u4e0a\u5c31\u80fd\u591f\u4e86\u89e3\uff0c\u8fd9\u4e9b\u56fe\u5c42\u6837\u5f0f\u57fa\u672c\u5305\u62ec\u201c\u9634\u5f71\u201d\u3001\u201c\u53d1\u5149\u201d\u3001\u201c\u51f8\u8d77\u201d\u3001\u201c\u5149\u6cfd\u201d\u3001\u201c\u53e0\u52a0\u201d\u3001\u201c\u63cf\u8fb9\u201d\u7b49\u51e0\u79cd\u5c5e\u6027\u3002\u5f53\u7136\uff0c\u9664\u4e86\u4ee5\u4e0a\u5c5e\u6027\uff0c\u591a\u79cd\u56fe\u5c42\u6837\u5f0f\u5171\u540c\u4f7f\u7528\u8fd8\u53ef\u4ee5\u5236\u4f5c\u51fa\u66f4\u52a0\u4e30\u5bcc\u7684\u5947\u7279\u6548\u679c\u3002 \u4f7f\u7528\u201c\u6837\u5f0f\u201d\u9762\u677f \u00b6 \u8ba4\u8bc6\u201c\u6837\u5f0f\u201d\u9762\u677f \u00b6 \u6267\u884c\u201c\u7a97\u53e3 > \u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u6837\u5f0f\u201d\u9762\u677f\uff0c\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\uff0c\u53ef\u4ee5\u6e05\u9664\u4e3a\u56fe\u5c42\u6dfb\u52a0\u7684\u6837\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u65b0\u5efa\u548c\u5220\u9664\u6837\u5f0f\u3002 \u5c06\u5f53\u524d\u56fe\u5c42\u7684\u6837\u5f0f\u521b\u5efa\u4e3a\u9884\u8bbe \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u521b\u5efa\u65b0\u6837\u5f0f\u201d\u6309\u94ae\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u65b0\u5efa\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u4e3a\u6837\u5f0f\u8bbe\u7f6e\u4e00\u4e2a\u540d\u79f0\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\uff0c\u65b0\u5efa\u7684\u6837\u5f0f\u4f1a\u4fdd\u5b58\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u7684\u672b\u5c3e\u3002\u82e5\u5728\u201c\u65b0\u5efa\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u9009\u4e2d\u201c\u5305\u542b\u56fe\u5c42\u6df7\u5408\u9009\u9879\u201d\u590d\u9009\u6846\uff0c\u521b\u5efa\u7684\u6837\u5f0f\u5c06\u5177\u6709\u56fe\u5c42\u4e2d\u7684\u6df7\u5408\u6a21\u5f0f\u3002 \u5220\u9664\u6837\u5f0f \u00b6 \u5c06\u6837\u5f0f\u62d6\u62fd\u5230\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u6837\u5f0f\u201d\u6309\u94ae\u4e0a\u5373\u53ef\u5220\u9664\u8be5\u6837\u5f0f\u3002\u4e5f\u53ef\u4ee5\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u6309\u4f4f Alt \u952e\uff0c\u5f53\u5149\u6807\u53d8\u4e3a\u526a\u5200\u5f62\u72b6\u65f6\uff0c\u5355\u51fb\u9700\u8981\u5220\u9664\u7684 \u5b58\u50a8\u6837\u5f0f\u5e93 \u00b6 \u5c06\u8bbe\u7f6e\u597d\u7684\u6837\u5f0f\u4fdd\u5b58\u5230\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728\u9762\u677f\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5b58\u50a8\u6837\u5f0f\u201d\u547d\u4ee4\u3002\u6253\u5f00\u201c\u5b58\u50a8\u201d\u5bf9\u8bdd\u6846\uff0c\u4e3a\u5176\u8bbe\u7f6e\u4e00\u4e2a\u540d\u79f0\uff0c\u5c06\u5176\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u6837\u5f0f\u5e93\u3002 \u8f7d\u5165\u6837\u5f0f\u5e93 \u00b6 \u201c\u6837\u5f0f\u201d\u9762\u677f\u83dc\u5355\u7684\u4e0b\u534a\u90e8\u5206\u662f Photoshop \u63d0\u4f9b\u7684\u9884\u8bbe\u6837\u5f0f\u5e93\uff0c\u9009\u62e9\u4e00\u79cd\u6837\u5f0f\u5e93\uff0c\u7cfb\u7edf\u4f1a\u5f39\u51fa\u4e00\u4e2a\u63d0\u793a\u5bf9\u8bdd\u6846\u3002 \u5982\u679c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u8f7d\u5165\u6837\u5f0f\u5e93\u5e76\u66ff\u6362\u6389\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u7684\u6240\u6709\u6837\u5f0f\uff1b\u5982\u679c\u5355\u51fb\u201c\u8ffd\u52a0\u201d\u6309\u94ae\uff0c\u5219\u8be5\u6837\u5f0f\u5e93\u4f1a\u6dfb\u52a0\u5230\u539f\u6709\u6837\u5f0f\u7684\u540e\u9762\u3002 \u8f7d\u5165\u5916\u6302\u6837\u5f0f \u00b6 \u6267\u884c\u201c\u7f16\u8f91 > \u9884\u8bbe\u7ba1\u7406\u5668\u201d\u547d\u4ee4\uff0c\u5728\u201c\u9884\u8bbe\u7ba1\u7406\u5668\u201d\u7a97\u53e3\u4e2d\u8bbe\u7f6e\u201c\u9884\u8bbe\u7c7b\u578b\u201d\u4e3a\u201c\u6837\u5f0f\u201d\uff0c\u5355\u51fb\u201c\u8f7d\u5165\u201d\u6309\u94ae\uff0c\u9009\u62e9 .axl \u683c\u5f0f\u7684\u6837\u5f0f\u7d20\u6750\u6587\u4ef6\uff0c\u6700\u540e\u5355\u51fb\u201c\u5b8c\u6210\u201d\u6309\u94ae\uff0c\u5373\u53ef\u8f7d\u5165\u5916\u6302\u6837\u5f0f\u3002 \u667a\u80fd\u5bf9\u8c61\u56fe\u5c42 \u00b6 \u521b\u5efa\u667a\u80fd\u5bf9\u8c61 \u00b6 \u521b\u5efa\u667a\u80fd\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\u4ee5\u4e0b 4 \u79cd\u3002 1\u3001\u6267\u884c\u201c\u6587\u4ef6 > \u6253\u5f00\u4e3a\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u56fe\u50cf\u4f5c\u4e3a\u667a\u80fd\u5bf9\u8c61\u6253\u5f00\u3002\u6253\u5f00\u4ee5\u540e\uff0c\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u7684\u7f29\u89c8\u56fe\u53f3\u4e0b\u89d2\u4f1a\u51fa\u73b0\u4e00\u4e2a\u667a\u80fd\u5bf9\u8c61\u56fe\u6807\u3002 2\u3001\u6253\u5f00\u4e00\u4e2a\u56fe\u50cf\uff0c\u7136\u540e\u6267\u884c\u201c\u6587\u4ef6 > \u7f6e\u5165\u201d\u547d\u4ee4\u3002\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u56fe\u50cf\u4f5c\u4e3a\u667a\u80fd\u5bf9\u8c61\u7f6e\u5165\u5230\u5f53\u524d\u6587\u6863\u4e2d\u3002 3\u3001\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u8f6c\u6362\u4e3a\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\u3002\u6216\u8005\u5355\u51fb\u53f3\u952e\u6267\u884c\u201c\u8f6c\u6362\u4e3a\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\u3002 4\u3001\u53ef\u4ee5\u5c06 Adobe Illustrator \u4e2d\u7684\u77e2\u91cf\u56fe\u5f62\u4f5c\u4e3a\u667a\u80fd\u5bf9\u8c61\u7f6e\u5165\u5230 Photoshop \u4e2d\u3002\u6216\u662f\u5c06 PDF \u6587\u4ef6\u521b\u5efa\u4e3a\u667a\u80fd\u5bf9\u8c61\u3002 \u590d\u5236\u667a\u80fd\u5bf9\u8c61 \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u901a\u8fc7\u62f7\u8d1d\u65b0\u5efa\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u590d\u5236\u4e00\u4e2a\u667a\u80fd\u5bf9\u8c61\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5c06\u667a\u80fd\u5bf9\u8c61\u62d6\u62fd\u5230\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u521b\u5efa\u65b0\u56fe\u5c42\u201d\u6309\u94ae\u4e0a\uff0c\u6216\u8005\u76f4\u63a5\u6309 Ctrl+J \u7ec4\u5408\u952e\u3002 \u5bfc\u51fa\u667a\u80fd\u5bf9\u8c61 \u00b6 \u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u667a\u80fd\u5bf9\u8c61\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u5bfc\u51fa\u5185\u5bb9\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u667a\u80fd\u5bf9\u8c61\u4ee5\u539f\u59cb\u7f6e\u5165\u683c\u5f0f\u5bfc\u51fa\u3002\u5982\u679c\u667a\u80fd\u5bf9\u8c61\u662f\u5229\u7528\u56fe\u5c42\u6765\u521b\u5efa\u7684\uff0c\u90a3\u4e48\u5bfc\u51fa\u65f6\u5e94\u4ee5 PSB \u683c\u5f0f\u5bfc\u51fa\u3002 \u5c06\u667a\u80fd\u5bf9\u8c61\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42 \u00b6 \u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u6805\u683c\u5316\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u667a\u80fd\u5bf9\u8c61\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\u3002\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\u4ee5\u540e\uff0c\u539f\u59cb\u56fe\u5c42\u7f29\u89c8\u56fe\u4e0a\u7684\u667a\u80fd\u5bf9\u8c61\u6807\u5fd7\u4e5f\u4f1a\u6d88\u5931\u3002 \u7ec3\u4e60 \u00b6 \u6df7\u5408\u6a21\u5f0f\u5236\u4f5c\u624b\u638c\u602a\u517d \u4f7f\u7528\u56fe\u6848\u53e0\u52a0\u5236\u4f5c\u5976\u725b\u6587\u5b57 \u4f7f\u7528\u56fe\u5c42\u6837\u5f0f\u5236\u4f5c\u591a\u5f69\u8d28\u611f\u6587\u5b57","title":"\u56fe\u5c42\u7684\u9ad8\u7ea7\u64cd\u4f5c"},{"location":"PS/PS8/#_1","text":"","title":"\u56fe\u5c42\u4e0d\u900f\u660e\u5ea6"},{"location":"PS/PS8/#_2","text":"\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u9009\u9879\u63a7\u5236\u7740\u6574\u4e2a\u56fe\u5c42\u7684\u900f\u660e\u5c5e\u6027\uff0c\u5305\u62ec\u56fe\u5c42\u4e2d\u7684\u5f62\u72b6\u3001\u50cf\u7d20\u4ee5\u53ca\u56fe\u5c42\u6837\u5f0f\u3002\u9ed8\u8ba4\u56fe\u5c42\u7684\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u4e3a 100%\uff0c\u5982\u679c\u5c06\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u8c03\u6574\u4e3a 50%\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u6587\u5b57\u90e8\u5206\u53d8\u4e3a\u534a\u900f\u660e\u6548\u679c\u3002","title":"\u8c03\u6574\u56fe\u5c42\u4e0d\u900f\u660e\u5ea6"},{"location":"PS/PS8/#_3","text":"\u201c\u586b\u5145\u201d\u9009\u9879\u53ea\u5f71\u54cd\u56fe\u5c42\u4e2d\u7ed8\u5236\u7684\u50cf\u7d20\u548c\u5f62\u72b6\u7684\u4e0d\u900f\u660e\u5ea6\u3002\u4e0e\u201c\u4e0d\u900f\u660e\u5ea6\u201d\u9009\u9879\u4e0d\u540c\uff0c\u5c06\u201c\u586b\u5145\u201d\u8c03\u6574\u4e3a 50%\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u6587\u5b57\u90e8\u5206\u53d8\u4e3a\u534a\u900f\u660e\u6548\u679c\uff0c\u800c\u6295\u5f71\u548c\u63cf\u8fb9\u6548\u679c\u5219\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u53d8\u5316\u3002","title":"\u8c03\u6574\u56fe\u5c42\u586b\u5145\u900f\u660e\u5ea6"},{"location":"PS/PS8/#_4","text":"","title":"\u56fe\u5c42\u7684\u6df7\u5408\u6a21\u5f0f"},{"location":"PS/PS8/#_5","text":"\u6240\u8c13\u56fe\u5c42\u6df7\u5408\u6a21\u5f0f\u662f\u6307\u4e00\u4e2a\u56fe\u5c42\u4e0e\u5176\u4e0b\u56fe\u5c42\u7684\u8272\u5f69\u53e0\u52a0\u65b9\u5f0f\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u65b0\u5efa\u56fe\u5c42\u7684\u6df7\u5408\u6a21\u5f0f\u4e3a\u6b63\u5e38\uff0c\u9664\u4e86\u6b63\u5e38\u4ee5 \u5916\uff0c\u8fd8\u6709\u5f88\u591a\u79cd\u6df7\u5408\u6a21\u5f0f\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u4ea7\u751f\u98ce\u683c\u8fe5\u5f02\u7684\u5408\u6210\u6548\u679c\u3002\u5728\u7ed8\u753b\u5de5\u5177\u548c\u4fee\u9970\u5de5\u5177\u7684\u9009\u9879\u680f\uff0c\u4ee5\u53ca\u201c\u6e10\u9690\u201d\u3001\u201c\u586b\u5145\u201d\u3001\u201c\u63cf\u8fb9\u201d\u547d\u4ee4\u548c\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u90fd\u5305\u542b\u201c\u6df7\u5408\u6a21\u5f0f\u201d\u9009\u9879\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS8/#_6","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u5355\u51fb\u9762\u677f\u9876\u90e8\u7684\u4e0b\u62c9\u6309\u94ae \uff0c\u5728\u5f39\u51fa\u7684\u4e0b\u62c9\u5217\u8868\u4e2d\u53ef\u4ee5\u9009\u62e9\u4e00\u79cd\u6df7\u5408\u6a21\u5f0f\u3002\u56fe\u5c42 \u7684\u6df7\u5408\u6a21\u5f0f\u5206\u4e3a 6 \u7ec4\uff0c\u5171 27 \u79cd\u3002","title":"\u6df7\u5408\u6a21\u5f0f\u7684\u7c7b\u578b"},{"location":"PS/PS8/#_7","text":"\u4f7f\u7528\u7ebf\u6027\u52a0\u6df1\u6df7\u5408\u6a21\u5f0f\u5236\u4f5c\u95ea\u7535\u6548\u679c \u4f7f\u7528\u6df7\u5408\u6a21\u5f0f\u4e0e\u56fe\u5c42\u8499\u7248\u5236\u4f5c\u74f6\u4e2d\u98ce\u666f \u4f7f\u7528\u6df7\u5408\u6a21\u5f0f\u6253\u9020\u7c89\u7d2b\u8272\u68a6\u5e7b","title":"\u6df7\u5408\u6a21\u5f0f\u7ec3\u4e60"},{"location":"PS/PS8/#_8","text":"","title":"\u4f7f\u7528\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS8/#_9","text":"\u56fe \u5c42 \u6837 \u5f0f \u548c \u6548 \u679c \u7684 \u51fa \u73b0\uff0c \u662f Photoshop\u4e00 \u4e2a \u5212 \u65f6 \u4ee3 \u7684 \u8fdb \u6b65\u3002 \u5728 Photoshop \u4e2d\uff0c \u56fe \u5c42\u6837\u5f0f\u51e0\u4e4e\u662f\u5236\u4f5c\u8d28\u611f\u3001\u6548\u679c\u7684\u201c\u7edd\u5bf9\u5229\u5668\u201d\uff0cPhotoshop \u4e2d\u7684\u56fe\u5c42\u6837\u5f0f\u4ee5\u5176\u4f7f\u7528\u7b80\u5355\u3001\u4fee\u6539\u65b9\u4fbf\u7684\u7279\u6027\u5e7f\u53d7\u7528\u6237\u7684\u9752\u7750\uff0c\u5c24\u5176\u662f\u6d89\u53ca\u521b\u610f\u6587\u5b57\u6216\u662f LOGO \u8bbe\u8ba1\u65f6\uff0c\u56fe\u5c42\u6837\u5f0f\u66f4\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS8/#_10","text":"\u5982\u679c\u8981\u4e3a\u4e00\u4e2a\u56fe\u5c42\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b 3 \u79cd\u65b9\u6cd5\u6765\u5b8c\u6210\u3002 1\u3001\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f\u201d\u83dc\u5355\u4e0b\u7684\u5b50\u547d\u4ee4\uff0c\u6b64\u65f6\u5c06\u5f39\u51fa\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\uff0c\u8c03\u6574\u597d\u76f8\u5e94\u7684\u8bbe\u7f6e\u5373\u53ef\u3002 2\u3001\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f\u201d\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u4e00\u79cd\u6837\u5f0f\u5373\u53ef\u6253\u5f00\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846","title":"\u6dfb\u52a0\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS8/#_11","text":"\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u7684\u5de6\u4fa7\u5217\u51fa\u4e86 10 \u79cd\u6837\u5f0f\u3002\u6837\u5f0f\u540d\u79f0\u524d\u9762\u7684\u590d\u9009\u6846\u5185\u6709\u6807\u8bb0\uff0c\u8868\u793a\u5728\u56fe\u5c42\u4e2d\u6dfb\u52a0\u4e86\u8be5\u6837\u5f0f\u3002\u5355\u51fb\u4e00\u4e2a\u6837\u5f0f\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u9009\u4e2d\u8be5\u6837\u5f0f\uff0c\u540c\u65f6\u5207\u6362\u5230\u8be5\u6837\u5f0f\u7684\u8bbe\u7f6e\u9762\u677f\u3002\u5728\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u8bbe\u7f6e\u597d\u6837\u5f0f\u53c2\u6570\u4ee5\u540e\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u5373\u53ef\u4e3a\u56fe\u5c42\u6dfb\u52a0\u6837\u5f0f\uff0c\u6dfb\u52a0\u4e86\u6837\u5f0f\u7684\u56fe\u5c42\u53f3\u4fa7\u4f1a\u51fa\u73b0fx\u56fe\u6807\u3002","title":"\u719f\u6089\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846"},{"location":"PS/PS8/#_12","text":"\u5982\u679c\u8981\u9690\u85cf\u4e00\u4e2a\u6837\u5f0f\uff0c\u53ef\u4ee5\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u5355\u51fb\u8be5\u6837\u5f0f\u524d\u9762\u7684\u773c\u775b\u56fe\u6807 \u3002\u5982\u679c\u8981\u9690\u85cf\u67d0\u4e2a\u56fe\u5c42\u4e2d\u7684\u6240\u6709\u6837\u5f0f\uff0c\u53ef\u4ee5\u5355\u51fb\u201c\u6548\u679c\u201d\u524d\u9762\u7684\u773c\u775b\u56fe\u6807\u3002","title":"\u663e\u793a\u4e0e\u9690\u85cf\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS8/#_13","text":"\u5bf9\u56fe\u5c42\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\u6216\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u53cc\u51fb\u8be5\u6837\u5f0f\u7684\u540d\u79f0\uff0c\u53ef\u5f39\u51fa\u201c\u56fe\u5c42\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\uff0c\u8fdb\u884c\u53c2\u6570\u7684\u4fee\u6539\u5373\u53ef\u3002","title":"\u4fee\u6539\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS8/#_14","text":"\u9009\u62e9\u8be5\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f> \u62f7\u8d1d\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u6216\u8005\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u62f7\u8d1d\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u63a5\u7740\u9009\u62e9\u76ee\u6807\u56fe\u5c42\uff0c\u518d\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f > \u7c98\u8d34\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u6216\u8005\u5728\u76ee\u6807\u56fe\u5c42\u7684\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u7c98\u8d34\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\u3002 \u6309\u4f4f Alt \u952e\u7684\u540c\u65f6\u5c06\u201c\u6548\u679c\u201d\u62d6\u62fd\u5230\u76ee\u6807\u56fe\u5c42\u4e0a\uff0c\u53ef\u4ee5\u590d\u5236 / \u7c98\u8d34\u6240\u6709\u6837\u5f0f\u3002\u6309\u4f4f Alt \u952e\u7684\u540c\u65f6\u5c06\u5355\u4e2a\u6837\u5f0f\u62d6\u62fd\u5230\u76ee\u6807\u56fe\u5c42\u4e0a\uff0c\u53ef\u4ee5\u590d\u5236 / \u7c98\u8d34\u8be5\u6837\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u6309\u4f4f Alt \u952e\uff0c\u5219\u662f\u5c06\u6837 \u5f0f\u79fb\u52a8\u5230\u76ee\u6807\u56fe\u5c42\u4e2d\uff0c\u539f\u59cb\u56fe\u5c42\u4e0d\u518d\u6709\u6837\u5f0f\u3002","title":"\u590d\u5236/\u7c98\u8d34\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS8/#_15","text":"\u5c06\u67d0\u4e00\u6837\u5f0f\u62d6\u62fd\u5230\u201c\u5220\u9664\u56fe\u5c42\u201d\u6309\u94ae\u4e0a\uff0c\u5c31\u53ef\u4ee5\u5220\u9664\u8be5\u56fe\u5c42\u6837\u5f0f\u3002\u5982\u679c\u8981\u5220\u9664\u67d0\u4e2a\u56fe\u5c42\u4e2d\u7684\u6240\u6709\u6837\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9\u8be5\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u56fe\u5c42\u6837\u5f0f > \u6e05\u9664\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u6216\u5728\u56fe\u5c42\u540d\u79f0\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u6e05\u9664\u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\u3002 \u6267\u884c\u201c\u56fe\u5c42 > \u6805\u683c\u5316 > \u56fe\u5c42\u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u5373\u53ef\u5c06\u5f53\u524d\u56fe\u5c42\u7684\u56fe\u5c42\u6837\u5f0f\u6805\u683c\u5316\u5230\u5f53\u524d\u56fe\u5c42\u4e2d\uff0c\u6805\u683c\u5316\u7684\u6837\u5f0f\u90e8\u5206\u53ef\u4ee5\u50cf\u666e\u901a\u56fe\u5c42\u7684\u5176\u4ed6\u90e8\u5206\u4e00\u6837\u8fdb\u884c\u7f16\u8f91\u5904\u7406\uff0c\u4f46\u662f\u4e0d\u518d\u5177\u6709\u53ef\u4ee5\u8c03\u6574\u56fe\u5c42\u53c2\u6570\u7684\u529f\u80fd\u3002","title":"\u6e05\u9664/\u6805\u683c\u5316\u56fe\u5c42\u6837\u5f0f"},{"location":"PS/PS8/#_16","text":"","title":"\u56fe\u5c42\u6837\u5f0f\u8be6\u89e3"},{"location":"PS/PS8/#_17","text":"\u5728 Photoshop \u4e2d\u5305\u542b 10 \u79cd\u56fe\u5c42\u6837\u5f0f\uff0c\u5305\u62ec\u659c\u9762\u548c\u6d6e\u96d5\u3001\u63cf\u8fb9\u3001\u5185\u9634\u5f71\u3001\u5185\u53d1\u5149\u3001\u5149\u6cfd\u3001\u989c\u8272\u53e0\u52a0\u3001\u6e10\u53d8\u53e0\u52a0\u3001\u56fe\u6848\u53e0\u52a0\u3001\u5916\u53d1\u5149\u4e0e\u6295\u5f71\u6837\u5f0f\u7684\u6548\u679c\uff0c\u4ece\u6bcf\u79cd\u56fe\u5c42\u6837\u5f0f\u7684\u540d\u79f0\u4e0a\u5c31\u80fd\u591f\u4e86\u89e3\uff0c\u8fd9\u4e9b\u56fe\u5c42\u6837\u5f0f\u57fa\u672c\u5305\u62ec\u201c\u9634\u5f71\u201d\u3001\u201c\u53d1\u5149\u201d\u3001\u201c\u51f8\u8d77\u201d\u3001\u201c\u5149\u6cfd\u201d\u3001\u201c\u53e0\u52a0\u201d\u3001\u201c\u63cf\u8fb9\u201d\u7b49\u51e0\u79cd\u5c5e\u6027\u3002\u5f53\u7136\uff0c\u9664\u4e86\u4ee5\u4e0a\u5c5e\u6027\uff0c\u591a\u79cd\u56fe\u5c42\u6837\u5f0f\u5171\u540c\u4f7f\u7528\u8fd8\u53ef\u4ee5\u5236\u4f5c\u51fa\u66f4\u52a0\u4e30\u5bcc\u7684\u5947\u7279\u6548\u679c\u3002","title":"\u8bf4\u660e"},{"location":"PS/PS8/#_18","text":"","title":"\u4f7f\u7528\u201c\u6837\u5f0f\u201d\u9762\u677f"},{"location":"PS/PS8/#_19","text":"\u6267\u884c\u201c\u7a97\u53e3 > \u6837\u5f0f\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u6837\u5f0f\u201d\u9762\u677f\uff0c\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\uff0c\u53ef\u4ee5\u6e05\u9664\u4e3a\u56fe\u5c42\u6dfb\u52a0\u7684\u6837\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u65b0\u5efa\u548c\u5220\u9664\u6837\u5f0f\u3002","title":"\u8ba4\u8bc6\u201c\u6837\u5f0f\u201d\u9762\u677f"},{"location":"PS/PS8/#_20","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u521b\u5efa\u65b0\u6837\u5f0f\u201d\u6309\u94ae\uff0c\u63a5\u7740\u5728\u5f39\u51fa\u7684\u201c\u65b0\u5efa\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u4e3a\u6837\u5f0f\u8bbe\u7f6e\u4e00\u4e2a\u540d\u79f0\uff0c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\u540e\uff0c\u65b0\u5efa\u7684\u6837\u5f0f\u4f1a\u4fdd\u5b58\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u7684\u672b\u5c3e\u3002\u82e5\u5728\u201c\u65b0\u5efa\u6837\u5f0f\u201d\u5bf9\u8bdd\u6846\u4e2d\u9009\u4e2d\u201c\u5305\u542b\u56fe\u5c42\u6df7\u5408\u9009\u9879\u201d\u590d\u9009\u6846\uff0c\u521b\u5efa\u7684\u6837\u5f0f\u5c06\u5177\u6709\u56fe\u5c42\u4e2d\u7684\u6df7\u5408\u6a21\u5f0f\u3002","title":"\u5c06\u5f53\u524d\u56fe\u5c42\u7684\u6837\u5f0f\u521b\u5efa\u4e3a\u9884\u8bbe"},{"location":"PS/PS8/#_21","text":"\u5c06\u6837\u5f0f\u62d6\u62fd\u5230\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u6837\u5f0f\u201d\u6309\u94ae\u4e0a\u5373\u53ef\u5220\u9664\u8be5\u6837\u5f0f\u3002\u4e5f\u53ef\u4ee5\u5728\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u6309\u4f4f Alt \u952e\uff0c\u5f53\u5149\u6807\u53d8\u4e3a\u526a\u5200\u5f62\u72b6\u65f6\uff0c\u5355\u51fb\u9700\u8981\u5220\u9664\u7684","title":"\u5220\u9664\u6837\u5f0f"},{"location":"PS/PS8/#_22","text":"\u5c06\u8bbe\u7f6e\u597d\u7684\u6837\u5f0f\u4fdd\u5b58\u5230\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728\u9762\u677f\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5b58\u50a8\u6837\u5f0f\u201d\u547d\u4ee4\u3002\u6253\u5f00\u201c\u5b58\u50a8\u201d\u5bf9\u8bdd\u6846\uff0c\u4e3a\u5176\u8bbe\u7f6e\u4e00\u4e2a\u540d\u79f0\uff0c\u5c06\u5176\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u6837\u5f0f\u5e93\u3002","title":"\u5b58\u50a8\u6837\u5f0f\u5e93"},{"location":"PS/PS8/#_23","text":"\u201c\u6837\u5f0f\u201d\u9762\u677f\u83dc\u5355\u7684\u4e0b\u534a\u90e8\u5206\u662f Photoshop \u63d0\u4f9b\u7684\u9884\u8bbe\u6837\u5f0f\u5e93\uff0c\u9009\u62e9\u4e00\u79cd\u6837\u5f0f\u5e93\uff0c\u7cfb\u7edf\u4f1a\u5f39\u51fa\u4e00\u4e2a\u63d0\u793a\u5bf9\u8bdd\u6846\u3002 \u5982\u679c\u5355\u51fb\u201c\u786e\u5b9a\u201d\u6309\u94ae\uff0c\u53ef\u4ee5\u8f7d\u5165\u6837\u5f0f\u5e93\u5e76\u66ff\u6362\u6389\u201c\u6837\u5f0f\u201d\u9762\u677f\u4e2d\u7684\u6240\u6709\u6837\u5f0f\uff1b\u5982\u679c\u5355\u51fb\u201c\u8ffd\u52a0\u201d\u6309\u94ae\uff0c\u5219\u8be5\u6837\u5f0f\u5e93\u4f1a\u6dfb\u52a0\u5230\u539f\u6709\u6837\u5f0f\u7684\u540e\u9762\u3002","title":"\u8f7d\u5165\u6837\u5f0f\u5e93"},{"location":"PS/PS8/#_24","text":"\u6267\u884c\u201c\u7f16\u8f91 > \u9884\u8bbe\u7ba1\u7406\u5668\u201d\u547d\u4ee4\uff0c\u5728\u201c\u9884\u8bbe\u7ba1\u7406\u5668\u201d\u7a97\u53e3\u4e2d\u8bbe\u7f6e\u201c\u9884\u8bbe\u7c7b\u578b\u201d\u4e3a\u201c\u6837\u5f0f\u201d\uff0c\u5355\u51fb\u201c\u8f7d\u5165\u201d\u6309\u94ae\uff0c\u9009\u62e9 .axl \u683c\u5f0f\u7684\u6837\u5f0f\u7d20\u6750\u6587\u4ef6\uff0c\u6700\u540e\u5355\u51fb\u201c\u5b8c\u6210\u201d\u6309\u94ae\uff0c\u5373\u53ef\u8f7d\u5165\u5916\u6302\u6837\u5f0f\u3002","title":"\u8f7d\u5165\u5916\u6302\u6837\u5f0f"},{"location":"PS/PS8/#_25","text":"","title":"\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42"},{"location":"PS/PS8/#_26","text":"\u521b\u5efa\u667a\u80fd\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\u4ee5\u4e0b 4 \u79cd\u3002 1\u3001\u6267\u884c\u201c\u6587\u4ef6 > \u6253\u5f00\u4e3a\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u56fe\u50cf\u4f5c\u4e3a\u667a\u80fd\u5bf9\u8c61\u6253\u5f00\u3002\u6253\u5f00\u4ee5\u540e\uff0c\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u7684\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\u7684\u7f29\u89c8\u56fe\u53f3\u4e0b\u89d2\u4f1a\u51fa\u73b0\u4e00\u4e2a\u667a\u80fd\u5bf9\u8c61\u56fe\u6807\u3002 2\u3001\u6253\u5f00\u4e00\u4e2a\u56fe\u50cf\uff0c\u7136\u540e\u6267\u884c\u201c\u6587\u4ef6 > \u7f6e\u5165\u201d\u547d\u4ee4\u3002\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u56fe\u50cf\u4f5c\u4e3a\u667a\u80fd\u5bf9\u8c61\u7f6e\u5165\u5230\u5f53\u524d\u6587\u6863\u4e2d\u3002 3\u3001\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u8f6c\u6362\u4e3a\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\u3002\u6216\u8005\u5355\u51fb\u53f3\u952e\u6267\u884c\u201c\u8f6c\u6362\u4e3a\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\u3002 4\u3001\u53ef\u4ee5\u5c06 Adobe Illustrator \u4e2d\u7684\u77e2\u91cf\u56fe\u5f62\u4f5c\u4e3a\u667a\u80fd\u5bf9\u8c61\u7f6e\u5165\u5230 Photoshop \u4e2d\u3002\u6216\u662f\u5c06 PDF \u6587\u4ef6\u521b\u5efa\u4e3a\u667a\u80fd\u5bf9\u8c61\u3002","title":"\u521b\u5efa\u667a\u80fd\u5bf9\u8c61"},{"location":"PS/PS8/#_27","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u667a\u80fd\u5bf9\u8c61\u56fe\u5c42\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u901a\u8fc7\u62f7\u8d1d\u65b0\u5efa\u667a\u80fd\u5bf9\u8c61\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u590d\u5236\u4e00\u4e2a\u667a\u80fd\u5bf9\u8c61\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5c06\u667a\u80fd\u5bf9\u8c61\u62d6\u62fd\u5230\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u521b\u5efa\u65b0\u56fe\u5c42\u201d\u6309\u94ae\u4e0a\uff0c\u6216\u8005\u76f4\u63a5\u6309 Ctrl+J \u7ec4\u5408\u952e\u3002","title":"\u590d\u5236\u667a\u80fd\u5bf9\u8c61"},{"location":"PS/PS8/#_28","text":"\u5728\u201c\u56fe\u5c42\u201d\u9762\u677f\u4e2d\u9009\u62e9\u667a\u80fd\u5bf9\u8c61\uff0c\u7136\u540e\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u5bfc\u51fa\u5185\u5bb9\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u667a\u80fd\u5bf9\u8c61\u4ee5\u539f\u59cb\u7f6e\u5165\u683c\u5f0f\u5bfc\u51fa\u3002\u5982\u679c\u667a\u80fd\u5bf9\u8c61\u662f\u5229\u7528\u56fe\u5c42\u6765\u521b\u5efa\u7684\uff0c\u90a3\u4e48\u5bfc\u51fa\u65f6\u5e94\u4ee5 PSB \u683c\u5f0f\u5bfc\u51fa\u3002","title":"\u5bfc\u51fa\u667a\u80fd\u5bf9\u8c61"},{"location":"PS/PS8/#_29","text":"\u6267\u884c\u201c\u56fe\u5c42 > \u667a\u80fd\u5bf9\u8c61 > \u6805\u683c\u5316\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06\u667a\u80fd\u5bf9\u8c61\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\u3002\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42\u4ee5\u540e\uff0c\u539f\u59cb\u56fe\u5c42\u7f29\u89c8\u56fe\u4e0a\u7684\u667a\u80fd\u5bf9\u8c61\u6807\u5fd7\u4e5f\u4f1a\u6d88\u5931\u3002","title":"\u5c06\u667a\u80fd\u5bf9\u8c61\u8f6c\u6362\u4e3a\u666e\u901a\u56fe\u5c42"},{"location":"PS/PS8/#_30","text":"\u6df7\u5408\u6a21\u5f0f\u5236\u4f5c\u624b\u638c\u602a\u517d \u4f7f\u7528\u56fe\u6848\u53e0\u52a0\u5236\u4f5c\u5976\u725b\u6587\u5b57 \u4f7f\u7528\u56fe\u5c42\u6837\u5f0f\u5236\u4f5c\u591a\u5f69\u8d28\u611f\u6587\u5b57","title":"\u7ec3\u4e60"},{"location":"PS/PS9/","text":"\u521d\u8bc6\u901a\u9053 \u00b6 \u901a\u9053\u662f\u7528\u4e8e\u5b58\u50a8\u56fe\u50cf\u989c\u8272\u4fe1\u606f\u548c\u9009\u533a\u4fe1\u606f\u7b49\u4e0d\u540c\u7c7b\u578b\u4fe1\u606f\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u4e00\u4e2a\u56fe\u50cf\u6700\u591a\u53ef\u6709 56 \u4e2a\u901a\u9053\uff0c\u6240\u6709\u7684\u65b0\u901a\u9053\u90fd\u5177\u6709\u4e0e\u539f\u59cb\u56fe\u50cf\u76f8\u540c\u7684\u5c3a\u5bf8\u548c\u50cf\u7d20\u6570\u76ee\u3002\u5728 Photoshop \u4e2d\u5305\u542b 3 \u79cd\u7c7b\u578b\u7684\u901a\u9053\uff0c\u5206\u522b\u662f\u989c\u8272\u901a\u9053\u3001Alpha \u901a\u9053\u548c\u4e13\u8272\u901a\u9053\u3002\u53ea\u8981\u662f\u652f\u6301\u56fe\u50cf\u989c\u8272\u6a21\u5f0f\u7684\u683c\u5f0f\uff0c\u90fd\u53ef\u4ee5\u4fdd\u7559\u989c\u8272\u901a\u9053\uff1b\u5982\u679c\u8981\u4fdd\u5b58 Alpha \u901a\u9053\uff0c\u53ef\u4ee5\u5c06\u6587\u4ef6\u5b58\u50a8\u4e3a PDF\u3001TIFF\u3001PSB \u6216 Raw \u683c\u5f0f\uff1b\u5982\u679c\u8981\u4fdd\u5b58\u4e13\u8272\u901a\u9053\uff0c\u53ef\u4ee5\u5c06\u6587\u4ef6\u5b58\u50a8\u4e3a DCS 2.0 \u683c\u5f0f\u3002 \u8ba4\u8bc6\u989c\u8272\u901a\u9053 \u00b6 \u989c\u8272\u901a\u9053\u662f\u5c06\u6784\u6210\u6574\u4f53\u56fe\u50cf\u7684\u989c\u8272\u4fe1\u606f\u6574\u7406\u5e76\u8868\u73b0\u4e3a\u5355\u8272\u56fe\u50cf\u7684\u5de5\u5177\u3002\u6839\u636e\u56fe\u50cf\u989c\u8272\u6a21\u5f0f\u7684\u4e0d\u540c\uff0c\u989c\u8272\u901a\u9053\u7684\u6570\u91cf\u4e5f\u4e0d\u540c\u3002\u4f8b\u5982\uff0cRGB \u6a21\u5f0f\u7684\u56fe\u50cf\u6709 RGB\u3001\u7ea2\u3001\u7eff\u3001\u84dd 4 \u4e2a\u901a\u9053\uff0c\u5982\u56fe 12-1 \u6240\u793a\uff1bCMYK \u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\u6709 CMYK\u3001\u9752\u8272\u3001\u6d0b\u7ea2\u3001\u9ec4\u8272\u3001\u9ed1\u8272 5 \u4e2a\u901a\u9053\uff1bLab \u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\u6709 Lab\u3001\u660e\u5ea6\u3001a\u3001b 4 \u4e2a\u901a\u9053\uff1b\u800c\u4f4d\u56fe\u548c\u7d22\u5f15\u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\u53ea\u6709\u4e00\u4e2a\u4f4d\u56fe\u901a\u9053\u548c\u4e00\u4e2a\u7d22\u5f15\u901a\u9053\u3002 \u8ba4\u8bc6Alpha\u901a\u9053 \u00b6 Alpha \u901a\u9053\u4e3b\u8981\u7528\u4e8e\u9009\u533a\u7684\u5b58\u50a8\u3001\u7f16\u8f91\u4e0e\u8c03\u7528\u3002 Alpha \u901a\u9053\u662f\u4e00\u4e2a 8 \u4f4d\u7684\u7070\u5ea6\u901a\u9053\uff0c\u8be5\u901a\u9053\u7528 256 \u7ea7\u7070\u5ea6\u6765\u8bb0\u5f55\u56fe\u50cf\u4e2d\u7684\u900f\u660e\u5ea6\u4fe1\u606f\uff0c\u5b9a\u4e49\u900f\u660e\u3001\u4e0d\u900f\u660e\u548c\u534a\u900f\u660e\u533a\u57df\u3002\u5176\u4e2d\u9ed1\u8272\u5904\u4e8e\u672a\u9009\u4e2d\u7684\u72b6\u6001\uff0c\u767d\u8272\u5904\u4e8e\u5b8c\u5168\u9009\u62e9\u72b6\u6001\uff0c\u7070\u8272\u5219\u8868\u793a\u90e8\u5206\u88ab\u9009\u62e9\u72b6\u6001\uff08\u5373\u7fbd\u5316\u533a\u57df\uff09\u3002\u4f7f\u7528\u767d\u8272\u6d82\u62b9 Alpha \u901a\u9053\u53ef\u4ee5\u6269\u5927\u9009\u533a\u8303\u56f4\uff1b\u4f7f\u7528\u9ed1\u8272\u6d82\u62b9\u5219\u6536\u7f29\u9009\u533a\uff1b\u4f7f\u7528\u7070\u8272\u6d82\u62b9\u53ef\u4ee5\u589e\u52a0\u7fbd\u5316\u8303\u56f4\u3002 \u8ba4\u8bc6\u4e13\u8272\u901a\u9053 \u00b6 \u4e13\u8272\u901a\u9053\u4e3b\u8981\u7528\u6765\u6307\u5b9a\u7528\u4e8e\u4e13\u8272\u6cb9\u58a8\u5370\u5237\u7684\u9644\u52a0\u5370\u7248\u3002\u5b83\u53ef\u4ee5\u4fdd\u5b58\u4e13\u8272\u4fe1\u606f\uff0c\u540c\u65f6\u4e5f\u5177\u6709 Alpha \u901a\u9053\u7684\u7279\u70b9\u3002\u6bcf\u4e2a\u4e13\u8272\u901a\u9053\u53ea\u80fd\u5b58\u50a8\u4e00\u79cd\u4e13\u8272\u4fe1\u606f\uff0c\u800c\u4e14\u662f\u4ee5\u7070\u5ea6\u5f62\u5f0f\u6765\u5b58\u50a8\u7684\u3002\u9664\u4e86\u4f4d\u56fe\u6a21\u5f0f\u5916\uff0c\u5176\u4f59\u6240\u6709\u7684\u8272\u5f69\u6a21\u5f0f\u56fe\u50cf\u90fd\u53ef\u4ee5\u5efa\u7acb\u4e13\u8272\u901a\u9053\u3002 \u8be6\u89e3\u201c\u901a\u9053\u201d\u9762\u677f \u00b6 \u6253\u5f00\u4efb\u610f\u4e00\u5f20\u56fe\u50cf\uff0c\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u80fd\u591f\u770b\u5230 Photoshop \u81ea\u52a8\u4e3a\u8be5\u56fe\u50cf\u521b\u5efa\u4e86\u989c\u8272\u4fe1\u606f\u901a\u9053\u3002\u201c\u901a\u9053\u201d\u9762\u677f\u4e3b\u8981\u7528\u4e8e\u521b\u5efa\u3001\u5b58\u50a8\u3001\u7f16\u8f91\u548c\u7ba1\u7406\u901a\u9053\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u901a\u9053\u201d\u547d\u4ee4\u53ef\u4ee5\u6253\u5f00\u201c\u901a\u9053\u201d\u9762\u677f\u3002 \u901a\u9053\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u5feb\u901f\u9009\u62e9\u901a\u9053 \u00b6 \u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u5355\u51fb\u5373\u53ef\u9009\u4e2d\u67d0\u4e00\u901a\u9053\uff0c\u5728\u6bcf\u4e2a\u901a\u9053\u540e\u9762\u6709\u5bf9\u5e94\u7684 Ctrl+ \u6570\u5b57 \u683c\u5f0f\u5feb\u6377\u952e\u3002 \u663e\u793a/\u9690\u85cf\u901a\u9053 \u00b6 \u901a\u9053\u7684\u663e\u793a / \u9690\u85cf\u4e0e\u56fe\u5c42\u76f8\u540c\uff0c\u6bcf\u4e2a\u901a\u9053\u7684\u5de6\u4fa7\u90fd\u6709\u4e00\u4e2a\u773c\u775b\u56fe\u6807,\u5355\u51fb\u8be5\u56fe\u6807\uff0c\u53ef\u4ee5\u4f7f\u76f8\u5e94\u901a\u9053\u9690\u85cf\uff1b\u5355\u51fb\u9690\u85cf\u72b6\u6001\u7684\u901a\u9053\u5de6\u4fa7\u7684\u56fe\u6807,\u53ef\u4ee5\u6062\u590d\u8be5\u901a\u9053\u7684\u663e\u793a. \u901a\u9053\u7ec3\u4e60 \u00b6 \u6a21\u62df3D\u7535\u5f71\u6548\u679c \u5c06\u56fe\u50cf\u7c98\u8d34\u5230\u901a\u9053\u4e2d \u91cd\u547d\u540d\u901a\u9053 \u00b6 \u8981\u91cd\u547d\u540d Alpha \u901a\u9053\u6216\u4e13\u8272\u901a\u9053\uff0c\u53ef\u4ee5\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u53cc\u51fb\u8be5\u901a\u9053\u7684\u540d\u79f0\uff0c\u6fc0\u6d3b\u6587\u672c\u6846\uff0c\u7136\u540e\u8f93\u5165\u65b0\u540d\u79f0\u5373\u53ef,\u9ed8\u8ba4\u7684\u989c\u8272\u901a\u9053\u7684\u540d\u79f0\u662f\u4e0d\u80fd\u8fdb\u884c\u91cd\u547d\u540d\u7684\u3002 \u65b0\u5efaAlpha\u901a\u9053 \u00b6 \u5982\u679c\u8981\u65b0\u5efa Alpha \u901a\u9053\uff0c\u53ef\u4ee5\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u521b\u5efa\u65b0\u901a\u9053\u201d\u6309\u94ae\u3002 \u65b0\u5efa\u548c\u7f16\u8f91\u4e13\u8272\u901a\u9053 \u00b6 \u4e13\u8272\u5370\u5237\u662f\u6307\u91c7\u7528\u9ec4\u3001\u54c1\u7ea2\u3001\u9752\u548c\u9ed1\u58a8\u56db\u8272\u58a8\u4ee5\u5916\u7684\u5176\u4ed6\u8272\u6cb9\u58a8\u6765\u590d\u5236\u539f\u7a3f\u989c\u8272\u7684\u5370\u5237\u5de5\u827a\u3002\u5305\u88c5\u5370\u5237\u4e2d\u7ecf\u5e38\u91c7\u7528\u4e13\u8272\u5370\u5237\u5de5\u827a\u5370\u5237\u5927\u9762\u79ef\u5e95\u8272\u3002 \u590d\u5236\u901a\u9053 \u00b6 \u60f3\u8981\u590d\u5236\u901a\u9053\uff0c\u53ef\u4ee5\u5728\u9762\u677f\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u590d\u5236\u901a\u9053\u201d\u547d\u4ee4\uff0c\u5373\u53ef\u5c06\u5f53\u524d\u901a\u9053\u590d\u5236\u51fa\u4e00\u4e2a\u526f\u672c\uff1b\u6216\u5728\u901a\u9053\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u590d\u5236\u901a\u9053\u201d\u547d\u4ee4\u3002 \u5220\u9664\u901a\u9053 \u00b6 1\u3001\u5c06\u901a\u9053\u62d6\u62fd\u5230\u201c\u901a\u9053\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u5f53\u524d\u901a\u9053\u201d\u6309\u94ae\u4e0a\u3002 2\u3001\u5728\u901a\u9053\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5220\u9664\u901a\u9053\u201d\u547d\u4ee4\u3002 \u5408\u5e76\u901a\u9053 \u00b6 \u5728 Photoshop \u4e2d\u53ef\u4ee5\u5c06\u591a\u4e2a\u7070\u5ea6\u56fe\u50cf\u5408\u5e76\u4e3a\u4e00\u4e2a\u56fe\u50cf\u7684\u901a\u9053\u3002\u8981\u5408\u5e76\u7684\u56fe\u50cf\u5fc5\u987b\u4e3a\u6253\u5f00\u7684\u5df2\u62fc\u5408\u7684\u7070\u5ea6\u6a21\u5f0f\u56fe\u50cf\uff0c\u5e76\u4e14\u50cf\u7d20\u5c3a\u5bf8\u76f8\u540c\u3002\u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u201c\u5408\u5e76\u901a\u9053\u201d\u547d\u4ee4\u5c06\u4e0d\u53ef\u7528\u3002 \u5206\u79bb\u901a\u9053 \u00b6 \u6253\u5f00\u4e00\u5f20 RGB \u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\uff0c\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5206\u79bb\u901a\u9053\u201d\u547d\u4ee4\u3002\u53ef\u4ee5\u5c06\u7ea2\u3001\u7eff\u3001\u84dd 3 \u4e2a\u901a\u9053\u5355\u72ec\u5206\u79bb\u6210 3 \u5f20\u7070\u5ea6\u56fe\u50cf\u5e76\u5173\u95ed\u5f69\u8272\u56fe\u50cf\uff0c\u540c\u65f6\u6bcf\u4e2a\u56fe\u50cf\u7684\u7070\u5ea6\u90fd\u4e0e\u4e4b\u524d\u7684\u901a\u9053\u7070\u5ea6\u76f8\u540c\u3002 \u4e13\u8272\u901a\u9053 \u00b6 \u4e13\u8272\u901a\u9053\u53ef\u4ee5\u4fdd\u5b58\u4e13\u8272\u4fe1\u606f\uff0c\u540c\u65f6\u4e5f\u5177\u6709 Alpha \u901a\u9053\u7684\u7279\u70b9\u3002\u6bcf\u4e2a\u4e13\u8272\u901a\u9053\u53ea\u80fd\u5b58\u50a8\u4e00\u79cd\u4e13\u8272\u4fe1\u606f\uff0c\u800c\u4e14\u662f\u4ee5\u7070\u5ea6\u5f62\u5f0f\u6765\u5b58\u50a8\u7684\u3002\u9664\u4e86\u4f4d\u56fe\u6a21\u5f0f\u4ee5\u5916\uff0c\u5176\u4f59\u6240\u6709\u7684\u8272\u5f69\u6a21\u5f0f\u56fe\u50cf\u90fd\u53ef\u4ee5\u5efa\u7acb\u4e13\u8272\u901a\u9053\u3002 \u901a\u9053\u7684\u9ad8\u7ea7\u64cd\u4f5c \u00b6 \u201c\u5e94\u7528\u56fe\u50cf\u201d\u547d\u4ee4 \u00b6 \u6267\u884c\u201c\u56fe\u50cf > \u5e94\u7528\u56fe\u50cf\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u5e94\u7528\u56fe\u50cf\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u201c \u5e94 \u7528 \u56fe \u50cf \u201d \u5bf9 \u8bdd \u6846 \u4e2d \u53ef \u4ee5 \u5c06 \u4f5c \u4e3a\u201c\u6e90\u201d\u7684\u56fe\u50cf\u7684\u56fe\u5c42\u6216\u901a\u9053\u4e0e\u4f5c\u4e3a\u201c\u76ee\u6807\u201d\u7684\u56fe\u50cf\u7684\u56fe\u5c42\u6216\u901a\u9053\u8fdb\u884c\u6df7\u5408\u3002 \u201c\u8ba1\u7b97\u201d\u547d\u4ee4 \u00b6 \u201c\u8ba1\u7b97\u201d\u547d\u4ee4\u53ef\u4ee5\u6df7\u5408\u4e24\u4e2a\u6765\u81ea\u4e00\u4e2a\u6e90\u56fe\u50cf\u6216\u591a\u4e2a\u6e90\u56fe\u50cf\u7684\u5355\u4e2a\u901a\u9053\uff0c\u5f97\u5230\u7684\u6df7\u5408\u7ed3\u679c\u53ef\u4ee5\u662f\u65b0\u7684\u7070\u5ea6\u56fe\u50cf\u3001\u9009\u533a\u6216\u901a\u9053\u3002\u6267\u884c\u201c\u56fe\u50cf > \u8ba1\u7b97\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8ba1\u7b97\u201d\u5bf9\u8bdd\u6846\u3002 \u4f7f\u7528\u901a\u9053\u8c03\u6574\u989c\u8272 \u00b6 \u901a\u9053\u8c03\u8272\u662f\u4e00\u79cd\u9ad8\u7ea7\u8c03\u8272\u6280\u672f\uff0c\u53ef\u4ee5\u5bf9\u4e00\u5f20\u56fe\u50cf\u7684\u5355\u4e2a\u901a\u9053\u5e94\u7528\u5404\u79cd\u8c03\u8272\u547d\u4ee4\uff08\u6bd4\u5982\u66f2\u7ebf\uff09\uff0c\u4ece\u800c\u8fbe\u5230\u8c03\u6574\u56fe\u50cf\u4e2d\u5355\u79cd\u8272\u8c03\u7684\u76ee\u7684\u3002 \u7ec3\u4e60 \u00b6 \u5229\u7528\u901a\u9053\u8ba1\u7b97\u7ed8\u5236\u5965\u8fd0\u4e94\u73af \u4f7f\u7528\u901a\u9053\u8c03\u6574\u989c\u8272 \u4f7f\u7528\u901a\u9053\u62a0\u56fe \u00b6 \u901a\u9053\u62a0\u56fe\u4e3b\u8981\u662f\u5229\u7528\u56fe\u50cf\u7684\u8272\u76f8\u5dee\u522b\u6216\u660e\u5ea6\u5dee\u522b\u6765\u521b\u5efa\u9009\u533a\uff0c\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u591a\u6b21\u91cd\u590d\u4f7f\u7528\u201c\u4eae\u5ea6 / \u5bf9\u6bd4 \u5ea6\u201d\u3001\u201c\u66f2\u7ebf\u201d\u3001\u201c\u8272\u9636\u201d\u7b49\u8c03\u6574\u547d\u4ee4\uff0c\u4ee5\u53ca\u753b\u7b14\u3001\u52a0\u6df1\u3001\u51cf\u6de1\u7b49\u5de5\u5177\u5bf9\u901a\u9053\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u5f97\u5230\u6700\u7cbe\u786e\u7684\u9009\u533a\u3002\u901a\u9053\u62a0\u56fe\u6cd5\u5e38\u7528\u4e8e\u62a0\u9009\u6bdb\u53d1\u3001\u4e91\u6735\u3001\u70df\u96fe\u4ee5\u53ca\u534a\u900f\u660e\u7684\u5a5a\u7eb1\u7b49\u5bf9\u8c61\u3002 \u901a\u9053\u62a0\u56fe\u7ec3\u4e60 \u00b6 \u901a\u9053\u62a0\u56fe\u4e3a\u957f\u53d1\u7f8e\u5973\u6362\u80cc\u666f \u4f7f\u7528\u901a\u9053\u4e3a\u900f\u660e\u5a5a\u7eb1\u6362\u80cc\u666f \u4f7f\u7528\u901a\u9053\u8ba1\u7b97\u78e8\u76ae\u6cd5 \u4f7f\u7528\u901a\u9053\u5236\u4f5c\u6c34\u5f69\u753b\u6548\u679c","title":"\u901a\u9053\u7684\u5e94\u7528"},{"location":"PS/PS9/#_1","text":"\u901a\u9053\u662f\u7528\u4e8e\u5b58\u50a8\u56fe\u50cf\u989c\u8272\u4fe1\u606f\u548c\u9009\u533a\u4fe1\u606f\u7b49\u4e0d\u540c\u7c7b\u578b\u4fe1\u606f\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u4e00\u4e2a\u56fe\u50cf\u6700\u591a\u53ef\u6709 56 \u4e2a\u901a\u9053\uff0c\u6240\u6709\u7684\u65b0\u901a\u9053\u90fd\u5177\u6709\u4e0e\u539f\u59cb\u56fe\u50cf\u76f8\u540c\u7684\u5c3a\u5bf8\u548c\u50cf\u7d20\u6570\u76ee\u3002\u5728 Photoshop \u4e2d\u5305\u542b 3 \u79cd\u7c7b\u578b\u7684\u901a\u9053\uff0c\u5206\u522b\u662f\u989c\u8272\u901a\u9053\u3001Alpha \u901a\u9053\u548c\u4e13\u8272\u901a\u9053\u3002\u53ea\u8981\u662f\u652f\u6301\u56fe\u50cf\u989c\u8272\u6a21\u5f0f\u7684\u683c\u5f0f\uff0c\u90fd\u53ef\u4ee5\u4fdd\u7559\u989c\u8272\u901a\u9053\uff1b\u5982\u679c\u8981\u4fdd\u5b58 Alpha \u901a\u9053\uff0c\u53ef\u4ee5\u5c06\u6587\u4ef6\u5b58\u50a8\u4e3a PDF\u3001TIFF\u3001PSB \u6216 Raw \u683c\u5f0f\uff1b\u5982\u679c\u8981\u4fdd\u5b58\u4e13\u8272\u901a\u9053\uff0c\u53ef\u4ee5\u5c06\u6587\u4ef6\u5b58\u50a8\u4e3a DCS 2.0 \u683c\u5f0f\u3002","title":"\u521d\u8bc6\u901a\u9053"},{"location":"PS/PS9/#_2","text":"\u989c\u8272\u901a\u9053\u662f\u5c06\u6784\u6210\u6574\u4f53\u56fe\u50cf\u7684\u989c\u8272\u4fe1\u606f\u6574\u7406\u5e76\u8868\u73b0\u4e3a\u5355\u8272\u56fe\u50cf\u7684\u5de5\u5177\u3002\u6839\u636e\u56fe\u50cf\u989c\u8272\u6a21\u5f0f\u7684\u4e0d\u540c\uff0c\u989c\u8272\u901a\u9053\u7684\u6570\u91cf\u4e5f\u4e0d\u540c\u3002\u4f8b\u5982\uff0cRGB \u6a21\u5f0f\u7684\u56fe\u50cf\u6709 RGB\u3001\u7ea2\u3001\u7eff\u3001\u84dd 4 \u4e2a\u901a\u9053\uff0c\u5982\u56fe 12-1 \u6240\u793a\uff1bCMYK \u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\u6709 CMYK\u3001\u9752\u8272\u3001\u6d0b\u7ea2\u3001\u9ec4\u8272\u3001\u9ed1\u8272 5 \u4e2a\u901a\u9053\uff1bLab \u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\u6709 Lab\u3001\u660e\u5ea6\u3001a\u3001b 4 \u4e2a\u901a\u9053\uff1b\u800c\u4f4d\u56fe\u548c\u7d22\u5f15\u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\u53ea\u6709\u4e00\u4e2a\u4f4d\u56fe\u901a\u9053\u548c\u4e00\u4e2a\u7d22\u5f15\u901a\u9053\u3002","title":"\u8ba4\u8bc6\u989c\u8272\u901a\u9053"},{"location":"PS/PS9/#alpha","text":"Alpha \u901a\u9053\u4e3b\u8981\u7528\u4e8e\u9009\u533a\u7684\u5b58\u50a8\u3001\u7f16\u8f91\u4e0e\u8c03\u7528\u3002 Alpha \u901a\u9053\u662f\u4e00\u4e2a 8 \u4f4d\u7684\u7070\u5ea6\u901a\u9053\uff0c\u8be5\u901a\u9053\u7528 256 \u7ea7\u7070\u5ea6\u6765\u8bb0\u5f55\u56fe\u50cf\u4e2d\u7684\u900f\u660e\u5ea6\u4fe1\u606f\uff0c\u5b9a\u4e49\u900f\u660e\u3001\u4e0d\u900f\u660e\u548c\u534a\u900f\u660e\u533a\u57df\u3002\u5176\u4e2d\u9ed1\u8272\u5904\u4e8e\u672a\u9009\u4e2d\u7684\u72b6\u6001\uff0c\u767d\u8272\u5904\u4e8e\u5b8c\u5168\u9009\u62e9\u72b6\u6001\uff0c\u7070\u8272\u5219\u8868\u793a\u90e8\u5206\u88ab\u9009\u62e9\u72b6\u6001\uff08\u5373\u7fbd\u5316\u533a\u57df\uff09\u3002\u4f7f\u7528\u767d\u8272\u6d82\u62b9 Alpha \u901a\u9053\u53ef\u4ee5\u6269\u5927\u9009\u533a\u8303\u56f4\uff1b\u4f7f\u7528\u9ed1\u8272\u6d82\u62b9\u5219\u6536\u7f29\u9009\u533a\uff1b\u4f7f\u7528\u7070\u8272\u6d82\u62b9\u53ef\u4ee5\u589e\u52a0\u7fbd\u5316\u8303\u56f4\u3002","title":"\u8ba4\u8bc6Alpha\u901a\u9053"},{"location":"PS/PS9/#_3","text":"\u4e13\u8272\u901a\u9053\u4e3b\u8981\u7528\u6765\u6307\u5b9a\u7528\u4e8e\u4e13\u8272\u6cb9\u58a8\u5370\u5237\u7684\u9644\u52a0\u5370\u7248\u3002\u5b83\u53ef\u4ee5\u4fdd\u5b58\u4e13\u8272\u4fe1\u606f\uff0c\u540c\u65f6\u4e5f\u5177\u6709 Alpha \u901a\u9053\u7684\u7279\u70b9\u3002\u6bcf\u4e2a\u4e13\u8272\u901a\u9053\u53ea\u80fd\u5b58\u50a8\u4e00\u79cd\u4e13\u8272\u4fe1\u606f\uff0c\u800c\u4e14\u662f\u4ee5\u7070\u5ea6\u5f62\u5f0f\u6765\u5b58\u50a8\u7684\u3002\u9664\u4e86\u4f4d\u56fe\u6a21\u5f0f\u5916\uff0c\u5176\u4f59\u6240\u6709\u7684\u8272\u5f69\u6a21\u5f0f\u56fe\u50cf\u90fd\u53ef\u4ee5\u5efa\u7acb\u4e13\u8272\u901a\u9053\u3002","title":"\u8ba4\u8bc6\u4e13\u8272\u901a\u9053"},{"location":"PS/PS9/#_4","text":"\u6253\u5f00\u4efb\u610f\u4e00\u5f20\u56fe\u50cf\uff0c\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u80fd\u591f\u770b\u5230 Photoshop \u81ea\u52a8\u4e3a\u8be5\u56fe\u50cf\u521b\u5efa\u4e86\u989c\u8272\u4fe1\u606f\u901a\u9053\u3002\u201c\u901a\u9053\u201d\u9762\u677f\u4e3b\u8981\u7528\u4e8e\u521b\u5efa\u3001\u5b58\u50a8\u3001\u7f16\u8f91\u548c\u7ba1\u7406\u901a\u9053\u3002\u6267\u884c\u201c\u7a97\u53e3 > \u901a\u9053\u201d\u547d\u4ee4\u53ef\u4ee5\u6253\u5f00\u201c\u901a\u9053\u201d\u9762\u677f\u3002","title":"\u8be6\u89e3\u201c\u901a\u9053\u201d\u9762\u677f"},{"location":"PS/PS9/#_5","text":"","title":"\u901a\u9053\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"PS/PS9/#_6","text":"\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u5355\u51fb\u5373\u53ef\u9009\u4e2d\u67d0\u4e00\u901a\u9053\uff0c\u5728\u6bcf\u4e2a\u901a\u9053\u540e\u9762\u6709\u5bf9\u5e94\u7684 Ctrl+ \u6570\u5b57 \u683c\u5f0f\u5feb\u6377\u952e\u3002","title":"\u5feb\u901f\u9009\u62e9\u901a\u9053"},{"location":"PS/PS9/#_7","text":"\u901a\u9053\u7684\u663e\u793a / \u9690\u85cf\u4e0e\u56fe\u5c42\u76f8\u540c\uff0c\u6bcf\u4e2a\u901a\u9053\u7684\u5de6\u4fa7\u90fd\u6709\u4e00\u4e2a\u773c\u775b\u56fe\u6807,\u5355\u51fb\u8be5\u56fe\u6807\uff0c\u53ef\u4ee5\u4f7f\u76f8\u5e94\u901a\u9053\u9690\u85cf\uff1b\u5355\u51fb\u9690\u85cf\u72b6\u6001\u7684\u901a\u9053\u5de6\u4fa7\u7684\u56fe\u6807,\u53ef\u4ee5\u6062\u590d\u8be5\u901a\u9053\u7684\u663e\u793a.","title":"\u663e\u793a/\u9690\u85cf\u901a\u9053"},{"location":"PS/PS9/#_8","text":"\u6a21\u62df3D\u7535\u5f71\u6548\u679c \u5c06\u56fe\u50cf\u7c98\u8d34\u5230\u901a\u9053\u4e2d","title":"\u901a\u9053\u7ec3\u4e60"},{"location":"PS/PS9/#_9","text":"\u8981\u91cd\u547d\u540d Alpha \u901a\u9053\u6216\u4e13\u8272\u901a\u9053\uff0c\u53ef\u4ee5\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u53cc\u51fb\u8be5\u901a\u9053\u7684\u540d\u79f0\uff0c\u6fc0\u6d3b\u6587\u672c\u6846\uff0c\u7136\u540e\u8f93\u5165\u65b0\u540d\u79f0\u5373\u53ef,\u9ed8\u8ba4\u7684\u989c\u8272\u901a\u9053\u7684\u540d\u79f0\u662f\u4e0d\u80fd\u8fdb\u884c\u91cd\u547d\u540d\u7684\u3002","title":"\u91cd\u547d\u540d\u901a\u9053"},{"location":"PS/PS9/#alpha_1","text":"\u5982\u679c\u8981\u65b0\u5efa Alpha \u901a\u9053\uff0c\u53ef\u4ee5\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u4e2d\u5355\u51fb\u201c\u521b\u5efa\u65b0\u901a\u9053\u201d\u6309\u94ae\u3002","title":"\u65b0\u5efaAlpha\u901a\u9053"},{"location":"PS/PS9/#_10","text":"\u4e13\u8272\u5370\u5237\u662f\u6307\u91c7\u7528\u9ec4\u3001\u54c1\u7ea2\u3001\u9752\u548c\u9ed1\u58a8\u56db\u8272\u58a8\u4ee5\u5916\u7684\u5176\u4ed6\u8272\u6cb9\u58a8\u6765\u590d\u5236\u539f\u7a3f\u989c\u8272\u7684\u5370\u5237\u5de5\u827a\u3002\u5305\u88c5\u5370\u5237\u4e2d\u7ecf\u5e38\u91c7\u7528\u4e13\u8272\u5370\u5237\u5de5\u827a\u5370\u5237\u5927\u9762\u79ef\u5e95\u8272\u3002","title":"\u65b0\u5efa\u548c\u7f16\u8f91\u4e13\u8272\u901a\u9053"},{"location":"PS/PS9/#_11","text":"\u60f3\u8981\u590d\u5236\u901a\u9053\uff0c\u53ef\u4ee5\u5728\u9762\u677f\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u590d\u5236\u901a\u9053\u201d\u547d\u4ee4\uff0c\u5373\u53ef\u5c06\u5f53\u524d\u901a\u9053\u590d\u5236\u51fa\u4e00\u4e2a\u526f\u672c\uff1b\u6216\u5728\u901a\u9053\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u590d\u5236\u901a\u9053\u201d\u547d\u4ee4\u3002","title":"\u590d\u5236\u901a\u9053"},{"location":"PS/PS9/#_12","text":"1\u3001\u5c06\u901a\u9053\u62d6\u62fd\u5230\u201c\u901a\u9053\u201d\u9762\u677f\u4e0b\u9762\u7684\u201c\u5220\u9664\u5f53\u524d\u901a\u9053\u201d\u6309\u94ae\u4e0a\u3002 2\u3001\u5728\u901a\u9053\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u7136\u540e\u5728\u5f39\u51fa\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5220\u9664\u901a\u9053\u201d\u547d\u4ee4\u3002","title":"\u5220\u9664\u901a\u9053"},{"location":"PS/PS9/#_13","text":"\u5728 Photoshop \u4e2d\u53ef\u4ee5\u5c06\u591a\u4e2a\u7070\u5ea6\u56fe\u50cf\u5408\u5e76\u4e3a\u4e00\u4e2a\u56fe\u50cf\u7684\u901a\u9053\u3002\u8981\u5408\u5e76\u7684\u56fe\u50cf\u5fc5\u987b\u4e3a\u6253\u5f00\u7684\u5df2\u62fc\u5408\u7684\u7070\u5ea6\u6a21\u5f0f\u56fe\u50cf\uff0c\u5e76\u4e14\u50cf\u7d20\u5c3a\u5bf8\u76f8\u540c\u3002\u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u201c\u5408\u5e76\u901a\u9053\u201d\u547d\u4ee4\u5c06\u4e0d\u53ef\u7528\u3002","title":"\u5408\u5e76\u901a\u9053"},{"location":"PS/PS9/#_14","text":"\u6253\u5f00\u4e00\u5f20 RGB \u989c\u8272\u6a21\u5f0f\u7684\u56fe\u50cf\uff0c\u5728\u201c\u901a\u9053\u201d\u9762\u677f\u7684\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u5206\u79bb\u901a\u9053\u201d\u547d\u4ee4\u3002\u53ef\u4ee5\u5c06\u7ea2\u3001\u7eff\u3001\u84dd 3 \u4e2a\u901a\u9053\u5355\u72ec\u5206\u79bb\u6210 3 \u5f20\u7070\u5ea6\u56fe\u50cf\u5e76\u5173\u95ed\u5f69\u8272\u56fe\u50cf\uff0c\u540c\u65f6\u6bcf\u4e2a\u56fe\u50cf\u7684\u7070\u5ea6\u90fd\u4e0e\u4e4b\u524d\u7684\u901a\u9053\u7070\u5ea6\u76f8\u540c\u3002","title":"\u5206\u79bb\u901a\u9053"},{"location":"PS/PS9/#_15","text":"\u4e13\u8272\u901a\u9053\u53ef\u4ee5\u4fdd\u5b58\u4e13\u8272\u4fe1\u606f\uff0c\u540c\u65f6\u4e5f\u5177\u6709 Alpha \u901a\u9053\u7684\u7279\u70b9\u3002\u6bcf\u4e2a\u4e13\u8272\u901a\u9053\u53ea\u80fd\u5b58\u50a8\u4e00\u79cd\u4e13\u8272\u4fe1\u606f\uff0c\u800c\u4e14\u662f\u4ee5\u7070\u5ea6\u5f62\u5f0f\u6765\u5b58\u50a8\u7684\u3002\u9664\u4e86\u4f4d\u56fe\u6a21\u5f0f\u4ee5\u5916\uff0c\u5176\u4f59\u6240\u6709\u7684\u8272\u5f69\u6a21\u5f0f\u56fe\u50cf\u90fd\u53ef\u4ee5\u5efa\u7acb\u4e13\u8272\u901a\u9053\u3002","title":"\u4e13\u8272\u901a\u9053"},{"location":"PS/PS9/#_16","text":"","title":"\u901a\u9053\u7684\u9ad8\u7ea7\u64cd\u4f5c"},{"location":"PS/PS9/#_17","text":"\u6267\u884c\u201c\u56fe\u50cf > \u5e94\u7528\u56fe\u50cf\u201d\u547d\u4ee4\uff0c\u6253\u5f00\u201c\u5e94\u7528\u56fe\u50cf\u201d\u5bf9\u8bdd\u6846\u3002\u5728\u201c \u5e94 \u7528 \u56fe \u50cf \u201d \u5bf9 \u8bdd \u6846 \u4e2d \u53ef \u4ee5 \u5c06 \u4f5c \u4e3a\u201c\u6e90\u201d\u7684\u56fe\u50cf\u7684\u56fe\u5c42\u6216\u901a\u9053\u4e0e\u4f5c\u4e3a\u201c\u76ee\u6807\u201d\u7684\u56fe\u50cf\u7684\u56fe\u5c42\u6216\u901a\u9053\u8fdb\u884c\u6df7\u5408\u3002","title":"\u201c\u5e94\u7528\u56fe\u50cf\u201d\u547d\u4ee4"},{"location":"PS/PS9/#_18","text":"\u201c\u8ba1\u7b97\u201d\u547d\u4ee4\u53ef\u4ee5\u6df7\u5408\u4e24\u4e2a\u6765\u81ea\u4e00\u4e2a\u6e90\u56fe\u50cf\u6216\u591a\u4e2a\u6e90\u56fe\u50cf\u7684\u5355\u4e2a\u901a\u9053\uff0c\u5f97\u5230\u7684\u6df7\u5408\u7ed3\u679c\u53ef\u4ee5\u662f\u65b0\u7684\u7070\u5ea6\u56fe\u50cf\u3001\u9009\u533a\u6216\u901a\u9053\u3002\u6267\u884c\u201c\u56fe\u50cf > \u8ba1\u7b97\u201d\u547d\u4ee4\uff0c\u53ef\u4ee5\u6253\u5f00\u201c\u8ba1\u7b97\u201d\u5bf9\u8bdd\u6846\u3002","title":"\u201c\u8ba1\u7b97\u201d\u547d\u4ee4"},{"location":"PS/PS9/#_19","text":"\u901a\u9053\u8c03\u8272\u662f\u4e00\u79cd\u9ad8\u7ea7\u8c03\u8272\u6280\u672f\uff0c\u53ef\u4ee5\u5bf9\u4e00\u5f20\u56fe\u50cf\u7684\u5355\u4e2a\u901a\u9053\u5e94\u7528\u5404\u79cd\u8c03\u8272\u547d\u4ee4\uff08\u6bd4\u5982\u66f2\u7ebf\uff09\uff0c\u4ece\u800c\u8fbe\u5230\u8c03\u6574\u56fe\u50cf\u4e2d\u5355\u79cd\u8272\u8c03\u7684\u76ee\u7684\u3002","title":"\u4f7f\u7528\u901a\u9053\u8c03\u6574\u989c\u8272"},{"location":"PS/PS9/#_20","text":"\u5229\u7528\u901a\u9053\u8ba1\u7b97\u7ed8\u5236\u5965\u8fd0\u4e94\u73af \u4f7f\u7528\u901a\u9053\u8c03\u6574\u989c\u8272","title":"\u7ec3\u4e60"},{"location":"PS/PS9/#_21","text":"\u901a\u9053\u62a0\u56fe\u4e3b\u8981\u662f\u5229\u7528\u56fe\u50cf\u7684\u8272\u76f8\u5dee\u522b\u6216\u660e\u5ea6\u5dee\u522b\u6765\u521b\u5efa\u9009\u533a\uff0c\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u591a\u6b21\u91cd\u590d\u4f7f\u7528\u201c\u4eae\u5ea6 / \u5bf9\u6bd4 \u5ea6\u201d\u3001\u201c\u66f2\u7ebf\u201d\u3001\u201c\u8272\u9636\u201d\u7b49\u8c03\u6574\u547d\u4ee4\uff0c\u4ee5\u53ca\u753b\u7b14\u3001\u52a0\u6df1\u3001\u51cf\u6de1\u7b49\u5de5\u5177\u5bf9\u901a\u9053\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u5f97\u5230\u6700\u7cbe\u786e\u7684\u9009\u533a\u3002\u901a\u9053\u62a0\u56fe\u6cd5\u5e38\u7528\u4e8e\u62a0\u9009\u6bdb\u53d1\u3001\u4e91\u6735\u3001\u70df\u96fe\u4ee5\u53ca\u534a\u900f\u660e\u7684\u5a5a\u7eb1\u7b49\u5bf9\u8c61\u3002","title":"\u4f7f\u7528\u901a\u9053\u62a0\u56fe"},{"location":"PS/PS9/#_22","text":"\u901a\u9053\u62a0\u56fe\u4e3a\u957f\u53d1\u7f8e\u5973\u6362\u80cc\u666f \u4f7f\u7528\u901a\u9053\u4e3a\u900f\u660e\u5a5a\u7eb1\u6362\u80cc\u666f \u4f7f\u7528\u901a\u9053\u8ba1\u7b97\u78e8\u76ae\u6cd5 \u4f7f\u7528\u901a\u9053\u5236\u4f5c\u6c34\u5f69\u753b\u6548\u679c","title":"\u901a\u9053\u62a0\u56fe\u7ec3\u4e60"},{"location":"PS/base/","text":"\u5e94\u7528\u9886\u57df\u4e0e\u6280\u672f\u63ed\u79d8 \u00b6 \u6444\u5f71\u540e\u671f\u5e94\u7528 \u00b6 Photoshop\u4ea7\u751f\u7684\u6839\u672c\u539f\u56e0\u5c31\u662f\u8981\u89e3\u51b3\u56fe\u50cf\u660e\u6697\u7684\u8c03\u6574\u95ee\u9898\u3002\u7ecf\u8fc7\u8fd9\u4e48\u591a\u5e74\u7684\u53d1\u5c55\uff0c\u5b83\u5728\u6444\u5f71\u540e\u671f\u65b9\u9762\u7684\u5e94\u7528\uff0c\u5df2\u7ecf\u8fbe\u5230\u4e86\u51fa\u795e\u5165\u5316\u7684\u5883\u754c\u3002 \u5e73\u9762\u8bbe\u8ba1\u5e94\u7528 \u00b6 \u5728\u5e73\u9762\u8bbe\u8ba1\u5de5\u4f5c\u4e2d\uff0c\u5bf9\u4e8e\u9875\u9762\u5185\u5bb9\u76f8\u5bf9\u8f83\u5c11\uff0c\u56fe\u50cf\u7f16\u8f91\u548c\u8c03\u6574\u5e94\u7528\u76f8\u5bf9\u8f83\u591a\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528Photoshop\u8f6f\u4ef6\u8fdb\u884c\u5e73\u9762\u8bbe\u8ba1\u548c\u6392\u7248\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7b80\u5355\uff0c\u6548\u679c\u76f4\u89c2\u3002 \u7279\u6548\u5408\u6210\u5e94\u7528 \u00b6 \u968f\u7740\u5e73\u9762\u8bbe\u8ba1\u7684\u4e0d\u65ad\u53d1\u5c55\u548c\u5e94\u7528\u65b9\u9762\u7684\u5ef6\u4f38\uff0c\u7ed3\u5408\u56fe\u5c42\u8499\u7248\u3001\u56fe\u5c42\u6837\u5f0f\u548c\u56fe\u5c42\u6df7\u5408\u6a21\u5f0f\u7b49\u65b9\u9762\uff0c\u53ef\u4ee5\u8fdb\u884c\u4e0d\u540c\u7684\u7279\u6548\u5408\u6210\uff0c\u5e94\u7528\u4e8e\u6e38\u620f\u3001\u7535\u5f71\u7b49\u7684\u6d77\u62a5\u8bbe\u8ba1\u3002 \u6548\u679c\u56fe\u540e\u671f\u5904\u7406\u5e94\u7528 \u00b6 \u72ec\u7279\u7684\u8272\u5f69\u548c\u660e\u6697\u8c03\u8282\u65b9\u5f0f\uff0c\u65b9\u4fbf\u7684\u56fe\u5c42\u6df7\u5408\u64cd\u4f5c\uff0c\u8ba9Photoshop\u8f6f\u4ef6\u5728\u5ba4\u5185\u3001\u5916\u6548\u679c\u56fe\u548c\u4ea7\u54c1\u8bbe\u8ba1\u6548\u679c\u56fe\u7684\u540e\u671f\u5904\u7406\u65b9\u9762\u53d1\u6325\u4e86\u6781\u5927\u7684\u4f5c\u7528\u3002 \u56fe\u50cf\u5904\u7406\u57fa\u7840\u77e5\u8bc6 \u00b6 \u4f4d\u56fe\u56fe\u50cf \u00b6 \u4f4d\u56fe\u4e5f\u79f0\u6805\u683c\u56fe\u50cf\uff0c\u662f\u7531\u50cf\u7d20\u6784\u6210\u7684\u3002\u6bcf\u4e2a\u50cf\u7d20\u88ab\u5206\u914d\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u4f4d\u7f6e\u548c\u989c\u8272\u503c\u3002\u4f4d\u56fe\u53ef\u4ee5\u5f88\u597d\u5730\u53cd\u6620\u56fe\u50cf\u660e\u6697\u7684\u53d8\u5316\u3001\u590d\u6742\u7684\u573a\u666f\u548c\u989c\u8272\u3002\u5b83\u7684\u7279\u70b9\u662f\u80fd\u8868\u73b0\u903c\u771f\u7684\u56fe\u50cf\u6548\u679c\uff0c\u4f46\u6587\u4ef6\u6bd4\u8f83\u5927\uff0c\u5e76\u4e14\u56fe\u50cf\u5728\u7f29\u653e\u65f6\u6e05\u6670\u5ea6\u4f1a\u964d\u4f4e\u5e76\u51fa\u73b0\u952f\u9f7f\u3002 \u77e2\u91cf\u56fe\u50cf \u00b6 \u77e2\u91cf\u56fe\u4e5f\u79f0\u5411\u91cf\u56fe\uff0c\u4f7f\u7528\u76f4\u7ebf\u548c\u66f2\u7ebf\u6765\u63cf\u8ff0\u56fe\u5f62\uff0c\u8fd9\u4e9b\u56fe\u5f62\u7684\u5143\u7d20\u662f\u4e00\u4e9b\u70b9\u3001\u7ebf\u3001\u77e9\u5f62\u3001\u591a\u8fb9\u5f62\u3001\u5706\u548c\u5f27\u7ebf\u7b49\u3002\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u6570\u5b66\u516c\u5f0f\u8ba1\u7b97\u83b7\u5f97\u7684\uff0c\u6240\u4ee5\u77e2\u91cf\u56fe\u5f62\u6587\u4ef6\u4e00\u822c\u8f83\u5c0f\u3002\u77e2\u91cf\u56fe\u5f62\u7684\u4f18\u70b9\u662f\u65e0\u8bba\u653e\u5927\u3001\u7f29\u5c0f\u6216\u65cb\u8f6c\u7b49\u90fd\u4e0d\u4f1a\u5931\u771f\uff1b\u7f3a\u70b9\u662f\u96be\u4ee5\u8868\u73b0\u8272\u5f69\u5c42\u6b21\u4e30\u5bcc\u3001\u903c\u771f\u7684\u56fe\u50cf\u6548\u679c\uff0c\u800c\u4e14\u663e\u793a\u77e2\u91cf\u56fe\u4e5f\u9700\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\u3002\u77e2\u91cf\u56fe\u5f62\u4e3b\u8981\u7528\u4e8e\u63d2\u56fe\u3001\u6587\u5b57\u548c\u53ef\u4ee5\u81ea\u7531\u7f29\u653e\u7684\u5fbd\u6807\u7b49\u56fe\u5f62\u3002\u4ee3\u8868\u6027\u7684\u77e2\u91cf\u8f6f\u4ef6\u6709 Adobe Illustrator\u3001CorelDraw\u3001CAD \u7b49\u3002 \u50cf\u7d20 \u00b6 \u50cf\u7d20\u662f\u6784\u6210\u4f4d\u56fe\u56fe\u50cf\u7684\u6700\u57fa\u672c\u5355\u4f4d\u3002\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u666e\u901a\u7684\u6570\u7801\u76f8\u7247\u5fc5\u7136\u6709\u8fde\u7eed\u7684\u8272\u76f8\u548c\u660e\u6697\u8fc7\u6e21\u3002\u5982\u679c\u628a\u6570\u5b57\u56fe\u50cf\u653e\u5927\u6570\u500d\uff0c\u5219\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u8fde\u7eed\u8272\u8c03\u662f\u7531\u8bb8\u591a\u8272\u5f69\u76f8\u8fd1\u7684\u5c0f\u65b9\u70b9\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5c0f\u65b9\u70b9\u5c31\u662f\u50cf\u7d20\u3002\u4e00\u4e2a\u50cf\u7d20\u53ea\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u989c\u8272\u3002\u5982\u679c\u8981\u5236\u4f5c\u6e10\u53d8\u7684\u8272\u5e26\u6548\u679c\uff0c\u50cf\u7d20\u4e0d\u591f\u662f\u80af\u5b9a\u5b9e\u73b0\u4e0d\u4e86\u7684\u3002 \u56fe\u50cf\u5206\u8fa8\u7387 \u00b6 \u56fe\u50cf\u5206\u8fa8\u7387\u7528\u4e8e\u63a7\u5236\u4f4d\u56fe\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u7cbe\u7ec6\u5ea6\uff0c\u6d4b\u91cf\u5355\u4f4d\u662f\u50cf\u7d20 /\u82f1\u5bf8\uff08ppi\uff09\uff0c\u6bcf\u82f1\u5bf8\u7684\u50cf\u7d20\u8d8a\u591a\uff0c\u5206\u8fa8\u7387\u5c31\u8d8a\u9ad8\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u56fe\u50cf\u7684\u5206\u8fa8\u7387\u8d8a\u9ad8\uff0c\u5370\u5237\u51fa\u6765\u7684\u8d28\u91cf\u5c31\u8d8a\u597d\u3002 \u67e5\u770b\u56fe\u50cf\u7684\u5927\u5c0f\u548c\u5206\u8fa8\u7387 \u00b6 \u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u201c\u56fe\u50cf > \u56fe\u50cf\u5927\u5c0f\u201d\u547d\u4ee4\u6253\u5f00\u201c\u56fe\u50cf\u5927\u5c0f\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u5c31\u53ef\u4ee5\u67e5\u770b\u56fe\u50cf\u7684\u5927\u5c0f\u53ca\u5206\u8fa8\u7387\u3002 \u56fe\u50cf\u7684\u989c\u8272\u6a21\u5f0f \u00b6 \u56fe\u50cf\u7684\u989c\u8272\u6a21\u5f0f\u662f\u6307\u5c06\u67d0\u79cd\u989c\u8272\u8868\u73b0\u4e3a\u6570\u5b57\u5f62\u5f0f\u7684\u6a21\u578b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u8bb0\u5f55\u56fe\u50cf\u989c\u8272\u7684\u65b9\u5f0f\u3002\u5728 Photoshop\u4e2d\uff0c\u989c\u8272\u6a21\u5f0f\u5206\u4e3a\u4f4d\u56fe\u3001\u7070\u5ea6\u3001\u53cc\u8272\u8c03\u3001\u7d22\u5f15\u989c\u8272\u3001RGB \u989c\u8272\u3001CMYK \u989c\u8272\u3001Lab \u989c\u8272\u548c\u591a\u901a\u9053 8 \u79cd\u6a21\u5f0f. \u56fe\u50cf\u7684\u4f4d\u6df1\u5ea6 \u00b6 \u4f4d\u6df1\u5ea6\u4e3b\u8981\u7528\u4e8e\u6307\u5b9a\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u4f7f\u7528\u7684\u989c\u8272\u4fe1\u606f\u6570\u91cf\uff0c\u6bcf\u4e2a\u50cf\u7d20\u4f7f\u7528\u7684\u4fe1\u606f\u4f4d\u6570\u8d8a\u591a\uff0c\u53ef\u7528\u7684\u989c\u8272\u5c31\u8d8a\u591a\uff0c\u8272\u5f69\u7684\u8868\u73b0\u5c31\u8d8a\u903c\u771f\u3002\u6267\u884c\u201c\u56fe\u50cf > \u6a21\u5f0f\u201d\u547d\u4ee4\uff0c\u5b50\u83dc\u5355\u4e2d\u7684\u201c8 \u4f4d / \u901a\u9053\u201d\u3001\u201c16 \u4f4d / \u901a\u9053\u201d\u548c\u201c32 \u4f4d / \u901a\u9053\u201d3 \u4e2a\u5b50\u547d\u4ee4\u5c31\u662f\u901a\u5e38\u6240\u8bf4\u7684\u201c\u4f4d\u6df1\u5ea6\u201d\u3002 \u8272\u57df \u00b6 \u8272\u57df\u662f\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u8272\u5f69\u6a21\u578b\uff0c\u5b83\u5177\u6709\u7279\u5b9a\u7684\u8272\u5f69\u8303\u56f4\u3002\u4f8b\u5982\uff0cRGB \u8272\u5f69\u6a21\u578b\u5c31\u6709\u597d\u51e0\u4e2a\u8272\u57df\uff0c\u5373 Adobe RGB\u3001sRGB \u548c ProPhoto RGB \u7b49\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u81ea\u7136\u754c\u4e2d\u53ef\u89c1\u5149\u8c31\u7684\u989c\u8272\u7ec4\u6210\u4e86\u6700\u5927\u7684\u8272\u57df\u7a7a\u95f4\uff0c\u8be5\u8272\u57df\u7a7a\u95f4\u4e2d\u5305\u542b\u4e86\u4eba\u773c\u6240\u80fd\u89c1\u5230\u7684\u6240\u6709\u989c\u8272\u3002 \u6ea2\u8272 \u00b6 \u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u5982\u679c\u663e\u793a\u7684\u989c\u8272\u8d85\u51fa\u4e86 CMYK \u989c\u8272\u6a21\u5f0f\u7684\u8272\u57df\u8303\u56f4\uff0c\u5c31\u4f1a\u51fa\u73b0\u201c\u6ea2\u8272\u201d\u3002\u5728 RGB \u989c\u8272\u6a21\u5f0f\u4e0b\uff0c\u5728\u56fe\u50cf\u7a97\u53e3\u4e2d\u5c06\u5149\u6807\u653e\u7f6e\u5728\u6ea2\u8272\u4e0a\uff0c\u201c\u4fe1\u606f\u201d\u9762\u677f\u4e2d\u7684 CMYK \u503c\u65c1\u4f1a\u51fa\u73b0\u4e00\u4e2a\u611f\u53f9\u53f7\u3002\u5f53\u7528\u6237\u9009\u62e9\u4e86\u4e00\u79cd\u6ea2\u8272\u65f6\uff0c\u201c\u62fe\u8272\u5668\u201d\u5bf9\u8bdd\u6846\u548c\u201c\u989c\u8272\u201d\u9762\u677f\u4e2d\u90fd\u4f1a\u51fa\u73b0\u4e00\u4e2a\u201c\u6ea2\u8272\u8b66\u544a\u201d\u56fe\u6807\uff08\u9ec4\u8272\u4e09\u89d2\u5f62\u611f\u53f9\u53f7\uff09 \uff0c\u540c\u65f6\u8272\u5757\u4e2d\u4f1a\u663e\u793a\u4e0e\u5f53\u524d\u6240\u9009\u989c\u8272\u6700\u63a5\u8fd1\u7684 CMYK \u989c\u8272\uff0c\u5355\u51fb\u5373\u53ef\u9009\u5b9a\u8272\u5757\u4e2d\u7684\u989c\u8272\u3002","title":"\u57fa\u7840\u77e5\u8bc6\u5165\u95e8"},{"location":"PS/base/#_1","text":"","title":"\u5e94\u7528\u9886\u57df\u4e0e\u6280\u672f\u63ed\u79d8"},{"location":"PS/base/#_2","text":"Photoshop\u4ea7\u751f\u7684\u6839\u672c\u539f\u56e0\u5c31\u662f\u8981\u89e3\u51b3\u56fe\u50cf\u660e\u6697\u7684\u8c03\u6574\u95ee\u9898\u3002\u7ecf\u8fc7\u8fd9\u4e48\u591a\u5e74\u7684\u53d1\u5c55\uff0c\u5b83\u5728\u6444\u5f71\u540e\u671f\u65b9\u9762\u7684\u5e94\u7528\uff0c\u5df2\u7ecf\u8fbe\u5230\u4e86\u51fa\u795e\u5165\u5316\u7684\u5883\u754c\u3002","title":"\u6444\u5f71\u540e\u671f\u5e94\u7528"},{"location":"PS/base/#_3","text":"\u5728\u5e73\u9762\u8bbe\u8ba1\u5de5\u4f5c\u4e2d\uff0c\u5bf9\u4e8e\u9875\u9762\u5185\u5bb9\u76f8\u5bf9\u8f83\u5c11\uff0c\u56fe\u50cf\u7f16\u8f91\u548c\u8c03\u6574\u5e94\u7528\u76f8\u5bf9\u8f83\u591a\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528Photoshop\u8f6f\u4ef6\u8fdb\u884c\u5e73\u9762\u8bbe\u8ba1\u548c\u6392\u7248\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7b80\u5355\uff0c\u6548\u679c\u76f4\u89c2\u3002","title":"\u5e73\u9762\u8bbe\u8ba1\u5e94\u7528"},{"location":"PS/base/#_4","text":"\u968f\u7740\u5e73\u9762\u8bbe\u8ba1\u7684\u4e0d\u65ad\u53d1\u5c55\u548c\u5e94\u7528\u65b9\u9762\u7684\u5ef6\u4f38\uff0c\u7ed3\u5408\u56fe\u5c42\u8499\u7248\u3001\u56fe\u5c42\u6837\u5f0f\u548c\u56fe\u5c42\u6df7\u5408\u6a21\u5f0f\u7b49\u65b9\u9762\uff0c\u53ef\u4ee5\u8fdb\u884c\u4e0d\u540c\u7684\u7279\u6548\u5408\u6210\uff0c\u5e94\u7528\u4e8e\u6e38\u620f\u3001\u7535\u5f71\u7b49\u7684\u6d77\u62a5\u8bbe\u8ba1\u3002","title":"\u7279\u6548\u5408\u6210\u5e94\u7528"},{"location":"PS/base/#_5","text":"\u72ec\u7279\u7684\u8272\u5f69\u548c\u660e\u6697\u8c03\u8282\u65b9\u5f0f\uff0c\u65b9\u4fbf\u7684\u56fe\u5c42\u6df7\u5408\u64cd\u4f5c\uff0c\u8ba9Photoshop\u8f6f\u4ef6\u5728\u5ba4\u5185\u3001\u5916\u6548\u679c\u56fe\u548c\u4ea7\u54c1\u8bbe\u8ba1\u6548\u679c\u56fe\u7684\u540e\u671f\u5904\u7406\u65b9\u9762\u53d1\u6325\u4e86\u6781\u5927\u7684\u4f5c\u7528\u3002","title":"\u6548\u679c\u56fe\u540e\u671f\u5904\u7406\u5e94\u7528"},{"location":"PS/base/#_6","text":"","title":"\u56fe\u50cf\u5904\u7406\u57fa\u7840\u77e5\u8bc6"},{"location":"PS/base/#_7","text":"\u4f4d\u56fe\u4e5f\u79f0\u6805\u683c\u56fe\u50cf\uff0c\u662f\u7531\u50cf\u7d20\u6784\u6210\u7684\u3002\u6bcf\u4e2a\u50cf\u7d20\u88ab\u5206\u914d\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u4f4d\u7f6e\u548c\u989c\u8272\u503c\u3002\u4f4d\u56fe\u53ef\u4ee5\u5f88\u597d\u5730\u53cd\u6620\u56fe\u50cf\u660e\u6697\u7684\u53d8\u5316\u3001\u590d\u6742\u7684\u573a\u666f\u548c\u989c\u8272\u3002\u5b83\u7684\u7279\u70b9\u662f\u80fd\u8868\u73b0\u903c\u771f\u7684\u56fe\u50cf\u6548\u679c\uff0c\u4f46\u6587\u4ef6\u6bd4\u8f83\u5927\uff0c\u5e76\u4e14\u56fe\u50cf\u5728\u7f29\u653e\u65f6\u6e05\u6670\u5ea6\u4f1a\u964d\u4f4e\u5e76\u51fa\u73b0\u952f\u9f7f\u3002","title":"\u4f4d\u56fe\u56fe\u50cf"},{"location":"PS/base/#_8","text":"\u77e2\u91cf\u56fe\u4e5f\u79f0\u5411\u91cf\u56fe\uff0c\u4f7f\u7528\u76f4\u7ebf\u548c\u66f2\u7ebf\u6765\u63cf\u8ff0\u56fe\u5f62\uff0c\u8fd9\u4e9b\u56fe\u5f62\u7684\u5143\u7d20\u662f\u4e00\u4e9b\u70b9\u3001\u7ebf\u3001\u77e9\u5f62\u3001\u591a\u8fb9\u5f62\u3001\u5706\u548c\u5f27\u7ebf\u7b49\u3002\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u6570\u5b66\u516c\u5f0f\u8ba1\u7b97\u83b7\u5f97\u7684\uff0c\u6240\u4ee5\u77e2\u91cf\u56fe\u5f62\u6587\u4ef6\u4e00\u822c\u8f83\u5c0f\u3002\u77e2\u91cf\u56fe\u5f62\u7684\u4f18\u70b9\u662f\u65e0\u8bba\u653e\u5927\u3001\u7f29\u5c0f\u6216\u65cb\u8f6c\u7b49\u90fd\u4e0d\u4f1a\u5931\u771f\uff1b\u7f3a\u70b9\u662f\u96be\u4ee5\u8868\u73b0\u8272\u5f69\u5c42\u6b21\u4e30\u5bcc\u3001\u903c\u771f\u7684\u56fe\u50cf\u6548\u679c\uff0c\u800c\u4e14\u663e\u793a\u77e2\u91cf\u56fe\u4e5f\u9700\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\u3002\u77e2\u91cf\u56fe\u5f62\u4e3b\u8981\u7528\u4e8e\u63d2\u56fe\u3001\u6587\u5b57\u548c\u53ef\u4ee5\u81ea\u7531\u7f29\u653e\u7684\u5fbd\u6807\u7b49\u56fe\u5f62\u3002\u4ee3\u8868\u6027\u7684\u77e2\u91cf\u8f6f\u4ef6\u6709 Adobe Illustrator\u3001CorelDraw\u3001CAD \u7b49\u3002","title":"\u77e2\u91cf\u56fe\u50cf"},{"location":"PS/base/#_9","text":"\u50cf\u7d20\u662f\u6784\u6210\u4f4d\u56fe\u56fe\u50cf\u7684\u6700\u57fa\u672c\u5355\u4f4d\u3002\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u666e\u901a\u7684\u6570\u7801\u76f8\u7247\u5fc5\u7136\u6709\u8fde\u7eed\u7684\u8272\u76f8\u548c\u660e\u6697\u8fc7\u6e21\u3002\u5982\u679c\u628a\u6570\u5b57\u56fe\u50cf\u653e\u5927\u6570\u500d\uff0c\u5219\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u8fde\u7eed\u8272\u8c03\u662f\u7531\u8bb8\u591a\u8272\u5f69\u76f8\u8fd1\u7684\u5c0f\u65b9\u70b9\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5c0f\u65b9\u70b9\u5c31\u662f\u50cf\u7d20\u3002\u4e00\u4e2a\u50cf\u7d20\u53ea\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u989c\u8272\u3002\u5982\u679c\u8981\u5236\u4f5c\u6e10\u53d8\u7684\u8272\u5e26\u6548\u679c\uff0c\u50cf\u7d20\u4e0d\u591f\u662f\u80af\u5b9a\u5b9e\u73b0\u4e0d\u4e86\u7684\u3002","title":"\u50cf\u7d20"},{"location":"PS/base/#_10","text":"\u56fe\u50cf\u5206\u8fa8\u7387\u7528\u4e8e\u63a7\u5236\u4f4d\u56fe\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u7cbe\u7ec6\u5ea6\uff0c\u6d4b\u91cf\u5355\u4f4d\u662f\u50cf\u7d20 /\u82f1\u5bf8\uff08ppi\uff09\uff0c\u6bcf\u82f1\u5bf8\u7684\u50cf\u7d20\u8d8a\u591a\uff0c\u5206\u8fa8\u7387\u5c31\u8d8a\u9ad8\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u56fe\u50cf\u7684\u5206\u8fa8\u7387\u8d8a\u9ad8\uff0c\u5370\u5237\u51fa\u6765\u7684\u8d28\u91cf\u5c31\u8d8a\u597d\u3002","title":"\u56fe\u50cf\u5206\u8fa8\u7387"},{"location":"PS/base/#_11","text":"\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u201c\u56fe\u50cf > \u56fe\u50cf\u5927\u5c0f\u201d\u547d\u4ee4\u6253\u5f00\u201c\u56fe\u50cf\u5927\u5c0f\u201d\u5bf9\u8bdd\u6846\uff0c\u5728\u8be5\u5bf9\u8bdd\u6846\u4e2d\u5c31\u53ef\u4ee5\u67e5\u770b\u56fe\u50cf\u7684\u5927\u5c0f\u53ca\u5206\u8fa8\u7387\u3002","title":"\u67e5\u770b\u56fe\u50cf\u7684\u5927\u5c0f\u548c\u5206\u8fa8\u7387"},{"location":"PS/base/#_12","text":"\u56fe\u50cf\u7684\u989c\u8272\u6a21\u5f0f\u662f\u6307\u5c06\u67d0\u79cd\u989c\u8272\u8868\u73b0\u4e3a\u6570\u5b57\u5f62\u5f0f\u7684\u6a21\u578b\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u8bb0\u5f55\u56fe\u50cf\u989c\u8272\u7684\u65b9\u5f0f\u3002\u5728 Photoshop\u4e2d\uff0c\u989c\u8272\u6a21\u5f0f\u5206\u4e3a\u4f4d\u56fe\u3001\u7070\u5ea6\u3001\u53cc\u8272\u8c03\u3001\u7d22\u5f15\u989c\u8272\u3001RGB \u989c\u8272\u3001CMYK \u989c\u8272\u3001Lab \u989c\u8272\u548c\u591a\u901a\u9053 8 \u79cd\u6a21\u5f0f.","title":"\u56fe\u50cf\u7684\u989c\u8272\u6a21\u5f0f"},{"location":"PS/base/#_13","text":"\u4f4d\u6df1\u5ea6\u4e3b\u8981\u7528\u4e8e\u6307\u5b9a\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u4f7f\u7528\u7684\u989c\u8272\u4fe1\u606f\u6570\u91cf\uff0c\u6bcf\u4e2a\u50cf\u7d20\u4f7f\u7528\u7684\u4fe1\u606f\u4f4d\u6570\u8d8a\u591a\uff0c\u53ef\u7528\u7684\u989c\u8272\u5c31\u8d8a\u591a\uff0c\u8272\u5f69\u7684\u8868\u73b0\u5c31\u8d8a\u903c\u771f\u3002\u6267\u884c\u201c\u56fe\u50cf > \u6a21\u5f0f\u201d\u547d\u4ee4\uff0c\u5b50\u83dc\u5355\u4e2d\u7684\u201c8 \u4f4d / \u901a\u9053\u201d\u3001\u201c16 \u4f4d / \u901a\u9053\u201d\u548c\u201c32 \u4f4d / \u901a\u9053\u201d3 \u4e2a\u5b50\u547d\u4ee4\u5c31\u662f\u901a\u5e38\u6240\u8bf4\u7684\u201c\u4f4d\u6df1\u5ea6\u201d\u3002","title":"\u56fe\u50cf\u7684\u4f4d\u6df1\u5ea6"},{"location":"PS/base/#_14","text":"\u8272\u57df\u662f\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u8272\u5f69\u6a21\u578b\uff0c\u5b83\u5177\u6709\u7279\u5b9a\u7684\u8272\u5f69\u8303\u56f4\u3002\u4f8b\u5982\uff0cRGB \u8272\u5f69\u6a21\u578b\u5c31\u6709\u597d\u51e0\u4e2a\u8272\u57df\uff0c\u5373 Adobe RGB\u3001sRGB \u548c ProPhoto RGB \u7b49\u3002\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u81ea\u7136\u754c\u4e2d\u53ef\u89c1\u5149\u8c31\u7684\u989c\u8272\u7ec4\u6210\u4e86\u6700\u5927\u7684\u8272\u57df\u7a7a\u95f4\uff0c\u8be5\u8272\u57df\u7a7a\u95f4\u4e2d\u5305\u542b\u4e86\u4eba\u773c\u6240\u80fd\u89c1\u5230\u7684\u6240\u6709\u989c\u8272\u3002","title":"\u8272\u57df"},{"location":"PS/base/#_15","text":"\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u5982\u679c\u663e\u793a\u7684\u989c\u8272\u8d85\u51fa\u4e86 CMYK \u989c\u8272\u6a21\u5f0f\u7684\u8272\u57df\u8303\u56f4\uff0c\u5c31\u4f1a\u51fa\u73b0\u201c\u6ea2\u8272\u201d\u3002\u5728 RGB \u989c\u8272\u6a21\u5f0f\u4e0b\uff0c\u5728\u56fe\u50cf\u7a97\u53e3\u4e2d\u5c06\u5149\u6807\u653e\u7f6e\u5728\u6ea2\u8272\u4e0a\uff0c\u201c\u4fe1\u606f\u201d\u9762\u677f\u4e2d\u7684 CMYK \u503c\u65c1\u4f1a\u51fa\u73b0\u4e00\u4e2a\u611f\u53f9\u53f7\u3002\u5f53\u7528\u6237\u9009\u62e9\u4e86\u4e00\u79cd\u6ea2\u8272\u65f6\uff0c\u201c\u62fe\u8272\u5668\u201d\u5bf9\u8bdd\u6846\u548c\u201c\u989c\u8272\u201d\u9762\u677f\u4e2d\u90fd\u4f1a\u51fa\u73b0\u4e00\u4e2a\u201c\u6ea2\u8272\u8b66\u544a\u201d\u56fe\u6807\uff08\u9ec4\u8272\u4e09\u89d2\u5f62\u611f\u53f9\u53f7\uff09 \uff0c\u540c\u65f6\u8272\u5757\u4e2d\u4f1a\u663e\u793a\u4e0e\u5f53\u524d\u6240\u9009\u989c\u8272\u6700\u63a5\u8fd1\u7684 CMYK \u989c\u8272\uff0c\u5355\u51fb\u5373\u53ef\u9009\u5b9a\u8272\u5757\u4e2d\u7684\u989c\u8272\u3002","title":"\u6ea2\u8272"},{"location":"Web/CSS/CSS1/","text":"\u884c\u5185\u6837\u5f0f\u8868\uff08inline style sheet\uff09 \u00b6 \u76f4\u63a5\u5b9a\u4e49\u5728\u6807\u7b7e\u7684 style \u5c5e\u6027\u4e2d\u3002 \u4f5c\u7528\u8303\u56f4\uff1a\u4ec5\u5bf9\u5f53\u524d\u6807\u7b7e\u4ea7\u751f\u5f71\u54cd\u3002 \u4f8b\u5982\uff1a < img src = \"/images/mountain.jpg\" alt = \"\" style = \"width: 300px; height: 200px;\" > \u5185\u90e8\u6837\u5f0f\u8868\uff08internal style sheet\uff09 \u00b6 \u5b9a\u4e49\u5728 style \u6807\u7b7e\u4e2d\uff0c\u901a\u8fc7\u9009\u62e9\u5668\u5f71\u54cd\u5bf9\u5e94\u7684\u6807\u7b7e\u3002 \u4f5c\u7528\u8303\u56f4\uff1a\u53ef\u4ee5\u5bf9\u540c\u4e00\u4e2a\u9875\u9762\u4e2d\u7684\u591a\u4e2a\u5143\u7d20\u4ea7\u751f\u5f71\u54cd\u3002 \u5916\u90e8\u6837\u5f0f\u8868\uff08external style sheet\uff09 \u00b6 \u5b9a\u4e49\u5728css\u6837\u5f0f\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u9009\u62e9\u5668\u5f71\u54cd\u5bf9\u5e94\u7684\u6807\u7b7e\u3002\u53ef\u4ee5\u7528link\u6807\u7b7e\u5f15\u5165\u67d0\u4e9b\u9875\u9762\u3002 \u4f5c\u7528\u8303\u56f4\uff1a\u53ef\u4ee5\u5bf9\u591a\u4e2a\u9875\u9762\u4ea7\u751f\u5f71\u54cd\u3002 \u6ce8\u91ca \u00b6 \u6ce8\u610f\u4e0d\u80fd\u4f7f\u7528 // \u3002 \u53ea\u6709\uff1a /* \u6ce8\u91ca */ \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16273/ \u6765\u6e90\uff1aAcWing","title":"\u6837\u5f0f\u5b9a\u4e49\u65b9\u5f0f"},{"location":"Web/CSS/CSS1/#inline-style-sheet","text":"\u76f4\u63a5\u5b9a\u4e49\u5728\u6807\u7b7e\u7684 style \u5c5e\u6027\u4e2d\u3002 \u4f5c\u7528\u8303\u56f4\uff1a\u4ec5\u5bf9\u5f53\u524d\u6807\u7b7e\u4ea7\u751f\u5f71\u54cd\u3002 \u4f8b\u5982\uff1a < img src = \"/images/mountain.jpg\" alt = \"\" style = \"width: 300px; height: 200px;\" >","title":"\u884c\u5185\u6837\u5f0f\u8868\uff08inline style sheet\uff09"},{"location":"Web/CSS/CSS1/#internal-style-sheet","text":"\u5b9a\u4e49\u5728 style \u6807\u7b7e\u4e2d\uff0c\u901a\u8fc7\u9009\u62e9\u5668\u5f71\u54cd\u5bf9\u5e94\u7684\u6807\u7b7e\u3002 \u4f5c\u7528\u8303\u56f4\uff1a\u53ef\u4ee5\u5bf9\u540c\u4e00\u4e2a\u9875\u9762\u4e2d\u7684\u591a\u4e2a\u5143\u7d20\u4ea7\u751f\u5f71\u54cd\u3002","title":"\u5185\u90e8\u6837\u5f0f\u8868\uff08internal style sheet\uff09"},{"location":"Web/CSS/CSS1/#external-style-sheet","text":"\u5b9a\u4e49\u5728css\u6837\u5f0f\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u9009\u62e9\u5668\u5f71\u54cd\u5bf9\u5e94\u7684\u6807\u7b7e\u3002\u53ef\u4ee5\u7528link\u6807\u7b7e\u5f15\u5165\u67d0\u4e9b\u9875\u9762\u3002 \u4f5c\u7528\u8303\u56f4\uff1a\u53ef\u4ee5\u5bf9\u591a\u4e2a\u9875\u9762\u4ea7\u751f\u5f71\u54cd\u3002","title":"\u5916\u90e8\u6837\u5f0f\u8868\uff08external style sheet\uff09"},{"location":"Web/CSS/CSS1/#_1","text":"\u6ce8\u610f\u4e0d\u80fd\u4f7f\u7528 // \u3002 \u53ea\u6709\uff1a /* \u6ce8\u91ca */","title":"\u6ce8\u91ca"},{"location":"Web/CSS/CSS1/#_2","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16273/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS10/","text":"box-sizing \u00b6 CSS \u4e2d\u7684 box-sizing \u5c5e\u6027\u5b9a\u4e49\u4e86 user agent \u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u7684\u603b\u5bbd\u5ea6\u548c\u603b\u9ad8\u5ea6\u3002 content-box \uff1a\u662f\u9ed8\u8ba4\u503c\uff0c\u8bbe\u7f6e border \u548c padding \u5747\u4f1a\u589e\u52a0\u5143\u7d20\u7684\u5bbd\u9ad8\u3002 border-box \uff1a\u8bbe\u7f6e border \u548c padding \u4e0d\u4f1a\u6539\u53d8\u5143\u7d20\u7684\u5bbd\u9ad8\uff0c\u800c\u662f\u6324\u5360\u5185\u5bb9\u533a\u57df\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16281/ \u6765\u6e90\uff1aAcWing","title":"\u76d2\u5b50\u6a21\u578b"},{"location":"Web/CSS/CSS10/#box-sizing","text":"CSS \u4e2d\u7684 box-sizing \u5c5e\u6027\u5b9a\u4e49\u4e86 user agent \u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u7684\u603b\u5bbd\u5ea6\u548c\u603b\u9ad8\u5ea6\u3002 content-box \uff1a\u662f\u9ed8\u8ba4\u503c\uff0c\u8bbe\u7f6e border \u548c padding \u5747\u4f1a\u589e\u52a0\u5143\u7d20\u7684\u5bbd\u9ad8\u3002 border-box \uff1a\u8bbe\u7f6e border \u548c padding \u4e0d\u4f1a\u6539\u53d8\u5143\u7d20\u7684\u5bbd\u9ad8\uff0c\u800c\u662f\u6324\u5360\u5185\u5bb9\u533a\u57df\u3002","title":"box-sizing"},{"location":"Web/CSS/CSS10/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16281/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS11/","text":"position \u00b6 CSS position \u5c5e\u6027\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u5143\u7d20\u5728\u6587\u6863\u4e2d\u7684\u5b9a\u4f4d\u65b9\u5f0f\u3002 \u5b9a\u4f4d\u7c7b\u578b\uff1a \u00b6 \u5b9a\u4f4d\u5143\u7d20\uff08positioned element\uff09\u662f\u5176\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a relative , absolute , fixed \u6216 sticky \u7684\u4e00\u4e2a\u5143\u7d20\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u9664 static \u4ee5\u5916\u7684\u4efb\u4f55\u4e1c\u897f\uff09\u3002 \u76f8\u5bf9\u5b9a\u4f4d\u5143\u7d20\uff08relatively positioned element\uff09\u662f\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a relative \u7684\u5143\u7d20\u3002 \u7edd\u5bf9\u5b9a\u4f4d\u5143\u7d20\uff08absolutely positioned element\uff09\u662f\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a absolute \u6216 fixed \u7684\u5143\u7d20\u3002 \u7c98\u6027\u5b9a\u4f4d\u5143\u7d20\uff08stickily positioned element\uff09\u662f\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a sticky \u7684\u5143\u7d20\u3002 \u53d6\u503c\uff1a \u00b6 static \uff1a\u8be5\u5173\u952e\u5b57\u6307\u5b9a\u5143\u7d20\u4f7f\u7528\u6b63\u5e38\u7684\u5e03\u5c40\u884c\u4e3a\uff0c\u5373\u5143\u7d20\u5728\u6587\u6863\u5e38\u89c4\u6d41\u4e2d\u5f53\u524d\u7684\u5e03\u5c40\u4f4d\u7f6e\u3002\u6b64\u65f6 top , right , bottom , left \u548c z-index \u5c5e\u6027\u65e0\u6548\u3002 relative \uff1a\u8be5\u5173\u952e\u5b57\u4e0b\uff0c\u5143\u7d20\u5148\u653e\u7f6e\u5728\u672a\u6dfb\u52a0\u5b9a\u4f4d\u65f6\u7684\u4f4d\u7f6e\uff0c\u518d\u5728\u4e0d\u6539\u53d8\u9875\u9762\u5e03\u5c40\u7684\u524d\u63d0\u4e0b\u8c03\u6574\u5143\u7d20\u4f4d\u7f6e\uff08\u56e0\u6b64\u4f1a\u5728\u6b64\u5143\u7d20\u672a\u6dfb\u52a0\u5b9a\u4f4d\u65f6\u6240\u5728\u4f4d\u7f6e\u7559\u4e0b\u7a7a\u767d\uff09\u3002 top , right , bottom , left \u7b49\u8c03\u6574\u5143\u7d20\u76f8\u5bf9\u4e8e\u521d\u59cb\u4f4d\u7f6e\u7684\u504f\u79fb\u91cf\u3002 absolute \uff1a\u5143\u7d20\u4f1a\u88ab\u79fb\u51fa\u6b63\u5e38\u6587\u6863\u6d41\uff0c\u5e76\u4e0d\u4e3a\u5143\u7d20\u9884\u7559\u7a7a\u95f4\uff0c\u901a\u8fc7\u6307\u5b9a\u5143\u7d20\u76f8\u5bf9\u4e8e\u6700\u8fd1\u7684\u975e static \u5b9a\u4f4d\u7956\u5148\u5143\u7d20\u7684\u504f\u79fb\uff0c\u6765\u786e\u5b9a\u5143\u7d20\u4f4d\u7f6e\u3002\u7edd\u5bf9\u5b9a\u4f4d\u7684\u5143\u7d20\u53ef\u4ee5\u8bbe\u7f6e\u5916\u8fb9\u8ddd\uff08margins\uff09\uff0c\u4e14\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u8fb9\u8ddd\u5408\u5e76\u3002 fixed \uff1a\u5143\u7d20\u4f1a\u88ab\u79fb\u51fa\u6b63\u5e38\u6587\u6863\u6d41\uff0c\u5e76\u4e0d\u4e3a\u5143\u7d20\u9884\u7559\u7a7a\u95f4\uff0c\u800c\u662f\u901a\u8fc7\u6307\u5b9a\u5143\u7d20\u76f8\u5bf9\u4e8e\u5c4f\u5e55\u89c6\u53e3\uff08viewport\uff09\u7684\u4f4d\u7f6e\u6765\u6307\u5b9a\u5143\u7d20\u4f4d\u7f6e\u3002\u5143\u7d20\u7684\u4f4d\u7f6e\u5728\u5c4f\u5e55\u6eda\u52a8\u65f6\u4e0d\u4f1a\u6539\u53d8\u3002 sticky \uff1a\u5143\u7d20\u6839\u636e\u6b63\u5e38\u6587\u6863\u6d41\u8fdb\u884c\u5b9a\u4f4d\uff0c\u7136\u540e\u76f8\u5bf9\u5b83\u7684\u6700\u8fd1\u6eda\u52a8\u7956\u5148\uff08nearest scrolling ancestor\uff09\u548c containing block (\u6700\u8fd1\u5757\u7ea7\u7956\u5148 nearest block-level ancestor)\uff0c\u5305\u62ec table-related \u5143\u7d20\uff0c\u57fa\u4e8e top , right , bottom , \u548c left \u7684\u503c\u8fdb\u884c\u504f\u79fb\u3002\u504f\u79fb\u503c\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5176\u4ed6\u5143\u7d20\u7684\u4f4d\u7f6e\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16282/ \u6765\u6e90\uff1aAcWing","title":"\u4f4d\u7f6e"},{"location":"Web/CSS/CSS11/#position","text":"CSS position \u5c5e\u6027\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u5143\u7d20\u5728\u6587\u6863\u4e2d\u7684\u5b9a\u4f4d\u65b9\u5f0f\u3002","title":"position"},{"location":"Web/CSS/CSS11/#_1","text":"\u5b9a\u4f4d\u5143\u7d20\uff08positioned element\uff09\u662f\u5176\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a relative , absolute , fixed \u6216 sticky \u7684\u4e00\u4e2a\u5143\u7d20\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u9664 static \u4ee5\u5916\u7684\u4efb\u4f55\u4e1c\u897f\uff09\u3002 \u76f8\u5bf9\u5b9a\u4f4d\u5143\u7d20\uff08relatively positioned element\uff09\u662f\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a relative \u7684\u5143\u7d20\u3002 \u7edd\u5bf9\u5b9a\u4f4d\u5143\u7d20\uff08absolutely positioned element\uff09\u662f\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a absolute \u6216 fixed \u7684\u5143\u7d20\u3002 \u7c98\u6027\u5b9a\u4f4d\u5143\u7d20\uff08stickily positioned element\uff09\u662f\u8ba1\u7b97\u540e\u4f4d\u7f6e\u5c5e\u6027\u4e3a sticky \u7684\u5143\u7d20\u3002","title":"\u5b9a\u4f4d\u7c7b\u578b\uff1a"},{"location":"Web/CSS/CSS11/#_2","text":"static \uff1a\u8be5\u5173\u952e\u5b57\u6307\u5b9a\u5143\u7d20\u4f7f\u7528\u6b63\u5e38\u7684\u5e03\u5c40\u884c\u4e3a\uff0c\u5373\u5143\u7d20\u5728\u6587\u6863\u5e38\u89c4\u6d41\u4e2d\u5f53\u524d\u7684\u5e03\u5c40\u4f4d\u7f6e\u3002\u6b64\u65f6 top , right , bottom , left \u548c z-index \u5c5e\u6027\u65e0\u6548\u3002 relative \uff1a\u8be5\u5173\u952e\u5b57\u4e0b\uff0c\u5143\u7d20\u5148\u653e\u7f6e\u5728\u672a\u6dfb\u52a0\u5b9a\u4f4d\u65f6\u7684\u4f4d\u7f6e\uff0c\u518d\u5728\u4e0d\u6539\u53d8\u9875\u9762\u5e03\u5c40\u7684\u524d\u63d0\u4e0b\u8c03\u6574\u5143\u7d20\u4f4d\u7f6e\uff08\u56e0\u6b64\u4f1a\u5728\u6b64\u5143\u7d20\u672a\u6dfb\u52a0\u5b9a\u4f4d\u65f6\u6240\u5728\u4f4d\u7f6e\u7559\u4e0b\u7a7a\u767d\uff09\u3002 top , right , bottom , left \u7b49\u8c03\u6574\u5143\u7d20\u76f8\u5bf9\u4e8e\u521d\u59cb\u4f4d\u7f6e\u7684\u504f\u79fb\u91cf\u3002 absolute \uff1a\u5143\u7d20\u4f1a\u88ab\u79fb\u51fa\u6b63\u5e38\u6587\u6863\u6d41\uff0c\u5e76\u4e0d\u4e3a\u5143\u7d20\u9884\u7559\u7a7a\u95f4\uff0c\u901a\u8fc7\u6307\u5b9a\u5143\u7d20\u76f8\u5bf9\u4e8e\u6700\u8fd1\u7684\u975e static \u5b9a\u4f4d\u7956\u5148\u5143\u7d20\u7684\u504f\u79fb\uff0c\u6765\u786e\u5b9a\u5143\u7d20\u4f4d\u7f6e\u3002\u7edd\u5bf9\u5b9a\u4f4d\u7684\u5143\u7d20\u53ef\u4ee5\u8bbe\u7f6e\u5916\u8fb9\u8ddd\uff08margins\uff09\uff0c\u4e14\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u8fb9\u8ddd\u5408\u5e76\u3002 fixed \uff1a\u5143\u7d20\u4f1a\u88ab\u79fb\u51fa\u6b63\u5e38\u6587\u6863\u6d41\uff0c\u5e76\u4e0d\u4e3a\u5143\u7d20\u9884\u7559\u7a7a\u95f4\uff0c\u800c\u662f\u901a\u8fc7\u6307\u5b9a\u5143\u7d20\u76f8\u5bf9\u4e8e\u5c4f\u5e55\u89c6\u53e3\uff08viewport\uff09\u7684\u4f4d\u7f6e\u6765\u6307\u5b9a\u5143\u7d20\u4f4d\u7f6e\u3002\u5143\u7d20\u7684\u4f4d\u7f6e\u5728\u5c4f\u5e55\u6eda\u52a8\u65f6\u4e0d\u4f1a\u6539\u53d8\u3002 sticky \uff1a\u5143\u7d20\u6839\u636e\u6b63\u5e38\u6587\u6863\u6d41\u8fdb\u884c\u5b9a\u4f4d\uff0c\u7136\u540e\u76f8\u5bf9\u5b83\u7684\u6700\u8fd1\u6eda\u52a8\u7956\u5148\uff08nearest scrolling ancestor\uff09\u548c containing block (\u6700\u8fd1\u5757\u7ea7\u7956\u5148 nearest block-level ancestor)\uff0c\u5305\u62ec table-related \u5143\u7d20\uff0c\u57fa\u4e8e top , right , bottom , \u548c left \u7684\u503c\u8fdb\u884c\u504f\u79fb\u3002\u504f\u79fb\u503c\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5176\u4ed6\u5143\u7d20\u7684\u4f4d\u7f6e\u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS11/#_3","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16282/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS12/","text":"float \u00b6 float CSS\u5c5e\u6027\u6307\u5b9a\u4e00\u4e2a\u5143\u7d20\u5e94\u6cbf\u5176\u5bb9\u5668\u7684\u5de6\u4fa7\u6216\u53f3\u4fa7\u653e\u7f6e\uff0c\u5141\u8bb8\u6587\u672c\u548c\u5185\u8054\u5143\u7d20\u73af\u7ed5\u5b83\u3002\u8be5\u5143\u7d20\u4ece\u7f51\u9875\u7684\u6b63\u5e38\u6d41\u52a8(\u6587\u6863\u6d41)\u4e2d\u79fb\u9664\uff0c\u5c3d\u7ba1\u4ecd\u7136\u4fdd\u6301\u90e8\u5206\u7684\u6d41\u52a8\u6027\uff08\u4e0e\u7edd\u5bf9\u5b9a\u4f4d\u76f8\u53cd\uff09\u3002 \u7531\u4e8e float \u610f\u5473\u7740\u4f7f\u7528\u5757\u5e03\u5c40\uff0c\u5b83\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4fee\u6539 display \u503c\u7684\u8ba1\u7b97\u503c\uff1a display \u4e3a inline \u6216 inline-block \u65f6\uff0c\u4f7f\u7528 float \u540e\u4f1a\u7edf\u4e00\u53d8\u6210 block \u3002 \u53d6\u503c\uff1a \u00b6 left\uff1a\u8868\u660e\u5143\u7d20\u5fc5\u987b\u6d6e\u52a8\u5728\u5176\u6240\u5728\u7684\u5757\u5bb9\u5668\u5de6\u4fa7\u7684\u5173\u952e\u5b57\u3002 right\uff1a\u8868\u660e\u5143\u7d20\u5fc5\u987b\u6d6e\u52a8\u5728\u5176\u6240\u5728\u7684\u5757\u5bb9\u5668\u53f3\u4fa7\u7684\u5173\u952e\u5b57\u3002 clear \u00b6 \u6709\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5f3a\u5236\u5143\u7d20\u79fb\u81f3\u4efb\u4f55\u6d6e\u52a8\u5143\u7d20\u4e0b\u65b9\u3002\u6bd4\u5982\u8bf4\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u67d0\u4e2a\u6bb5\u843d\u4e0e\u6d6e\u52a8\u5143\u7d20\u4fdd\u6301\u76f8\u90bb\u7684\u4f4d\u7f6e\uff0c\u4f46\u53c8\u5e0c\u671b\u8fd9\u4e2a\u6bb5\u843d\u4ece\u5934\u5f00\u59cb\u5f3a\u5236\u72ec\u5360\u4e00\u884c\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528 clear \u3002 \u53d6\u503c\uff1a \u00b6 left \uff1a\u6e05\u9664\u5de6\u4fa7\u6d6e\u52a8\u3002 right \uff1a\u6e05\u9664\u53f3\u4fa7\u6d6e\u52a8\u3002 both \uff1a\u6e05\u9664\u5de6\u53f3\u4e24\u4fa7\u6d6e\u52a8 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16283/ \u6765\u6e90\uff1aAcWing","title":"\u6d6e\u52a8"},{"location":"Web/CSS/CSS12/#float","text":"float CSS\u5c5e\u6027\u6307\u5b9a\u4e00\u4e2a\u5143\u7d20\u5e94\u6cbf\u5176\u5bb9\u5668\u7684\u5de6\u4fa7\u6216\u53f3\u4fa7\u653e\u7f6e\uff0c\u5141\u8bb8\u6587\u672c\u548c\u5185\u8054\u5143\u7d20\u73af\u7ed5\u5b83\u3002\u8be5\u5143\u7d20\u4ece\u7f51\u9875\u7684\u6b63\u5e38\u6d41\u52a8(\u6587\u6863\u6d41)\u4e2d\u79fb\u9664\uff0c\u5c3d\u7ba1\u4ecd\u7136\u4fdd\u6301\u90e8\u5206\u7684\u6d41\u52a8\u6027\uff08\u4e0e\u7edd\u5bf9\u5b9a\u4f4d\u76f8\u53cd\uff09\u3002 \u7531\u4e8e float \u610f\u5473\u7740\u4f7f\u7528\u5757\u5e03\u5c40\uff0c\u5b83\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4fee\u6539 display \u503c\u7684\u8ba1\u7b97\u503c\uff1a display \u4e3a inline \u6216 inline-block \u65f6\uff0c\u4f7f\u7528 float \u540e\u4f1a\u7edf\u4e00\u53d8\u6210 block \u3002","title":"float"},{"location":"Web/CSS/CSS12/#_1","text":"left\uff1a\u8868\u660e\u5143\u7d20\u5fc5\u987b\u6d6e\u52a8\u5728\u5176\u6240\u5728\u7684\u5757\u5bb9\u5668\u5de6\u4fa7\u7684\u5173\u952e\u5b57\u3002 right\uff1a\u8868\u660e\u5143\u7d20\u5fc5\u987b\u6d6e\u52a8\u5728\u5176\u6240\u5728\u7684\u5757\u5bb9\u5668\u53f3\u4fa7\u7684\u5173\u952e\u5b57\u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS12/#clear","text":"\u6709\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5f3a\u5236\u5143\u7d20\u79fb\u81f3\u4efb\u4f55\u6d6e\u52a8\u5143\u7d20\u4e0b\u65b9\u3002\u6bd4\u5982\u8bf4\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u67d0\u4e2a\u6bb5\u843d\u4e0e\u6d6e\u52a8\u5143\u7d20\u4fdd\u6301\u76f8\u90bb\u7684\u4f4d\u7f6e\uff0c\u4f46\u53c8\u5e0c\u671b\u8fd9\u4e2a\u6bb5\u843d\u4ece\u5934\u5f00\u59cb\u5f3a\u5236\u72ec\u5360\u4e00\u884c\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528 clear \u3002","title":"clear"},{"location":"Web/CSS/CSS12/#_2","text":"left \uff1a\u6e05\u9664\u5de6\u4fa7\u6d6e\u52a8\u3002 right \uff1a\u6e05\u9664\u53f3\u4fa7\u6d6e\u52a8\u3002 both \uff1a\u6e05\u9664\u5de6\u53f3\u4e24\u4fa7\u6d6e\u52a8","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS12/#_3","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16283/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS13/","text":"flex CSS\u7b80\u5199\u5c5e\u6027\u8bbe\u7f6e\u4e86\u5f39\u6027\u9879\u76ee\u5982\u4f55\u589e\u5927\u6216\u7f29\u5c0f\u4ee5\u9002\u5e94\u5176\u5f39\u6027\u5bb9\u5668\u4e2d\u53ef\u7528\u7684\u7a7a\u95f4\u3002 flex-direction \u00b6 CSS flex-direction \u5c5e\u6027\u6307\u5b9a\u4e86\u5185\u90e8\u5143\u7d20\u662f\u5982\u4f55\u5728 flex \u5bb9\u5668\u4e2d\u5e03\u5c40\u7684\uff0c\u5b9a\u4e49\u4e86\u4e3b\u8f74\u7684\u65b9\u5411(\u6b63\u65b9\u5411\u6216\u53cd\u65b9\u5411)\u3002 \u53d6\u503c\uff1a \u00b6 row \uff1aflex\u5bb9\u5668\u7684\u4e3b\u8f74\u88ab\u5b9a\u4e49\u4e3a\u4e0e\u6587\u672c\u65b9\u5411\u76f8\u540c\u3002 \u4e3b\u8f74\u8d77\u70b9\u548c\u4e3b\u8f74\u7ec8\u70b9\u4e0e\u5185\u5bb9\u65b9\u5411\u76f8\u540c\u3002 row-reverse \uff1a\u8868\u73b0\u548c row \u76f8\u540c\uff0c\u4f46\u662f\u7f6e\u6362\u4e86\u4e3b\u8f74\u8d77\u70b9\u548c\u4e3b\u8f74\u7ec8\u70b9\u3002 column \uff1a flex \u5bb9\u5668\u7684\u4e3b\u8f74\u548c\u5757\u8f74\u76f8\u540c\u3002\u4e3b\u8f74\u8d77\u70b9\u4e0e\u4e3b\u8f74\u7ec8\u70b9\u548c\u4e66\u5199\u6a21\u5f0f\u7684\u524d\u540e\u70b9\u76f8\u540c column-reverse \uff1a\u8868\u73b0\u548c column \u76f8\u540c\uff0c\u4f46\u662f\u7f6e\u6362\u4e86\u4e3b\u8f74\u8d77\u70b9\u548c\u4e3b\u8f74\u7ec8\u70b9 flex-wrap \u00b6 CSS \u7684 flex-wrap \u5c5e\u6027\u6307\u5b9a flex \u5143\u7d20\u5355\u884c\u663e\u793a\u8fd8\u662f\u591a\u884c\u663e\u793a\u3002\u5982\u679c\u5141\u8bb8\u6362\u884c\uff0c\u8fd9\u4e2a\u5c5e\u6027\u5141\u8bb8\u4f60\u63a7\u5236\u884c\u7684\u5806\u53e0\u65b9\u5411\u3002 \u53d6\u503c\uff1a \u00b6 nowrap \uff1a\u9ed8\u8ba4\u503c\u3002\u4e0d\u6362\u884c\u3002 wrap \uff1a\u6362\u884c\uff0c\u7b2c\u4e00\u884c\u5728\u4e0a\u65b9\u3002 wrap-reverse \uff1a\u6362\u884c\uff0c\u7b2c\u4e00\u884c\u5728\u4e0b\u65b9\u3002 flex-flow \u00b6 CSS flex-flow \u5c5e\u6027\u662f flex-direction \u548c flex-wrap \u7684\u7b80\u5199\u3002\u9ed8\u8ba4\u503c\u4e3a\uff1a row nowrap \u3002 justify-content \u00b6 CSS justify-content \u5c5e\u6027\u5b9a\u4e49\u4e86\u6d4f\u89c8\u5668\u4e4b\u95f4\uff0c\u5982\u4f55\u5206\u914d\u987a\u7740\u5f39\u6027\u5bb9\u5668\u4e3b\u8f74(\u6216\u8005\u7f51\u683c\u884c\u8f74) \u7684\u5143\u7d20\u4e4b\u95f4\u53ca\u5176\u5468\u56f4\u7684\u7a7a\u95f4\u3002 \u53d6\u503c\uff1a \u00b6 flex-start \uff1a\u9ed8\u8ba4\u503c\u3002\u5de6\u5bf9\u9f50\u3002 flex-end \uff1a\u53f3\u5bf9\u9f50\u3002 space-between \uff1a\u5de6\u53f3\u4e24\u6bb5\u5bf9\u9f50\u3002 space-around \uff1a\u5728\u6bcf\u884c\u4e0a\u5747\u5300\u5206\u914d\u5f39\u6027\u5143\u7d20\u3002\u76f8\u90bb\u5143\u7d20\u95f4\u8ddd\u79bb\u76f8\u540c\u3002\u6bcf\u884c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5230\u884c\u9996\u7684\u8ddd\u79bb\u548c\u6bcf\u884c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5230\u884c\u5c3e\u7684\u8ddd\u79bb\u5c06\u4f1a\u662f\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u8ddd\u79bb\u7684\u4e00\u534a\u3002 space-evenly \uff1a flex \u9879\u90fd\u6cbf\u7740\u4e3b\u8f74\u5747\u5300\u5206\u5e03\u5728\u6307\u5b9a\u7684\u5bf9\u9f50\u5bb9\u5668\u4e2d\u3002\u76f8\u90bb flex \u9879\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u4e3b\u8f74\u8d77\u59cb\u4f4d\u7f6e\u5230\u7b2c\u4e00\u4e2a flex \u9879\u7684\u95f4\u8ddd\uff0c\u4e3b\u8f74\u7ed3\u675f\u4f4d\u7f6e\u5230\u6700\u540e\u4e00\u4e2a flex \u9879\u7684\u95f4\u8ddd\uff0c\u90fd\u5b8c\u5168\u4e00\u6837\u3002 align-items \u00b6 CSS align-items \u5c5e\u6027\u5c06\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9\u4e0a\u7684 align-self \u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7ec4\u3002 align-self \u5c5e\u6027\u8bbe\u7f6e\u9879\u76ee\u5728\u5176\u5305\u542b\u5757\u4e2d\u5728\u4ea4\u53c9\u8f74\u65b9\u5411\u4e0a\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002 \u53d6\u503c\uff1a \u00b6 flex-start \uff1a\u5143\u7d20\u5411\u4e3b\u8f74\u8d77\u70b9\u5bf9\u9f50\u3002 flex-end \uff1a\u5143\u7d20\u5411\u4e3b\u8f74\u7ec8\u70b9\u5bf9\u9f50\u3002 center \uff1a\u5143\u7d20\u5728\u4fa7\u8f74\u5c45\u4e2d\u3002 stretch \uff1a\u5f39\u6027\u5143\u7d20\u88ab\u5728\u4fa7\u8f74\u65b9\u5411\u88ab\u62c9\u4f38\u5230\u4e0e\u5bb9\u5668\u76f8\u540c\u7684\u9ad8\u5ea6\u6216\u5bbd\u5ea6\u3002 align-content \u00b6 CSS \u7684 align-content \u5c5e\u6027\u8bbe\u7f6e\u4e86\u6d4f\u89c8\u5668\u5982\u4f55\u6cbf\u7740\u5f39\u6027\u76d2\u5b50\u5e03\u5c40\u7684\u7eb5\u8f74\u548c\u7f51\u683c\u5e03\u5c40\u7684\u4e3b\u8f74\u5728\u5185\u5bb9\u9879\u4e4b\u95f4\u548c\u5468\u56f4\u5206\u914d\u7a7a\u95f4\u3002 \u53d6\u503c\uff1a \u00b6 flex-start \uff1a\u6240\u6709\u884c\u4ece\u5782\u76f4\u8f74\u8d77\u70b9\u5f00\u59cb\u586b\u5145\u3002\u7b2c\u4e00\u884c\u7684\u5782\u76f4\u8f74\u8d77\u70b9\u8fb9\u548c\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u8d77\u70b9\u8fb9\u5bf9\u9f50\u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\u7d27\u8ddf\u524d\u4e00\u884c\u3002 flex-end \uff1a\u6240\u6709\u884c\u4ece\u5782\u76f4\u8f74\u672b\u5c3e\u5f00\u59cb\u586b\u5145\u3002\u6700\u540e\u4e00\u884c\u7684\u5782\u76f4\u8f74\u7ec8\u70b9\u548c\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u7ec8\u70b9\u5bf9\u9f50\u3002\u540c\u65f6\u6240\u6709\u540e\u7eed\u884c\u4e0e\u524d\u4e00\u4e2a\u5bf9\u9f50\u3002 center \uff1a\u6240\u6709\u884c\u671d\u5411\u5bb9\u5668\u7684\u4e2d\u5fc3\u586b\u5145\u3002\u6bcf\u884c\u4e92\u76f8\u7d27\u6328\uff0c\u76f8\u5bf9\u4e8e\u5bb9\u5668\u5c45\u4e2d\u5bf9\u9f50\u3002\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u8d77\u70b9\u8fb9\u548c\u7b2c\u4e00\u884c\u7684\u8ddd\u79bb\u76f8\u7b49\u4e8e\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u7ec8\u70b9\u8fb9\u548c\u6700\u540e\u4e00\u884c\u7684\u8ddd\u79bb\u3002 stretch \uff1a\u62c9\u4f38\u6240\u6709\u884c\u6765\u586b\u6ee1\u5269\u4f59\u7a7a\u95f4\u3002\u5269\u4f59\u7a7a\u95f4\u5e73\u5747\u5730\u5206\u914d\u7ed9\u6bcf\u4e00\u884c\u3002 order \u00b6 \u5b9a\u4e49 flex \u9879\u76ee\u7684\u987a\u5e8f\uff0c\u503c\u8d8a\u5c0f\u8d8a\u9760\u524d\u3002 flex-grow \u00b6 CSS \u5c5e\u6027 flex-grow CSS \u8bbe\u7f6e flex \u9879\u4e3b\u5c3a\u5bf8 \u7684 flex \u589e\u957f\u7cfb\u6570\u3002 \u8d1f\u503c\u65e0\u6548\uff0c\u9ed8\u8ba4\u4e3a 0\u3002 flex-shrink \u00b6 CSS flex-shrink \u5c5e\u6027\u6307\u5b9a\u4e86 flex \u5143\u7d20\u7684\u6536\u7f29\u89c4\u5219\u3002 flex \u5143\u7d20\u4ec5\u5728\u9ed8\u8ba4\u5bbd\u5ea6\u4e4b\u548c\u5927\u4e8e\u5bb9\u5668\u7684\u65f6\u5019\u624d\u4f1a\u53d1\u751f\u6536\u7f29\uff0c\u5176\u6536\u7f29\u7684\u5927\u5c0f\u662f\u4f9d\u636e flex-shrink \u7684\u503c\u3002 \u8d1f\u503c\u65e0\u6548\uff0c\u9ed8\u8ba4\u4e3a1\u3002 flex-basis \u00b6 CSS \u5c5e\u6027 flex-basis \u6307\u5b9a\u4e86 flex \u5143\u7d20\u5728\u4e3b\u8f74\u65b9\u5411\u4e0a\u7684\u521d\u59cb\u5927\u5c0f\u3002 \u53d6\u503c\uff1a \u00b6 width \u503c\u53ef\u4ee5\u662f <length> ; \u8be5\u503c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u76f8\u5bf9\u4e8e\u5176\u7236\u5f39\u6027\u76d2\u5bb9\u5668\u4e3b\u8f74\u5c3a\u5bf8\u7684\u767e\u5206\u6570 \u3002\u8d1f\u503c\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u9ed8\u8ba4\u4e3a auto \u3002 flex \u00b6 flex-grow \u3001 flow-shrink \u3001 flex-basis \u7684\u7f29\u5199\u3002 \u5e38\u7528\u53d6\u503c\uff1a \u00b6 auto \uff1a flex: 1 1 auto none \uff1a flex: 0 0 auto \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16284/ \u6765\u6e90\uff1aAcWing","title":"flex\u5e03\u5c40"},{"location":"Web/CSS/CSS13/#flex-direction","text":"CSS flex-direction \u5c5e\u6027\u6307\u5b9a\u4e86\u5185\u90e8\u5143\u7d20\u662f\u5982\u4f55\u5728 flex \u5bb9\u5668\u4e2d\u5e03\u5c40\u7684\uff0c\u5b9a\u4e49\u4e86\u4e3b\u8f74\u7684\u65b9\u5411(\u6b63\u65b9\u5411\u6216\u53cd\u65b9\u5411)\u3002","title":"flex-direction"},{"location":"Web/CSS/CSS13/#_1","text":"row \uff1aflex\u5bb9\u5668\u7684\u4e3b\u8f74\u88ab\u5b9a\u4e49\u4e3a\u4e0e\u6587\u672c\u65b9\u5411\u76f8\u540c\u3002 \u4e3b\u8f74\u8d77\u70b9\u548c\u4e3b\u8f74\u7ec8\u70b9\u4e0e\u5185\u5bb9\u65b9\u5411\u76f8\u540c\u3002 row-reverse \uff1a\u8868\u73b0\u548c row \u76f8\u540c\uff0c\u4f46\u662f\u7f6e\u6362\u4e86\u4e3b\u8f74\u8d77\u70b9\u548c\u4e3b\u8f74\u7ec8\u70b9\u3002 column \uff1a flex \u5bb9\u5668\u7684\u4e3b\u8f74\u548c\u5757\u8f74\u76f8\u540c\u3002\u4e3b\u8f74\u8d77\u70b9\u4e0e\u4e3b\u8f74\u7ec8\u70b9\u548c\u4e66\u5199\u6a21\u5f0f\u7684\u524d\u540e\u70b9\u76f8\u540c column-reverse \uff1a\u8868\u73b0\u548c column \u76f8\u540c\uff0c\u4f46\u662f\u7f6e\u6362\u4e86\u4e3b\u8f74\u8d77\u70b9\u548c\u4e3b\u8f74\u7ec8\u70b9","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#flex-wrap","text":"CSS \u7684 flex-wrap \u5c5e\u6027\u6307\u5b9a flex \u5143\u7d20\u5355\u884c\u663e\u793a\u8fd8\u662f\u591a\u884c\u663e\u793a\u3002\u5982\u679c\u5141\u8bb8\u6362\u884c\uff0c\u8fd9\u4e2a\u5c5e\u6027\u5141\u8bb8\u4f60\u63a7\u5236\u884c\u7684\u5806\u53e0\u65b9\u5411\u3002","title":"flex-wrap"},{"location":"Web/CSS/CSS13/#_2","text":"nowrap \uff1a\u9ed8\u8ba4\u503c\u3002\u4e0d\u6362\u884c\u3002 wrap \uff1a\u6362\u884c\uff0c\u7b2c\u4e00\u884c\u5728\u4e0a\u65b9\u3002 wrap-reverse \uff1a\u6362\u884c\uff0c\u7b2c\u4e00\u884c\u5728\u4e0b\u65b9\u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#flex-flow","text":"CSS flex-flow \u5c5e\u6027\u662f flex-direction \u548c flex-wrap \u7684\u7b80\u5199\u3002\u9ed8\u8ba4\u503c\u4e3a\uff1a row nowrap \u3002","title":"flex-flow"},{"location":"Web/CSS/CSS13/#justify-content","text":"CSS justify-content \u5c5e\u6027\u5b9a\u4e49\u4e86\u6d4f\u89c8\u5668\u4e4b\u95f4\uff0c\u5982\u4f55\u5206\u914d\u987a\u7740\u5f39\u6027\u5bb9\u5668\u4e3b\u8f74(\u6216\u8005\u7f51\u683c\u884c\u8f74) \u7684\u5143\u7d20\u4e4b\u95f4\u53ca\u5176\u5468\u56f4\u7684\u7a7a\u95f4\u3002","title":"justify-content"},{"location":"Web/CSS/CSS13/#_3","text":"flex-start \uff1a\u9ed8\u8ba4\u503c\u3002\u5de6\u5bf9\u9f50\u3002 flex-end \uff1a\u53f3\u5bf9\u9f50\u3002 space-between \uff1a\u5de6\u53f3\u4e24\u6bb5\u5bf9\u9f50\u3002 space-around \uff1a\u5728\u6bcf\u884c\u4e0a\u5747\u5300\u5206\u914d\u5f39\u6027\u5143\u7d20\u3002\u76f8\u90bb\u5143\u7d20\u95f4\u8ddd\u79bb\u76f8\u540c\u3002\u6bcf\u884c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5230\u884c\u9996\u7684\u8ddd\u79bb\u548c\u6bcf\u884c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5230\u884c\u5c3e\u7684\u8ddd\u79bb\u5c06\u4f1a\u662f\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u8ddd\u79bb\u7684\u4e00\u534a\u3002 space-evenly \uff1a flex \u9879\u90fd\u6cbf\u7740\u4e3b\u8f74\u5747\u5300\u5206\u5e03\u5728\u6307\u5b9a\u7684\u5bf9\u9f50\u5bb9\u5668\u4e2d\u3002\u76f8\u90bb flex \u9879\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u4e3b\u8f74\u8d77\u59cb\u4f4d\u7f6e\u5230\u7b2c\u4e00\u4e2a flex \u9879\u7684\u95f4\u8ddd\uff0c\u4e3b\u8f74\u7ed3\u675f\u4f4d\u7f6e\u5230\u6700\u540e\u4e00\u4e2a flex \u9879\u7684\u95f4\u8ddd\uff0c\u90fd\u5b8c\u5168\u4e00\u6837\u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#align-items","text":"CSS align-items \u5c5e\u6027\u5c06\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9\u4e0a\u7684 align-self \u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7ec4\u3002 align-self \u5c5e\u6027\u8bbe\u7f6e\u9879\u76ee\u5728\u5176\u5305\u542b\u5757\u4e2d\u5728\u4ea4\u53c9\u8f74\u65b9\u5411\u4e0a\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002","title":"align-items"},{"location":"Web/CSS/CSS13/#_4","text":"flex-start \uff1a\u5143\u7d20\u5411\u4e3b\u8f74\u8d77\u70b9\u5bf9\u9f50\u3002 flex-end \uff1a\u5143\u7d20\u5411\u4e3b\u8f74\u7ec8\u70b9\u5bf9\u9f50\u3002 center \uff1a\u5143\u7d20\u5728\u4fa7\u8f74\u5c45\u4e2d\u3002 stretch \uff1a\u5f39\u6027\u5143\u7d20\u88ab\u5728\u4fa7\u8f74\u65b9\u5411\u88ab\u62c9\u4f38\u5230\u4e0e\u5bb9\u5668\u76f8\u540c\u7684\u9ad8\u5ea6\u6216\u5bbd\u5ea6\u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#align-content","text":"CSS \u7684 align-content \u5c5e\u6027\u8bbe\u7f6e\u4e86\u6d4f\u89c8\u5668\u5982\u4f55\u6cbf\u7740\u5f39\u6027\u76d2\u5b50\u5e03\u5c40\u7684\u7eb5\u8f74\u548c\u7f51\u683c\u5e03\u5c40\u7684\u4e3b\u8f74\u5728\u5185\u5bb9\u9879\u4e4b\u95f4\u548c\u5468\u56f4\u5206\u914d\u7a7a\u95f4\u3002","title":"align-content"},{"location":"Web/CSS/CSS13/#_5","text":"flex-start \uff1a\u6240\u6709\u884c\u4ece\u5782\u76f4\u8f74\u8d77\u70b9\u5f00\u59cb\u586b\u5145\u3002\u7b2c\u4e00\u884c\u7684\u5782\u76f4\u8f74\u8d77\u70b9\u8fb9\u548c\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u8d77\u70b9\u8fb9\u5bf9\u9f50\u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\u7d27\u8ddf\u524d\u4e00\u884c\u3002 flex-end \uff1a\u6240\u6709\u884c\u4ece\u5782\u76f4\u8f74\u672b\u5c3e\u5f00\u59cb\u586b\u5145\u3002\u6700\u540e\u4e00\u884c\u7684\u5782\u76f4\u8f74\u7ec8\u70b9\u548c\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u7ec8\u70b9\u5bf9\u9f50\u3002\u540c\u65f6\u6240\u6709\u540e\u7eed\u884c\u4e0e\u524d\u4e00\u4e2a\u5bf9\u9f50\u3002 center \uff1a\u6240\u6709\u884c\u671d\u5411\u5bb9\u5668\u7684\u4e2d\u5fc3\u586b\u5145\u3002\u6bcf\u884c\u4e92\u76f8\u7d27\u6328\uff0c\u76f8\u5bf9\u4e8e\u5bb9\u5668\u5c45\u4e2d\u5bf9\u9f50\u3002\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u8d77\u70b9\u8fb9\u548c\u7b2c\u4e00\u884c\u7684\u8ddd\u79bb\u76f8\u7b49\u4e8e\u5bb9\u5668\u7684\u5782\u76f4\u8f74\u7ec8\u70b9\u8fb9\u548c\u6700\u540e\u4e00\u884c\u7684\u8ddd\u79bb\u3002 stretch \uff1a\u62c9\u4f38\u6240\u6709\u884c\u6765\u586b\u6ee1\u5269\u4f59\u7a7a\u95f4\u3002\u5269\u4f59\u7a7a\u95f4\u5e73\u5747\u5730\u5206\u914d\u7ed9\u6bcf\u4e00\u884c\u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#order","text":"\u5b9a\u4e49 flex \u9879\u76ee\u7684\u987a\u5e8f\uff0c\u503c\u8d8a\u5c0f\u8d8a\u9760\u524d\u3002","title":"order"},{"location":"Web/CSS/CSS13/#flex-grow","text":"CSS \u5c5e\u6027 flex-grow CSS \u8bbe\u7f6e flex \u9879\u4e3b\u5c3a\u5bf8 \u7684 flex \u589e\u957f\u7cfb\u6570\u3002 \u8d1f\u503c\u65e0\u6548\uff0c\u9ed8\u8ba4\u4e3a 0\u3002","title":"flex-grow"},{"location":"Web/CSS/CSS13/#flex-shrink","text":"CSS flex-shrink \u5c5e\u6027\u6307\u5b9a\u4e86 flex \u5143\u7d20\u7684\u6536\u7f29\u89c4\u5219\u3002 flex \u5143\u7d20\u4ec5\u5728\u9ed8\u8ba4\u5bbd\u5ea6\u4e4b\u548c\u5927\u4e8e\u5bb9\u5668\u7684\u65f6\u5019\u624d\u4f1a\u53d1\u751f\u6536\u7f29\uff0c\u5176\u6536\u7f29\u7684\u5927\u5c0f\u662f\u4f9d\u636e flex-shrink \u7684\u503c\u3002 \u8d1f\u503c\u65e0\u6548\uff0c\u9ed8\u8ba4\u4e3a1\u3002","title":"flex-shrink"},{"location":"Web/CSS/CSS13/#flex-basis","text":"CSS \u5c5e\u6027 flex-basis \u6307\u5b9a\u4e86 flex \u5143\u7d20\u5728\u4e3b\u8f74\u65b9\u5411\u4e0a\u7684\u521d\u59cb\u5927\u5c0f\u3002","title":"flex-basis"},{"location":"Web/CSS/CSS13/#_6","text":"width \u503c\u53ef\u4ee5\u662f <length> ; \u8be5\u503c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u76f8\u5bf9\u4e8e\u5176\u7236\u5f39\u6027\u76d2\u5bb9\u5668\u4e3b\u8f74\u5c3a\u5bf8\u7684\u767e\u5206\u6570 \u3002\u8d1f\u503c\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u9ed8\u8ba4\u4e3a auto \u3002","title":"\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#flex","text":"flex-grow \u3001 flow-shrink \u3001 flex-basis \u7684\u7f29\u5199\u3002","title":"flex"},{"location":"Web/CSS/CSS13/#_7","text":"auto \uff1a flex: 1 1 auto none \uff1a flex: 0 0 auto","title":"\u5e38\u7528\u53d6\u503c\uff1a"},{"location":"Web/CSS/CSS13/#_8","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16284/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS14/","text":"media\u67e5\u8be2 \u00b6 \u5f53\u5c4f\u5e55\u5bbd\u5ea6\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u5e94\u7528css\u3002 \u4f8b\u5982\uff1a \u00b6 @ media ( min-width : 768px ) { . container { width : 960 px ; background-color : lightblue ; } } Bootstrap \u00b6 Bootstrap\u5730\u5740 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16285/ \u6765\u6e90\uff1aAcWing","title":"\u54cd\u5e94\u5f0f\u5e03\u5c40"},{"location":"Web/CSS/CSS14/#media","text":"\u5f53\u5c4f\u5e55\u5bbd\u5ea6\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u5e94\u7528css\u3002","title":"media\u67e5\u8be2"},{"location":"Web/CSS/CSS14/#_1","text":"@ media ( min-width : 768px ) { . container { width : 960 px ; background-color : lightblue ; } }","title":"\u4f8b\u5982\uff1a"},{"location":"Web/CSS/CSS14/#bootstrap","text":"Bootstrap\u5730\u5740","title":"Bootstrap"},{"location":"Web/CSS/CSS14/#_2","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16285/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS2/","text":"\u6807\u7b7e\u9009\u62e9\u5668 \u00b6 \u9009\u62e9\u6240\u6709 div \u6807\u7b7e\uff1a div { width : 200 px ; height : 200 px ; background-color : gray ; } ID\u9009\u62e9\u5668 \u00b6 \u9009\u62e9ID\u4e3a rect-1 \u7684\u6807\u7b7e\uff1a # rect-1 { width : 200 px ; height : 200 px ; background-color : gray ; } \u7c7b\u9009\u62e9\u5668 \u00b6 \u9009\u62e9\u6240\u6709 rectangle \u7c7b\u7684\u6807\u7b7e\uff1a . rectangle { width : 200 px ; height : 200 px ; background-color : gray ; } \u4f2a\u7c7b\u9009\u62e9\u5668 \u00b6 \u4f2a\u7c7b\u7528\u4e8e\u5b9a\u4e49\u5143\u7d20\u7684\u7279\u6b8a\u72b6\u6001\u3002 \u94fe\u63a5\u4f2a\u7c7b\u9009\u62e9\u5668\uff1a \u00b6 :link \uff1a\u94fe\u63a5\u8bbf\u95ee\u524d\u7684\u6837\u5f0f :visited \uff1a\u94fe\u63a5\u8bbf\u95ee\u540e\u7684\u6837\u5f0f :hover \uff1a\u9f20\u6807\u60ac\u505c\u65f6\u7684\u6837\u5f0f :active \uff1a\u9f20\u6807\u70b9\u51fb\u540e\u957f\u6309\u65f6\u7684\u6837\u5f0f :focus \uff1a\u805a\u7126\u540e\u7684\u6837\u5f0f \u4f4d\u7f6e\u4f2a\u7c7b\u9009\u62e9\u5668\uff1a \u00b6 :nth-child(n) \uff1a\u9009\u62e9\u662f\u5176\u7236\u6807\u7b7e\u7b2cn\u4e2a\u5b50\u5143\u7d20\u7684\u6240\u6709\u5143\u7d20\u3002 \u76ee\u6807\u4f2a\u7c7b\u9009\u62e9\u5668\uff1a :target \uff1a\u5f53url\u6307\u5411\u8be5\u5143\u7d20\u65f6\u751f\u6548\u3002 \u590d\u5408\u9009\u62e9\u5668 \u00b6 \u7531\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u57fa\u7840\u9009\u62e9\u5668\u7ec4\u5408\u800c\u6210\u7684\u9009\u62e9\u5668\u3002 element1, element2 \uff1a\u540c\u65f6\u9009\u62e9\u5143\u7d20 element1 \u548c\u5143\u7d20 element2 \u3002 element.class \uff1a\u9009\u5219\u5305\u542b\u67d0\u7c7b\u7684 element \u5143\u7d20\u3002 element1 + element2 \uff1a\u9009\u62e9\u7d27\u8ddf element1 \u7684 element2 \u5143\u7d20\u3002 element1 element2 \uff1a\u9009\u62e9 element1 \u5185\u7684\u6240\u6709 element2 \u5143\u7d20\u3002 element1 > element2 \uff1a\u9009\u62e9\u7236\u6807\u7b7e\u662f element1 \u7684\u6240\u6709 element2 \u5143\u7d20\u3002 \u901a\u914d\u7b26\u9009\u62e9\u5668 \u00b6 * \uff1a\u9009\u62e9\u6240\u6709\u6807\u7b7e [attribute] \uff1a\u9009\u62e9\u5177\u6709\u67d0\u4e2a\u5c5e\u6027\u7684\u6240\u6709\u6807\u7b7e [attribute=value] \uff1a\u9009\u62e9attribute\u503c\u4e3avalue\u7684\u6240\u6709\u6807\u7b7e \u4f2a\u5143\u7d20\u9009\u62e9\u5668 \u00b6 \u5c06\u7279\u5b9a\u5185\u5bb9\u5f53\u505a\u4e00\u4e2a\u5143\u7d20\uff0c\u9009\u62e9\u8fd9\u4e9b\u5143\u7d20\u7684\u9009\u62e9\u5668\u88ab\u79f0\u4e3a\u4f2a\u5143\u7d20\u9009\u62e9\u5668\u3002 ::first-letter \uff1a\u9009\u62e9\u7b2c\u4e00\u4e2a\u5b57\u6bcd ::first-line \uff1a\u9009\u62e9\u7b2c\u4e00\u884c ::selection \uff1a\u9009\u62e9\u5df2\u88ab\u9009\u4e2d\u7684\u5185\u5bb9 ::after \uff1a\u53ef\u4ee5\u5728\u5143\u7d20\u540e\u63d2\u5165\u5185\u5bb9 ::before \uff1a\u53ef\u4ee5\u5728\u5143\u7d20\u524d\u63d2\u5165\u5185\u5bb9 \u6837\u5f0f\u6e32\u67d3\u4f18\u5148\u7ea7 \u00b6 \u6743\u91cd\u5927\u5c0f\uff0c\u8d8a\u5177\u4f53\u7684\u9009\u62e9\u5668\u6743\u91cd\u8d8a\u5927\uff1a !important > \u884c\u5185\u6837\u5f0f > ID\u9009\u62e9\u5668 > \u7c7b\u4e0e\u4f2a\u7c7b\u9009\u62e9\u5668 > \u6807\u7b7e\u9009\u62e9\u5668 > \u901a\u7528\u9009\u62e9\u5668 \u6743\u91cd\u76f8\u540c\u65f6\uff0c\u540e\u9762\u7684\u6837\u5f0f\u4f1a\u8986\u76d6\u524d\u9762\u7684\u6837\u5f0f \u7ee7\u627f\u81ea\u7236\u5143\u7d20\u7684\u6743\u91cd\u6700\u4f4e \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16243/ \u6765\u6e90\uff1aAcWing","title":"\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_1","text":"\u9009\u62e9\u6240\u6709 div \u6807\u7b7e\uff1a div { width : 200 px ; height : 200 px ; background-color : gray ; }","title":"\u6807\u7b7e\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#id","text":"\u9009\u62e9ID\u4e3a rect-1 \u7684\u6807\u7b7e\uff1a # rect-1 { width : 200 px ; height : 200 px ; background-color : gray ; }","title":"ID\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_2","text":"\u9009\u62e9\u6240\u6709 rectangle \u7c7b\u7684\u6807\u7b7e\uff1a . rectangle { width : 200 px ; height : 200 px ; background-color : gray ; }","title":"\u7c7b\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_3","text":"\u4f2a\u7c7b\u7528\u4e8e\u5b9a\u4e49\u5143\u7d20\u7684\u7279\u6b8a\u72b6\u6001\u3002","title":"\u4f2a\u7c7b\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_4","text":":link \uff1a\u94fe\u63a5\u8bbf\u95ee\u524d\u7684\u6837\u5f0f :visited \uff1a\u94fe\u63a5\u8bbf\u95ee\u540e\u7684\u6837\u5f0f :hover \uff1a\u9f20\u6807\u60ac\u505c\u65f6\u7684\u6837\u5f0f :active \uff1a\u9f20\u6807\u70b9\u51fb\u540e\u957f\u6309\u65f6\u7684\u6837\u5f0f :focus \uff1a\u805a\u7126\u540e\u7684\u6837\u5f0f","title":"\u94fe\u63a5\u4f2a\u7c7b\u9009\u62e9\u5668\uff1a"},{"location":"Web/CSS/CSS2/#_5","text":":nth-child(n) \uff1a\u9009\u62e9\u662f\u5176\u7236\u6807\u7b7e\u7b2cn\u4e2a\u5b50\u5143\u7d20\u7684\u6240\u6709\u5143\u7d20\u3002 \u76ee\u6807\u4f2a\u7c7b\u9009\u62e9\u5668\uff1a :target \uff1a\u5f53url\u6307\u5411\u8be5\u5143\u7d20\u65f6\u751f\u6548\u3002","title":"\u4f4d\u7f6e\u4f2a\u7c7b\u9009\u62e9\u5668\uff1a"},{"location":"Web/CSS/CSS2/#_6","text":"\u7531\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u57fa\u7840\u9009\u62e9\u5668\u7ec4\u5408\u800c\u6210\u7684\u9009\u62e9\u5668\u3002 element1, element2 \uff1a\u540c\u65f6\u9009\u62e9\u5143\u7d20 element1 \u548c\u5143\u7d20 element2 \u3002 element.class \uff1a\u9009\u5219\u5305\u542b\u67d0\u7c7b\u7684 element \u5143\u7d20\u3002 element1 + element2 \uff1a\u9009\u62e9\u7d27\u8ddf element1 \u7684 element2 \u5143\u7d20\u3002 element1 element2 \uff1a\u9009\u62e9 element1 \u5185\u7684\u6240\u6709 element2 \u5143\u7d20\u3002 element1 > element2 \uff1a\u9009\u62e9\u7236\u6807\u7b7e\u662f element1 \u7684\u6240\u6709 element2 \u5143\u7d20\u3002","title":"\u590d\u5408\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_7","text":"* \uff1a\u9009\u62e9\u6240\u6709\u6807\u7b7e [attribute] \uff1a\u9009\u62e9\u5177\u6709\u67d0\u4e2a\u5c5e\u6027\u7684\u6240\u6709\u6807\u7b7e [attribute=value] \uff1a\u9009\u62e9attribute\u503c\u4e3avalue\u7684\u6240\u6709\u6807\u7b7e","title":"\u901a\u914d\u7b26\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_8","text":"\u5c06\u7279\u5b9a\u5185\u5bb9\u5f53\u505a\u4e00\u4e2a\u5143\u7d20\uff0c\u9009\u62e9\u8fd9\u4e9b\u5143\u7d20\u7684\u9009\u62e9\u5668\u88ab\u79f0\u4e3a\u4f2a\u5143\u7d20\u9009\u62e9\u5668\u3002 ::first-letter \uff1a\u9009\u62e9\u7b2c\u4e00\u4e2a\u5b57\u6bcd ::first-line \uff1a\u9009\u62e9\u7b2c\u4e00\u884c ::selection \uff1a\u9009\u62e9\u5df2\u88ab\u9009\u4e2d\u7684\u5185\u5bb9 ::after \uff1a\u53ef\u4ee5\u5728\u5143\u7d20\u540e\u63d2\u5165\u5185\u5bb9 ::before \uff1a\u53ef\u4ee5\u5728\u5143\u7d20\u524d\u63d2\u5165\u5185\u5bb9","title":"\u4f2a\u5143\u7d20\u9009\u62e9\u5668"},{"location":"Web/CSS/CSS2/#_9","text":"\u6743\u91cd\u5927\u5c0f\uff0c\u8d8a\u5177\u4f53\u7684\u9009\u62e9\u5668\u6743\u91cd\u8d8a\u5927\uff1a !important > \u884c\u5185\u6837\u5f0f > ID\u9009\u62e9\u5668 > \u7c7b\u4e0e\u4f2a\u7c7b\u9009\u62e9\u5668 > \u6807\u7b7e\u9009\u62e9\u5668 > \u901a\u7528\u9009\u62e9\u5668 \u6743\u91cd\u76f8\u540c\u65f6\uff0c\u540e\u9762\u7684\u6837\u5f0f\u4f1a\u8986\u76d6\u524d\u9762\u7684\u6837\u5f0f \u7ee7\u627f\u81ea\u7236\u5143\u7d20\u7684\u6743\u91cd\u6700\u4f4e","title":"\u6837\u5f0f\u6e32\u67d3\u4f18\u5148\u7ea7"},{"location":"Web/CSS/CSS2/#_10","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16243/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS3/","text":"\u9884\u5b9a\u4e49\u7684\u989c\u8272\u503c \u00b6 black\u3001white\u3001red\u3001green\u3001blue\u3001lightblue\u7b49\u3002 16\u8fdb\u5236\u8868\u793a\u6cd5 \u00b6 \u4f7f\u75286\u4f4d16\u8fdb\u5236\u6570\u8868\u793a\u989c\u8272\uff0c\u4f8b\u5982\uff1a #ADD8E6 \u3002 \u5176\u4e2d\u7b2c1-2\u4f4d\u8868\u793a\u7ea2\u8272\uff0c\u7b2c3-4\u4f4d\u8868\u793a\u7eff\u8272\uff0c\u7b2c5-6\u4f4d\u8868\u793a\u84dd\u8272\u3002 \u7b80\u5199\u65b9\u5f0f\uff1a #ABC \uff0c\u7b49\u4ef7\u4e8e #AABBCC \u3002 RGB\u8868\u793a\u6cd5 \u00b6 rgb(173, 216, 230) \u3002 \u5176\u4e2d\u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u7ea2\u8272\uff0c\u7b2c\u4e8c\u4e2a\u6570\u8868\u793a\u7eff\u8272\uff0c\u7b2c\u4e09\u4e2a\u6570\u8868\u793a\u84dd\u8272\u3002 RGBA\u8868\u793a\u6cd5 \u00b6 rgba(173, 216, 230, 0.5) \u3002 \u524d\u4e09\u4e2a\u6570\u540c\u4e0a\uff0c\u7b2c\u56db\u4e2a\u6570\u8868\u793a\u900f\u660e\u5ea6\u3002 \u53d6\u8272\u65b9\u5f0f \u00b6 \u7f51\u9875\u91cc\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u5728chrome\u7684\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u83b7\u53d6 \u5176\u4ed6\u989c\u8272\u53ef\u4ee5\u4f7f\u7528QQ\u7684\u622a\u56fe\u8f6f\u4ef6\uff1a \u76f4\u63a5\u6309c\u952e\uff0c\u53ef\u4ee5\u590d\u5236rgb\u989c\u8272\u503c \u6309\u4f4fshift\u518d\u6309c\u952e\uff0c\u53ef\u4ee5\u590d\u523616\u8fdb\u5236\u989c\u8272\u503c \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16274/ \u6765\u6e90\uff1aAcWing","title":"\u989c\u8272"},{"location":"Web/CSS/CSS3/#_1","text":"black\u3001white\u3001red\u3001green\u3001blue\u3001lightblue\u7b49\u3002","title":"\u9884\u5b9a\u4e49\u7684\u989c\u8272\u503c"},{"location":"Web/CSS/CSS3/#16","text":"\u4f7f\u75286\u4f4d16\u8fdb\u5236\u6570\u8868\u793a\u989c\u8272\uff0c\u4f8b\u5982\uff1a #ADD8E6 \u3002 \u5176\u4e2d\u7b2c1-2\u4f4d\u8868\u793a\u7ea2\u8272\uff0c\u7b2c3-4\u4f4d\u8868\u793a\u7eff\u8272\uff0c\u7b2c5-6\u4f4d\u8868\u793a\u84dd\u8272\u3002 \u7b80\u5199\u65b9\u5f0f\uff1a #ABC \uff0c\u7b49\u4ef7\u4e8e #AABBCC \u3002","title":"16\u8fdb\u5236\u8868\u793a\u6cd5"},{"location":"Web/CSS/CSS3/#rgb","text":"rgb(173, 216, 230) \u3002 \u5176\u4e2d\u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u7ea2\u8272\uff0c\u7b2c\u4e8c\u4e2a\u6570\u8868\u793a\u7eff\u8272\uff0c\u7b2c\u4e09\u4e2a\u6570\u8868\u793a\u84dd\u8272\u3002","title":"RGB\u8868\u793a\u6cd5"},{"location":"Web/CSS/CSS3/#rgba","text":"rgba(173, 216, 230, 0.5) \u3002 \u524d\u4e09\u4e2a\u6570\u540c\u4e0a\uff0c\u7b2c\u56db\u4e2a\u6570\u8868\u793a\u900f\u660e\u5ea6\u3002","title":"RGBA\u8868\u793a\u6cd5"},{"location":"Web/CSS/CSS3/#_2","text":"\u7f51\u9875\u91cc\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u5728chrome\u7684\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u83b7\u53d6 \u5176\u4ed6\u989c\u8272\u53ef\u4ee5\u4f7f\u7528QQ\u7684\u622a\u56fe\u8f6f\u4ef6\uff1a \u76f4\u63a5\u6309c\u952e\uff0c\u53ef\u4ee5\u590d\u5236rgb\u989c\u8272\u503c \u6309\u4f4fshift\u518d\u6309c\u952e\uff0c\u53ef\u4ee5\u590d\u523616\u8fdb\u5236\u989c\u8272\u503c","title":"\u53d6\u8272\u65b9\u5f0f"},{"location":"Web/CSS/CSS3/#_3","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16274/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS4/","text":"text-align \u00b6 text-align CSS\u5c5e\u6027\u5b9a\u4e49\u884c\u5185\u5185\u5bb9\uff08\u4f8b\u5982\u6587\u5b57\uff09\u5982\u4f55\u76f8\u5bf9\u5b83\u7684\u5757\u7236\u5143\u7d20\u5bf9\u9f50\u3002 text-align \u5e76\u4e0d\u63a7\u5236\u5757\u5143\u7d20\u81ea\u5df1\u7684\u5bf9\u9f50\uff0c\u53ea\u63a7\u5236\u5b83\u7684\u884c\u5185\u5185\u5bb9\u7684\u5bf9\u9f50\u3002 line-height \u00b6 line-height CSS \u5c5e\u6027\u7528\u4e8e\u8bbe\u7f6e\u591a\u884c\u5143\u7d20\u7684\u7a7a\u95f4\u91cf\uff0c\u5982\u591a\u884c\u6587\u672c\u7684\u95f4\u8ddd\u3002\u5bf9\u4e8e\u5757\u7ea7\u5143\u7d20\uff0c\u5b83\u6307\u5b9a\u5143\u7d20\u884c\u76d2\uff08line boxes\uff09\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002\u5bf9\u4e8e\u975e\u66ff\u4ee3\u7684 inline \u5143\u7d20\uff0c\u5b83\u7528\u4e8e\u8ba1\u7b97\u884c\u76d2\uff08line box\uff09\u7684\u9ad8\u5ea6\u3002 \u8865\u5145\u77e5\u8bc6\u70b9\uff1a\u957f\u5ea6\u5355\u4f4d \u5355\u4f4d \u63cf\u8ff0 px \u8bbe\u5907\u4e0a\u7684\u50cf\u7d20\u70b9 % \u76f8\u5bf9\u4e8e\u7236\u5143\u7d20\u7684\u767e\u5206\u6bd4 em \u76f8\u5bf9\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u5b57\u4f53\u5927\u5c0f rem \u76f8\u5bf9\u4e8e\u6839\u5143\u7d20\u7684\u5b57\u4f53\u5927\u5c0f vw \u76f8\u5bf9\u4e8e\u89c6\u7a97\u5bbd\u5ea6\u7684\u767e\u5206\u6bd4 vh \u76f8\u5bf9\u4e8e\u89c6\u7a97\u9ad8\u5ea6\u7684\u767e\u5206\u6bd4 letter-spacing \u00b6 CSS \u7684 letter-spacing \u5c5e\u6027\u7528\u4e8e\u8bbe\u7f6e\u6587\u672c\u5b57\u7b26\u7684\u95f4\u8ddd\u3002 text-indent \u00b6 text-indent \u5c5e\u6027\u80fd\u5b9a\u4e49\u4e00\u4e2a\u5757\u5143\u7d20\u9996\u884c\u6587\u672c\u5185\u5bb9\u4e4b\u524d\u7684\u7f29\u8fdb\u91cf\u3002 text-decoration \u00b6 text-decoration \u8fd9\u4e2a CSS \u5c5e\u6027\u662f\u7528\u4e8e\u8bbe\u7f6e\u6587\u672c\u7684\u4fee\u9970\u7ebf\u5916\u89c2\u7684\uff08\u4e0b\u5212\u7ebf\u3001\u4e0a\u5212\u7ebf\u3001\u8d2f\u7a7f\u7ebf/\u5220\u9664\u7ebf \u6216 \u95ea\u70c1\uff09\u5b83\u662f text-decoration-line , text-decoration-color , text-decoration-style , \u548c\u65b0\u51fa\u73b0\u7684 text-decoration-thickness \u5c5e\u6027\u7684\u7f29\u5199\u3002 text-shadow \u00b6 text-shadow \u4e3a\u6587\u5b57\u6dfb\u52a0\u9634\u5f71\u3002\u53ef\u4ee5\u4e3a\u6587\u5b57\u4e0e text-decorations \u6dfb\u52a0\u591a\u4e2a\u9634\u5f71\uff0c\u9634\u5f71\u503c\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\u3002\u6bcf\u4e2a\u9634\u5f71\u503c\u7531\u5143\u7d20\u5728X\u548cY\u65b9\u5411\u7684\u504f\u79fb\u91cf\u3001\u6a21\u7cca\u534a\u5f84\u548c\u989c\u8272\u503c\u7ec4\u6210\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16275/ \u6765\u6e90\uff1aAcWing","title":"\u6587\u672c"},{"location":"Web/CSS/CSS4/#text-align","text":"text-align CSS\u5c5e\u6027\u5b9a\u4e49\u884c\u5185\u5185\u5bb9\uff08\u4f8b\u5982\u6587\u5b57\uff09\u5982\u4f55\u76f8\u5bf9\u5b83\u7684\u5757\u7236\u5143\u7d20\u5bf9\u9f50\u3002 text-align \u5e76\u4e0d\u63a7\u5236\u5757\u5143\u7d20\u81ea\u5df1\u7684\u5bf9\u9f50\uff0c\u53ea\u63a7\u5236\u5b83\u7684\u884c\u5185\u5185\u5bb9\u7684\u5bf9\u9f50\u3002","title":"text-align"},{"location":"Web/CSS/CSS4/#line-height","text":"line-height CSS \u5c5e\u6027\u7528\u4e8e\u8bbe\u7f6e\u591a\u884c\u5143\u7d20\u7684\u7a7a\u95f4\u91cf\uff0c\u5982\u591a\u884c\u6587\u672c\u7684\u95f4\u8ddd\u3002\u5bf9\u4e8e\u5757\u7ea7\u5143\u7d20\uff0c\u5b83\u6307\u5b9a\u5143\u7d20\u884c\u76d2\uff08line boxes\uff09\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002\u5bf9\u4e8e\u975e\u66ff\u4ee3\u7684 inline \u5143\u7d20\uff0c\u5b83\u7528\u4e8e\u8ba1\u7b97\u884c\u76d2\uff08line box\uff09\u7684\u9ad8\u5ea6\u3002 \u8865\u5145\u77e5\u8bc6\u70b9\uff1a\u957f\u5ea6\u5355\u4f4d \u5355\u4f4d \u63cf\u8ff0 px \u8bbe\u5907\u4e0a\u7684\u50cf\u7d20\u70b9 % \u76f8\u5bf9\u4e8e\u7236\u5143\u7d20\u7684\u767e\u5206\u6bd4 em \u76f8\u5bf9\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u5b57\u4f53\u5927\u5c0f rem \u76f8\u5bf9\u4e8e\u6839\u5143\u7d20\u7684\u5b57\u4f53\u5927\u5c0f vw \u76f8\u5bf9\u4e8e\u89c6\u7a97\u5bbd\u5ea6\u7684\u767e\u5206\u6bd4 vh \u76f8\u5bf9\u4e8e\u89c6\u7a97\u9ad8\u5ea6\u7684\u767e\u5206\u6bd4","title":"line-height"},{"location":"Web/CSS/CSS4/#letter-spacing","text":"CSS \u7684 letter-spacing \u5c5e\u6027\u7528\u4e8e\u8bbe\u7f6e\u6587\u672c\u5b57\u7b26\u7684\u95f4\u8ddd\u3002","title":"letter-spacing"},{"location":"Web/CSS/CSS4/#text-indent","text":"text-indent \u5c5e\u6027\u80fd\u5b9a\u4e49\u4e00\u4e2a\u5757\u5143\u7d20\u9996\u884c\u6587\u672c\u5185\u5bb9\u4e4b\u524d\u7684\u7f29\u8fdb\u91cf\u3002","title":"text-indent"},{"location":"Web/CSS/CSS4/#text-decoration","text":"text-decoration \u8fd9\u4e2a CSS \u5c5e\u6027\u662f\u7528\u4e8e\u8bbe\u7f6e\u6587\u672c\u7684\u4fee\u9970\u7ebf\u5916\u89c2\u7684\uff08\u4e0b\u5212\u7ebf\u3001\u4e0a\u5212\u7ebf\u3001\u8d2f\u7a7f\u7ebf/\u5220\u9664\u7ebf \u6216 \u95ea\u70c1\uff09\u5b83\u662f text-decoration-line , text-decoration-color , text-decoration-style , \u548c\u65b0\u51fa\u73b0\u7684 text-decoration-thickness \u5c5e\u6027\u7684\u7f29\u5199\u3002","title":"text-decoration"},{"location":"Web/CSS/CSS4/#text-shadow","text":"text-shadow \u4e3a\u6587\u5b57\u6dfb\u52a0\u9634\u5f71\u3002\u53ef\u4ee5\u4e3a\u6587\u5b57\u4e0e text-decorations \u6dfb\u52a0\u591a\u4e2a\u9634\u5f71\uff0c\u9634\u5f71\u503c\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\u3002\u6bcf\u4e2a\u9634\u5f71\u503c\u7531\u5143\u7d20\u5728X\u548cY\u65b9\u5411\u7684\u504f\u79fb\u91cf\u3001\u6a21\u7cca\u534a\u5f84\u548c\u989c\u8272\u503c\u7ec4\u6210\u3002","title":"text-shadow"},{"location":"Web/CSS/CSS4/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16275/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS5/","text":"font-size \u00b6 font-size CSS \u5c5e\u6027\u6307\u5b9a\u5b57\u4f53\u7684\u5927\u5c0f\u3002\u56e0\u4e3a\u8be5\u5c5e\u6027\u7684\u503c\u4f1a\u88ab\u7528\u4e8e\u8ba1\u7b97em\u548cex\u957f\u5ea6\u5355\u4f4d\uff0c\u5b9a\u4e49\u8be5\u503c\u53ef\u80fd\u6539\u53d8\u5176\u4ed6\u5143\u7d20\u7684\u5927\u5c0f\u3002 font-style \u00b6 font-style CSS \u5c5e\u6027\u5141\u8bb8\u4f60\u9009\u62e9 font-family \u5b57\u4f53\u4e0b\u7684 italic \u6216 oblique \u6837\u5f0f\u3002 font-weight \u00b6 font-weight CSS \u5c5e\u6027\u6307\u5b9a\u4e86\u5b57\u4f53\u7684\u7c97\u7ec6\u7a0b\u5ea6\u3002 \u4e00\u4e9b\u5b57\u4f53\u53ea\u63d0\u4f9b normal \u548c bold \u4e24\u79cd\u503c\u3002 font-family \u00b6 CSS \u5c5e\u6027 font-family \u5141\u8bb8\u60a8\u901a\u8fc7\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5148\u540e\u987a\u5e8f\u7684\uff0c\u7531\u5b57\u4f53\u540d\u6216\u8005\u5b57\u4f53\u65cf\u540d\u7ec4\u6210\u7684\u5217\u8868\u6765\u4e3a\u9009\u5b9a\u7684\u5143\u7d20\u8bbe\u7f6e\u5b57\u4f53\u3002 \u5c5e\u6027\u503c\u7528\u9017\u53f7\u9694\u5f00\u3002\u6d4f\u89c8\u5668\u4f1a\u9009\u62e9\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u8be5\u8ba1\u7b97\u673a\u4e0a\u6709\u5b89\u88c5\u7684\u5b57\u4f53\uff0c\u6216\u8005\u662f\u901a\u8fc7 @font-face \u6307\u5b9a\u7684\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u7684\u5b57\u4f53\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16276/ \u6765\u6e90\uff1aAcWing","title":"\u5b57\u4f53"},{"location":"Web/CSS/CSS5/#font-size","text":"font-size CSS \u5c5e\u6027\u6307\u5b9a\u5b57\u4f53\u7684\u5927\u5c0f\u3002\u56e0\u4e3a\u8be5\u5c5e\u6027\u7684\u503c\u4f1a\u88ab\u7528\u4e8e\u8ba1\u7b97em\u548cex\u957f\u5ea6\u5355\u4f4d\uff0c\u5b9a\u4e49\u8be5\u503c\u53ef\u80fd\u6539\u53d8\u5176\u4ed6\u5143\u7d20\u7684\u5927\u5c0f\u3002","title":"font-size"},{"location":"Web/CSS/CSS5/#font-style","text":"font-style CSS \u5c5e\u6027\u5141\u8bb8\u4f60\u9009\u62e9 font-family \u5b57\u4f53\u4e0b\u7684 italic \u6216 oblique \u6837\u5f0f\u3002","title":"font-style"},{"location":"Web/CSS/CSS5/#font-weight","text":"font-weight CSS \u5c5e\u6027\u6307\u5b9a\u4e86\u5b57\u4f53\u7684\u7c97\u7ec6\u7a0b\u5ea6\u3002 \u4e00\u4e9b\u5b57\u4f53\u53ea\u63d0\u4f9b normal \u548c bold \u4e24\u79cd\u503c\u3002","title":"font-weight"},{"location":"Web/CSS/CSS5/#font-family","text":"CSS \u5c5e\u6027 font-family \u5141\u8bb8\u60a8\u901a\u8fc7\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5148\u540e\u987a\u5e8f\u7684\uff0c\u7531\u5b57\u4f53\u540d\u6216\u8005\u5b57\u4f53\u65cf\u540d\u7ec4\u6210\u7684\u5217\u8868\u6765\u4e3a\u9009\u5b9a\u7684\u5143\u7d20\u8bbe\u7f6e\u5b57\u4f53\u3002 \u5c5e\u6027\u503c\u7528\u9017\u53f7\u9694\u5f00\u3002\u6d4f\u89c8\u5668\u4f1a\u9009\u62e9\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2a\u8be5\u8ba1\u7b97\u673a\u4e0a\u6709\u5b89\u88c5\u7684\u5b57\u4f53\uff0c\u6216\u8005\u662f\u901a\u8fc7 @font-face \u6307\u5b9a\u7684\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u7684\u5b57\u4f53\u3002","title":"font-family"},{"location":"Web/CSS/CSS5/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16276/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS6/","text":"background-color \u00b6 CSS\u5c5e\u6027\u4e2d\u7684 background-color \u4f1a\u8bbe\u7f6e\u5143\u7d20\u7684\u80cc\u666f\u8272, \u5c5e\u6027\u7684\u503c\u4e3a\u989c\u8272\u503c\u6216\u5173\u952e\u5b57\u201dtransparent\u201d\u4e8c\u8005\u9009\u5176\u4e00\u3002 background-image \u00b6 CSS background-image \u5c5e\u6027\u7528\u4e8e\u4e3a\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u80cc\u666f\u56fe\u50cf\u3002 \u6e10\u53d8\u8272\uff1a linear-gradient(rgba(0, 0, 255, 0.5), rgba(255, 255, 0, 0.5)) background-size \u00b6 background-size \u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\u5927\u5c0f\u3002\u56fe\u7247\u53ef\u4ee5\u4fdd\u6709\u5176\u539f\u6709\u7684\u5c3a\u5bf8\uff0c\u6216\u8005\u62c9\u4f38\u5230\u65b0\u7684\u5c3a\u5bf8\uff0c\u6216\u8005\u5728\u4fdd\u6301\u5176\u539f\u6709\u6bd4\u4f8b\u7684\u540c\u65f6\u7f29\u653e\u5230\u5143\u7d20\u7684\u53ef\u7528\u7a7a\u95f4\u7684\u5c3a\u5bf8\u3002 background-repeat \u00b6 background-repeat CSS \u5c5e\u6027\u5b9a\u4e49\u80cc\u666f\u56fe\u50cf\u7684\u91cd\u590d\u65b9\u5f0f\u3002\u80cc\u666f\u56fe\u50cf\u53ef\u4ee5\u6cbf\u7740\u6c34\u5e73\u8f74\uff0c\u5782\u76f4\u8f74\uff0c\u4e24\u4e2a\u8f74\u91cd\u590d\uff0c\u6216\u8005\u6839\u672c\u4e0d\u91cd\u590d\u3002 background-position \u00b6 background-position \u4e3a\u80cc\u666f\u56fe\u7247\u8bbe\u7f6e\u521d\u59cb\u4f4d\u7f6e\u3002 background-attachment \u00b6 background-attachment CSS \u5c5e\u6027\u51b3\u5b9a\u80cc\u666f\u56fe\u50cf\u7684\u4f4d\u7f6e\u662f\u5728\u89c6\u53e3\u5185\u56fa\u5b9a\uff0c\u6216\u8005\u968f\u7740\u5305\u542b\u5b83\u7684\u533a\u5757\u6eda\u52a8\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16277/ \u6765\u6e90\uff1aAcWing","title":"\u80cc\u666f"},{"location":"Web/CSS/CSS6/#background-color","text":"CSS\u5c5e\u6027\u4e2d\u7684 background-color \u4f1a\u8bbe\u7f6e\u5143\u7d20\u7684\u80cc\u666f\u8272, \u5c5e\u6027\u7684\u503c\u4e3a\u989c\u8272\u503c\u6216\u5173\u952e\u5b57\u201dtransparent\u201d\u4e8c\u8005\u9009\u5176\u4e00\u3002","title":"background-color"},{"location":"Web/CSS/CSS6/#background-image","text":"CSS background-image \u5c5e\u6027\u7528\u4e8e\u4e3a\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u80cc\u666f\u56fe\u50cf\u3002 \u6e10\u53d8\u8272\uff1a linear-gradient(rgba(0, 0, 255, 0.5), rgba(255, 255, 0, 0.5))","title":"background-image"},{"location":"Web/CSS/CSS6/#background-size","text":"background-size \u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\u5927\u5c0f\u3002\u56fe\u7247\u53ef\u4ee5\u4fdd\u6709\u5176\u539f\u6709\u7684\u5c3a\u5bf8\uff0c\u6216\u8005\u62c9\u4f38\u5230\u65b0\u7684\u5c3a\u5bf8\uff0c\u6216\u8005\u5728\u4fdd\u6301\u5176\u539f\u6709\u6bd4\u4f8b\u7684\u540c\u65f6\u7f29\u653e\u5230\u5143\u7d20\u7684\u53ef\u7528\u7a7a\u95f4\u7684\u5c3a\u5bf8\u3002","title":"background-size"},{"location":"Web/CSS/CSS6/#background-repeat","text":"background-repeat CSS \u5c5e\u6027\u5b9a\u4e49\u80cc\u666f\u56fe\u50cf\u7684\u91cd\u590d\u65b9\u5f0f\u3002\u80cc\u666f\u56fe\u50cf\u53ef\u4ee5\u6cbf\u7740\u6c34\u5e73\u8f74\uff0c\u5782\u76f4\u8f74\uff0c\u4e24\u4e2a\u8f74\u91cd\u590d\uff0c\u6216\u8005\u6839\u672c\u4e0d\u91cd\u590d\u3002","title":"background-repeat"},{"location":"Web/CSS/CSS6/#background-position","text":"background-position \u4e3a\u80cc\u666f\u56fe\u7247\u8bbe\u7f6e\u521d\u59cb\u4f4d\u7f6e\u3002","title":"background-position"},{"location":"Web/CSS/CSS6/#background-attachment","text":"background-attachment CSS \u5c5e\u6027\u51b3\u5b9a\u80cc\u666f\u56fe\u50cf\u7684\u4f4d\u7f6e\u662f\u5728\u89c6\u53e3\u5185\u56fa\u5b9a\uff0c\u6216\u8005\u968f\u7740\u5305\u542b\u5b83\u7684\u533a\u5757\u6eda\u52a8\u3002","title":"background-attachment"},{"location":"Web/CSS/CSS6/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16277/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS7/","text":"border-style \u00b6 border-style \u662f\u4e00\u4e2a CSS \u7b80\u5199\u5c5e\u6027\uff0c\u7528\u6765\u8bbe\u5b9a\u5143\u7d20\u6240\u6709\u8fb9\u6846\u7684\u6837\u5f0f\u3002 border-width \u00b6 border-width \u5c5e\u6027\u53ef\u4ee5\u8bbe\u7f6e\u76d2\u5b50\u6a21\u578b\u7684\u8fb9\u6846\u5bbd\u5ea6\u3002 border-color \u00b6 CSS\u5c5e\u6027 border-color \u662f\u4e00\u4e2a\u7528\u4e8e\u8bbe\u7f6e\u5143\u7d20\u56db\u4e2a\u8fb9\u6846\u989c\u8272\u7684\u5feb\u6377\u5c5e\u6027\uff1a border-top-color , border-right-color , border-bottom-color , border-left-color border-radius \u00b6 CSS \u5c5e\u6027 border-radius \u5141\u8bb8\u4f60\u8bbe\u7f6e\u5143\u7d20\u7684\u5916\u8fb9\u6846\u5706\u89d2\u3002\u5f53\u4f7f\u7528\u4e00\u4e2a\u534a\u5f84\u65f6\u786e\u5b9a\u4e00\u4e2a\u5706\u5f62\uff0c\u5f53\u4f7f\u7528\u4e24\u4e2a\u534a\u5f84\u65f6\u786e\u5b9a\u4e00\u4e2a\u692d\u5706\u3002\u8fd9\u4e2a(\u692d)\u5706\u4e0e\u8fb9\u6846\u7684\u4ea4\u96c6\u5f62\u6210\u5706\u89d2\u6548\u679c\u3002 border-collapse \u00b6 border-collapse CSS \u5c5e\u6027\u662f\u7528\u6765\u51b3\u5b9a\u8868\u683c\u7684\u8fb9\u6846\u662f\u5206\u5f00\u7684\u8fd8\u662f\u5408\u5e76\u7684\u3002\u5728\u5206\u9694\u6a21\u5f0f\u4e0b\uff0c\u76f8\u90bb\u7684\u5355\u5143\u683c\u90fd\u62e5\u6709\u72ec\u7acb\u7684\u8fb9\u6846\u3002\u5728\u5408\u5e76\u6a21\u5f0f\u4e0b\uff0c\u76f8\u90bb\u5355\u5143\u683c\u5171\u4eab\u8fb9\u6846\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16278/ \u6765\u6e90\uff1aAcWing","title":"\u8fb9\u6846"},{"location":"Web/CSS/CSS7/#border-style","text":"border-style \u662f\u4e00\u4e2a CSS \u7b80\u5199\u5c5e\u6027\uff0c\u7528\u6765\u8bbe\u5b9a\u5143\u7d20\u6240\u6709\u8fb9\u6846\u7684\u6837\u5f0f\u3002","title":"border-style"},{"location":"Web/CSS/CSS7/#border-width","text":"border-width \u5c5e\u6027\u53ef\u4ee5\u8bbe\u7f6e\u76d2\u5b50\u6a21\u578b\u7684\u8fb9\u6846\u5bbd\u5ea6\u3002","title":"border-width"},{"location":"Web/CSS/CSS7/#border-color","text":"CSS\u5c5e\u6027 border-color \u662f\u4e00\u4e2a\u7528\u4e8e\u8bbe\u7f6e\u5143\u7d20\u56db\u4e2a\u8fb9\u6846\u989c\u8272\u7684\u5feb\u6377\u5c5e\u6027\uff1a border-top-color , border-right-color , border-bottom-color , border-left-color","title":"border-color"},{"location":"Web/CSS/CSS7/#border-radius","text":"CSS \u5c5e\u6027 border-radius \u5141\u8bb8\u4f60\u8bbe\u7f6e\u5143\u7d20\u7684\u5916\u8fb9\u6846\u5706\u89d2\u3002\u5f53\u4f7f\u7528\u4e00\u4e2a\u534a\u5f84\u65f6\u786e\u5b9a\u4e00\u4e2a\u5706\u5f62\uff0c\u5f53\u4f7f\u7528\u4e24\u4e2a\u534a\u5f84\u65f6\u786e\u5b9a\u4e00\u4e2a\u692d\u5706\u3002\u8fd9\u4e2a(\u692d)\u5706\u4e0e\u8fb9\u6846\u7684\u4ea4\u96c6\u5f62\u6210\u5706\u89d2\u6548\u679c\u3002","title":"border-radius"},{"location":"Web/CSS/CSS7/#border-collapse","text":"border-collapse CSS \u5c5e\u6027\u662f\u7528\u6765\u51b3\u5b9a\u8868\u683c\u7684\u8fb9\u6846\u662f\u5206\u5f00\u7684\u8fd8\u662f\u5408\u5e76\u7684\u3002\u5728\u5206\u9694\u6a21\u5f0f\u4e0b\uff0c\u76f8\u90bb\u7684\u5355\u5143\u683c\u90fd\u62e5\u6709\u72ec\u7acb\u7684\u8fb9\u6846\u3002\u5728\u5408\u5e76\u6a21\u5f0f\u4e0b\uff0c\u76f8\u90bb\u5355\u5143\u683c\u5171\u4eab\u8fb9\u6846\u3002","title":"border-collapse"},{"location":"Web/CSS/CSS7/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16278/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS8/","text":"display \u00b6 block\uff1a \u72ec\u5360\u4e00\u884c width\u3001height\u3001margin\u3001padding\u5747\u53ef\u63a7\u5236 width\u9ed8\u8ba4100%\u3002 inline\uff1a \u53ef\u4ee5\u5171\u5360\u4e00\u884c width\u4e0eheight\u65e0\u6548\uff0c\u6c34\u5e73\u65b9\u5411\u7684margin\u4e0epadding\u6709\u6548\uff0c\u7ad6\u76f4\u65b9\u5411\u7684margin\u4e0epadding\u65e0\u6548 width\u9ed8\u8ba4\u4e3a\u672c\u8eab\u5185\u5bb9\u5bbd\u5ea6 inline-block\uff1a \u53ef\u4ee5\u5171\u5360\u4e00\u884c width\u3001height\u3001margin\u3001padding\u5747\u53ef\u63a7\u5236 width\u9ed8\u8ba4\u4e3a\u672c\u8eab\u5185\u5bb9\u5bbd\u5ea6 white-space \u00b6 white-space CSS \u5c5e\u6027\u662f\u7528\u6765\u8bbe\u7f6e\u5982\u4f55\u5904\u7406\u5143\u7d20\u4e2d\u7684 \u7a7a\u767d (en-US)\u3002 text-overflow \u00b6 text-overflow CSS \u5c5e\u6027\u786e\u5b9a\u5982\u4f55\u5411\u7528\u6237\u53d1\u51fa\u672a\u663e\u793a\u7684\u6ea2\u51fa\u5185\u5bb9\u4fe1\u53f7\u3002\u5b83\u53ef\u4ee5\u88ab\u526a\u5207\uff0c\u663e\u793a\u4e00\u4e2a\u7701\u7565\u53f7\u6216\u663e\u793a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u3002 overflow \u00b6 CSS\u5c5e\u6027 overflow \u5b9a\u4e49\u5f53\u4e00\u4e2a\u5143\u7d20\u7684\u5185\u5bb9\u592a\u5927\u800c\u65e0\u6cd5\u9002\u5e94 \u5757\u7ea7\u683c\u5f0f\u5316\u4e0a\u4e0b\u6587 \u65f6\u5019\u8be5\u505a\u4ec0\u4e48\u3002\u5b83\u662f overflow-x \u548c overflow-y \u7684 \u7b80\u5199\u5c5e\u6027 \u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16279/ \u6765\u6e90\uff1aAcWing","title":"\u5143\u7d20\u5c55\u793a\u683c\u5f0f"},{"location":"Web/CSS/CSS8/#display","text":"block\uff1a \u72ec\u5360\u4e00\u884c width\u3001height\u3001margin\u3001padding\u5747\u53ef\u63a7\u5236 width\u9ed8\u8ba4100%\u3002 inline\uff1a \u53ef\u4ee5\u5171\u5360\u4e00\u884c width\u4e0eheight\u65e0\u6548\uff0c\u6c34\u5e73\u65b9\u5411\u7684margin\u4e0epadding\u6709\u6548\uff0c\u7ad6\u76f4\u65b9\u5411\u7684margin\u4e0epadding\u65e0\u6548 width\u9ed8\u8ba4\u4e3a\u672c\u8eab\u5185\u5bb9\u5bbd\u5ea6 inline-block\uff1a \u53ef\u4ee5\u5171\u5360\u4e00\u884c width\u3001height\u3001margin\u3001padding\u5747\u53ef\u63a7\u5236 width\u9ed8\u8ba4\u4e3a\u672c\u8eab\u5185\u5bb9\u5bbd\u5ea6","title":"display"},{"location":"Web/CSS/CSS8/#white-space","text":"white-space CSS \u5c5e\u6027\u662f\u7528\u6765\u8bbe\u7f6e\u5982\u4f55\u5904\u7406\u5143\u7d20\u4e2d\u7684 \u7a7a\u767d (en-US)\u3002","title":"white-space"},{"location":"Web/CSS/CSS8/#text-overflow","text":"text-overflow CSS \u5c5e\u6027\u786e\u5b9a\u5982\u4f55\u5411\u7528\u6237\u53d1\u51fa\u672a\u663e\u793a\u7684\u6ea2\u51fa\u5185\u5bb9\u4fe1\u53f7\u3002\u5b83\u53ef\u4ee5\u88ab\u526a\u5207\uff0c\u663e\u793a\u4e00\u4e2a\u7701\u7565\u53f7\u6216\u663e\u793a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u3002","title":"text-overflow"},{"location":"Web/CSS/CSS8/#overflow","text":"CSS\u5c5e\u6027 overflow \u5b9a\u4e49\u5f53\u4e00\u4e2a\u5143\u7d20\u7684\u5185\u5bb9\u592a\u5927\u800c\u65e0\u6cd5\u9002\u5e94 \u5757\u7ea7\u683c\u5f0f\u5316\u4e0a\u4e0b\u6587 \u65f6\u5019\u8be5\u505a\u4ec0\u4e48\u3002\u5b83\u662f overflow-x \u548c overflow-y \u7684 \u7b80\u5199\u5c5e\u6027 \u3002","title":"overflow"},{"location":"Web/CSS/CSS8/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16279/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/CSS/CSS9/","text":"margin \u00b6 margin \u5c5e\u6027\u4e3a\u7ed9\u5b9a\u5143\u7d20\u8bbe\u7f6e\u6240\u6709\u56db\u4e2a\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u65b9\u5411\u7684\u5916\u8fb9\u8ddd\u5c5e\u6027\u3002 \u53ef\u4ee5\u63a5\u53d71~4\u4e2a\u503c\uff08\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\u7684\u987a\u5e8f\uff09 \u53ef\u4ee5\u5206\u522b\u6307\u660e\u56db\u4e2a\u65b9\u5411\uff1a margin-top \u3001 margin-right \u3001 margin-bottom \u3001 margin-left \u53ef\u53d6\u503c length\uff1a\u56fa\u5b9a\u503c percentage\uff1a\u76f8\u5bf9\u4e8e\u5305\u542b\u5757\u7684\u5bbd\u5ea6\uff0c\u4ee5\u767e\u5206\u6bd4\u503c\u4e3a\u5916\u8fb9\u8ddd\u3002 auto\uff1a\u8ba9\u6d4f\u89c8\u5668\u81ea\u5df1\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u5916\u8fb9\u8ddd\u3002\u6709\u65f6\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8be5\u503c\u53ef\u4ee5\u4f7f\u5143\u7d20\u5c45\u4e2d\u3002 \u5916\u8fb9\u8ddd\u91cd\u53e0 \u5757\u7684\u4e0a\u5916\u8fb9\u8ddd(margin-top)\u548c\u4e0b\u5916\u8fb9\u8ddd(margin-bottom)\u6709\u65f6\u5408\u5e76(\u6298\u53e0)\u4e3a\u5355\u4e2a\u8fb9\u8ddd\uff0c\u5176\u5927\u5c0f\u4e3a\u5355\u4e2a\u8fb9\u8ddd\u7684\u6700\u5927\u503c(\u6216\u5982\u679c\u5b83\u4eec\u76f8\u7b49\uff0c\u5219\u4ec5\u4e3a\u5176\u4e2d\u4e00\u4e2a)\uff0c\u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a\u8fb9\u8ddd\u6298\u53e0\u3002 \u7236\u5143\u7d20\u4e0e\u540e\u4ee3\u5143\u7d20\uff1a\u7236\u5143\u7d20\u6ca1\u6709\u4e0a\u8fb9\u6846\u548cpadding\u65f6\uff0c\u540e\u4ee3\u5143\u7d20\u7684margin-top\u4f1a\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u7236\u5143\u7d20\u7684margin-top\u4f1a\u4e0e\u540e\u4ee3\u5143\u7d20\u53d6\u6700\u5927\u503c\u3002 padding \u00b6 padding CSS \u7b80\u5199\u5c5e\u6027\u63a7\u5236\u5143\u7d20\u6240\u6709\u56db\u6761\u8fb9\u7684\u5185\u8fb9\u8ddd\u533a\u57df\u3002 \u53ef\u4ee5\u63a5\u53d71~4\u4e2a\u503c\uff08\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\u7684\u987a\u5e8f\uff09 \u53ef\u4ee5\u5206\u522b\u6307\u660e\u56db\u4e2a\u65b9\u5411\uff1apadding-top\u3001padding-right\u3001padding-bottom\u3001padding-left \u53ef\u53d6\u503c length\uff1a\u56fa\u5b9a\u503c percentage\uff1a\u76f8\u5bf9\u4e8e\u5305\u542b\u5757\u7684\u5bbd\u5ea6\uff0c\u4ee5\u767e\u5206\u6bd4\u503c\u4e3a\u5185\u8fb9\u8ddd\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16280/ \u6765\u6e90\uff1aAcWing","title":"\u5185\u8fb9\u8ddd\u4e0e\u5916\u8fb9\u8ddd"},{"location":"Web/CSS/CSS9/#margin","text":"margin \u5c5e\u6027\u4e3a\u7ed9\u5b9a\u5143\u7d20\u8bbe\u7f6e\u6240\u6709\u56db\u4e2a\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u65b9\u5411\u7684\u5916\u8fb9\u8ddd\u5c5e\u6027\u3002 \u53ef\u4ee5\u63a5\u53d71~4\u4e2a\u503c\uff08\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\u7684\u987a\u5e8f\uff09 \u53ef\u4ee5\u5206\u522b\u6307\u660e\u56db\u4e2a\u65b9\u5411\uff1a margin-top \u3001 margin-right \u3001 margin-bottom \u3001 margin-left \u53ef\u53d6\u503c length\uff1a\u56fa\u5b9a\u503c percentage\uff1a\u76f8\u5bf9\u4e8e\u5305\u542b\u5757\u7684\u5bbd\u5ea6\uff0c\u4ee5\u767e\u5206\u6bd4\u503c\u4e3a\u5916\u8fb9\u8ddd\u3002 auto\uff1a\u8ba9\u6d4f\u89c8\u5668\u81ea\u5df1\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u5916\u8fb9\u8ddd\u3002\u6709\u65f6\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8be5\u503c\u53ef\u4ee5\u4f7f\u5143\u7d20\u5c45\u4e2d\u3002 \u5916\u8fb9\u8ddd\u91cd\u53e0 \u5757\u7684\u4e0a\u5916\u8fb9\u8ddd(margin-top)\u548c\u4e0b\u5916\u8fb9\u8ddd(margin-bottom)\u6709\u65f6\u5408\u5e76(\u6298\u53e0)\u4e3a\u5355\u4e2a\u8fb9\u8ddd\uff0c\u5176\u5927\u5c0f\u4e3a\u5355\u4e2a\u8fb9\u8ddd\u7684\u6700\u5927\u503c(\u6216\u5982\u679c\u5b83\u4eec\u76f8\u7b49\uff0c\u5219\u4ec5\u4e3a\u5176\u4e2d\u4e00\u4e2a)\uff0c\u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a\u8fb9\u8ddd\u6298\u53e0\u3002 \u7236\u5143\u7d20\u4e0e\u540e\u4ee3\u5143\u7d20\uff1a\u7236\u5143\u7d20\u6ca1\u6709\u4e0a\u8fb9\u6846\u548cpadding\u65f6\uff0c\u540e\u4ee3\u5143\u7d20\u7684margin-top\u4f1a\u6ea2\u51fa\uff0c\u6ea2\u51fa\u540e\u7236\u5143\u7d20\u7684margin-top\u4f1a\u4e0e\u540e\u4ee3\u5143\u7d20\u53d6\u6700\u5927\u503c\u3002","title":"margin"},{"location":"Web/CSS/CSS9/#padding","text":"padding CSS \u7b80\u5199\u5c5e\u6027\u63a7\u5236\u5143\u7d20\u6240\u6709\u56db\u6761\u8fb9\u7684\u5185\u8fb9\u8ddd\u533a\u57df\u3002 \u53ef\u4ee5\u63a5\u53d71~4\u4e2a\u503c\uff08\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\u7684\u987a\u5e8f\uff09 \u53ef\u4ee5\u5206\u522b\u6307\u660e\u56db\u4e2a\u65b9\u5411\uff1apadding-top\u3001padding-right\u3001padding-bottom\u3001padding-left \u53ef\u53d6\u503c length\uff1a\u56fa\u5b9a\u503c percentage\uff1a\u76f8\u5bf9\u4e8e\u5305\u542b\u5757\u7684\u5bbd\u5ea6\uff0c\u4ee5\u767e\u5206\u6bd4\u503c\u4e3a\u5185\u8fb9\u8ddd\u3002","title":"padding"},{"location":"Web/CSS/CSS9/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/blog/content/16280/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/JS/js1/","text":"\u4f7f\u7528\u65b9\u5f0f \u00b6 HTML\u9875\u9762\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\u52a0\u4e0a <script type=\"module\"></script> \u6807\u7b7e\u5373\u53ef\u3002 \u5e38\u89c1\u4f7f\u7528\u65b9\u5f0f\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a \u76f4\u63a5\u5728 <script type=\"module\"></script> \u6807\u7b7e\u5185\u5199JS\u4ee3\u7801\u3002 \u76f4\u63a5\u5f15\u5165\u6587\u4ef6\uff1a <script type=\"module\" src=\"/static/js/index.js\"></script> \u3002 \u5c06\u6240\u9700\u7684\u4ee3\u7801\u901a\u8fc7 import \u5173\u952e\u5b57\u5f15\u5165\u5230\u5f53\u524d\u4f5c\u7528\u57df\u3002 \u4f8b\u5982\uff1a /static/js/index.js \u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u4e3a\uff1a let name = \"fyqcode\" ; function print () { console . log ( \"Hello World!\" ); } export { name , print } <script type=\"module\"></script> \u4e2d\u7684\u5185\u5bb9\u4e3a\uff1a < script type = \"module\" > import { name , print } from \"/static/js/index.js\" ; console . log ( name ); print (); < /script> \u6267\u884c\u987a\u5e8f \u00b6 \u7c7b\u4f3c\u4e8eHTML\u4e0eCSS\uff0c\u6309\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u6267\u884c\uff1b \u4e8b\u4ef6\u9a71\u52a8\u6267\u884c\uff1b HTML, CSS, JavaScript\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb \u00b6 CSS\u63a7\u5236HTML JavaScript\u63a7\u5236HTML\u4e0eCSS \u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u4e0e\u7ef4\u62a4\uff0c\u5c3d\u91cf\u6309\u7167\u4e0a\u8ff0\u987a\u5e8f\u5199\u4ee3\u7801\u3002\u4f8b\u5982\uff1a\u4e0d\u8981\u5728HTML\u4e2d\u8c03\u7528JavaScript\u4e2d\u7684\u51fd\u6570\u3002","title":"JS\u7684\u8c03\u7528\u65b9\u5f0f\u4e0e\u6267\u884c\u987a\u5e8f"},{"location":"Web/JS/js1/#_1","text":"HTML\u9875\u9762\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\u52a0\u4e0a <script type=\"module\"></script> \u6807\u7b7e\u5373\u53ef\u3002 \u5e38\u89c1\u4f7f\u7528\u65b9\u5f0f\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a \u76f4\u63a5\u5728 <script type=\"module\"></script> \u6807\u7b7e\u5185\u5199JS\u4ee3\u7801\u3002 \u76f4\u63a5\u5f15\u5165\u6587\u4ef6\uff1a <script type=\"module\" src=\"/static/js/index.js\"></script> \u3002 \u5c06\u6240\u9700\u7684\u4ee3\u7801\u901a\u8fc7 import \u5173\u952e\u5b57\u5f15\u5165\u5230\u5f53\u524d\u4f5c\u7528\u57df\u3002 \u4f8b\u5982\uff1a /static/js/index.js \u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u4e3a\uff1a let name = \"fyqcode\" ; function print () { console . log ( \"Hello World!\" ); } export { name , print } <script type=\"module\"></script> \u4e2d\u7684\u5185\u5bb9\u4e3a\uff1a < script type = \"module\" > import { name , print } from \"/static/js/index.js\" ; console . log ( name ); print (); < /script>","title":"\u4f7f\u7528\u65b9\u5f0f"},{"location":"Web/JS/js1/#_2","text":"\u7c7b\u4f3c\u4e8eHTML\u4e0eCSS\uff0c\u6309\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u6267\u884c\uff1b \u4e8b\u4ef6\u9a71\u52a8\u6267\u884c\uff1b","title":"\u6267\u884c\u987a\u5e8f"},{"location":"Web/JS/js1/#html-css-javascript","text":"CSS\u63a7\u5236HTML JavaScript\u63a7\u5236HTML\u4e0eCSS \u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u4e0e\u7ef4\u62a4\uff0c\u5c3d\u91cf\u6309\u7167\u4e0a\u8ff0\u987a\u5e8f\u5199\u4ee3\u7801\u3002\u4f8b\u5982\uff1a\u4e0d\u8981\u5728HTML\u4e2d\u8c03\u7528JavaScript\u4e2d\u7684\u51fd\u6570\u3002","title":"HTML, CSS, JavaScript\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"Web/JS/js10/","text":"\u6982\u8ff0 \u00b6 JavaScript \u7684\u4ee3\u7801\u4e00\u822c\u901a\u8fc7\u4e8b\u4ef6\u89e6\u53d1\u3002 \u53ef\u4ee5\u901a\u8fc7 addEventListener \u51fd\u6570\u4e3a\u5143\u7d20\u7ed1\u5b9a\u4e8b\u4ef6\u7684\u89e6\u53d1\u51fd\u6570\u3002 \u63a5\u4e0b\u6765\u4ecb\u7ecd\u5e38\u7528\u89e6\u53d1\u51fd\u6570 \u9f20\u6807 \u00b6 click\uff1a\u9f20\u6807\u5de6\u952e\u70b9\u51fb dblclick\uff1a\u9f20\u6807\u5de6\u952e\u53cc\u51fb contextmenu\uff1a\u9f20\u6807\u53f3\u952e\u70b9\u51fb mousedown\uff1a\u9f20\u6807\u6309\u4e0b\uff0c\u5305\u62ec\u5de6\u952e\u3001\u6eda\u8f6e\u3001\u53f3\u952e event.button\uff1a0\u8868\u793a\u5de6\u952e\uff0c1\u8868\u793a\u4e2d\u952e\uff0c2\u8868\u793a\u53f3\u952e mouseup\uff1a\u9f20\u6807\u5f39\u8d77\uff0c\u5305\u62ec\u5de6\u952e\u3001\u6eda\u8f6e\u3001\u53f3\u952e event.button\uff1a0\u8868\u793a\u5de6\u952e\uff0c1\u8868\u793a\u4e2d\u952e\uff0c2\u8868\u793a\u53f3\u952e \u952e\u76d8 \u00b6 keydown \uff1a\u67d0\u4e2a\u952e\u662f\u5426\u88ab\u6309\u4f4f\uff0c\u4e8b\u4ef6\u4f1a\u8fde\u7eed\u89e6\u53d1 event.code \uff1a\u8fd4\u56de\u6309\u7684\u662f\u54ea\u4e2a\u952e event.altKey \u3001 event.ctrlKey \u3001 event.shiftKey \u5206\u522b\u8868\u793a\u662f\u5426\u540c\u65f6\u6309\u4e0b\u4e86 alt \u3001 ctrl \u3001 shift \u952e\u3002 keyup \uff1a\u67d0\u4e2a\u6309\u952e\u662f\u5426\u88ab\u91ca\u653e event \u5e38\u7528\u5c5e\u6027\u540c\u4e0a keypress \uff1a\u7d27\u8ddf\u5728 keydown \u4e8b\u4ef6\u540e\u89e6\u53d1\uff0c\u53ea\u6709\u6309\u4e0b\u5b57\u7b26\u952e\u65f6\u89e6\u53d1\u3002\u9002\u7528\u4e8e\u5224\u5b9a\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u3002 event \u5e38\u7528\u5c5e\u6027\u540c\u4e0a \u8868\u5355 \u00b6 focus \uff1a\u805a\u7126\u67d0\u4e2a\u5143\u7d20 blur \uff1a\u53d6\u6d88\u805a\u7126\u67d0\u4e2a\u5143\u7d20 change \uff1a\u67d0\u4e2a\u5143\u7d20\u7684\u5185\u5bb9\u53d1\u751f\u4e86\u6539\u53d8 \u7a97\u53e3 \u00b6 \u9700\u8981\u4f5c\u7528\u5230 window \u5143\u7d20\u4e0a\u3002 resize \uff1a\u5f53\u7a97\u53e3\u5927\u5c0f\u653e\u751f\u53d8\u5316 scroll \uff1a\u6eda\u52a8\u6307\u5b9a\u7684\u5143\u7d20 load \uff1a\u5f53\u5143\u7d20\u88ab\u52a0\u8f7d\u5b8c\u6210","title":"\u4e8b\u4ef6"},{"location":"Web/JS/js10/#_1","text":"JavaScript \u7684\u4ee3\u7801\u4e00\u822c\u901a\u8fc7\u4e8b\u4ef6\u89e6\u53d1\u3002 \u53ef\u4ee5\u901a\u8fc7 addEventListener \u51fd\u6570\u4e3a\u5143\u7d20\u7ed1\u5b9a\u4e8b\u4ef6\u7684\u89e6\u53d1\u51fd\u6570\u3002 \u63a5\u4e0b\u6765\u4ecb\u7ecd\u5e38\u7528\u89e6\u53d1\u51fd\u6570","title":"\u6982\u8ff0"},{"location":"Web/JS/js10/#_2","text":"click\uff1a\u9f20\u6807\u5de6\u952e\u70b9\u51fb dblclick\uff1a\u9f20\u6807\u5de6\u952e\u53cc\u51fb contextmenu\uff1a\u9f20\u6807\u53f3\u952e\u70b9\u51fb mousedown\uff1a\u9f20\u6807\u6309\u4e0b\uff0c\u5305\u62ec\u5de6\u952e\u3001\u6eda\u8f6e\u3001\u53f3\u952e event.button\uff1a0\u8868\u793a\u5de6\u952e\uff0c1\u8868\u793a\u4e2d\u952e\uff0c2\u8868\u793a\u53f3\u952e mouseup\uff1a\u9f20\u6807\u5f39\u8d77\uff0c\u5305\u62ec\u5de6\u952e\u3001\u6eda\u8f6e\u3001\u53f3\u952e event.button\uff1a0\u8868\u793a\u5de6\u952e\uff0c1\u8868\u793a\u4e2d\u952e\uff0c2\u8868\u793a\u53f3\u952e","title":"\u9f20\u6807"},{"location":"Web/JS/js10/#_3","text":"keydown \uff1a\u67d0\u4e2a\u952e\u662f\u5426\u88ab\u6309\u4f4f\uff0c\u4e8b\u4ef6\u4f1a\u8fde\u7eed\u89e6\u53d1 event.code \uff1a\u8fd4\u56de\u6309\u7684\u662f\u54ea\u4e2a\u952e event.altKey \u3001 event.ctrlKey \u3001 event.shiftKey \u5206\u522b\u8868\u793a\u662f\u5426\u540c\u65f6\u6309\u4e0b\u4e86 alt \u3001 ctrl \u3001 shift \u952e\u3002 keyup \uff1a\u67d0\u4e2a\u6309\u952e\u662f\u5426\u88ab\u91ca\u653e event \u5e38\u7528\u5c5e\u6027\u540c\u4e0a keypress \uff1a\u7d27\u8ddf\u5728 keydown \u4e8b\u4ef6\u540e\u89e6\u53d1\uff0c\u53ea\u6709\u6309\u4e0b\u5b57\u7b26\u952e\u65f6\u89e6\u53d1\u3002\u9002\u7528\u4e8e\u5224\u5b9a\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u3002 event \u5e38\u7528\u5c5e\u6027\u540c\u4e0a","title":"\u952e\u76d8"},{"location":"Web/JS/js10/#_4","text":"focus \uff1a\u805a\u7126\u67d0\u4e2a\u5143\u7d20 blur \uff1a\u53d6\u6d88\u805a\u7126\u67d0\u4e2a\u5143\u7d20 change \uff1a\u67d0\u4e2a\u5143\u7d20\u7684\u5185\u5bb9\u53d1\u751f\u4e86\u6539\u53d8","title":"\u8868\u5355"},{"location":"Web/JS/js10/#_5","text":"\u9700\u8981\u4f5c\u7528\u5230 window \u5143\u7d20\u4e0a\u3002 resize \uff1a\u5f53\u7a97\u53e3\u5927\u5c0f\u653e\u751f\u53d8\u5316 scroll \uff1a\u6eda\u52a8\u6307\u5b9a\u7684\u5143\u7d20 load \uff1a\u5f53\u5143\u7d20\u88ab\u52a0\u8f7d\u5b8c\u6210","title":"\u7a97\u53e3"},{"location":"Web/JS/js2/","text":"let\u4e0econst \u00b6 \u7528\u6765\u58f0\u660e\u53d8\u91cf\uff0c\u4f5c\u7528\u8303\u56f4\u4e3a\u5f53\u524d\u4f5c\u7528\u57df\u3002 let \u7528\u6765\u5b9a\u4e49\u53d8\u91cf\uff1b const \u7528\u6765\u5b9a\u4e49\u5e38\u91cf\uff1b \u4f8b\u5982\uff1a let s = \"acwing\" , x = 5 ; let d = { name : \"fyq\" , age : 18 , } const n = 100 ; \u53d8\u91cf\u7c7b\u578b \u00b6 number \uff1a\u6570\u503c\u53d8\u91cf\uff0c\u4f8b\u59821, 2.5 string \uff1a\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\"fyqcode\", 'fyq'\uff0c\u5355\u5f15\u53f7\u4e0e\u53cc\u5f15\u53f7\u5747\u53ef\u3002\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u53ea\u8bfb\u7c7b\u578b\u3002 boolean \uff1a\u5e03\u5c14\u503c\uff0c\u4f8b\u5982true, false object \uff1a\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8eC++\u4e2d\u7684\u6307\u9488\uff0c\u4f8b\u5982[1, 2, 3]\uff0c{name: \"fyq\", age: 18}\uff0cnull undefined \uff1a\u672a\u5b9a\u4e49\u7684\u53d8\u91cf \u7c7b\u4f3c\u4e8ePython\uff0cJavaScript\u4e2d\u7684\u53d8\u91cf\u7c7b\u578b\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u3002 \u8fd0\u7b97\u7b26 \u00b6 \u4e0e C++ \u3001 Python \u3001 Java \u7c7b\u4f3c\uff0c \u4e0d\u540c\u70b9\uff1a ** \u8868\u793a\u4e58\u65b9 \u7b49\u4e8e\u4e0e\u4e0d\u7b49\u4e8e\u7528 === \u548c !==","title":"\u53d8\u91cf\u4e0e\u8fd0\u7b97\u7b26"},{"location":"Web/JS/js2/#letconst","text":"\u7528\u6765\u58f0\u660e\u53d8\u91cf\uff0c\u4f5c\u7528\u8303\u56f4\u4e3a\u5f53\u524d\u4f5c\u7528\u57df\u3002 let \u7528\u6765\u5b9a\u4e49\u53d8\u91cf\uff1b const \u7528\u6765\u5b9a\u4e49\u5e38\u91cf\uff1b \u4f8b\u5982\uff1a let s = \"acwing\" , x = 5 ; let d = { name : \"fyq\" , age : 18 , } const n = 100 ;","title":"let\u4e0econst"},{"location":"Web/JS/js2/#_1","text":"number \uff1a\u6570\u503c\u53d8\u91cf\uff0c\u4f8b\u59821, 2.5 string \uff1a\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\"fyqcode\", 'fyq'\uff0c\u5355\u5f15\u53f7\u4e0e\u53cc\u5f15\u53f7\u5747\u53ef\u3002\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u53ea\u8bfb\u7c7b\u578b\u3002 boolean \uff1a\u5e03\u5c14\u503c\uff0c\u4f8b\u5982true, false object \uff1a\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8eC++\u4e2d\u7684\u6307\u9488\uff0c\u4f8b\u5982[1, 2, 3]\uff0c{name: \"fyq\", age: 18}\uff0cnull undefined \uff1a\u672a\u5b9a\u4e49\u7684\u53d8\u91cf \u7c7b\u4f3c\u4e8ePython\uff0cJavaScript\u4e2d\u7684\u53d8\u91cf\u7c7b\u578b\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u3002","title":"\u53d8\u91cf\u7c7b\u578b"},{"location":"Web/JS/js2/#_2","text":"\u4e0e C++ \u3001 Python \u3001 Java \u7c7b\u4f3c\uff0c \u4e0d\u540c\u70b9\uff1a ** \u8868\u793a\u4e58\u65b9 \u7b49\u4e8e\u4e0e\u4e0d\u7b49\u4e8e\u7528 === \u548c !==","title":"\u8fd0\u7b97\u7b26"},{"location":"Web/JS/js3/","text":"\u8f93\u5165 \u00b6 \u4eceHTML\u4e0e\u7528\u6237\u7684\u4ea4\u4e92\u4e2d\u8f93\u5165\u4fe1\u606f\uff0c\u4f8b\u5982\u901a\u8fc7input\u3001textarea\u7b49\u6807\u7b7e\u83b7\u53d6\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165\uff0c\u901a\u8fc7click\u3001hover\u7b49\u4e8b\u4ef6\u83b7\u53d6\u7528\u6237\u7684\u9f20\u6807\u8f93\u5165\u3002 \u901a\u8fc7Ajax\u4e0eWebSocket\u4ece\u670d\u52a1\u5668\u7aef\u83b7\u53d6\u8f93\u5165 \u6807\u51c6\u8f93\u5165\uff0c\u53c2\u8003 AcWing 1. A + B \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u4e2d\u586b\u5165\u6570\u503c\uff1a let name = 'yxc' , age = 18 ; let s = `My name is ${ name } , I'm ${ age } years old.` ; \u5b9a\u4e49\u591a\u884c\u5b57\u7b26\u4e32\uff1a let s = `<div> <h2>\u6807\u9898</h2> <p>\u6bb5\u843d</p> /div>` \u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u5982\u4f55\u8f93\u51fa let x = 1.234567 ; let s = ` ${ x . toFixed ( 2 ) } ` ; \u7ec3\u4e60 \u00b6 A+B \u5dee \u4e24\u70b9\u95f4\u8ddd\u79bb \u949e\u7968 \u65f6\u95f4\u8f6c\u6362","title":"\u8f93\u5165\u4e0e\u8f93\u51fa"},{"location":"Web/JS/js3/#_1","text":"\u4eceHTML\u4e0e\u7528\u6237\u7684\u4ea4\u4e92\u4e2d\u8f93\u5165\u4fe1\u606f\uff0c\u4f8b\u5982\u901a\u8fc7input\u3001textarea\u7b49\u6807\u7b7e\u83b7\u53d6\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165\uff0c\u901a\u8fc7click\u3001hover\u7b49\u4e8b\u4ef6\u83b7\u53d6\u7528\u6237\u7684\u9f20\u6807\u8f93\u5165\u3002 \u901a\u8fc7Ajax\u4e0eWebSocket\u4ece\u670d\u52a1\u5668\u7aef\u83b7\u53d6\u8f93\u5165 \u6807\u51c6\u8f93\u5165\uff0c\u53c2\u8003 AcWing 1. A + B","title":"\u8f93\u5165"},{"location":"Web/JS/js3/#_2","text":"\u5b57\u7b26\u4e32\u4e2d\u586b\u5165\u6570\u503c\uff1a let name = 'yxc' , age = 18 ; let s = `My name is ${ name } , I'm ${ age } years old.` ; \u5b9a\u4e49\u591a\u884c\u5b57\u7b26\u4e32\uff1a let s = `<div> <h2>\u6807\u9898</h2> <p>\u6bb5\u843d</p> /div>` \u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u5982\u4f55\u8f93\u51fa let x = 1.234567 ; let s = ` ${ x . toFixed ( 2 ) } ` ;","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"Web/JS/js3/#_3","text":"A+B \u5dee \u4e24\u70b9\u95f4\u8ddd\u79bb \u949e\u7968 \u65f6\u95f4\u8f6c\u6362","title":"\u7ec3\u4e60"},{"location":"Web/JS/js4/","text":"\u6982\u8ff0 \u00b6 JavaScript\u4e2d\u7684 if-else \u8bed\u53e5\u4e0e C++ \u3001 Python \u3001 Java \u4e2d\u7c7b\u4f3c\u3002 \u4f8b\u5982\uff1a let score = 90 ; if ( score >= 85 ) { console . log ( \"A\" ); } else if ( score >= 70 ) { console . log ( \"B\" ); } else if ( score >= 60 ) { console . log ( \"C\" ); } else { console . log ( \"D\" ); } JavaScript\u4e2d\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\u4e5f\u4e0e C++ \u3001 Java \u4e2d\u7c7b\u4f3c\uff1a &&\u8868\u793a\u4e0e ||\u8868\u793a\u6216 !\u8868\u793a\u975e \u7ec3\u4e60 \u00b6 \u500d\u6570 \u96f6\u98df \u533a\u95f4 \u6e38\u620f\u65f6\u95f4 \u52a8\u7269","title":"\u5224\u65ad\u8bed\u53e5"},{"location":"Web/JS/js4/#_1","text":"JavaScript\u4e2d\u7684 if-else \u8bed\u53e5\u4e0e C++ \u3001 Python \u3001 Java \u4e2d\u7c7b\u4f3c\u3002 \u4f8b\u5982\uff1a let score = 90 ; if ( score >= 85 ) { console . log ( \"A\" ); } else if ( score >= 70 ) { console . log ( \"B\" ); } else if ( score >= 60 ) { console . log ( \"C\" ); } else { console . log ( \"D\" ); } JavaScript\u4e2d\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\u4e5f\u4e0e C++ \u3001 Java \u4e2d\u7c7b\u4f3c\uff1a &&\u8868\u793a\u4e0e ||\u8868\u793a\u6216 !\u8868\u793a\u975e","title":"\u6982\u8ff0"},{"location":"Web/JS/js4/#_2","text":"\u500d\u6570 \u96f6\u98df \u533a\u95f4 \u6e38\u620f\u65f6\u95f4 \u52a8\u7269","title":"\u7ec3\u4e60"},{"location":"Web/JS/js5/","text":"\u6982\u8ff0 \u00b6 JavaScript\u4e2d\u7684\u5faa\u73af\u8bed\u53e5\u4e0e C++ \u4e2d\u7c7b\u4f3c\uff0c\u4e5f\u5305\u542b for \u3001 while \u3001 do while \u5faa\u73af\u3002 for\u5faa\u73af \u00b6 for ( let i = 0 ; i < 10 ; i ++ ) { console . log ( i ); } \u679a\u4e3e\u5bf9\u8c61\u6216\u6570\u7ec4\u65f6\u53ef\u4ee5\u4f7f\u7528\uff1a for-in \u5faa\u73af\uff0c\u53ef\u4ee5\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\uff0c\u4ee5\u53ca\u5bf9\u8c61\u4e2d\u7684 key for-of \u5faa\u73af\uff0c\u53ef\u4ee5\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u503c\uff0c\u4ee5\u53ca\u5bf9\u8c61\u4e2d\u7684 value while\u5faa\u73af \u00b6 let i = 0 ; while ( i < 10 ) { console . log ( i ); i ++ ; } do while\u5faa\u73af \u00b6 do while \u8bed\u53e5\u4e0e while \u8bed\u53e5\u975e\u5e38\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c do while \u8bed\u53e5\u9650\u5236\u6027\u5faa\u73af\u4f53\u540e\u68c0\u67e5\u6761\u4ef6\u3002\u4e0d\u7ba1\u6761\u4ef6\u7684\u503c\u5982\u4f55\uff0c\u6211\u4eec\u90fd\u8981\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u5faa\u73af\u3002 let i = 0 ; do { console . log ( i ); i ++ ; } while ( i < 10 ); \u7ec3\u4e60 \u00b6 \u5076\u6570 \u6b63\u6570 \u9012\u589e\u5e8f\u5217 \u7ea6\u6570 \u83f1\u5f62","title":"\u5faa\u73af\u8bed\u53e5"},{"location":"Web/JS/js5/#_1","text":"JavaScript\u4e2d\u7684\u5faa\u73af\u8bed\u53e5\u4e0e C++ \u4e2d\u7c7b\u4f3c\uff0c\u4e5f\u5305\u542b for \u3001 while \u3001 do while \u5faa\u73af\u3002","title":"\u6982\u8ff0"},{"location":"Web/JS/js5/#for","text":"for ( let i = 0 ; i < 10 ; i ++ ) { console . log ( i ); } \u679a\u4e3e\u5bf9\u8c61\u6216\u6570\u7ec4\u65f6\u53ef\u4ee5\u4f7f\u7528\uff1a for-in \u5faa\u73af\uff0c\u53ef\u4ee5\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\uff0c\u4ee5\u53ca\u5bf9\u8c61\u4e2d\u7684 key for-of \u5faa\u73af\uff0c\u53ef\u4ee5\u679a\u4e3e\u6570\u7ec4\u4e2d\u7684\u503c\uff0c\u4ee5\u53ca\u5bf9\u8c61\u4e2d\u7684 value","title":"for\u5faa\u73af"},{"location":"Web/JS/js5/#while","text":"let i = 0 ; while ( i < 10 ) { console . log ( i ); i ++ ; }","title":"while\u5faa\u73af"},{"location":"Web/JS/js5/#do-while","text":"do while \u8bed\u53e5\u4e0e while \u8bed\u53e5\u975e\u5e38\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c do while \u8bed\u53e5\u9650\u5236\u6027\u5faa\u73af\u4f53\u540e\u68c0\u67e5\u6761\u4ef6\u3002\u4e0d\u7ba1\u6761\u4ef6\u7684\u503c\u5982\u4f55\uff0c\u6211\u4eec\u90fd\u8981\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u5faa\u73af\u3002 let i = 0 ; do { console . log ( i ); i ++ ; } while ( i < 10 );","title":"do while\u5faa\u73af"},{"location":"Web/JS/js5/#_2","text":"\u5076\u6570 \u6b63\u6570 \u9012\u589e\u5e8f\u5217 \u7ea6\u6570 \u83f1\u5f62","title":"\u7ec3\u4e60"},{"location":"Web/JS/js6/","text":"\u6982\u8ff0 \u00b6 \u82f1\u6587\u540d\u79f0\uff1a Object \u3002 \u7c7b\u4f3c\u4e8e C++ \u4e2d\u7684 map \uff0c\u7531 key:value \u5bf9\u6784\u6210\u3002 value \u53ef\u4ee5\u662f\u53d8\u91cf\u3001\u6570\u7ec4\u3001\u5bf9\u8c61\u3001\u51fd\u6570\u7b49\u3002 \u51fd\u6570\u5b9a\u4e49\u4e2d\u7684 this \u7528\u6765\u5f15\u7528\u8be5\u51fd\u6570\u7684\u201c\u62e5\u6709\u8005\u201d\u3002 \u4f8b\u5982: let person = { name : \"yxc\" , age : 18 , money : 0 , add_money : function ( x ) { this . money += x ; } } \u5bf9\u8c61\u5c5e\u6027\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u65b9\u5f0f\uff1a person.name \u3001 person.add_money() person[\"name\"] \u3001 person[\"add_money\"]()","title":"\u5bf9\u8c61"},{"location":"Web/JS/js6/#_1","text":"\u82f1\u6587\u540d\u79f0\uff1a Object \u3002 \u7c7b\u4f3c\u4e8e C++ \u4e2d\u7684 map \uff0c\u7531 key:value \u5bf9\u6784\u6210\u3002 value \u53ef\u4ee5\u662f\u53d8\u91cf\u3001\u6570\u7ec4\u3001\u5bf9\u8c61\u3001\u51fd\u6570\u7b49\u3002 \u51fd\u6570\u5b9a\u4e49\u4e2d\u7684 this \u7528\u6765\u5f15\u7528\u8be5\u51fd\u6570\u7684\u201c\u62e5\u6709\u8005\u201d\u3002 \u4f8b\u5982: let person = { name : \"yxc\" , age : 18 , money : 0 , add_money : function ( x ) { this . money += x ; } } \u5bf9\u8c61\u5c5e\u6027\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u65b9\u5f0f\uff1a person.name \u3001 person.add_money() person[\"name\"] \u3001 person[\"add_money\"]()","title":"\u6982\u8ff0"},{"location":"Web/JS/js7/","text":"\u6982\u8ff0 \u00b6 \u6570\u7ec4\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5bf9\u8c61\u3002 \u7c7b\u4f3c\u4e8eC++\u4e2d\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u3002 \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u53d8\u91cf\u3001\u6570\u7ec4\u3001\u5bf9\u8c61\u3001\u51fd\u6570\u3002 \u4f8b\u5982\uff1a let a = [ 1 , 2 , \"a\" , \"fyq\" ]; let b = [ 1 , // \u53d8\u91cf \"fyq\" , // \u53d8\u91cf [ 'a' , 'b' , 3 ], // \u6570\u7ec4 function () { // \u51fd\u6570 console . log ( \"Hello World\" ); }, { name : \"fyq\" , age : 18 } // \u5bf9\u8c61 ]; \u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u00b6 \u901a\u8fc7\u4e0b\u6807\u3002 \u4f8b\u5982\uff1a a [ 0 ] = 1 ; // \u8bbf\u95ee\u6570\u7ec4a[]\u7684\u7b2c0\u4e2a\u5143\u7d20 console . log ( a [ 0 ]); \u6570\u7ec4\u7684\u5e38\u7528\u5c5e\u6027\u548c\u51fd\u6570 \u00b6 \u5c5e\u6027 length \uff1a\u8fd4\u56de\u6570\u7ec4\u957f\u5ea6\u3002\u6ce8\u610f length \u662f\u5c5e\u6027\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u56e0\u6b64\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u8981\u52a0() \u51fd\u6570 push() \uff1a\u5411\u6570\u7ec4\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 \u51fd\u6570 pop() \uff1a\u5220\u9664\u6570\u7ec4\u672b\u5c3e\u7684\u5143\u7d20 \u51fd\u6570 splice(a, b) \uff1a\u5220\u9664\u4ecea\u5f00\u59cb\u7684b\u4e2a\u5143\u7d20 \u51fd\u6570 sort() \uff1a\u5c06\u6574\u4e2a\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a array.sort(cmp) \uff0c\u51fd\u6570 cmp \u8f93\u5165\u4e24\u4e2a\u9700\u8981\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b9e\u6570\uff0c\u8d1f\u6570\u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c0\u8868\u793a\u76f8\u7b49\uff0c\u6b63\u6570\u8868\u793a\u5927\u4e8e\u3002","title":"\u6570\u7ec4"},{"location":"Web/JS/js7/#_1","text":"\u6570\u7ec4\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5bf9\u8c61\u3002 \u7c7b\u4f3c\u4e8eC++\u4e2d\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u3002 \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u53d8\u91cf\u3001\u6570\u7ec4\u3001\u5bf9\u8c61\u3001\u51fd\u6570\u3002 \u4f8b\u5982\uff1a let a = [ 1 , 2 , \"a\" , \"fyq\" ]; let b = [ 1 , // \u53d8\u91cf \"fyq\" , // \u53d8\u91cf [ 'a' , 'b' , 3 ], // \u6570\u7ec4 function () { // \u51fd\u6570 console . log ( \"Hello World\" ); }, { name : \"fyq\" , age : 18 } // \u5bf9\u8c61 ];","title":"\u6982\u8ff0"},{"location":"Web/JS/js7/#_2","text":"\u901a\u8fc7\u4e0b\u6807\u3002 \u4f8b\u5982\uff1a a [ 0 ] = 1 ; // \u8bbf\u95ee\u6570\u7ec4a[]\u7684\u7b2c0\u4e2a\u5143\u7d20 console . log ( a [ 0 ]);","title":"\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u5143\u7d20"},{"location":"Web/JS/js7/#_3","text":"\u5c5e\u6027 length \uff1a\u8fd4\u56de\u6570\u7ec4\u957f\u5ea6\u3002\u6ce8\u610f length \u662f\u5c5e\u6027\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u56e0\u6b64\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u8981\u52a0() \u51fd\u6570 push() \uff1a\u5411\u6570\u7ec4\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 \u51fd\u6570 pop() \uff1a\u5220\u9664\u6570\u7ec4\u672b\u5c3e\u7684\u5143\u7d20 \u51fd\u6570 splice(a, b) \uff1a\u5220\u9664\u4ecea\u5f00\u59cb\u7684b\u4e2a\u5143\u7d20 \u51fd\u6570 sort() \uff1a\u5c06\u6574\u4e2a\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a array.sort(cmp) \uff0c\u51fd\u6570 cmp \u8f93\u5165\u4e24\u4e2a\u9700\u8981\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b9e\u6570\uff0c\u8d1f\u6570\u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c0\u8868\u793a\u76f8\u7b49\uff0c\u6b63\u6570\u8868\u793a\u5927\u4e8e\u3002","title":"\u6570\u7ec4\u7684\u5e38\u7528\u5c5e\u6027\u548c\u51fd\u6570"},{"location":"Web/JS/js8/","text":"\u6982\u8ff0 \u00b6 \u51fd\u6570\u662f\u7528\u5bf9\u8c61\u6765\u5b9e\u73b0\u7684\u3002 \u51fd\u6570\u4e5f C++ \u4e2d\u7684\u51fd\u6570\u7c7b\u4f3c\u3002 \u5b9a\u4e49\u65b9\u5f0f \u00b6 function add ( a , b ) { return a + b ; } let add = function ( a , b ) { return a + b ; } let add = ( a , b ) => { return a + b ; } \u8fd4\u56de\u503c \u00b6 \u5982\u679c\u672a\u5b9a\u4e49\u8fd4\u56de\u503c\uff0c\u5219\u8fd4\u56de undefined \u3002","title":"\u51fd\u6570"},{"location":"Web/JS/js8/#_1","text":"\u51fd\u6570\u662f\u7528\u5bf9\u8c61\u6765\u5b9e\u73b0\u7684\u3002 \u51fd\u6570\u4e5f C++ \u4e2d\u7684\u51fd\u6570\u7c7b\u4f3c\u3002","title":"\u6982\u8ff0"},{"location":"Web/JS/js8/#_2","text":"function add ( a , b ) { return a + b ; } let add = function ( a , b ) { return a + b ; } let add = ( a , b ) => { return a + b ; }","title":"\u5b9a\u4e49\u65b9\u5f0f"},{"location":"Web/JS/js8/#_3","text":"\u5982\u679c\u672a\u5b9a\u4e49\u8fd4\u56de\u503c\uff0c\u5219\u8fd4\u56de undefined \u3002","title":"\u8fd4\u56de\u503c"},{"location":"Web/JS/js9/","text":"\u6982\u8ff0 \u00b6 \u4e0e C++ \u4e2d\u7684 Class \u7c7b\u4f3c\u3002\u4f46\u662f\u4e0d\u5b58\u5728\u79c1\u6709\u6210\u5458\u3002 this \u6307\u5411\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5b9a\u4e49 \u00b6 class Point { constructor ( x , y ) { // \u6784\u9020\u51fd\u6570 this . x = x ; // \u6210\u5458\u53d8\u91cf this . y = y ; this . init (); } init () { this . sum = this . x + this . y ; // \u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u5728\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570\u4e2d\u5b9a\u4e49 } toString () { // \u6210\u5458\u51fd\u6570 return '(' + this . x + ', ' + this . y + ')' ; } } let p = new Point ( 3 , 4 ); console . log ( p . toString ()); \u7ee7\u627f \u00b6 class ColorPoint extends Point { constructor ( x , y , color ) { super ( x , y ); // \u8fd9\u91cc\u7684super\u8868\u793a\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 this . color = color ; } toString () { return this . color + ' ' + super . toString (); // \u8c03\u7528\u7236\u7c7b\u7684toString() } } \u6ce8\u610f super \u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u65e2\u53ef\u4ee5\u5f53\u4f5c\u51fd\u6570\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u5bf9\u8c61\u4f7f\u7528\u3002 \u4f5c\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4ee3\u8868\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e14\u53ea\u80fd\u7528\u5728\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e4b\u4e2d\u3002 super \u4f5c\u4e3a\u5bf9\u8c61\u65f6\uff0c\u6307\u5411\u7236\u7c7b\u7684\u539f\u578b\u5bf9\u8c61\u3002 \u5728\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u53ea\u6709\u8c03\u7528 super \u4e4b\u540e\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528 this \u5173\u952e\u5b57\u3002 \u6210\u5458\u91cd\u540d\u65f6\uff0c\u5b50\u7c7b\u7684\u6210\u5458\u4f1a\u8986\u76d6\u7236\u7c7b\u7684\u6210\u5458\u3002\u7c7b\u4f3c\u4e8e C++ \u4e2d\u7684\u591a\u6001\u3002 \u9759\u6001\u65b9\u6cd5 \u00b6 \u5728\u6210\u5458\u51fd\u6570\u524d\u6dfb\u52a0 static \u5173\u952e\u5b57\u5373\u53ef\u3002\u9759\u6001\u65b9\u6cd5\u4e0d\u4f1a\u88ab\u7c7b\u7684\u5b9e\u4f8b\u7ee7\u627f\uff0c\u53ea\u80fd\u901a\u8fc7\u7c7b\u6765\u8c03\u7528\u3002\u4f8b\u5982\uff1a class Point { constructor ( x , y ) { this . x = x ; this . y = y ; } toString () { return '(' + this . x + ', ' + this . y + ')' ; } static print_class_name () { console . log ( \"Point\" ); } } let p = new Point ( 1 , 2 ); Point . print_class_name (); p . print_class_name (); // \u4f1a\u62a5\u9519 \u9759\u6001\u53d8\u91cf \u00b6 \u5728ES6\u4e2d\uff0c\u53ea\u80fd\u901a\u8fc7 class.propname \u5b9a\u4e49\u548c\u8bbf\u95ee\u3002\u4f8b\u5982\uff1a class Point { constructor ( x , y ) { this . x = x ; this . y = y ; Point . cnt ++ ; } toString () { return '(' + this . x + ', ' + this . y + ')' ; } } Point . cnt = 0 ; let p = new Point ( 1 , 2 ); let q = new Point ( 3 , 4 ); console . log ( Point . cnt );","title":"\u7c7b"},{"location":"Web/JS/js9/#_1","text":"\u4e0e C++ \u4e2d\u7684 Class \u7c7b\u4f3c\u3002\u4f46\u662f\u4e0d\u5b58\u5728\u79c1\u6709\u6210\u5458\u3002 this \u6307\u5411\u7c7b\u7684\u5b9e\u4f8b\u3002","title":"\u6982\u8ff0"},{"location":"Web/JS/js9/#_2","text":"class Point { constructor ( x , y ) { // \u6784\u9020\u51fd\u6570 this . x = x ; // \u6210\u5458\u53d8\u91cf this . y = y ; this . init (); } init () { this . sum = this . x + this . y ; // \u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u5728\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570\u4e2d\u5b9a\u4e49 } toString () { // \u6210\u5458\u51fd\u6570 return '(' + this . x + ', ' + this . y + ')' ; } } let p = new Point ( 3 , 4 ); console . log ( p . toString ());","title":"\u5b9a\u4e49"},{"location":"Web/JS/js9/#_3","text":"class ColorPoint extends Point { constructor ( x , y , color ) { super ( x , y ); // \u8fd9\u91cc\u7684super\u8868\u793a\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 this . color = color ; } toString () { return this . color + ' ' + super . toString (); // \u8c03\u7528\u7236\u7c7b\u7684toString() } } \u6ce8\u610f super \u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u65e2\u53ef\u4ee5\u5f53\u4f5c\u51fd\u6570\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u5bf9\u8c61\u4f7f\u7528\u3002 \u4f5c\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4ee3\u8868\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e14\u53ea\u80fd\u7528\u5728\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e4b\u4e2d\u3002 super \u4f5c\u4e3a\u5bf9\u8c61\u65f6\uff0c\u6307\u5411\u7236\u7c7b\u7684\u539f\u578b\u5bf9\u8c61\u3002 \u5728\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u53ea\u6709\u8c03\u7528 super \u4e4b\u540e\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528 this \u5173\u952e\u5b57\u3002 \u6210\u5458\u91cd\u540d\u65f6\uff0c\u5b50\u7c7b\u7684\u6210\u5458\u4f1a\u8986\u76d6\u7236\u7c7b\u7684\u6210\u5458\u3002\u7c7b\u4f3c\u4e8e C++ \u4e2d\u7684\u591a\u6001\u3002","title":"\u7ee7\u627f"},{"location":"Web/JS/js9/#_4","text":"\u5728\u6210\u5458\u51fd\u6570\u524d\u6dfb\u52a0 static \u5173\u952e\u5b57\u5373\u53ef\u3002\u9759\u6001\u65b9\u6cd5\u4e0d\u4f1a\u88ab\u7c7b\u7684\u5b9e\u4f8b\u7ee7\u627f\uff0c\u53ea\u80fd\u901a\u8fc7\u7c7b\u6765\u8c03\u7528\u3002\u4f8b\u5982\uff1a class Point { constructor ( x , y ) { this . x = x ; this . y = y ; } toString () { return '(' + this . x + ', ' + this . y + ')' ; } static print_class_name () { console . log ( \"Point\" ); } } let p = new Point ( 1 , 2 ); Point . print_class_name (); p . print_class_name (); // \u4f1a\u62a5\u9519","title":"\u9759\u6001\u65b9\u6cd5"},{"location":"Web/JS/js9/#_5","text":"\u5728ES6\u4e2d\uff0c\u53ea\u80fd\u901a\u8fc7 class.propname \u5b9a\u4e49\u548c\u8bbf\u95ee\u3002\u4f8b\u5982\uff1a class Point { constructor ( x , y ) { this . x = x ; this . y = y ; Point . cnt ++ ; } toString () { return '(' + this . x + ', ' + this . y + ')' ; } } Point . cnt = 0 ; let p = new Point ( 1 , 2 ); let q = new Point ( 3 , 4 ); console . log ( Point . cnt );","title":"\u9759\u6001\u53d8\u91cf"},{"location":"Web/html/html1/","text":"\u6587\u6863\u7ed3\u6784 \u00b6 html\u7684\u6240\u6709\u6807\u7b7e\u4e3a\u6811\u5f62\u7ed3\u6784\uff0c\u4f8b\u5982\uff1a <!DOCTYPE html> < html lang = \"zh-CN\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Web\u5e94\u7528\u8bfe </ title > </ head > < body > < h1 > \u7b2c\u4e00\u8bb2 </ h1 > </ body > </ html > <html>\u6807\u7b7e \u00b6 HTML <html> \u5143\u7d20 \u8868\u793a\u4e00\u4e2a HTML \u6587\u6863\u7684\u6839\uff08\u9876\u7ea7\u5143\u7d20\uff09\uff0c\u6240\u4ee5\u5b83\u4e5f\u88ab\u79f0\u4e3a\u6839\u5143\u7d20\u3002\u6240\u6709\u5176\u4ed6\u5143\u7d20\u5fc5\u987b\u662f\u6b64\u5143\u7d20\u7684\u540e\u4ee3\u3002 <head> \u6807\u7b7e \u00b6 HTML head \u5143\u7d20 \u89c4\u5b9a\u6587\u6863\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f\uff08\u5143\u6570\u636e\uff09\uff0c\u5305\u62ec\u6587\u6863\u7684\u6807\u9898\uff0c\u5f15\u7528\u7684\u6587\u6863\u6837\u5f0f\u548c\u811a\u672c\u7b49\u3002 <body> \u6807\u7b7e \u00b6 HTML body \u5143\u7d20\u8868\u793a\u6587\u6863\u7684\u5185\u5bb9\u3002document.body \u5c5e\u6027\u63d0\u4f9b\u4e86\u53ef\u4ee5\u8f7b\u677e\u8bbf\u95ee\u6587\u6863\u7684 body \u5143\u7d20\u7684\u811a\u672c\u3002 <title> \u6807\u7b7e \u00b6 HTML <title> \u5143\u7d20 \u5b9a\u4e49\u6587\u6863\u7684\u6807\u9898\uff0c\u663e\u793a\u5728\u6d4f\u89c8\u5668\u7684\u6807\u9898\u680f\u6216\u6807\u7b7e\u9875\u4e0a\u3002\u5b83\u53ea\u5e94\u8be5\u5305\u542b\u6587\u672c\uff0c\u82e5\u662f\u5305\u542b\u6709\u6807\u7b7e\uff0c\u5219\u5b83\u5305\u542b\u7684\u4efb\u4f55\u6807\u7b7e\u90fd\u5c06\u88ab\u5ffd\u7565\u3002 <meta> \u00b6 HTML <meta> \u5143\u7d20\u8868\u793a\u90a3\u4e9b\u4e0d\u80fd\u7531\u5176\u5b83 HTML \u5143\u76f8\u5173\uff08meta-related\uff09\u5143\u7d20\uff08( <base> \u3001 <link> , <script> \u3001 <style> \u6216 <title> \uff09\u4e4b\u4e00\u8868\u793a\u7684\u4efb\u4f55\u5143\u6570\u636e\u4fe1\u606f\u3002 \u5e38\u89c1\u5c5e\u6027\uff1a + charse t\uff1a\u8fd9\u4e2a\u5c5e\u6027\u58f0\u660e\u4e86\u6587\u6863\u7684\u5b57\u7b26\u7f16\u7801\u3002\u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5176\u503c\u5fc5\u987b\u662f\u4e0e ASCII \u5927\u5c0f\u5199\u65e0\u5173\uff08ASCII case-insensitive\uff09\u7684\u201dutf-8\u201d\u3002 + name \uff1aname \u548c content \u5c5e\u6027\u53ef\u4ee5\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u540d - \u503c\u5bf9\u7684\u65b9\u5f0f\u7ed9\u6587\u6863\u63d0\u4f9b\u5143\u6570\u636e\uff0c\u5176\u4e2d name \u4f5c\u4e3a\u5143\u6570\u636e\u7684\u540d\u79f0\uff0ccontent \u4f5c\u4e3a\u5143\u6570\u636e\u7684\u503c\u3002 icon \u00b6 < link rel = \"icon\" href = \"images/icon.png\" > \u6ce8\u91ca \u00b6 <!-- \u591a\u884c\u6ce8\u91ca --> \u793a\u4f8b \u00b6 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > <!-- \u8fd9\u91cc\u7684\u5185\u5bb9\u5747\u4e3a\u6ce8\u91ca <h1>\u7b2c\u4e00\u8bb2</h1> <p> \u6bb5\u843d\u3002 </p> --> </ body > </ html > MDN\u5b98\u7f51 \u00b6 MDN\u5b98\u7f51 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"html\u57fa\u7840\u6807\u7b7e"},{"location":"Web/html/html1/#_1","text":"html\u7684\u6240\u6709\u6807\u7b7e\u4e3a\u6811\u5f62\u7ed3\u6784\uff0c\u4f8b\u5982\uff1a <!DOCTYPE html> < html lang = \"zh-CN\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Web\u5e94\u7528\u8bfe </ title > </ head > < body > < h1 > \u7b2c\u4e00\u8bb2 </ h1 > </ body > </ html >","title":"\u6587\u6863\u7ed3\u6784"},{"location":"Web/html/html1/#html","text":"HTML <html> \u5143\u7d20 \u8868\u793a\u4e00\u4e2a HTML \u6587\u6863\u7684\u6839\uff08\u9876\u7ea7\u5143\u7d20\uff09\uff0c\u6240\u4ee5\u5b83\u4e5f\u88ab\u79f0\u4e3a\u6839\u5143\u7d20\u3002\u6240\u6709\u5176\u4ed6\u5143\u7d20\u5fc5\u987b\u662f\u6b64\u5143\u7d20\u7684\u540e\u4ee3\u3002","title":"&lt;html&gt;\u6807\u7b7e"},{"location":"Web/html/html1/#head","text":"HTML head \u5143\u7d20 \u89c4\u5b9a\u6587\u6863\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f\uff08\u5143\u6570\u636e\uff09\uff0c\u5305\u62ec\u6587\u6863\u7684\u6807\u9898\uff0c\u5f15\u7528\u7684\u6587\u6863\u6837\u5f0f\u548c\u811a\u672c\u7b49\u3002","title":"&lt;head&gt;\u6807\u7b7e"},{"location":"Web/html/html1/#body","text":"HTML body \u5143\u7d20\u8868\u793a\u6587\u6863\u7684\u5185\u5bb9\u3002document.body \u5c5e\u6027\u63d0\u4f9b\u4e86\u53ef\u4ee5\u8f7b\u677e\u8bbf\u95ee\u6587\u6863\u7684 body \u5143\u7d20\u7684\u811a\u672c\u3002","title":"&lt;body&gt;\u6807\u7b7e"},{"location":"Web/html/html1/#title","text":"HTML <title> \u5143\u7d20 \u5b9a\u4e49\u6587\u6863\u7684\u6807\u9898\uff0c\u663e\u793a\u5728\u6d4f\u89c8\u5668\u7684\u6807\u9898\u680f\u6216\u6807\u7b7e\u9875\u4e0a\u3002\u5b83\u53ea\u5e94\u8be5\u5305\u542b\u6587\u672c\uff0c\u82e5\u662f\u5305\u542b\u6709\u6807\u7b7e\uff0c\u5219\u5b83\u5305\u542b\u7684\u4efb\u4f55\u6807\u7b7e\u90fd\u5c06\u88ab\u5ffd\u7565\u3002","title":"&lt;title&gt;\u6807\u7b7e"},{"location":"Web/html/html1/#meta","text":"HTML <meta> \u5143\u7d20\u8868\u793a\u90a3\u4e9b\u4e0d\u80fd\u7531\u5176\u5b83 HTML \u5143\u76f8\u5173\uff08meta-related\uff09\u5143\u7d20\uff08( <base> \u3001 <link> , <script> \u3001 <style> \u6216 <title> \uff09\u4e4b\u4e00\u8868\u793a\u7684\u4efb\u4f55\u5143\u6570\u636e\u4fe1\u606f\u3002 \u5e38\u89c1\u5c5e\u6027\uff1a + charse t\uff1a\u8fd9\u4e2a\u5c5e\u6027\u58f0\u660e\u4e86\u6587\u6863\u7684\u5b57\u7b26\u7f16\u7801\u3002\u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5176\u503c\u5fc5\u987b\u662f\u4e0e ASCII \u5927\u5c0f\u5199\u65e0\u5173\uff08ASCII case-insensitive\uff09\u7684\u201dutf-8\u201d\u3002 + name \uff1aname \u548c content \u5c5e\u6027\u53ef\u4ee5\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u540d - \u503c\u5bf9\u7684\u65b9\u5f0f\u7ed9\u6587\u6863\u63d0\u4f9b\u5143\u6570\u636e\uff0c\u5176\u4e2d name \u4f5c\u4e3a\u5143\u6570\u636e\u7684\u540d\u79f0\uff0ccontent \u4f5c\u4e3a\u5143\u6570\u636e\u7684\u503c\u3002","title":"&lt;meta&gt;"},{"location":"Web/html/html1/#icon","text":"< link rel = \"icon\" href = \"images/icon.png\" >","title":"icon"},{"location":"Web/html/html1/#_2","text":"<!-- \u591a\u884c\u6ce8\u91ca -->","title":"\u6ce8\u91ca"},{"location":"Web/html/html1/#_3","text":"<!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > <!-- \u8fd9\u91cc\u7684\u5185\u5bb9\u5747\u4e3a\u6ce8\u91ca <h1>\u7b2c\u4e00\u8bb2</h1> <p> \u6bb5\u843d\u3002 </p> --> </ body > </ html >","title":"\u793a\u4f8b"},{"location":"Web/html/html1/#mdn","text":"MDN\u5b98\u7f51","title":"MDN\u5b98\u7f51"},{"location":"Web/html/html1/#_4","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html10/","text":"HTML\u6e90\u4ee3\u7801 \u663e\u793a\u7ed3\u679c \u63cf\u8ff0 &lt; < \u5c0f\u4e8e\u53f7\u6216\u663e\u793a\u6807\u8bb0 &gt; > \u5927\u4e8e\u53f7\u6216\u663e\u793a\u6807\u8bb0 &amp; & \u53ef\u7528\u4e8e\u663e\u793a\u5176\u5b83\u7279\u6b8a\u5b57\u7b26 &quot; \" \u5f15\u53f7 &reg; \u00ae \u5df2\u6ce8\u518c &copy; \u00a9 \u7248\u6743 &trade; \u2122 \u5546\u6807 &nbsp; \u4e0d\u65ad\u884c\u7684\u7a7a\u767d \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u7279\u6b8a\u7b26\u53f7"},{"location":"Web/html/html10/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html2/","text":"\u6587\u672c\u6807\u7b7e\u867d\u7136\u5f88\u591a\uff0c\u4f46\u5927\u90e8\u5206\u53ef\u770b\u6210\u662f\u9884\u5b9a\u597d\u6837\u5f0f\u7684 <div> \u548c <span> \u3002 <div> \u6807\u7b7e \u00b6 <div> \u5143\u7d20 (\u6216 HTML \u6587\u6863\u5206\u533a\u5143\u7d20) \u662f\u4e00\u4e2a\u901a\u7528\u578b\u7684\u6d41\u5185\u5bb9\u5bb9\u5668\uff0c\u5728\u4e0d\u4f7f\u7528CSS\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u5bf9\u5185\u5bb9\u6216\u5e03\u5c40\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u5176\u4ed6\u5757\u7ea7\u6807\u7b7e\u4f8b\u5982\uff1a <h1> , <p> , <pre> , <ul> , <ol> , <table> \u3002 <span> \u6807\u7b7e \u00b6 <span> \u5143\u7d20\u662f\u77ed\u8bed\u5185\u5bb9\u7684\u901a\u7528\u884c\u5185\u5bb9\u5668\uff0c\u5e76\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u8bed\u4e49\u3002\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7f16\u7ec4\u5143\u7d20\u4ee5\u8fbe\u5230\u67d0\u79cd\u6837\u5f0f\u610f\u56fe\uff08\u901a\u8fc7\u4f7f\u7528\u7c7b\u6216\u8005 Id \u5c5e\u6027\uff09\uff0c\u6216\u8005\u8fd9\u4e9b\u5143\u7d20\u6709\u7740\u5171\u540c\u7684\u5c5e\u6027\uff0c\u6bd4\u5982lang\u3002\u5e94\u8be5\u5728\u6ca1\u6709\u5176\u4ed6\u5408\u9002\u7684\u8bed\u4e49\u5143\u7d20\u65f6\u624d\u4f7f\u7528\u5b83\u3002 <span> \u4e0e <div> \u5143\u7d20\u5f88\u76f8\u4f3c\uff0c\u4f46 <div> \u662f\u4e00\u4e2a \u5757\u5143\u7d20 \u800c <span> \u5219\u662f\u884c\u5185\u5143\u7d20 \u5176\u4ed6\u5185\u8054\u6807\u7b7e\u4f8b\u5982\uff1a <i> , <b> , <del> , <ins> , <td> , <a> \u3002 <h1> - <h6> \u6807\u7b7e \u00b6 HTML <h1>\u2013<h6> \u6807\u9898 (Heading) \u5143\u7d20\u5448\u73b0\u4e86\u516d\u4e2a\u4e0d\u540c\u7684\u7ea7\u522b\u7684\u6807\u9898\uff0c <h1> \u7ea7\u522b\u6700\u9ad8\uff0c\u800c <h6> \u7ea7\u522b\u6700\u4f4e\u3002 <p> \u6807\u7b7e \u00b6 HTML <p> \u5143\u7d20\uff08\u6216\u8005\u8bf4 HTML \u6bb5\u843d\u5143\u7d20\uff09\u8868\u793a\u6587\u672c\u7684\u4e00\u4e2a\u6bb5\u843d\u3002\u8be5\u5143\u7d20\u901a\u5e38\u8868\u73b0\u4e3a\u4e00\u6574\u5757\u4e0e\u76f8\u90bb\u6587\u672c\u5206\u79bb\u7684\u6587\u672c\uff0c\u6216\u4ee5\u5782\u76f4\u7684\u7a7a\u767d\u9694\u79bb\u6216\u4ee5\u9996\u884c\u7f29\u8fdb\u3002\u53e6\u5916\uff0c <p> \u662f\u5757\u7ea7\u5143\u7d20\u3002 <pre> \u6807\u7b7e \u00b6 HTML <pre> \u5143\u7d20\u8868\u793a\u9884\u5b9a\u4e49\u683c\u5f0f\u6587\u672c\u3002\u5728\u8be5\u5143\u7d20\u4e2d\u7684\u6587\u672c\u901a\u5e38\u6309\u7167\u539f\u6587\u4ef6\u4e2d\u7684\u7f16\u6392\uff0c\u4ee5\u7b49\u5bbd\u5b57\u4f53\u7684\u5f62\u5f0f\u5c55\u73b0\u51fa\u6765\uff0c\u6587\u672c\u4e2d\u7684\u7a7a\u767d\u7b26\uff08\u6bd4\u5982\u7a7a\u683c\u548c\u6362\u884c\u7b26\uff09\u90fd\u4f1a\u663e\u793a\u51fa\u6765\u3002(\u7d27\u8ddf\u5728 <pre> \u5f00\u59cb\u6807\u7b7e\u540e\u7684\u6362\u884c\u7b26\u4e5f\u4f1a\u88ab\u7701\u7565) <br> \u6807\u7b7e \u00b6 HTML <br> \u5143\u7d20\u5728\u6587\u672c\u4e2d\u751f\u6210\u4e00\u4e2a\u6362\u884c\uff08\u56de\u8f66\uff09\u7b26\u53f7\u3002\u6b64\u5143\u7d20\u5728\u5199\u8bd7\u548c\u5730\u5740\u65f6\u5f88\u6709\u7528\uff0c\u8fd9\u4e9b\u5730\u65b9\u7684\u6362\u884c\u90fd\u975e\u5e38\u91cd\u8981\u3002 <hr> \u6807\u7b7e \u00b6 HTML <hr> \u5143\u7d20\u8868\u793a\u6bb5\u843d\u7ea7\u5143\u7d20\u4e4b\u95f4\u7684\u4e3b\u9898\u8f6c\u6362\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u6545\u4e8b\u4e2d\u7684\u573a\u666f\u7684\u6539\u53d8\uff0c\u6216\u4e00\u4e2a\u7ae0\u8282\u7684\u4e3b\u9898\u7684\u6539\u53d8\uff09\u3002 \u5728 HTML \u7684\u65e9\u671f\u7248\u672c\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a\u6c34\u5e73\u7ebf\u3002\u73b0\u5728\u5b83\u4ecd\u80fd\u5728\u53ef\u89c6\u5316\u6d4f\u89c8\u5668\u4e2d\u8868\u73b0\u4e3a\u6c34\u5e73\u7ebf\uff0c\u4f46\u76ee\u524d\u88ab\u5b9a\u4e49\u4e3a\u8bed\u4e49\u4e0a\u7684\uff0c\u800c\u4e0d\u662f\u8868\u73b0\u5c42\u9762\u4e0a\u3002\u6240\u4ee5\u5982\u679c\u60f3\u753b\u4e00\u6761\u6a2a\u7ebf\uff0c\u8bf7\u4f7f\u7528\u9002\u5f53\u7684 css \u6837\u5f0f\u6765\u4fee\u9970\u3002 <i> \u6807\u7b7e \u00b6 HTML \u5143\u7d20 <i> \u7528\u4e8e\u8868\u73b0\u56e0\u67d0\u4e9b\u539f\u56e0\u9700\u8981\u533a\u5206\u666e\u901a\u6587\u672c\u7684\u4e00\u7cfb\u5217\u6587\u672c\u3002\u4f8b\u5982\u6280\u672f\u672f\u8bed\u3001\u5916\u6587\u77ed\u8bed\u6216\u662f\u5c0f\u8bf4\u4e2d\u4eba\u7269\u7684\u601d\u60f3\u6d3b\u52a8\u7b49\uff0c\u5b83\u7684\u5185\u5bb9\u901a\u5e38\u4ee5\u659c\u4f53\u663e\u793a\u3002 <b> \u6807\u7b7e \u00b6 HTML \u63d0\u9192\u6ce8\u610f\uff08Bring Attention To\uff09\u5143\u7d20\uff08 <b> \uff09\u7528\u4e8e\u5438\u5f15\u8bfb\u8005\u7684\u6ce8\u610f\u5230\u8be5\u5143\u7d20\u7684\u5185\u5bb9\u4e0a\uff08\u5982\u679c\u6ca1\u6709\u53e6\u52a0\u7279\u522b\u5f3a\u8c03\uff09\u3002\u8fd9\u4e2a\u5143\u7d20\u8fc7\u53bb\u88ab\u8ba4\u4e3a\u662f\u7c97\u4f53\uff08Boldface\uff09\u5143\u7d20\uff0c\u5e76\u4e14\u5927\u591a\u6570\u6d4f\u89c8\u5668\u4ecd\u7136\u5c06\u6587\u5b57\u663e\u793a\u4e3a\u7c97\u4f53\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f60\u4e0d\u5e94\u5c06 <b> \u5143\u7d20\u7528\u4e8e\u663e\u793a\u7c97\u4f53\u6587\u5b57\uff1b\u66ff\u4ee3\u65b9\u6848\u662f\u4f7f\u7528 CSS font-weight \u5c5e\u6027\u6765\u521b\u5efa\u7c97\u4f53\u6587\u5b57\u3002 <del> \u6807\u7b7e \u00b6 HTML \u7684 <del> \u6807\u7b7e\u8868\u793a\u4e00\u4e9b\u88ab\u4ece\u6587\u6863\u4e2d\u5220\u9664\u7684\u6587\u5b57\u5185\u5bb9\u3002\u6bd4\u5982\u53ef\u4ee5\u5728\u9700\u8981\u663e\u793a\u4fee\u6539\u8bb0\u5f55\u6216\u8005\u6e90\u4ee3\u7801\u5dee\u5f02\u7684\u60c5\u51b5\u4f7f\u7528\u8fd9\u4e2a\u6807\u7b7e\u3002 <ins> \u6807\u7b7e\u7684\u4f5c\u7528\u6070\u6070\u4e8e\u6b64\u76f8\u53cd\uff1a\u8868\u793a\u6587\u6863\u4e2d\u6dfb\u52a0\u7684\u5185\u5bb9\u3002 <ins> \u6807\u7b7e \u00b6 HTML <ins> \u5143\u7d20\u5b9a\u4e49\u5df2\u7ecf\u88ab\u63d2\u5165\u6587\u6863\u4e2d\u7684\u6587\u672c\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6587\u672c\u6807\u7b7e"},{"location":"Web/html/html2/#div","text":"<div> \u5143\u7d20 (\u6216 HTML \u6587\u6863\u5206\u533a\u5143\u7d20) \u662f\u4e00\u4e2a\u901a\u7528\u578b\u7684\u6d41\u5185\u5bb9\u5bb9\u5668\uff0c\u5728\u4e0d\u4f7f\u7528CSS\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u5bf9\u5185\u5bb9\u6216\u5e03\u5c40\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u5176\u4ed6\u5757\u7ea7\u6807\u7b7e\u4f8b\u5982\uff1a <h1> , <p> , <pre> , <ul> , <ol> , <table> \u3002","title":"&lt;div&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#span","text":"<span> \u5143\u7d20\u662f\u77ed\u8bed\u5185\u5bb9\u7684\u901a\u7528\u884c\u5185\u5bb9\u5668\uff0c\u5e76\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u8bed\u4e49\u3002\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7f16\u7ec4\u5143\u7d20\u4ee5\u8fbe\u5230\u67d0\u79cd\u6837\u5f0f\u610f\u56fe\uff08\u901a\u8fc7\u4f7f\u7528\u7c7b\u6216\u8005 Id \u5c5e\u6027\uff09\uff0c\u6216\u8005\u8fd9\u4e9b\u5143\u7d20\u6709\u7740\u5171\u540c\u7684\u5c5e\u6027\uff0c\u6bd4\u5982lang\u3002\u5e94\u8be5\u5728\u6ca1\u6709\u5176\u4ed6\u5408\u9002\u7684\u8bed\u4e49\u5143\u7d20\u65f6\u624d\u4f7f\u7528\u5b83\u3002 <span> \u4e0e <div> \u5143\u7d20\u5f88\u76f8\u4f3c\uff0c\u4f46 <div> \u662f\u4e00\u4e2a \u5757\u5143\u7d20 \u800c <span> \u5219\u662f\u884c\u5185\u5143\u7d20 \u5176\u4ed6\u5185\u8054\u6807\u7b7e\u4f8b\u5982\uff1a <i> , <b> , <del> , <ins> , <td> , <a> \u3002","title":"&lt;span&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#h1-h6","text":"HTML <h1>\u2013<h6> \u6807\u9898 (Heading) \u5143\u7d20\u5448\u73b0\u4e86\u516d\u4e2a\u4e0d\u540c\u7684\u7ea7\u522b\u7684\u6807\u9898\uff0c <h1> \u7ea7\u522b\u6700\u9ad8\uff0c\u800c <h6> \u7ea7\u522b\u6700\u4f4e\u3002","title":"&lt;h1&gt; - &lt;h6&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#p","text":"HTML <p> \u5143\u7d20\uff08\u6216\u8005\u8bf4 HTML \u6bb5\u843d\u5143\u7d20\uff09\u8868\u793a\u6587\u672c\u7684\u4e00\u4e2a\u6bb5\u843d\u3002\u8be5\u5143\u7d20\u901a\u5e38\u8868\u73b0\u4e3a\u4e00\u6574\u5757\u4e0e\u76f8\u90bb\u6587\u672c\u5206\u79bb\u7684\u6587\u672c\uff0c\u6216\u4ee5\u5782\u76f4\u7684\u7a7a\u767d\u9694\u79bb\u6216\u4ee5\u9996\u884c\u7f29\u8fdb\u3002\u53e6\u5916\uff0c <p> \u662f\u5757\u7ea7\u5143\u7d20\u3002","title":"&lt;p&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#pre","text":"HTML <pre> \u5143\u7d20\u8868\u793a\u9884\u5b9a\u4e49\u683c\u5f0f\u6587\u672c\u3002\u5728\u8be5\u5143\u7d20\u4e2d\u7684\u6587\u672c\u901a\u5e38\u6309\u7167\u539f\u6587\u4ef6\u4e2d\u7684\u7f16\u6392\uff0c\u4ee5\u7b49\u5bbd\u5b57\u4f53\u7684\u5f62\u5f0f\u5c55\u73b0\u51fa\u6765\uff0c\u6587\u672c\u4e2d\u7684\u7a7a\u767d\u7b26\uff08\u6bd4\u5982\u7a7a\u683c\u548c\u6362\u884c\u7b26\uff09\u90fd\u4f1a\u663e\u793a\u51fa\u6765\u3002(\u7d27\u8ddf\u5728 <pre> \u5f00\u59cb\u6807\u7b7e\u540e\u7684\u6362\u884c\u7b26\u4e5f\u4f1a\u88ab\u7701\u7565)","title":"&lt;pre&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#br","text":"HTML <br> \u5143\u7d20\u5728\u6587\u672c\u4e2d\u751f\u6210\u4e00\u4e2a\u6362\u884c\uff08\u56de\u8f66\uff09\u7b26\u53f7\u3002\u6b64\u5143\u7d20\u5728\u5199\u8bd7\u548c\u5730\u5740\u65f6\u5f88\u6709\u7528\uff0c\u8fd9\u4e9b\u5730\u65b9\u7684\u6362\u884c\u90fd\u975e\u5e38\u91cd\u8981\u3002","title":"&lt;br&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#hr","text":"HTML <hr> \u5143\u7d20\u8868\u793a\u6bb5\u843d\u7ea7\u5143\u7d20\u4e4b\u95f4\u7684\u4e3b\u9898\u8f6c\u6362\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u6545\u4e8b\u4e2d\u7684\u573a\u666f\u7684\u6539\u53d8\uff0c\u6216\u4e00\u4e2a\u7ae0\u8282\u7684\u4e3b\u9898\u7684\u6539\u53d8\uff09\u3002 \u5728 HTML \u7684\u65e9\u671f\u7248\u672c\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a\u6c34\u5e73\u7ebf\u3002\u73b0\u5728\u5b83\u4ecd\u80fd\u5728\u53ef\u89c6\u5316\u6d4f\u89c8\u5668\u4e2d\u8868\u73b0\u4e3a\u6c34\u5e73\u7ebf\uff0c\u4f46\u76ee\u524d\u88ab\u5b9a\u4e49\u4e3a\u8bed\u4e49\u4e0a\u7684\uff0c\u800c\u4e0d\u662f\u8868\u73b0\u5c42\u9762\u4e0a\u3002\u6240\u4ee5\u5982\u679c\u60f3\u753b\u4e00\u6761\u6a2a\u7ebf\uff0c\u8bf7\u4f7f\u7528\u9002\u5f53\u7684 css \u6837\u5f0f\u6765\u4fee\u9970\u3002","title":"&lt;hr&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#i","text":"HTML \u5143\u7d20 <i> \u7528\u4e8e\u8868\u73b0\u56e0\u67d0\u4e9b\u539f\u56e0\u9700\u8981\u533a\u5206\u666e\u901a\u6587\u672c\u7684\u4e00\u7cfb\u5217\u6587\u672c\u3002\u4f8b\u5982\u6280\u672f\u672f\u8bed\u3001\u5916\u6587\u77ed\u8bed\u6216\u662f\u5c0f\u8bf4\u4e2d\u4eba\u7269\u7684\u601d\u60f3\u6d3b\u52a8\u7b49\uff0c\u5b83\u7684\u5185\u5bb9\u901a\u5e38\u4ee5\u659c\u4f53\u663e\u793a\u3002","title":"&lt;i&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#b","text":"HTML \u63d0\u9192\u6ce8\u610f\uff08Bring Attention To\uff09\u5143\u7d20\uff08 <b> \uff09\u7528\u4e8e\u5438\u5f15\u8bfb\u8005\u7684\u6ce8\u610f\u5230\u8be5\u5143\u7d20\u7684\u5185\u5bb9\u4e0a\uff08\u5982\u679c\u6ca1\u6709\u53e6\u52a0\u7279\u522b\u5f3a\u8c03\uff09\u3002\u8fd9\u4e2a\u5143\u7d20\u8fc7\u53bb\u88ab\u8ba4\u4e3a\u662f\u7c97\u4f53\uff08Boldface\uff09\u5143\u7d20\uff0c\u5e76\u4e14\u5927\u591a\u6570\u6d4f\u89c8\u5668\u4ecd\u7136\u5c06\u6587\u5b57\u663e\u793a\u4e3a\u7c97\u4f53\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f60\u4e0d\u5e94\u5c06 <b> \u5143\u7d20\u7528\u4e8e\u663e\u793a\u7c97\u4f53\u6587\u5b57\uff1b\u66ff\u4ee3\u65b9\u6848\u662f\u4f7f\u7528 CSS font-weight \u5c5e\u6027\u6765\u521b\u5efa\u7c97\u4f53\u6587\u5b57\u3002","title":"&lt;b&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#del","text":"HTML \u7684 <del> \u6807\u7b7e\u8868\u793a\u4e00\u4e9b\u88ab\u4ece\u6587\u6863\u4e2d\u5220\u9664\u7684\u6587\u5b57\u5185\u5bb9\u3002\u6bd4\u5982\u53ef\u4ee5\u5728\u9700\u8981\u663e\u793a\u4fee\u6539\u8bb0\u5f55\u6216\u8005\u6e90\u4ee3\u7801\u5dee\u5f02\u7684\u60c5\u51b5\u4f7f\u7528\u8fd9\u4e2a\u6807\u7b7e\u3002 <ins> \u6807\u7b7e\u7684\u4f5c\u7528\u6070\u6070\u4e8e\u6b64\u76f8\u53cd\uff1a\u8868\u793a\u6587\u6863\u4e2d\u6dfb\u52a0\u7684\u5185\u5bb9\u3002","title":"&lt;del&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#ins","text":"HTML <ins> \u5143\u7d20\u5b9a\u4e49\u5df2\u7ecf\u88ab\u63d2\u5165\u6587\u6863\u4e2d\u7684\u6587\u672c\u3002","title":"&lt;ins&gt;\u6807\u7b7e"},{"location":"Web/html/html2/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html3/","text":"HTML <img> \u5143\u7d20\u5c06\u4e00\u4efd\u56fe\u50cf\u5d4c\u5165\u6587\u6863\u3002 \u9ed8\u8ba4\u4e3a\u884c\u5185\u5143\u7d20\uff0c\u5373 display: inline \u3002 src \u5c5e\u6027 \u00b6 \u8be5\u5c5e\u6027\u662f\u5fc5\u987b\u7684\uff0c\u5b83\u5305\u542b\u4e86\u4f60\u60f3\u5d4c\u5165\u7684\u56fe\u7247\u7684\u6587\u4ef6\u8def\u5f84\u3002 alt \u5c5e\u6027 \u00b6 \u8be5\u5c5e\u6027\u5305\u542b\u4e00\u6761\u5bf9\u56fe\u50cf\u7684\u6587\u672c\u63cf\u8ff0\uff0c\u8fd9\u4e0d\u662f\u5f3a\u5236\u6027\u7684\uff0c\u4f46\u5bf9\u53ef\u8bbf\u95ee\u6027\u800c\u8a00\uff0c\u5b83\u96be\u4ee5\u7f6e\u4fe1\u5730\u6709\u7528\u2014\u2014\u5c4f\u5e55\u9605\u8bfb\u5668\u4f1a\u5c06\u8fd9\u4e9b\u63cf\u8ff0\u8bfb\u7ed9\u9700\u8981\u4f7f\u7528\u9605\u8bfb\u5668\u7684\u4f7f\u7528\u8005\u542c\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u56fe\u50cf\u7684\u542b\u4e49\u3002\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u65e0\u6cd5\u52a0\u8f7d\u56fe\u50cf\uff0c\u666e\u901a\u6d4f\u89c8\u5668\u4e5f\u4f1a\u5728\u9875\u9762\u4e0a\u663e\u793a alt \u5c5e\u6027\u4e2d\u7684\u5907\u7528\u6587\u672c\uff1a\u4f8b\u5982\uff0c\u7f51\u7edc\u9519\u8bef\u3001\u5185\u5bb9\u88ab\u5c4f\u853d\u6216\u94fe\u63a5\u8fc7\u671f\u65f6\u3002 height \u5c5e\u6027 \u00b6 \u56fe\u50cf\u7684\u9ad8\u5ea6\uff0c\u5728 HTML5 \u4e2d\u7684\u5355\u4f4d\u662f CSS \u50cf\u7d20\uff0c\u5728 HTML 4 \u4e2d\u65e2\u53ef\u4ee5\u662f\u50cf\u7d20\uff0c\u4e5f\u53ef\u4ee5\u662f\u767e\u5206\u6bd4\u3002\u53ef\u4ee5\u53ea\u6307\u5b9a width \u548c height \u4e2d\u7684\u4e00\u4e2a\u503c\uff0c\u6d4f\u89c8\u5668\u4f1a\u6839\u636e\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u3002 width \u5c5e\u6027 \u00b6 \u56fe\u50cf\u7684\u5bbd\u5ea6\uff0c\u5728 HTML5 \u4e2d\u5355\u4f4d\u662f CSS \u50cf\u7d20\uff0c \u5728 HTML 4 \u4e2d\u53ef\u4ee5\u662f\u50cf\u7d20\u4e5f\u53ef\u4ee5\u662f\u767e\u5206\u6bd4\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u56fe\u7247"},{"location":"Web/html/html3/#src","text":"\u8be5\u5c5e\u6027\u662f\u5fc5\u987b\u7684\uff0c\u5b83\u5305\u542b\u4e86\u4f60\u60f3\u5d4c\u5165\u7684\u56fe\u7247\u7684\u6587\u4ef6\u8def\u5f84\u3002","title":"src\u5c5e\u6027"},{"location":"Web/html/html3/#alt","text":"\u8be5\u5c5e\u6027\u5305\u542b\u4e00\u6761\u5bf9\u56fe\u50cf\u7684\u6587\u672c\u63cf\u8ff0\uff0c\u8fd9\u4e0d\u662f\u5f3a\u5236\u6027\u7684\uff0c\u4f46\u5bf9\u53ef\u8bbf\u95ee\u6027\u800c\u8a00\uff0c\u5b83\u96be\u4ee5\u7f6e\u4fe1\u5730\u6709\u7528\u2014\u2014\u5c4f\u5e55\u9605\u8bfb\u5668\u4f1a\u5c06\u8fd9\u4e9b\u63cf\u8ff0\u8bfb\u7ed9\u9700\u8981\u4f7f\u7528\u9605\u8bfb\u5668\u7684\u4f7f\u7528\u8005\u542c\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u56fe\u50cf\u7684\u542b\u4e49\u3002\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u65e0\u6cd5\u52a0\u8f7d\u56fe\u50cf\uff0c\u666e\u901a\u6d4f\u89c8\u5668\u4e5f\u4f1a\u5728\u9875\u9762\u4e0a\u663e\u793a alt \u5c5e\u6027\u4e2d\u7684\u5907\u7528\u6587\u672c\uff1a\u4f8b\u5982\uff0c\u7f51\u7edc\u9519\u8bef\u3001\u5185\u5bb9\u88ab\u5c4f\u853d\u6216\u94fe\u63a5\u8fc7\u671f\u65f6\u3002","title":"alt\u5c5e\u6027"},{"location":"Web/html/html3/#height","text":"\u56fe\u50cf\u7684\u9ad8\u5ea6\uff0c\u5728 HTML5 \u4e2d\u7684\u5355\u4f4d\u662f CSS \u50cf\u7d20\uff0c\u5728 HTML 4 \u4e2d\u65e2\u53ef\u4ee5\u662f\u50cf\u7d20\uff0c\u4e5f\u53ef\u4ee5\u662f\u767e\u5206\u6bd4\u3002\u53ef\u4ee5\u53ea\u6307\u5b9a width \u548c height \u4e2d\u7684\u4e00\u4e2a\u503c\uff0c\u6d4f\u89c8\u5668\u4f1a\u6839\u636e\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u7f29\u653e\u3002","title":"height\u5c5e\u6027"},{"location":"Web/html/html3/#width","text":"\u56fe\u50cf\u7684\u5bbd\u5ea6\uff0c\u5728 HTML5 \u4e2d\u5355\u4f4d\u662f CSS \u50cf\u7d20\uff0c \u5728 HTML 4 \u4e2d\u53ef\u4ee5\u662f\u50cf\u7d20\u4e5f\u53ef\u4ee5\u662f\u767e\u5206\u6bd4\u3002","title":"width\u5c5e\u6027"},{"location":"Web/html/html3/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html4/","text":"<audio> \u6807\u7b7e \u00b6 HTML <audio> \u5143\u7d20\u7528\u4e8e\u5728\u6587\u6863\u4e2d\u5d4c\u5165\u97f3\u9891\u5185\u5bb9\u3002 <audio> \u5143\u7d20\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u97f3\u9891\u8d44\u6e90\uff0c \u8fd9\u4e9b\u97f3\u9891\u8d44\u6e90\u53ef\u4ee5\u4f7f\u7528 src \u5c5e\u6027\u6216\u8005 <source> \u5143\u7d20\u6765\u8fdb\u884c\u63cf\u8ff0\uff1a\u6d4f\u89c8\u5668\u5c06\u4f1a\u9009\u62e9\u6700\u5408\u9002\u7684\u4e00\u4e2a\u6765\u4f7f\u7528\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528 MediaStream \u5c06\u8fd9\u4e2a\u5143\u7d20\u7528\u4e8e\u6d41\u5f0f\u5a92\u4f53\u3002 \u4f7f\u7528src\u5c5e\u6027\u64ad\u653e \u793a\u4f8b\uff1a < audio controls src = \"/audios/bgm.mp3\" > Your browser does not support the < code > audio </ code > element. </ audio > <audio> \u4e0e\u591a\u4e2a <source> \u5143\u7d20 \u8fd9\u4e2a\u4f8b\u5b50\u5305\u542b\u4e86\u591a\u4e2a <source> \u5143\u7d20\u3002\u5982\u679c\u80fd\u591f\u64ad\u653e\u7684\u8bdd\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u8bd5\u56fe\u53bb\u52a0\u8f7d\u7b2c\u4e00\u4e2a source \u5143\u7d20\uff1b\u5982\u679c\u4e0d\u884c\uff0c\u90a3\u5c31\u9000\u800c\u6c42\u5176\u6b21\u53bb\u52a0\u8f7d\u7b2c\u4e8c\u4e2a\u3002 < audio controls > < source src = \"/audios/sound1\" type = \"audio/mpeg\" /> < source src = \"/audios/sound2\" type = \"audio/mpeg\" /> </ audio > <video> \u6807\u7b7e \u00b6 HTML <video> \u5143\u7d20 \u7528\u4e8e\u5728 HTML \u6216\u8005 XHTML \u6587\u6863\u4e2d\u5d4c\u5165\u5a92\u4f53\u64ad\u653e\u5668\uff0c\u7528\u4e8e\u652f\u6301\u6587\u6863\u5185\u7684\u89c6\u9891\u64ad\u653e\u3002\u4f60\u4e5f\u53ef\u4ee5\u5c06 <video> \u6807\u7b7e\u7528\u4e8e\u97f3\u9891\u5185\u5bb9\uff0c\u4f46\u662f <audio> \u5143\u7d20\u53ef\u80fd\u5728\u7528\u6237\u4f53\u9a8c\u4e0a\u66f4\u5408\u9002\u3002 \u793a\u4f8b\uff1a < video controls width = \"800\" > < source src = \"/videos/video1.mp4\" type = \"video/mp4\" > < source src = \"/videos/video2.mp4\" type = \"video/mp4\" > Sorry, your browser doesn't support embedded videos. </ video > \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u97f3\u9891\u548c\u89c6\u9891"},{"location":"Web/html/html4/#audio","text":"HTML <audio> \u5143\u7d20\u7528\u4e8e\u5728\u6587\u6863\u4e2d\u5d4c\u5165\u97f3\u9891\u5185\u5bb9\u3002 <audio> \u5143\u7d20\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u97f3\u9891\u8d44\u6e90\uff0c \u8fd9\u4e9b\u97f3\u9891\u8d44\u6e90\u53ef\u4ee5\u4f7f\u7528 src \u5c5e\u6027\u6216\u8005 <source> \u5143\u7d20\u6765\u8fdb\u884c\u63cf\u8ff0\uff1a\u6d4f\u89c8\u5668\u5c06\u4f1a\u9009\u62e9\u6700\u5408\u9002\u7684\u4e00\u4e2a\u6765\u4f7f\u7528\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528 MediaStream \u5c06\u8fd9\u4e2a\u5143\u7d20\u7528\u4e8e\u6d41\u5f0f\u5a92\u4f53\u3002 \u4f7f\u7528src\u5c5e\u6027\u64ad\u653e \u793a\u4f8b\uff1a < audio controls src = \"/audios/bgm.mp3\" > Your browser does not support the < code > audio </ code > element. </ audio > <audio> \u4e0e\u591a\u4e2a <source> \u5143\u7d20 \u8fd9\u4e2a\u4f8b\u5b50\u5305\u542b\u4e86\u591a\u4e2a <source> \u5143\u7d20\u3002\u5982\u679c\u80fd\u591f\u64ad\u653e\u7684\u8bdd\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u8bd5\u56fe\u53bb\u52a0\u8f7d\u7b2c\u4e00\u4e2a source \u5143\u7d20\uff1b\u5982\u679c\u4e0d\u884c\uff0c\u90a3\u5c31\u9000\u800c\u6c42\u5176\u6b21\u53bb\u52a0\u8f7d\u7b2c\u4e8c\u4e2a\u3002 < audio controls > < source src = \"/audios/sound1\" type = \"audio/mpeg\" /> < source src = \"/audios/sound2\" type = \"audio/mpeg\" /> </ audio >","title":"&lt;audio&gt;\u6807\u7b7e"},{"location":"Web/html/html4/#video","text":"HTML <video> \u5143\u7d20 \u7528\u4e8e\u5728 HTML \u6216\u8005 XHTML \u6587\u6863\u4e2d\u5d4c\u5165\u5a92\u4f53\u64ad\u653e\u5668\uff0c\u7528\u4e8e\u652f\u6301\u6587\u6863\u5185\u7684\u89c6\u9891\u64ad\u653e\u3002\u4f60\u4e5f\u53ef\u4ee5\u5c06 <video> \u6807\u7b7e\u7528\u4e8e\u97f3\u9891\u5185\u5bb9\uff0c\u4f46\u662f <audio> \u5143\u7d20\u53ef\u80fd\u5728\u7528\u6237\u4f53\u9a8c\u4e0a\u66f4\u5408\u9002\u3002 \u793a\u4f8b\uff1a < video controls width = \"800\" > < source src = \"/videos/video1.mp4\" type = \"video/mp4\" > < source src = \"/videos/video2.mp4\" type = \"video/mp4\" > Sorry, your browser doesn't support embedded videos. </ video >","title":"&lt;video&gt;\u6807\u7b7e"},{"location":"Web/html/html4/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html5/","text":"<a> \u6807\u7b7e \u00b6 HTML <a> \u5143\u7d20\uff08\u6216\u79f0\u951a\u5143\u7d20\uff09\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684 href \u5c5e\u6027\u521b\u5efa\u901a\u5411\u5176\u4ed6\u7f51\u9875\u3001\u6587\u4ef6\u3001\u540c\u4e00\u9875\u9762\u5185\u7684\u4f4d\u7f6e\u3001\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u4efb\u4f55\u5176\u4ed6 URL \u7684\u8d85\u94fe\u63a5\u3002 <a> \u4e2d\u7684\u5185\u5bb9\u5e94\u8be5\u6307\u660e\u94fe\u63a5\u7684\u610f\u56fe\u3002\u5982\u679c\u5b58\u5728 href \u5c5e\u6027\uff0c\u5f53 <a> \u5143\u7d20\u805a\u7126\u65f6\u6309\u4e0b\u56de\u8f66\u952e\u5c31\u4f1a\u6fc0\u6d3b\u5b83\u3002 \u5e38\u7528\u9009\u9879 \u00b6 \u70b9\u51fb\u94fe\u63a5\u6253\u5f00\u65b0\u6807\u7b7e\u9875\u9762\u65f6\u52a0\u5165\u5c5e\u6027\uff1atarget=\"_blank\" \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u8d85\u94fe\u63a5"},{"location":"Web/html/html5/#a","text":"HTML <a> \u5143\u7d20\uff08\u6216\u79f0\u951a\u5143\u7d20\uff09\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684 href \u5c5e\u6027\u521b\u5efa\u901a\u5411\u5176\u4ed6\u7f51\u9875\u3001\u6587\u4ef6\u3001\u540c\u4e00\u9875\u9762\u5185\u7684\u4f4d\u7f6e\u3001\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u4efb\u4f55\u5176\u4ed6 URL \u7684\u8d85\u94fe\u63a5\u3002 <a> \u4e2d\u7684\u5185\u5bb9\u5e94\u8be5\u6307\u660e\u94fe\u63a5\u7684\u610f\u56fe\u3002\u5982\u679c\u5b58\u5728 href \u5c5e\u6027\uff0c\u5f53 <a> \u5143\u7d20\u805a\u7126\u65f6\u6309\u4e0b\u56de\u8f66\u952e\u5c31\u4f1a\u6fc0\u6d3b\u5b83\u3002","title":"&lt;a&gt;\u6807\u7b7e"},{"location":"Web/html/html5/#_1","text":"\u70b9\u51fb\u94fe\u63a5\u6253\u5f00\u65b0\u6807\u7b7e\u9875\u9762\u65f6\u52a0\u5165\u5c5e\u6027\uff1atarget=\"_blank\"","title":"\u5e38\u7528\u9009\u9879"},{"location":"Web/html/html5/#_2","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html6/","text":"<form> \u6807\u7b7e \u00b6 HTML \u5143\u7d20\u8868\u793a\u6587\u6863\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u6b64\u533a\u57df\u5305\u542b\u4ea4\u4e92\u63a7\u4ef6\uff0c\u7528\u4e8e\u5411 Web \u670d\u52a1\u5668\u63d0\u4ea4\u4fe1\u606f\u3002 <input> \u6807\u7b7e \u00b6 HTML <input> \u7528\u6765\u586b\u5199\u5185\u5bb9\uff0c\u5e38\u89c1\u7c7b\u578b\u6709\uff1a <input type=\"text\"> \uff1a\u521b\u5efa\u57fa\u7840\u7684\u5355\u884c\u6587\u672c\u6846\u3002 <input type=\"number\"> \uff1a\u7528\u4e8e\u8ba9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\u3002\u5176\u5305\u62ec\u5185\u7f6e\u9a8c\u8bc1\u4ee5\u62d2\u7edd\u975e\u6570\u5b57\u8f93\u5165\u3002\u6d4f\u89c8\u5668\u53ef\u80fd\u4f1a\u9009\u62e9\u63d0\u4f9b\u6b65\u8fdb\u7bad\u5934\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u9f20\u6807\u589e\u52a0\u548c\u51cf\u5c11\u8f93\u5165\u7684\u503c\uff0c\u6216\u8005\u53ea\u9700\u7528\u6307\u5c16\u6572\u51fb\u5373\u53ef\u3002 <input type=\"email\"> \uff1a\u5e26\u6709 \u201cemail\u201d (\u7535\u5b50\u90ae\u7bb1) \u7c7b\u578b\u6807\u8bb0\u7684\u8f93\u5165\u6846\u5143\u7d20 ( <input> ) \u80fd\u591f\u8ba9\u7528\u6237\u8f93\u5165\u6216\u7f16\u8f91\u4e00\u4e2a\u7535\u5b50\u90ae\u7bb1\u5730\u5740\uff0c\u6b64\u5916\uff0c\u5982\u679c\u6307\u5b9a\u4e86multiple\u5c5e\u6027\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u8f93\u5165\u591a\u4e2a\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u3002\u5728\u8868\u5355\u63d0\u4ea4\u524d\uff0c\u8f93\u5165\u6846\u4f1a\u81ea\u52a8\u9a8c\u8bc1\u8f93\u5165\u503c\u662f\u5426\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u6cd5\u7684\u7535\u5b50\u90ae\u7bb1\u5730\u5740 (\u975e\u7a7a\u503c\u4e14\u7b26\u5408\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u683c\u5f0f). CSS \u4f2a\u6807\u7b7e :valid \u548c :invalid \u80fd\u591f\u5728\u6821\u9a8c\u540e\u81ea\u52a8\u5e94\u7528\u3002 <input type=\"password\"> \uff1a <input> \u5143\u7d20 \u91cc\u6709\u4e00\u79cd\u53eb\u505a \u201cpassword\u201d \u7684\u503c\uff0c\u7ed9\u6211\u4eec\u4e00\u4e2a\u65b9\u6cd5\u8ba9\u7528\u6237\u66f4\u52a0\u5b89\u5168\u7684\u8f93\u5165\u5bc6\u7801\u3002\u8fd9\u4e2a\u5143\u7d20\u662f\u4f5c\u4e3a\u4e00\u884c\u7eaf\u6587\u672c\u7f16\u8f91\u5668\u63a7\u4ef6\u5448\u73b0\u7684\uff0c\u5176\u4e2d\u6587\u672c\u88ab\u906e\u853d\u4ee5\u81f4\u4e8e\u65e0\u6cd5\u8bfb\u53d6\uff0c\u901a\u5e38\u901a\u8fc7\u7528\u8bf8\u5982\u661f\u53f7\uff08\u201c*\u201d\uff09\u6216\u70b9\uff08\u201c\u2022\u201d\uff09\u7b49\u7b26\u53f7\u66ff\u6362\u6bcf\u4e2a\u5b57\u7b26\u6765\u5b9e\u73b0\u3002\u8fd9\u4e2a\u7b26\u53f7\u4f1a\u6839\u636e\u7528\u6237\u7684\u6d4f\u89c8\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u6765\u5177\u4f53\u663e\u793a\u54ea\u4e2a\u3002 <input type=\"radio\"> \uff1a <input> \u7684 radio \u7c7b\u578b\u5143\u7d20\u9ed8\u8ba4\u6e32\u67d3\u4e3a\u5c0f\u578b\u5706\u5708\u56fe\u8868\uff0c\u586b\u5145\u5373\u4e3a\u6fc0\u6d3b\uff0c\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u63cf\u8ff0\u989d\u590d\u9009\u6846\uff08checkbox\uff09\u7c7b\u578b\u3002\u5355\u9009\u6309\u94ae\u5141\u8bb8\u4f60\u9009\u62e9\u5355\u4e00\u7684\u503c\u6765\u63d0\u4ea4\u8868\u5355\u3002 \u5e38\u7528\u5c5e\u6027\u6709\uff1a name : \u540d\u79f0 id : \u552f\u4e00ID maxlength \uff1a\u6700\u5927\u957f\u5ea6 minlength \uff1a\u6700\u5c0f\u957f\u5ea6 required \uff1a\u662f\u5426\u5fc5\u586b placeholder \uff1a\u5f53\u8868\u5355\u63a7\u4ef6\u4e3a\u7a7a\u65f6\uff0c\u63a7\u4ef6\u4e2d\u663e\u793a\u7684\u5185\u5bb9 <textarea> \u6807\u7b7e \u00b6 HTML <textarea> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u591a\u884c\u7eaf\u6587\u672c\u7f16\u8f91\u63a7\u4ef6\uff0c\u5f53\u4f60\u5e0c\u671b\u7528\u6237\u8f93\u5165\u4e00\u6bb5\u76f8\u5f53\u957f\u7684\u3001\u4e0d\u9650\u683c\u5f0f\u7684\u6587\u672c\uff0c\u4f8b\u5982\u8bc4\u8bba\u6216\u53cd\u9988\u8868\u5355\u4e2d\u7684\u4e00\u6bb5\u610f\u89c1\u65f6\uff0c\u8fd9\u5f88\u6709\u7528\u3002 <select> \u4e0e <option> \u6807\u7b7e \u00b6 HTML <select> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u63d0\u4f9b\u9009\u9879\u83dc\u5355\u7684\u63a7\u4ef6\u3002 \u793a\u4f8b\uff1a \u00b6 < label for = \"pet-select\" > Choose a pet: </ label > < select name = \"pets\" id = \"pet-select\" > < option value = \"\" > --Please choose an option-- </ option > < option value = \"dog\" > Dog </ option > < option value = \"cat\" > Cat </ option > < option value = \"hamster\" > Hamster </ option > < option value = \"parrot\" > Parrot </ option > < option value = \"spider\" > Spider </ option > < option value = \"goldfish\" > Goldfish </ option > </ select > <button> \u6807\u7b7e \u00b6 HTML <button> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u6309\u94ae\uff0c\u53ef\u4ee5\u7528\u5728\u8868\u5355\u6216\u6587\u6863\u5176\u5b83\u9700\u8981\u4f7f\u7528\u7b80\u5355\u6807\u51c6\u6309\u94ae\u7684\u5730\u65b9\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cHTML \u6309\u94ae\u7684\u663e\u793a\u6837\u5f0f\u63a5\u8fd1\u4e8e user agent \u6240\u5728\u7684\u5bbf\u4e3b\u7cfb\u7edf\u5e73\u53f0\uff08\u7528\u6237\u64cd\u4f5c\u7cfb\u7edf\uff09\u7684\u6309\u94ae\uff0c \u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528 CSS \u6765\u6539\u53d8\u6309\u94ae\u7684\u6837\u8c8c\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u8868\u5355"},{"location":"Web/html/html6/#form","text":"HTML \u5143\u7d20\u8868\u793a\u6587\u6863\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u6b64\u533a\u57df\u5305\u542b\u4ea4\u4e92\u63a7\u4ef6\uff0c\u7528\u4e8e\u5411 Web \u670d\u52a1\u5668\u63d0\u4ea4\u4fe1\u606f\u3002","title":"&lt;form&gt;\u6807\u7b7e"},{"location":"Web/html/html6/#input","text":"HTML <input> \u7528\u6765\u586b\u5199\u5185\u5bb9\uff0c\u5e38\u89c1\u7c7b\u578b\u6709\uff1a <input type=\"text\"> \uff1a\u521b\u5efa\u57fa\u7840\u7684\u5355\u884c\u6587\u672c\u6846\u3002 <input type=\"number\"> \uff1a\u7528\u4e8e\u8ba9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\u3002\u5176\u5305\u62ec\u5185\u7f6e\u9a8c\u8bc1\u4ee5\u62d2\u7edd\u975e\u6570\u5b57\u8f93\u5165\u3002\u6d4f\u89c8\u5668\u53ef\u80fd\u4f1a\u9009\u62e9\u63d0\u4f9b\u6b65\u8fdb\u7bad\u5934\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u9f20\u6807\u589e\u52a0\u548c\u51cf\u5c11\u8f93\u5165\u7684\u503c\uff0c\u6216\u8005\u53ea\u9700\u7528\u6307\u5c16\u6572\u51fb\u5373\u53ef\u3002 <input type=\"email\"> \uff1a\u5e26\u6709 \u201cemail\u201d (\u7535\u5b50\u90ae\u7bb1) \u7c7b\u578b\u6807\u8bb0\u7684\u8f93\u5165\u6846\u5143\u7d20 ( <input> ) \u80fd\u591f\u8ba9\u7528\u6237\u8f93\u5165\u6216\u7f16\u8f91\u4e00\u4e2a\u7535\u5b50\u90ae\u7bb1\u5730\u5740\uff0c\u6b64\u5916\uff0c\u5982\u679c\u6307\u5b9a\u4e86multiple\u5c5e\u6027\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u8f93\u5165\u591a\u4e2a\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u3002\u5728\u8868\u5355\u63d0\u4ea4\u524d\uff0c\u8f93\u5165\u6846\u4f1a\u81ea\u52a8\u9a8c\u8bc1\u8f93\u5165\u503c\u662f\u5426\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u6cd5\u7684\u7535\u5b50\u90ae\u7bb1\u5730\u5740 (\u975e\u7a7a\u503c\u4e14\u7b26\u5408\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u683c\u5f0f). CSS \u4f2a\u6807\u7b7e :valid \u548c :invalid \u80fd\u591f\u5728\u6821\u9a8c\u540e\u81ea\u52a8\u5e94\u7528\u3002 <input type=\"password\"> \uff1a <input> \u5143\u7d20 \u91cc\u6709\u4e00\u79cd\u53eb\u505a \u201cpassword\u201d \u7684\u503c\uff0c\u7ed9\u6211\u4eec\u4e00\u4e2a\u65b9\u6cd5\u8ba9\u7528\u6237\u66f4\u52a0\u5b89\u5168\u7684\u8f93\u5165\u5bc6\u7801\u3002\u8fd9\u4e2a\u5143\u7d20\u662f\u4f5c\u4e3a\u4e00\u884c\u7eaf\u6587\u672c\u7f16\u8f91\u5668\u63a7\u4ef6\u5448\u73b0\u7684\uff0c\u5176\u4e2d\u6587\u672c\u88ab\u906e\u853d\u4ee5\u81f4\u4e8e\u65e0\u6cd5\u8bfb\u53d6\uff0c\u901a\u5e38\u901a\u8fc7\u7528\u8bf8\u5982\u661f\u53f7\uff08\u201c*\u201d\uff09\u6216\u70b9\uff08\u201c\u2022\u201d\uff09\u7b49\u7b26\u53f7\u66ff\u6362\u6bcf\u4e2a\u5b57\u7b26\u6765\u5b9e\u73b0\u3002\u8fd9\u4e2a\u7b26\u53f7\u4f1a\u6839\u636e\u7528\u6237\u7684\u6d4f\u89c8\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u6765\u5177\u4f53\u663e\u793a\u54ea\u4e2a\u3002 <input type=\"radio\"> \uff1a <input> \u7684 radio \u7c7b\u578b\u5143\u7d20\u9ed8\u8ba4\u6e32\u67d3\u4e3a\u5c0f\u578b\u5706\u5708\u56fe\u8868\uff0c\u586b\u5145\u5373\u4e3a\u6fc0\u6d3b\uff0c\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u63cf\u8ff0\u989d\u590d\u9009\u6846\uff08checkbox\uff09\u7c7b\u578b\u3002\u5355\u9009\u6309\u94ae\u5141\u8bb8\u4f60\u9009\u62e9\u5355\u4e00\u7684\u503c\u6765\u63d0\u4ea4\u8868\u5355\u3002 \u5e38\u7528\u5c5e\u6027\u6709\uff1a name : \u540d\u79f0 id : \u552f\u4e00ID maxlength \uff1a\u6700\u5927\u957f\u5ea6 minlength \uff1a\u6700\u5c0f\u957f\u5ea6 required \uff1a\u662f\u5426\u5fc5\u586b placeholder \uff1a\u5f53\u8868\u5355\u63a7\u4ef6\u4e3a\u7a7a\u65f6\uff0c\u63a7\u4ef6\u4e2d\u663e\u793a\u7684\u5185\u5bb9","title":"&lt;input&gt;\u6807\u7b7e"},{"location":"Web/html/html6/#textarea","text":"HTML <textarea> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u591a\u884c\u7eaf\u6587\u672c\u7f16\u8f91\u63a7\u4ef6\uff0c\u5f53\u4f60\u5e0c\u671b\u7528\u6237\u8f93\u5165\u4e00\u6bb5\u76f8\u5f53\u957f\u7684\u3001\u4e0d\u9650\u683c\u5f0f\u7684\u6587\u672c\uff0c\u4f8b\u5982\u8bc4\u8bba\u6216\u53cd\u9988\u8868\u5355\u4e2d\u7684\u4e00\u6bb5\u610f\u89c1\u65f6\uff0c\u8fd9\u5f88\u6709\u7528\u3002","title":"&lt;textarea&gt;\u6807\u7b7e"},{"location":"Web/html/html6/#selectoption","text":"HTML <select> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u63d0\u4f9b\u9009\u9879\u83dc\u5355\u7684\u63a7\u4ef6\u3002","title":"&lt;select&gt;\u4e0e&lt;option&gt;\u6807\u7b7e"},{"location":"Web/html/html6/#_1","text":"< label for = \"pet-select\" > Choose a pet: </ label > < select name = \"pets\" id = \"pet-select\" > < option value = \"\" > --Please choose an option-- </ option > < option value = \"dog\" > Dog </ option > < option value = \"cat\" > Cat </ option > < option value = \"hamster\" > Hamster </ option > < option value = \"parrot\" > Parrot </ option > < option value = \"spider\" > Spider </ option > < option value = \"goldfish\" > Goldfish </ option > </ select >","title":"\u793a\u4f8b\uff1a"},{"location":"Web/html/html6/#button","text":"HTML <button> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u6309\u94ae\uff0c\u53ef\u4ee5\u7528\u5728\u8868\u5355\u6216\u6587\u6863\u5176\u5b83\u9700\u8981\u4f7f\u7528\u7b80\u5355\u6807\u51c6\u6309\u94ae\u7684\u5730\u65b9\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cHTML \u6309\u94ae\u7684\u663e\u793a\u6837\u5f0f\u63a5\u8fd1\u4e8e user agent \u6240\u5728\u7684\u5bbf\u4e3b\u7cfb\u7edf\u5e73\u53f0\uff08\u7528\u6237\u64cd\u4f5c\u7cfb\u7edf\uff09\u7684\u6309\u94ae\uff0c \u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528 CSS \u6765\u6539\u53d8\u6309\u94ae\u7684\u6837\u8c8c\u3002","title":"&lt;button&gt;\u6807\u7b7e"},{"location":"Web/html/html6/#_2","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html7/","text":"<ul> \u4e0e <li> \u6807\u7b7e \u00b6 HTML <ul> \u5143\u7d20\uff08\u6216\u79f0 HTML \u65e0\u5e8f\u5217\u8868\u5143\u7d20\uff09\u8868\u793a\u4e00\u4e2a\u5185\u53ef\u542b\u591a\u4e2a\u5143\u7d20\u7684\u65e0\u5e8f\u5217\u8868\u6216\u9879\u76ee\u7b26\u53f7\u5217\u8868\u3002 \u793a\u4f8b\uff1a \u00b6 < ul > < li > first item </ li > < li > second item </ li > < li > third item </ li > </ ul > <ol> \u4e0e <li> \u6807\u7b7e \u00b6 HTML <ol> \u5143\u7d20\u8868\u793a\u6709\u5e8f\u5217\u8868\uff0c\u901a\u5e38\u6e32\u67d3\u4e3a\u4e00\u4e2a\u5e26\u7f16\u53f7\u7684\u5217\u8868\u3002 \u793a\u4f8b\uff1a \u00b6 < ol > < li > Fee </ li > < li > Fi </ li > < li > Fo </ li > < li > Fum </ li > </ ol > <dl> \u3001 <dt> \u4e0e <dd> \u6807\u7b7e \u00b6 HTML <dl> \u5143\u7d20 \uff08\u6216 HTML \u63cf\u8ff0\u5217\u8868\u5143\u7d20\uff09\u662f\u4e00\u4e2a\u5305\u542b\u672f\u8bed\u5b9a\u4e49\u4ee5\u53ca\u63cf\u8ff0\u7684\u5217\u8868\uff0c\u901a\u5e38\u7528\u4e8e\u5c55\u793a\u8bcd\u6c47\u8868\u6216\u8005\u5143\u6570\u636e (\u952e - \u503c\u5bf9\u5217\u8868)\u3002 \u00b6 \u793a\u4f8b\uff1a < dl > < dt > Name </ dt > < dd > Godzilla </ dd > < dt > Born </ dt > < dd > 1952 </ dd > < dt > Birthplace </ dt > < dd > Japan </ dd > < dt > Color </ dt > < dd > Green </ dd > < dd > Orange </ dd > </ dl > \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u5217\u8868"},{"location":"Web/html/html7/#ulli","text":"HTML <ul> \u5143\u7d20\uff08\u6216\u79f0 HTML \u65e0\u5e8f\u5217\u8868\u5143\u7d20\uff09\u8868\u793a\u4e00\u4e2a\u5185\u53ef\u542b\u591a\u4e2a\u5143\u7d20\u7684\u65e0\u5e8f\u5217\u8868\u6216\u9879\u76ee\u7b26\u53f7\u5217\u8868\u3002","title":"&lt;ul&gt;\u4e0e&lt;li&gt;\u6807\u7b7e"},{"location":"Web/html/html7/#_1","text":"< ul > < li > first item </ li > < li > second item </ li > < li > third item </ li > </ ul >","title":"\u793a\u4f8b\uff1a"},{"location":"Web/html/html7/#olli","text":"HTML <ol> \u5143\u7d20\u8868\u793a\u6709\u5e8f\u5217\u8868\uff0c\u901a\u5e38\u6e32\u67d3\u4e3a\u4e00\u4e2a\u5e26\u7f16\u53f7\u7684\u5217\u8868\u3002","title":"&lt;ol&gt;\u4e0e&lt;li&gt;\u6807\u7b7e"},{"location":"Web/html/html7/#_2","text":"< ol > < li > Fee </ li > < li > Fi </ li > < li > Fo </ li > < li > Fum </ li > </ ol >","title":"\u793a\u4f8b\uff1a"},{"location":"Web/html/html7/#dldtdd","text":"HTML <dl> \u5143\u7d20 \uff08\u6216 HTML \u63cf\u8ff0\u5217\u8868\u5143\u7d20\uff09\u662f\u4e00\u4e2a\u5305\u542b\u672f\u8bed\u5b9a\u4e49\u4ee5\u53ca\u63cf\u8ff0\u7684\u5217\u8868\uff0c\u901a\u5e38\u7528\u4e8e\u5c55\u793a\u8bcd\u6c47\u8868\u6216\u8005\u5143\u6570\u636e (\u952e - \u503c\u5bf9\u5217\u8868)\u3002","title":"&lt;dl&gt;\u3001&lt;dt&gt;\u4e0e&lt;dd&gt;\u6807\u7b7e"},{"location":"Web/html/html7/#_3","text":"\u793a\u4f8b\uff1a < dl > < dt > Name </ dt > < dd > Godzilla </ dd > < dt > Born </ dt > < dd > 1952 </ dd > < dt > Birthplace </ dt > < dd > Japan </ dd > < dt > Color </ dt > < dd > Green </ dd > < dd > Orange </ dd > </ dl >","title":""},{"location":"Web/html/html7/#_4","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html8/","text":"<table> \u6807\u7b7e \u00b6 HTML\u7684 table \u5143\u7d20\u8868\u793a\u8868\u683c\u6570\u636e \u2014 \u5373\u901a\u8fc7\u4e8c\u7ef4\u6570\u636e\u8868\u8868\u793a\u7684\u4fe1\u606f\u3002 <thead> \u6807\u7b7e \u00b6 HTML\u7684 <thead> \u5143\u7d20\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5b9a\u4e49\u8868\u683c\u7684\u5217\u5934\u7684\u884c\u3002 <tbody> \u6807\u7b7e \u00b6 HTML\u7684 <tbody> \u5143\u7d20\u5b9a\u4e49\u4e00\u7ec4\u6570\u636e\u884c\u3002 <tr> \u6807\u7b7e \u00b6 HTML <tr> \u5143\u7d20\u5b9a\u4e49\u8868\u683c\u4e2d\u7684\u884c\u3002 \u540c\u4e00\u884c\u53ef\u540c\u65f6\u51fa\u73b0 <td> \u548c <th> \u5143\u7d20\u3002 <th> \u6807\u7b7e \u00b6 HTML <th> \u5143\u7d20\u5b9a\u4e49\u8868\u683c\u5185\u7684\u8868\u5934\u5355\u5143\u683c\u3002 <td> \u6807\u7b7e \u00b6 HTML <td> \u5143\u7d20 \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u6570\u636e\u7684\u8868\u683c\u5355\u5143\u683c\u3002 <caption> \u6807\u7b7e \u00b6 HTML <caption> \u5143\u7d20 (or HTML \u8868\u683c\u6807\u9898\u5143\u7d20) \u5c55\u793a\u4e00\u4e2a\u8868\u683c\u7684\u6807\u9898\uff0c \u5b83\u5e38\u5e38\u4f5c\u4e3a <table> \u7684\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\u51fa\u73b0\uff0c\u540c\u65f6\u663e\u793a\u5728\u8868\u683c\u5185\u5bb9\u7684\u6700\u524d\u9762\uff0c\u4f46\u662f\uff0c\u5b83\u540c\u6837\u53ef\u4ee5\u88ab CSS \u6837\u5f0f\u5316\uff0c\u6240\u4ee5\uff0c\u5b83\u540c\u6837\u53ef\u4ee5\u51fa\u73b0\u5728\u76f8\u5bf9\u4e8e\u8868\u683c\u7684\u4efb\u610f\u4f4d\u7f6e\u3002 \u793a\u4f8b \u00b6 < table > < caption > My Table </ caption > < thead > < tr > < th colspan = \"2\" > The table header </ th > </ tr > </ thead > < tbody > < tr > < td > The table body </ td > < td > with two columns </ td > </ tr > </ tbody > </ table > \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u8868\u683c"},{"location":"Web/html/html8/#table","text":"HTML\u7684 table \u5143\u7d20\u8868\u793a\u8868\u683c\u6570\u636e \u2014 \u5373\u901a\u8fc7\u4e8c\u7ef4\u6570\u636e\u8868\u8868\u793a\u7684\u4fe1\u606f\u3002","title":"&lt;table&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#thead","text":"HTML\u7684 <thead> \u5143\u7d20\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5b9a\u4e49\u8868\u683c\u7684\u5217\u5934\u7684\u884c\u3002","title":"&lt;thead&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#tbody","text":"HTML\u7684 <tbody> \u5143\u7d20\u5b9a\u4e49\u4e00\u7ec4\u6570\u636e\u884c\u3002","title":"&lt;tbody&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#tr","text":"HTML <tr> \u5143\u7d20\u5b9a\u4e49\u8868\u683c\u4e2d\u7684\u884c\u3002 \u540c\u4e00\u884c\u53ef\u540c\u65f6\u51fa\u73b0 <td> \u548c <th> \u5143\u7d20\u3002","title":"&lt;tr&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#th","text":"HTML <th> \u5143\u7d20\u5b9a\u4e49\u8868\u683c\u5185\u7684\u8868\u5934\u5355\u5143\u683c\u3002","title":"&lt;th&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#td","text":"HTML <td> \u5143\u7d20 \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u6570\u636e\u7684\u8868\u683c\u5355\u5143\u683c\u3002","title":"&lt;td&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#caption","text":"HTML <caption> \u5143\u7d20 (or HTML \u8868\u683c\u6807\u9898\u5143\u7d20) \u5c55\u793a\u4e00\u4e2a\u8868\u683c\u7684\u6807\u9898\uff0c \u5b83\u5e38\u5e38\u4f5c\u4e3a <table> \u7684\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\u51fa\u73b0\uff0c\u540c\u65f6\u663e\u793a\u5728\u8868\u683c\u5185\u5bb9\u7684\u6700\u524d\u9762\uff0c\u4f46\u662f\uff0c\u5b83\u540c\u6837\u53ef\u4ee5\u88ab CSS \u6837\u5f0f\u5316\uff0c\u6240\u4ee5\uff0c\u5b83\u540c\u6837\u53ef\u4ee5\u51fa\u73b0\u5728\u76f8\u5bf9\u4e8e\u8868\u683c\u7684\u4efb\u610f\u4f4d\u7f6e\u3002","title":"&lt;caption&gt;\u6807\u7b7e"},{"location":"Web/html/html8/#_1","text":"< table > < caption > My Table </ caption > < thead > < tr > < th colspan = \"2\" > The table header </ th > </ tr > </ thead > < tbody > < tr > < td > The table body </ td > < td > with two columns </ td > </ tr > </ tbody > </ table >","title":"\u793a\u4f8b"},{"location":"Web/html/html8/#_2","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"Web/html/html9/","text":"<header> \u00b6 HTML \u5143\u7d20\u7528\u4e8e\u5c55\u793a\u4ecb\u7ecd\u6027\u5185\u5bb9\uff0c\u901a\u5e38\u5305\u542b\u4e00\u7ec4\u4ecb\u7ecd\u6027\u7684\u6216\u662f\u8f85\u52a9\u5bfc\u822a\u7684\u5b9e\u7528\u5143\u7d20\u3002\u5b83\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u6807\u9898\u5143\u7d20\uff0c\u4f46\u4e5f\u53ef\u80fd\u5305\u542b\u5176\u4ed6\u5143\u7d20\uff0c\u6bd4\u5982 Logo\u3001\u641c\u7d22\u6846\u3001\u4f5c\u8005\u540d\u79f0\uff0c\u7b49\u7b49\u3002 <nav> \u00b6 HTML <nav> \u5143\u7d20\u8868\u793a\u9875\u9762\u7684\u4e00\u90e8\u5206\uff0c\u5176\u76ee\u7684\u662f\u5728\u5f53\u524d\u6587\u6863\u6216\u5176\u4ed6\u6587\u6863\u4e2d\u63d0\u4f9b\u5bfc\u822a\u94fe\u63a5\u3002\u5bfc\u822a\u90e8\u5206\u7684\u5e38\u89c1\u793a\u4f8b\u662f\u83dc\u5355\uff0c\u76ee\u5f55\u548c\u7d22\u5f15\u3002 <section> \u00b6 HTML <section> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u5305\u542b\u5728 HTML \u6587\u6863\u4e2d\u7684\u72ec\u7acb\u90e8\u5206\uff0c\u5b83\u6ca1\u6709\u66f4\u5177\u4f53\u7684\u8bed\u4e49\u5143\u7d20\u6765\u8868\u793a\uff0c\u4e00\u822c\u6765\u8bf4\u4f1a\u6709\u5305\u542b\u4e00\u4e2a\u6807\u9898\u3002 <figure> \u00b6 HTML <figure> \u5143\u7d20\u4ee3\u8868\u4e00\u6bb5\u72ec\u7acb\u7684\u5185\u5bb9\uff0c\u7ecf\u5e38\u4e0e\u8bf4\u660e\uff08caption\uff09 <figcaption> \u914d\u5408\u4f7f\u7528\uff0c\u5e76\u4e14\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u5f15\u7528\u5355\u5143\u3002\u5f53\u5b83\u5c5e\u4e8e\u4e3b\u5185\u5bb9\u6d41\uff08main flow\uff09\u65f6\uff0c\u5b83\u7684\u4f4d\u7f6e\u72ec\u7acb\u4e8e\u4e3b\u4f53\u3002\u8fd9\u4e2a\u6807\u7b7e\u7ecf\u5e38\u662f\u5728\u4e3b\u6587\u4e2d\u5f15\u7528\u7684\u56fe\u7247\uff0c\u63d2\u56fe\uff0c\u8868\u683c\uff0c\u4ee3\u7801\u6bb5\u7b49\u7b49\uff0c\u5f53\u8fd9\u90e8\u5206\u8f6c\u79fb\u5230\u9644\u5f55\u4e2d\u6216\u8005\u5176\u4ed6\u9875\u9762\u65f6\u4e0d\u4f1a\u5f71\u54cd\u5230\u4e3b\u4f53\u3002 <figcaption> \u00b6 HTML <figcaption> \u5143\u7d20 \u662f\u4e0e\u5176\u76f8\u5173\u8054\u7684\u56fe\u7247\u7684\u8bf4\u660e/\u6807\u9898\uff0c\u7528\u4e8e\u63cf\u8ff0\u5176\u7236\u8282\u70b9 <figure> \u5143\u7d20\u91cc\u7684\u5176\u4ed6\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740 <figcaption> \u5728 <figure> \u5757\u91cc\u662f\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u3002\u540c\u65f6 HTML Figcaption \u5143\u7d20\u662f\u53ef\u9009\u7684\uff1b\u5982\u679c\u6ca1\u6709\u8be5\u5143\u7d20\uff0c\u8fd9\u4e2a\u7236\u8282\u70b9\u7684\u56fe\u7247\u53ea\u662f\u4f1a\u6ca1\u6709\u8bf4\u660e/\u6807\u9898\u3002 <article> \u00b6 HTML <article> \u5143\u7d20\u8868\u793a\u6587\u6863\u3001\u9875\u9762\u3001\u5e94\u7528\u6216\u7f51\u7ad9\u4e2d\u7684\u72ec\u7acb\u7ed3\u6784\uff0c\u5176\u610f\u5728\u6210\u4e3a\u53ef\u72ec\u7acb\u5206\u914d\u7684\u6216\u53ef\u590d\u7528\u7684\u7ed3\u6784\uff0c\u5982\u5728\u53d1\u5e03\u4e2d\uff0c\u5b83\u53ef\u80fd\u662f\u8bba\u575b\u5e16\u5b50\u3001\u6742\u5fd7\u6216\u65b0\u95fb\u6587\u7ae0\u3001\u535a\u5ba2\u3001\u7528\u6237\u63d0\u4ea4\u7684\u8bc4\u8bba\u3001\u4ea4\u4e92\u5f0f\u7ec4\u4ef6\uff0c\u6216\u8005\u5176\u4ed6\u72ec\u7acb\u7684\u5185\u5bb9\u9879\u76ee\u3002 <aside> \u00b6 HTML <aside> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u548c\u5176\u4f59\u9875\u9762\u5185\u5bb9\u51e0\u4e4e\u65e0\u5173\u7684\u90e8\u5206\uff0c\u88ab\u8ba4\u4e3a\u662f\u72ec\u7acb\u4e8e\u8be5\u5185\u5bb9\u7684\u4e00\u90e8\u5206\u5e76\u4e14\u53ef\u4ee5\u88ab\u5355\u72ec\u7684\u62c6\u5206\u51fa\u6765\u800c\u4e0d\u4f1a\u4f7f\u6574\u4f53`\u53d7\u5f71\u54cd\u3002\u5176\u901a\u5e38\u8868\u73b0\u4e3a\u4fa7\u8fb9\u680f\u6216\u8005\u6807\u6ce8\u6846\uff08call-out boxes\uff09\u3002 <footer> \u00b6 HTML <footer> \u5143\u7d20\u8868\u793a\u6700\u8fd1\u4e00\u4e2a\u7ae0\u8282\u5185\u5bb9\u6216\u8005\u6839\u8282\u70b9\uff08sectioning root \uff09\u5143\u7d20\u7684\u9875\u811a\u3002\u4e00\u4e2a\u9875\u811a\u901a\u5e38\u5305\u542b\u8be5\u7ae0\u8282\u4f5c\u8005\u3001\u7248\u6743\u6570\u636e\u6216\u8005\u4e0e\u6587\u6863\u76f8\u5173\u7684\u94fe\u63a5\u7b49\u4fe1\u606f\u3002 \u6765\u6e90 \u00b6 \u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u8bed\u4e49\u6807\u7b7e"},{"location":"Web/html/html9/#header","text":"HTML \u5143\u7d20\u7528\u4e8e\u5c55\u793a\u4ecb\u7ecd\u6027\u5185\u5bb9\uff0c\u901a\u5e38\u5305\u542b\u4e00\u7ec4\u4ecb\u7ecd\u6027\u7684\u6216\u662f\u8f85\u52a9\u5bfc\u822a\u7684\u5b9e\u7528\u5143\u7d20\u3002\u5b83\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u6807\u9898\u5143\u7d20\uff0c\u4f46\u4e5f\u53ef\u80fd\u5305\u542b\u5176\u4ed6\u5143\u7d20\uff0c\u6bd4\u5982 Logo\u3001\u641c\u7d22\u6846\u3001\u4f5c\u8005\u540d\u79f0\uff0c\u7b49\u7b49\u3002","title":"&lt;header&gt;"},{"location":"Web/html/html9/#nav","text":"HTML <nav> \u5143\u7d20\u8868\u793a\u9875\u9762\u7684\u4e00\u90e8\u5206\uff0c\u5176\u76ee\u7684\u662f\u5728\u5f53\u524d\u6587\u6863\u6216\u5176\u4ed6\u6587\u6863\u4e2d\u63d0\u4f9b\u5bfc\u822a\u94fe\u63a5\u3002\u5bfc\u822a\u90e8\u5206\u7684\u5e38\u89c1\u793a\u4f8b\u662f\u83dc\u5355\uff0c\u76ee\u5f55\u548c\u7d22\u5f15\u3002","title":"&lt;nav&gt;"},{"location":"Web/html/html9/#section","text":"HTML <section> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u5305\u542b\u5728 HTML \u6587\u6863\u4e2d\u7684\u72ec\u7acb\u90e8\u5206\uff0c\u5b83\u6ca1\u6709\u66f4\u5177\u4f53\u7684\u8bed\u4e49\u5143\u7d20\u6765\u8868\u793a\uff0c\u4e00\u822c\u6765\u8bf4\u4f1a\u6709\u5305\u542b\u4e00\u4e2a\u6807\u9898\u3002","title":"&lt;section&gt;"},{"location":"Web/html/html9/#figure","text":"HTML <figure> \u5143\u7d20\u4ee3\u8868\u4e00\u6bb5\u72ec\u7acb\u7684\u5185\u5bb9\uff0c\u7ecf\u5e38\u4e0e\u8bf4\u660e\uff08caption\uff09 <figcaption> \u914d\u5408\u4f7f\u7528\uff0c\u5e76\u4e14\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u5f15\u7528\u5355\u5143\u3002\u5f53\u5b83\u5c5e\u4e8e\u4e3b\u5185\u5bb9\u6d41\uff08main flow\uff09\u65f6\uff0c\u5b83\u7684\u4f4d\u7f6e\u72ec\u7acb\u4e8e\u4e3b\u4f53\u3002\u8fd9\u4e2a\u6807\u7b7e\u7ecf\u5e38\u662f\u5728\u4e3b\u6587\u4e2d\u5f15\u7528\u7684\u56fe\u7247\uff0c\u63d2\u56fe\uff0c\u8868\u683c\uff0c\u4ee3\u7801\u6bb5\u7b49\u7b49\uff0c\u5f53\u8fd9\u90e8\u5206\u8f6c\u79fb\u5230\u9644\u5f55\u4e2d\u6216\u8005\u5176\u4ed6\u9875\u9762\u65f6\u4e0d\u4f1a\u5f71\u54cd\u5230\u4e3b\u4f53\u3002","title":"&lt;figure&gt;"},{"location":"Web/html/html9/#figcaption","text":"HTML <figcaption> \u5143\u7d20 \u662f\u4e0e\u5176\u76f8\u5173\u8054\u7684\u56fe\u7247\u7684\u8bf4\u660e/\u6807\u9898\uff0c\u7528\u4e8e\u63cf\u8ff0\u5176\u7236\u8282\u70b9 <figure> \u5143\u7d20\u91cc\u7684\u5176\u4ed6\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740 <figcaption> \u5728 <figure> \u5757\u91cc\u662f\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u3002\u540c\u65f6 HTML Figcaption \u5143\u7d20\u662f\u53ef\u9009\u7684\uff1b\u5982\u679c\u6ca1\u6709\u8be5\u5143\u7d20\uff0c\u8fd9\u4e2a\u7236\u8282\u70b9\u7684\u56fe\u7247\u53ea\u662f\u4f1a\u6ca1\u6709\u8bf4\u660e/\u6807\u9898\u3002","title":"&lt;figcaption&gt;"},{"location":"Web/html/html9/#article","text":"HTML <article> \u5143\u7d20\u8868\u793a\u6587\u6863\u3001\u9875\u9762\u3001\u5e94\u7528\u6216\u7f51\u7ad9\u4e2d\u7684\u72ec\u7acb\u7ed3\u6784\uff0c\u5176\u610f\u5728\u6210\u4e3a\u53ef\u72ec\u7acb\u5206\u914d\u7684\u6216\u53ef\u590d\u7528\u7684\u7ed3\u6784\uff0c\u5982\u5728\u53d1\u5e03\u4e2d\uff0c\u5b83\u53ef\u80fd\u662f\u8bba\u575b\u5e16\u5b50\u3001\u6742\u5fd7\u6216\u65b0\u95fb\u6587\u7ae0\u3001\u535a\u5ba2\u3001\u7528\u6237\u63d0\u4ea4\u7684\u8bc4\u8bba\u3001\u4ea4\u4e92\u5f0f\u7ec4\u4ef6\uff0c\u6216\u8005\u5176\u4ed6\u72ec\u7acb\u7684\u5185\u5bb9\u9879\u76ee\u3002","title":"&lt;article&gt;"},{"location":"Web/html/html9/#aside","text":"HTML <aside> \u5143\u7d20\u8868\u793a\u4e00\u4e2a\u548c\u5176\u4f59\u9875\u9762\u5185\u5bb9\u51e0\u4e4e\u65e0\u5173\u7684\u90e8\u5206\uff0c\u88ab\u8ba4\u4e3a\u662f\u72ec\u7acb\u4e8e\u8be5\u5185\u5bb9\u7684\u4e00\u90e8\u5206\u5e76\u4e14\u53ef\u4ee5\u88ab\u5355\u72ec\u7684\u62c6\u5206\u51fa\u6765\u800c\u4e0d\u4f1a\u4f7f\u6574\u4f53`\u53d7\u5f71\u54cd\u3002\u5176\u901a\u5e38\u8868\u73b0\u4e3a\u4fa7\u8fb9\u680f\u6216\u8005\u6807\u6ce8\u6846\uff08call-out boxes\uff09\u3002","title":"&lt;aside&gt;"},{"location":"Web/html/html9/#footer","text":"HTML <footer> \u5143\u7d20\u8868\u793a\u6700\u8fd1\u4e00\u4e2a\u7ae0\u8282\u5185\u5bb9\u6216\u8005\u6839\u8282\u70b9\uff08sectioning root \uff09\u5143\u7d20\u7684\u9875\u811a\u3002\u4e00\u4e2a\u9875\u811a\u901a\u5e38\u5305\u542b\u8be5\u7ae0\u8282\u4f5c\u8005\u3001\u7248\u6743\u6570\u636e\u6216\u8005\u4e0e\u6587\u6863\u76f8\u5173\u7684\u94fe\u63a5\u7b49\u4fe1\u606f\u3002","title":"&lt;footer&gt;"},{"location":"Web/html/html9/#_1","text":"\u94fe\u63a5\uff1a https://www.acwing.com/file_system/file/content/whole/index/content/4078555/ \u6765\u6e90\uff1aAcWing","title":"\u6765\u6e90"},{"location":"%E5%85%B3%E4%BA%8E/%E4%BD%9C%E8%80%85/","text":"\u5173\u4e8e\u4f5c\u8005 \u00b6 \u672c\u540d \u65b9\u6bd3\u4e54 02\u5e74\u7684\u91d1\u725b\u5ea7 \u9ad8\u4e2d\u6bd5\u4e1a\u4e8e\u6d59\u6c5f\u7701\u5cb1\u5c71\u4e2d\u5b66 \u73b0\u4e3aCS\u4e13\u4e1a\u5b66\u751f \u7231\u597d\u8ba1\u7b97\u673a\uff0c\u8df3\u821e \u778e\u6298\u817e\u6d6a\u8d39\u65f6\u95f4\u6700\u5728\u884c \u60f3\u517b\u4e00\u53ea\u963f\u62c9\u65af\u52a0 \u5bf9\u6211\u6765\u8bf4\uff0c\u631a\u53cb\u4e00\u4e8c\uff0c\u597d\u53cb\u4e8c\u4e09\uff0c\u4eba\u751f\u5982\u6b64\uff0c\u8db3\u77e3~","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"%E5%85%B3%E4%BA%8E/%E4%BD%9C%E8%80%85/#_1","text":"\u672c\u540d \u65b9\u6bd3\u4e54 02\u5e74\u7684\u91d1\u725b\u5ea7 \u9ad8\u4e2d\u6bd5\u4e1a\u4e8e\u6d59\u6c5f\u7701\u5cb1\u5c71\u4e2d\u5b66 \u73b0\u4e3aCS\u4e13\u4e1a\u5b66\u751f \u7231\u597d\u8ba1\u7b97\u673a\uff0c\u8df3\u821e \u778e\u6298\u817e\u6d6a\u8d39\u65f6\u95f4\u6700\u5728\u884c \u60f3\u517b\u4e00\u53ea\u963f\u62c9\u65af\u52a0 \u5bf9\u6211\u6765\u8bf4\uff0c\u631a\u53cb\u4e00\u4e8c\uff0c\u597d\u53cb\u4e8c\u4e09\uff0c\u4eba\u751f\u5982\u6b64\uff0c\u8db3\u77e3~","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/","text":"\u5173\u4e8e\u6211\u7684\u7b97\u6cd5\u7ade\u8d5b \u00b6 \u9ad8\u4e2d\u6bd5\u4e1a \u00b6 \u4e03\u6708\uff0c\u9ad8\u8003\u7ed3\u675f\u4e86\uff0c\u586b\u5fd7\u613f\u65f6\uff0c\u770b\u7740\u8eab\u8fb9\u7684\u597d\u53cb\u4e00\u4e2a\u4e2a\u90fd\u6709\u4e86\u81ea\u5df1\u7684\u4eba\u751f\u76ee\u6807\uff0c\u6709\u9009\u62e9\u5f53\u533b\u751f\u7684\uff0c\u6709\u9009\u62e9\u5f53\u8b66\u5bdf\u7684\u2026\u2026\u800c\u5f53\u65f6\u6211\u4ecd\u5904\u4e8e\u8ff7\u832b\u9636\u6bb5\uff0c\u5237\u7740\u89c6\u9891\uff0c\u770b\u7740\u7f51\u4e0a\u8bf4\u8ba1\u7b97\u673a\u5403\u9999\uff0c\u5c31\u62b1\u7740\u8bd5\u4e00\u8bd5\u7684\u5fc3\u6001\u586b\u4e86\u5fd7\u613f\uff0c\u4f46\u6700\u7ec8\u7531\u4e8e\u5206\u6570\u4e0d\u591f\uff0c\u5b66\u4e86\u81ea\u52a8\u5316\uff0c\u672a\u80fd\u8fdb\u5165\u5230\u672c\u6821\u8ba1\u7b97\u673a\u4e13\u4e1a\u3002\u5728\u6691\u5047\u65f6\uff0c\u4e86\u89e3\u5230ACM\uff0c\u53c8\u62b1\u7740\u8bd5\u4e00\u8bd5\u7684\u5fc3\u6001\uff0c\u6211\u52a0\u5165\u4e86\u3002\u5728\u6691\u5047\uff0c\u7b80\u5355\u770b\u4e86\u4e00\u4e0bC\u8bed\u8a00\u8bed\u6cd5\u5185\u5bb9 \u5927\u4e00 \u00b6 \u6b63\u5f0f\u52a0\u5165ACM\u534f\u4f1a \u00b6 \u672c\u4ee5\u4e3a\u52a0\u7fa4\u5c31\u662f\u52a0\u5165\u534f\u4f1a\u4e86\uff0c\u6ca1\u60f3\u5230\u8fd8\u8981\u9762\u8bd5\uff0c\u4ecd\u7136\u8bb0\u5f97\u5f53\u65f6\u7684\u9762\u8bd5\u9898\u662f\u7528C\u5728\u4e00\u5206\u949f\u5199\u4e00\u904d\u5192\u6ce1\u6216\u9009\u62e9\u6392\u5e8f\u7684\u57fa\u672c\u6846\u67b6\uff0c\u5f53\u65f6\u7531\u4e8e\u7d27\u5f20\uff0c\u7b2c\u4e00\u904d\u8fd8\u7801\u9519\u4e86\uff0c\u597d\u5728\u7b2c\u4e8c\u904d\u6b63\u786e\uff0c\u9762\u8bd5\u540e\u5f97\u77e5\u8fd9\u662f\u5206\u6700\u5c11\u7684\u52a0\u5206\u9879\uff0c\u4fa5\u5e78\u52a0\u5165\u534f\u4f1a CCCC\u9009\u62d4\u8d5b \u00b6 \u539f\u5b9a\u4e8e2020\u5e743\u670828\u65e5\u4e3e\u529e\u7684\u7b2c\u4e94\u5c4a\u56e2\u961f\u7a0b\u5e8f\u8bbe\u8ba1\u5929\u68af\u8d5b\u5ef6\u671f\u4e3e\u529e\uff0c\u8ba9\u521a\u8fdb\u5165\u5927\u5b66\u7684\u6211\u6709\u4e86\u62a5\u540d\u7684\u5e0c\u671b\u3002\u7ed9\u4e86\u5e0c\u671b\u518d\u5c06\u5176\u6bc1\u706d\uff0c\u8fd9\u662f\u6700\u53ef\u6015\u7684\uff0c\u539f\u4ee5\u4e3a40\u4eba\u7684\u540d\u989d\u80fd\u8f7b\u677e\u52a0\u5165\uff0c\u4f46\u5b66\u6821\u7684\u9009\u62d4\u8d5b\u5c06\u6211\u6253\u56de\u4e86\u73b0\u5b9e\uff0c\u8fd9\u662f\u6211\u4e0a\u5927\u5b66\u7684\u7b2c\u4e00\u6b21\u6bd4\u8d5b\uff0c\u5f53\u65f6\u5e76\u6ca1\u6709\u591a\u5c11\u7b97\u6cd5\u77e5\u8bc6\uff0c\u751a\u81f3\u8fde\u6700\u7b80\u5355\u7684\u66b4\u529b\u90fd\u6253\u4e0d\u660e\u767d \u6700\u7ec8\u867d\u7136\u5728\u5927\u4e00\u4f4d\u5217\u4e8c\u7b49\uff0c\u7531\u4e8e\u4e24\u4f4d\u5b66\u957f\u7684\u52a0\u5165\u88ab\u6b63\u597d\u88ab\u5361\u5728\u540d\u989d\u4e4b\u5916\uff0c\u867d\u7136\u6709\u70b9\u9057\u61be\uff0c\u4f46\u8fd9\u786e\u5b9e\u4e5f\u662f\u81ea\u8eab\u5b9e\u529b\u7684\u4e0d\u8db3 \u7ec4\u961f \u00b6 \u7ed3\u675f\u4e86\u5e73\u5e73\u65e0\u5947\u7684\u5927\u4e00\u4e0a\uff0c\u5728\u5927\u4e00\u4e0b\u7a0d\u5fae\u6709\u4e86\u90a3\u4e48\u4e00\u4e22\u4e22\u7684\u6c89\u6dc0\uff0c\u6709\u673a\u4f1a\u8ba9\u65b0\u751f\u6253\u533a\u57df\u8d5b\uff0c\u7701\u8d5b\u4e86\uff0c\u5b66\u6821\u8981\u6c42\u7ec4\u961f\uff0c\u5f88\u5e78\u8fd0\u9047\u4e0a\u4e86\u73b0\u5728\u7684\u961f\u53cb\u2014\u2014\u8bad\u4eba\u4e00\u5957\u4e00\u5957\u7684\u6768\u961f\uff0c\u4ee5\u53ca\u548c\u6211\u4e00\u8d77\u88ab\u8bad\u7684\u4fca\u8c6a\u3002\u8bb0\u5f97\u5f53\u65f6\u8fd8\u4e00\u76f4\u63a8\u8131\u8c01\u5f53\u961f\u957f\uff0c\u73b0\u5728\u770b\u6765\uff0c\u6768\u961f\u786e\u5b9e\u5f88\u6709\u5f53\u961f\u957f\u7684\u6f5c\u8d28\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u55dd\u3002 \u7701\u8d5b\u9009\u62d4 \u00b6 \u7b2c\u4e00\u573a\u7ec4\u961f\u8d5b\uff0c\u9009\u62d4\u8d5b\u5206\u4e3a\u4e09\u573a\uff0c\u6309\u96be\u5ea6\u5360\u4e0d\u540c\u6bd4\u91cd\uff0c\u6bcf\u4e00\u573a\u5747\u4e3a5\u5c0f\u65f6\uff0c\u8d5b\u65f6\u9047\u5230\u8bb8\u591a\u4e0d\u4f1a\u7684\u77e5\u8bc6\u70b9\uff0c\u8fd9\u8ba9\u6211\u4eec\u610f\u8bc6\u5230\u4e0d\u5206\u5de5\u5408\u4f5c\u662f\u4e0d\u884c\u7684\uff0c\u5728\u6fc0\u70c8\u7684\u7ade\u4e89\u4e4b\u540e\uff0c\u6211\u4eec\u961f\u53c8\u662f\u5361\u7740\u6700\u540e\u4e00\u540d\u6210\u529f\u5165\u9009\u3002 \u6d59\u6c5f\u7701\u8d5b \u00b6 \u6b63\u5f0f\u6253\u6bd4\u8d5b\u7684\u5f53\u5929\uff0c\u662f\u5728\u5c0f\u548c\u5c71\u4e3e\u884c\u7684\uff0c\u8d77\u4e86\u4e2a\u5927\u65e9\u5c31\u8d76\u7740\u6821\u8f66\u8fc7\u53bb\u4e86\uff0c\u6bd4\u8d5b\u524d\u63d0\u524d\u4f53\u9a8c\u4e86\u4e00\u4e0b\u4e3b\u6821\u533a\u7684\u7f8e\u98df\u3002\u7531\u4e8e\u53c2\u8d5b\u7ecf\u9a8c\u7684\u4e0d\u8db3\uff0c\u8d5b\u524d\u7684\u73af\u5883\u914d\u7f6e\u4e86\u597d\u4e45\uff0c\u4f46\u597d\u5728\u6700\u540e\u987a\u5229\u8fdb\u5165\u4e86\u6bd4\u8d5b\u3002\u53ef\u80fd\u7531\u4e8e\u961f\u4f0d\u540d\u7684\u7f18\u6545\uff0c\u5f53\u65f6\u6211\u4eec\u53d6\u540d\u2014\u2014wa\u7684\u4e00\u58f0\u54ed\u51fa\u4e86tle\uff0c\u7b7e\u5230\u7684\u8fc7\u7a0b\u4e2d\u7684\u786e\u9047\u5230\u4e86\u4e0d\u5c11tle\u548cwa\uff0c\u5c31\u8fd9\u6837\u4e0d\u5feb\u4e0d\u6162\u7684\u8fc7\u6389\u4e86\u524d\u56db\u9898\uff0c\u7b2c\u4e94\u9898\u6ca1\u7406\u89e3\u9898\u610f\uff0c\u4e09\u4e2a\u4eba\u540c\u65f6\u770b\u9519\u9898\u76ee\u4e5f\u662f\u7f55\u89c1\uff0c\u5230\u4e86\u6bd4\u8d5b\u7ed3\u675f\u6211\u4eec\u4e09\u4eba\u7684\u89c2\u70b9\u4ecd\u7136\u4e00\u81f4\uff0c\u6700\u7ec8\u8fc7\u9898\u56db\u9898\uff0c\u7b7e\u5230\u90fd\u6ca1\u7b7e\u6ee1\uff0c\u6210\u529f\u6253\u94c1\u3002\u770b\u7740\u540c\u53bb\u7684\u848b\u961f\u4ed6\u4eec\u6536\u83b7\u4e86\u4e00\u679a\u94dc\u724c\uff0c\u5fc3\u91cc\u9178\u9178\u7684\uff0c\u4f46\u60f3\u60f3\u8fd8\u662f\u81ea\u5df1\u83dc\u5c31\u91ca\u7136\u4e86\u3002 \u6210\u529f\u53c2\u8d5bCCCC \u00b6 \u548c\u7b2c\u4e00\u6b21\u4e00\u6837\uff0c\u8fdb\u884c\u9009\u62d4\u8d5b\uff0c\u8fd9\u6b21\u6211\u6210\u529f\u5165\u9009\u4e86\uff0c\u8fdb\u5165\u4e86\u4e8c\u961f\uff0c\u5f53\u65f6\u7684\u6211\u53ea\u80fd\u8bf4\u662f\u7a0d\u5fae\u6709\u4e86\u7b97\u6cd5\u57fa\u7840\uff0c\u4e0d\u518d\u50cf\u4e4b\u524d\u53ea\u80fd\u5199\u5199\u66b4\u529b\u9898\u3002 \u5230\u4e86\u6b63\u5f0f\u53c2\u8d5b\uff0c\u6210\u529f\u7b7e\u5b8c\u4e86\u6240\u6709\u7684L1\uff0cL2\u7684\u7b2c\u4e00\u9898\u6a21\u62df\u6808\u4e5f\u987a\u5229\u62ff\u4e0b\uff0c\u4f46\u7531\u4e8e\u5f53\u65f6\u4e0d\u4f1a\u62d3\u6251\u6392\u5e8f\u4ee5\u53ca\u5bf9\u6700\u77ed\u8def\u7684\u7406\u89e3\u4e0d\u6df1\u523b\uff0cL2\u7b2c\u4e8c\u9898\u6700\u957f\u8def\u6ca1\u6709\u505a\u51fa\uff0c\u597d\u5728\u961f\u53cb\u5f88\u7ed9\u529b\uff0c\u6700\u7ec8\u83b7\u5f97\u6d59\u6c5f\u7701\u56e2\u961f\u4e8c\u7b49\u5956 \u84dd\u6865\u676f\u7701\u8d5b \u00b6 \u610f\u5916\u5f97\u77e5\u84dd\u6865\u676f\u8fd9\u4e2a\u6bd4\u8d5b\uff0c\u636e\u8bf4\u83b7\u5956\u5f88\u5bb9\u6613\uff0c\u5c31\u89c9\u5f97\u53bb\u8bd5\u4e00\u8bd5\uff0c\u4e8e\u662f\u62a5\u540d\u4e86\u5b66\u6821\u7684\u9009\u62d4\u8d5b\uff0c\u5708\u94b1\u676f\u5c31\u662f\u5708\u94b1\u676f\uff0c\u4e00\u573a\u6bd4\u8d5b\u5c31\u8981300\uff0c\u4f46\u597d\u5728\u6211\u5165\u9009\u4e86\u3002 \u84dd\u6865\u676f\u4e0d\u540c\u4e8eACM\uff0c\u5199\u5b8c\u9898\u540e\u65e0\u6cd5\u76f4\u63a5\u77e5\u9053\u662f\u5426\u6b63\u786e\uff0c\u518d\u52a0\u4e0a\u672c\u8eab\u7684\u4ee3\u7801\u98ce\u683c\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u6700\u7ec8\u53ea\u662f\u83b7\u5f97\u4e86\u7701\u4e8c\u7b49\u5956\uff0c\u65e0\u7f18\u53c2\u52a0\u56fd\u8d5b\u3002 \u5165\u9009\u96c6\u8bad\u961f \u00b6 \u5927\u4e00\u63a5\u8fd1\u5c3e\u58f0\uff0cACM\u96c6\u8bad\u961f\u9009\u62d4\u8d5b\u5982\u671f\u4e3e\u529e\uff0c\u7531\u4e8e\u8bad\u7ec3\u5e76\u4e0d\u662f\u5f88\u79ef\u6781\uff0c\u52c9\u5f3a\u8fdb\u5165\u96c6\u8bad\u961f\uff0c\u81f3\u6b64\uff0c\u6211\u7684\u5927\u4e00\u7ed3\u675f\uff0c\u5f00\u59cb\u6691\u5047\u96c6\u8bad\u3002 \u6691\u5047\u96c6\u8bad \u00b6 \u7531\u4e8e\u519b\u8bad\uff0c\u5728\u96c6\u8bad\u524d\u4e5f\u6ca1\u80fd\u56de\u5bb6\u770b\u770b\uff0c\u5306\u5fd9\u4ece\u5b89\u5409\u8d76\u6765\u5c0f\u548c\u5c71\uff0c\u8fd8\u6ca1\u719f\u6089\u5c31\u5f00\u59cb\u4e86\u4e00\u4e2a\u591a\u6708\u7684\u6691\u5047\u96c6\u8bad\u3002\u6211\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u4e86\u89e3\u5230\u7684Acwing\uff0c\u4f46\u65f6\u95f4\u5e94\u8be5\u4e5f\u5927\u5dee\u4e0d\u5dee\u4e86\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u786e\u5b9e\u662f\u4e2a\u5f88\u597d\u7684\u7f51\u7ad9\u3002 \u6691\u5047\u4e00\u5171\u8fdb\u884c\u4e8620\u573a\u6bd4\u8d5b\uff0c\u5728\u5f53\u65f6\u7b97\u6cd5\u77e5\u8bc6\u532e\u4e4f\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u8bf4\u6211\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u662f\u5728\u7f5a\u5750\uff0c\u4e00\u904d\u671f\u5f85\u4ec0\u4e48\u65f6\u5019\u80fd\u53d8\u5f97\u548c\u5b66\u957f\u4e00\u6837\u5389\u5bb3\uff0c\u4e00\u904d\u53c8\u7591\u60d1\u6211\u5f53\u65f6\u662f\u4e0d\u662f\u5e94\u8be5\u9009\u62e9\u7b97\u6cd5\u7ade\u8d5b\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6700\u7ec8\u8fd8\u662f\u575a\u6301\u4e0b\u6765\u4e86\uff0c\u5408\u8ba1100\u4e2a\u5c0f\u65f6\uff0c\u5728\u8fd9\u4e2a\u6691\u5047\uff0c\u6211\u7b2c\u4e00\u6b21\u611f\u89c9\u5230\u7b97\u6cd5\u80fd\u529b\u4ea7\u751f\u8d28\u7684\u98de\u8dc3\uff0c\u4e5f\u610f\u8bc6\u5230\u53c2\u52a0\u7f5a\u5750\u4e5f\u662f\u7b97\u6cd5\u6bd4\u8d5b\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u6211\u771f\u7684\u54ed\u6b7b\u3002 \u5927\u4e8c \u00b6 ICPC\u6d4e\u5357\u7ad9 \u00b6 \u5728\u6691\u5047\u8bad\u7ec3\u4e4b\u540e\uff0c\u90e8\u5206\u5927\u4e09\u5b66\u957f\u9000\u5f79\uff0c\u539f\u5927\u4e00\u5927\u4e8c\u6210\u4e86\u96c6\u8bad\u961f\u7684\u4e3b\u529b\uff0c\u7b2c\u4e00\u6b21ICPC\u6d4e\u5357\u7ad9\u9009\u62d4\u8d5b\u5230\u6765\uff0c\u6211\u4eec\u961f\u53d1\u6325\u6b63\u5e38\uff0c\u6210\u529f\u5165\u9009\u3002 \u4e24\u9898\u6458\u94dc\uff01\uff01\uff01\u9009\u5bf9\u8d5b\u7ad9\uff0c\u5c11\u6253\u4e09\u5e74\u8bf4\u7684\u4e00\u70b9\u6ca1\u9519\u3002\u56de\u987e\u6bd4\u8d5b\u5386\u7a0b\uff0c\u521a\u5f00\u59cb\u4e00\u5c0f\u65f6\u8fc7\u4e86\u7b7e\u5230\uff0c\u4e4b\u540e\u4e09\u4eba\u5404\u5f00\u4e00\u9898\u5f00\u59cb\u7f5a\u5750\uff0c\u8fc7\u4e86\u534a\u5c0f\u65f6\uff0c\u53c8\u8fc7\u4e86\u534a\u5c0f\u65f6\u5c0f\u65f6\uff0c\u4ecd\u7136\u6ca1\u6709\u601d\u8def\uff0c\u770b\u7740\u5176\u4ed6\u961f\u4f0d\u4e5f\u6101\u7709\u4e0d\u5c55\uff0c\u6211\u60f3\u770b\u6765\u8fd9\u6b21\u53c8\u662f\u6253\u94c1\u4e86\u3002\u4e0d\u5f97\u4e0d\u8bf4\u6768\u961f\u7684\u7761\u89c9\u601d\u8003\u771f\u7684\u662f\u5f88\u5f3a\u4e86\uff0c\u5728\u770b\u4f3c\u719f\u7761\u4e86\u4e00\u4e2a\u5c0f\u65f6\u4e4b\u540e\uff0c\u7a81\u7136\u60f3\u5230\u4e86DP\u7684\u4f18\u5316\u65b9\u6848\uff0c\u5728\u6211\u63d0\u4f9b\u4e00\u4e2a\u7ec4\u5408\u6570\u6a21\u677f\u4e4b\u540e\u5c31\u5f00\u59cb\u7801\u4e86\uff0c\u8fc7\u4e86\u534a\u5c0f\u65f6\u4e4b\u540eA\u4e86\uff0c\u987f\u65f6\u72c2\u559c\u3002\u6700\u540e\u9ad8\u65af\u6d88\u5143\u4ea4\u4e86\u5341\u51e0\u53d1\u4e5f\u6ca1\u80fd\u8fc7\uff0c\u8d5b\u540e\u53d1\u73b0\u9898\u89e3\u786e\u5b9e\u5f88\u5de7\u5999\uff0c\u59a5\u59a5\u7684\u94f6\u724c\u9898\uff0c\u81f3\u5c11\u5728\u5f53\u65f6\u6211\u662f\u80af\u5b9a\u60f3\u4e0d\u5230\u7684\u3002\u4e0d\u8fc7\u7ed3\u679c\u5df2\u7ecf\u5f88\u51fa\u4e4e\u610f\u6599\u4e86\uff0crk149\uff0c\u6210\u529f\u6458\u94dc\u3002\u8bb0\u5f97\u5728\u4e4b\u524d\u6768\u961f\u8bf4\u8fc7\u4e00\u5b9a\u8981\u5728\u5927\u4e8c\u62ff\u94dc\uff0c\u771f\u7684\u5c31\u505a\u5230\u4e86\u3002\u5f53\u65f6\u7684\u90a3\u573a\u6bd4\u8d5b\uff0c\u4e24\u9898\u94dc\uff0c\u4e09\u9898\u94f6\uff0c\u8d5b\u540e\u51fa\u9898\u4eba\u544a\u77e5\u662f\u6309WF\u96be\u5ea6\u6765\u8bbe\u7f6e\u7684\uff0c\u8fd9\u7b97\u4e0d\u7b97\u4f53\u9a8c\u4e86\u4e00\u628aWF\u54c8\u54c8\u54c8\u3002 \u84dd\u6865\u676f\u7701\u8d5b \u00b6 2022\u5e744\u67089\u65e5\u4e3e\u529e\u4e86\u84dd\u6865\u676f\u7701\u8d5b\uff0c\u4ee5\u5f80\u7684\u66b4\u529b\u676f\u73b0\u5728\u4e0d\u518d\u662f\u53ea\u4f1a\u66b4\u529b\u5c31\u80fd\u62ff\u597d\u540d\u6b21\u7684\u6bd4\u8d5b\u4e86\uff0c\u53ef\u4ee5\u53d1\u73b0\u84dd\u6865\u676f\u7684\u96be\u5ea6\u5728\u4e00\u6b21\u6b21\u5347\u9ad8\uff0cCA\u7ec4\u751a\u81f3\u53ef\u4ee5\u7b97\u662f\u5c0f\u533a\u57df\u8d5b\uff0c\u8d5b\u540e\u4f30\u520675\uff0c\u6700\u540e\u4e5f\u662f\u6210\u529f\u83b7\u5f97\u7701\u4e00\uff0c\u6709\u4e86\u53c2\u4e0e\u56fd\u8d5b\u7684\u8d44\u683c \u6d59\u6c5f\u7701\u8d5b \u00b6 \u7b2c\u4e8c\u6b21\u53c2\u52a0\u6d59\u6c5f\u7701\u8d5b\uff0c\u961f\u4f0d\u8fd8\u662f\u4e00\u6837\u7684\u961f\u4f0d\uff0c\u5b9e\u529b\u548c\u7b2c\u4e00\u6b21\u5df2\u7ecf\u5b8c\u5168\u4e0d\u4e00\u6837\u4e86\uff0c\u8f7b\u677e\u8fc7\u4e86\u524d6\u9898\uff0c\u7b2c7\u9898\u9a6c\u62c9\u8f66\u677f\u5b50\u9898\uff0c\u4f46\u56e0\u4e3a\u5c06i\u6284\u6210\u4e861\u5230\u6bd4\u8d5b\u7ed3\u675f\u4e5f\u6ca1\u80fd\u627e\u51fa\u9519\u8bef\uff0c\u751a\u81f3\u4e00\u5ea6\u4ee5\u4e3a\u662f\u677f\u5b50\u51fa\u4e86\u95ee\u9898\uff0c\u771f\u7684\u662f\u4e00\u4e2a\u5b57\u6bcd\u9519\u5931\u94f6\u724c\uff0c\u9057\u61be\u6458\u94dc\u3002\u4e24\u573a\u7701\u8d5b\uff0c\u4e00\u6b21\u96c6\u4f53\u770b\u9519\u9898\u76ee\uff0c\u4e00\u6b21\u96c6\u4f53\u6ca1\u627e\u51fa\u9519\u8bef\uff0c\u53ef\u4ee5\u8bf4\u771f\u7684\u5f88\u5947\u5999\u4e86 ICPC\u6606\u660e\u7ad9 \u00b6 \u5728\u4f11\u8d5b\u671f\u4e4b\u540e\uff0c\u8f6c\u53bb\u5b66Linux\u548cDjango\u6846\u67b6\uff0c\u6ca1\u600e\u4e48\u78b0\u7b97\u6cd5\uff0c\u5306\u5fd9\u5eb7\u590d\u8bad\u7ec3\u3002\u8fd9\u662f\u8fd9\u4e2a\u8d5b\u5b63\u7684\u7b2c\u4e8c\u6b21ICPC\uff0c\u59a5\u59a5\u7684\u6570\u5b66\u573a\uff0c\u5728\u521a\u5f00\u59cb\u51b3\u7b56\u9519\u8bef\uff0c\u770b\u4e00\u9053\u9898\u773c\u719f\u5c31\u76f4\u63a5\u5f00\uff0c\u5728\u4e00\u4e2a\u5c0f\u65f6\u4e4b\u540e\u4ecd\u6ca1\u53bb\u505a\u7b7e\u5230\uff0c\u8d5b\u540e\u53d1\u73b0\u5f00\u7684\u662f\u4e00\u9053\u91d1\u724c\u9898\uff0c\u8fde\u7b7e\u5230\u90fd\u6ca1\u8fc7\uff0c\u53ef\u4ee5\u8bf4\u5f88\u9057\u61be\u4e86\uff0c\u4e0b\u4e00\u573aICPC\u7ee7\u7eed\u52a0\u6cb9\u5427\u3002 CCCC\u5929\u68af\u8d5b \u00b6 2022\u5e744\u670823\u65e5\u4e3e\u529e\u4e86\u5929\u68af\u8d5b\uff0c\u6700\u540e\u7531\u4e8e\u8f93\u5165\u8f93\u51fa\u6d41\u7684\u7f18\u6545\u6ca1\u80fd\u5f00L2\u540e\u51e0\u9898\uff0c\u6ca1\u62ff\u5230\u4e2a\u4eba\u5956\uff0c\u597d\u5728\u56e2\u961f\u7ed9\u529b\uff0c\u83b7\u5f97\u56e2\u961f\u56fd\u4e8c\u548c\u7701\u4e8c\uff0c\u4e0b\u6b21\u7ee7\u7eed\u52a0\u6cb9\u5427 \u84dd\u6865\u676f\u56fd\u8d5b \u00b6 \u84dd\u6865\u676f\u56fd\u8d5b\u4e8e2022\u5e746\u670818\u65e5\u4e3e\u884c\uff0c\u521a\u5f00\u59cb\u7b2c\u4e00\u9053\u586b\u7a7a\u5c31\u96be\u4f4f\u4e86\uff0c\u6302\u540e\u53f0\u8dd1\u5341\u51e0\u5206\u949f\u4e5f\u6ca1\u80fd\u8dd1\u51fa\u6765\uff0c\u8d5b\u540e\u624d\u77e5\u9053\u662fDP+int128\uff0c\u500d\u589e\u4e5f\u5fd8\u8bb0\u4e86\uff0c\u597d\u5728\u4f1a\u4e00\u905320\u5206\u6982\u7387\u9898\uff0c\u8d5b\u540e\u53d1\u73b0\u4e24\u4e2a\u586b\u7a7a\u90fd\u9519\u4e86\uff0c\u6700\u540e\u4f30\u520660\uff0c\u83b7\u56fd\u4e8c \u5173\u4e8e\u6211\u4e0d\u8bad\u7ec3\u5728\u5e72\u5565 \u00b6 \u9ad8\u6570\u7ade\u8d5b \u00b6 \u6392\u821e \u00b6 \u7b97\u6cd5\u8bbe\u8ba1\u4e0e\u7f16\u7a0b\u6311\u6218\u8d5b \u00b6","title":"\u5173\u4e8e\u7b97\u6cd5\u7ade\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_1","text":"","title":"\u5173\u4e8e\u6211\u7684\u7b97\u6cd5\u7ade\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_2","text":"\u4e03\u6708\uff0c\u9ad8\u8003\u7ed3\u675f\u4e86\uff0c\u586b\u5fd7\u613f\u65f6\uff0c\u770b\u7740\u8eab\u8fb9\u7684\u597d\u53cb\u4e00\u4e2a\u4e2a\u90fd\u6709\u4e86\u81ea\u5df1\u7684\u4eba\u751f\u76ee\u6807\uff0c\u6709\u9009\u62e9\u5f53\u533b\u751f\u7684\uff0c\u6709\u9009\u62e9\u5f53\u8b66\u5bdf\u7684\u2026\u2026\u800c\u5f53\u65f6\u6211\u4ecd\u5904\u4e8e\u8ff7\u832b\u9636\u6bb5\uff0c\u5237\u7740\u89c6\u9891\uff0c\u770b\u7740\u7f51\u4e0a\u8bf4\u8ba1\u7b97\u673a\u5403\u9999\uff0c\u5c31\u62b1\u7740\u8bd5\u4e00\u8bd5\u7684\u5fc3\u6001\u586b\u4e86\u5fd7\u613f\uff0c\u4f46\u6700\u7ec8\u7531\u4e8e\u5206\u6570\u4e0d\u591f\uff0c\u5b66\u4e86\u81ea\u52a8\u5316\uff0c\u672a\u80fd\u8fdb\u5165\u5230\u672c\u6821\u8ba1\u7b97\u673a\u4e13\u4e1a\u3002\u5728\u6691\u5047\u65f6\uff0c\u4e86\u89e3\u5230ACM\uff0c\u53c8\u62b1\u7740\u8bd5\u4e00\u8bd5\u7684\u5fc3\u6001\uff0c\u6211\u52a0\u5165\u4e86\u3002\u5728\u6691\u5047\uff0c\u7b80\u5355\u770b\u4e86\u4e00\u4e0bC\u8bed\u8a00\u8bed\u6cd5\u5185\u5bb9","title":"\u9ad8\u4e2d\u6bd5\u4e1a"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_3","text":"","title":"\u5927\u4e00"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#acm","text":"\u672c\u4ee5\u4e3a\u52a0\u7fa4\u5c31\u662f\u52a0\u5165\u534f\u4f1a\u4e86\uff0c\u6ca1\u60f3\u5230\u8fd8\u8981\u9762\u8bd5\uff0c\u4ecd\u7136\u8bb0\u5f97\u5f53\u65f6\u7684\u9762\u8bd5\u9898\u662f\u7528C\u5728\u4e00\u5206\u949f\u5199\u4e00\u904d\u5192\u6ce1\u6216\u9009\u62e9\u6392\u5e8f\u7684\u57fa\u672c\u6846\u67b6\uff0c\u5f53\u65f6\u7531\u4e8e\u7d27\u5f20\uff0c\u7b2c\u4e00\u904d\u8fd8\u7801\u9519\u4e86\uff0c\u597d\u5728\u7b2c\u4e8c\u904d\u6b63\u786e\uff0c\u9762\u8bd5\u540e\u5f97\u77e5\u8fd9\u662f\u5206\u6700\u5c11\u7684\u52a0\u5206\u9879\uff0c\u4fa5\u5e78\u52a0\u5165\u534f\u4f1a","title":"\u6b63\u5f0f\u52a0\u5165ACM\u534f\u4f1a"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#cccc","text":"\u539f\u5b9a\u4e8e2020\u5e743\u670828\u65e5\u4e3e\u529e\u7684\u7b2c\u4e94\u5c4a\u56e2\u961f\u7a0b\u5e8f\u8bbe\u8ba1\u5929\u68af\u8d5b\u5ef6\u671f\u4e3e\u529e\uff0c\u8ba9\u521a\u8fdb\u5165\u5927\u5b66\u7684\u6211\u6709\u4e86\u62a5\u540d\u7684\u5e0c\u671b\u3002\u7ed9\u4e86\u5e0c\u671b\u518d\u5c06\u5176\u6bc1\u706d\uff0c\u8fd9\u662f\u6700\u53ef\u6015\u7684\uff0c\u539f\u4ee5\u4e3a40\u4eba\u7684\u540d\u989d\u80fd\u8f7b\u677e\u52a0\u5165\uff0c\u4f46\u5b66\u6821\u7684\u9009\u62d4\u8d5b\u5c06\u6211\u6253\u56de\u4e86\u73b0\u5b9e\uff0c\u8fd9\u662f\u6211\u4e0a\u5927\u5b66\u7684\u7b2c\u4e00\u6b21\u6bd4\u8d5b\uff0c\u5f53\u65f6\u5e76\u6ca1\u6709\u591a\u5c11\u7b97\u6cd5\u77e5\u8bc6\uff0c\u751a\u81f3\u8fde\u6700\u7b80\u5355\u7684\u66b4\u529b\u90fd\u6253\u4e0d\u660e\u767d \u6700\u7ec8\u867d\u7136\u5728\u5927\u4e00\u4f4d\u5217\u4e8c\u7b49\uff0c\u7531\u4e8e\u4e24\u4f4d\u5b66\u957f\u7684\u52a0\u5165\u88ab\u6b63\u597d\u88ab\u5361\u5728\u540d\u989d\u4e4b\u5916\uff0c\u867d\u7136\u6709\u70b9\u9057\u61be\uff0c\u4f46\u8fd9\u786e\u5b9e\u4e5f\u662f\u81ea\u8eab\u5b9e\u529b\u7684\u4e0d\u8db3","title":"CCCC\u9009\u62d4\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_4","text":"\u7ed3\u675f\u4e86\u5e73\u5e73\u65e0\u5947\u7684\u5927\u4e00\u4e0a\uff0c\u5728\u5927\u4e00\u4e0b\u7a0d\u5fae\u6709\u4e86\u90a3\u4e48\u4e00\u4e22\u4e22\u7684\u6c89\u6dc0\uff0c\u6709\u673a\u4f1a\u8ba9\u65b0\u751f\u6253\u533a\u57df\u8d5b\uff0c\u7701\u8d5b\u4e86\uff0c\u5b66\u6821\u8981\u6c42\u7ec4\u961f\uff0c\u5f88\u5e78\u8fd0\u9047\u4e0a\u4e86\u73b0\u5728\u7684\u961f\u53cb\u2014\u2014\u8bad\u4eba\u4e00\u5957\u4e00\u5957\u7684\u6768\u961f\uff0c\u4ee5\u53ca\u548c\u6211\u4e00\u8d77\u88ab\u8bad\u7684\u4fca\u8c6a\u3002\u8bb0\u5f97\u5f53\u65f6\u8fd8\u4e00\u76f4\u63a8\u8131\u8c01\u5f53\u961f\u957f\uff0c\u73b0\u5728\u770b\u6765\uff0c\u6768\u961f\u786e\u5b9e\u5f88\u6709\u5f53\u961f\u957f\u7684\u6f5c\u8d28\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u55dd\u3002","title":"\u7ec4\u961f"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_5","text":"\u7b2c\u4e00\u573a\u7ec4\u961f\u8d5b\uff0c\u9009\u62d4\u8d5b\u5206\u4e3a\u4e09\u573a\uff0c\u6309\u96be\u5ea6\u5360\u4e0d\u540c\u6bd4\u91cd\uff0c\u6bcf\u4e00\u573a\u5747\u4e3a5\u5c0f\u65f6\uff0c\u8d5b\u65f6\u9047\u5230\u8bb8\u591a\u4e0d\u4f1a\u7684\u77e5\u8bc6\u70b9\uff0c\u8fd9\u8ba9\u6211\u4eec\u610f\u8bc6\u5230\u4e0d\u5206\u5de5\u5408\u4f5c\u662f\u4e0d\u884c\u7684\uff0c\u5728\u6fc0\u70c8\u7684\u7ade\u4e89\u4e4b\u540e\uff0c\u6211\u4eec\u961f\u53c8\u662f\u5361\u7740\u6700\u540e\u4e00\u540d\u6210\u529f\u5165\u9009\u3002","title":"\u7701\u8d5b\u9009\u62d4"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_6","text":"\u6b63\u5f0f\u6253\u6bd4\u8d5b\u7684\u5f53\u5929\uff0c\u662f\u5728\u5c0f\u548c\u5c71\u4e3e\u884c\u7684\uff0c\u8d77\u4e86\u4e2a\u5927\u65e9\u5c31\u8d76\u7740\u6821\u8f66\u8fc7\u53bb\u4e86\uff0c\u6bd4\u8d5b\u524d\u63d0\u524d\u4f53\u9a8c\u4e86\u4e00\u4e0b\u4e3b\u6821\u533a\u7684\u7f8e\u98df\u3002\u7531\u4e8e\u53c2\u8d5b\u7ecf\u9a8c\u7684\u4e0d\u8db3\uff0c\u8d5b\u524d\u7684\u73af\u5883\u914d\u7f6e\u4e86\u597d\u4e45\uff0c\u4f46\u597d\u5728\u6700\u540e\u987a\u5229\u8fdb\u5165\u4e86\u6bd4\u8d5b\u3002\u53ef\u80fd\u7531\u4e8e\u961f\u4f0d\u540d\u7684\u7f18\u6545\uff0c\u5f53\u65f6\u6211\u4eec\u53d6\u540d\u2014\u2014wa\u7684\u4e00\u58f0\u54ed\u51fa\u4e86tle\uff0c\u7b7e\u5230\u7684\u8fc7\u7a0b\u4e2d\u7684\u786e\u9047\u5230\u4e86\u4e0d\u5c11tle\u548cwa\uff0c\u5c31\u8fd9\u6837\u4e0d\u5feb\u4e0d\u6162\u7684\u8fc7\u6389\u4e86\u524d\u56db\u9898\uff0c\u7b2c\u4e94\u9898\u6ca1\u7406\u89e3\u9898\u610f\uff0c\u4e09\u4e2a\u4eba\u540c\u65f6\u770b\u9519\u9898\u76ee\u4e5f\u662f\u7f55\u89c1\uff0c\u5230\u4e86\u6bd4\u8d5b\u7ed3\u675f\u6211\u4eec\u4e09\u4eba\u7684\u89c2\u70b9\u4ecd\u7136\u4e00\u81f4\uff0c\u6700\u7ec8\u8fc7\u9898\u56db\u9898\uff0c\u7b7e\u5230\u90fd\u6ca1\u7b7e\u6ee1\uff0c\u6210\u529f\u6253\u94c1\u3002\u770b\u7740\u540c\u53bb\u7684\u848b\u961f\u4ed6\u4eec\u6536\u83b7\u4e86\u4e00\u679a\u94dc\u724c\uff0c\u5fc3\u91cc\u9178\u9178\u7684\uff0c\u4f46\u60f3\u60f3\u8fd8\u662f\u81ea\u5df1\u83dc\u5c31\u91ca\u7136\u4e86\u3002","title":"\u6d59\u6c5f\u7701\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#cccc_1","text":"\u548c\u7b2c\u4e00\u6b21\u4e00\u6837\uff0c\u8fdb\u884c\u9009\u62d4\u8d5b\uff0c\u8fd9\u6b21\u6211\u6210\u529f\u5165\u9009\u4e86\uff0c\u8fdb\u5165\u4e86\u4e8c\u961f\uff0c\u5f53\u65f6\u7684\u6211\u53ea\u80fd\u8bf4\u662f\u7a0d\u5fae\u6709\u4e86\u7b97\u6cd5\u57fa\u7840\uff0c\u4e0d\u518d\u50cf\u4e4b\u524d\u53ea\u80fd\u5199\u5199\u66b4\u529b\u9898\u3002 \u5230\u4e86\u6b63\u5f0f\u53c2\u8d5b\uff0c\u6210\u529f\u7b7e\u5b8c\u4e86\u6240\u6709\u7684L1\uff0cL2\u7684\u7b2c\u4e00\u9898\u6a21\u62df\u6808\u4e5f\u987a\u5229\u62ff\u4e0b\uff0c\u4f46\u7531\u4e8e\u5f53\u65f6\u4e0d\u4f1a\u62d3\u6251\u6392\u5e8f\u4ee5\u53ca\u5bf9\u6700\u77ed\u8def\u7684\u7406\u89e3\u4e0d\u6df1\u523b\uff0cL2\u7b2c\u4e8c\u9898\u6700\u957f\u8def\u6ca1\u6709\u505a\u51fa\uff0c\u597d\u5728\u961f\u53cb\u5f88\u7ed9\u529b\uff0c\u6700\u7ec8\u83b7\u5f97\u6d59\u6c5f\u7701\u56e2\u961f\u4e8c\u7b49\u5956","title":"\u6210\u529f\u53c2\u8d5bCCCC"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_7","text":"\u610f\u5916\u5f97\u77e5\u84dd\u6865\u676f\u8fd9\u4e2a\u6bd4\u8d5b\uff0c\u636e\u8bf4\u83b7\u5956\u5f88\u5bb9\u6613\uff0c\u5c31\u89c9\u5f97\u53bb\u8bd5\u4e00\u8bd5\uff0c\u4e8e\u662f\u62a5\u540d\u4e86\u5b66\u6821\u7684\u9009\u62d4\u8d5b\uff0c\u5708\u94b1\u676f\u5c31\u662f\u5708\u94b1\u676f\uff0c\u4e00\u573a\u6bd4\u8d5b\u5c31\u8981300\uff0c\u4f46\u597d\u5728\u6211\u5165\u9009\u4e86\u3002 \u84dd\u6865\u676f\u4e0d\u540c\u4e8eACM\uff0c\u5199\u5b8c\u9898\u540e\u65e0\u6cd5\u76f4\u63a5\u77e5\u9053\u662f\u5426\u6b63\u786e\uff0c\u518d\u52a0\u4e0a\u672c\u8eab\u7684\u4ee3\u7801\u98ce\u683c\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u6700\u7ec8\u53ea\u662f\u83b7\u5f97\u4e86\u7701\u4e8c\u7b49\u5956\uff0c\u65e0\u7f18\u53c2\u52a0\u56fd\u8d5b\u3002","title":"\u84dd\u6865\u676f\u7701\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_8","text":"\u5927\u4e00\u63a5\u8fd1\u5c3e\u58f0\uff0cACM\u96c6\u8bad\u961f\u9009\u62d4\u8d5b\u5982\u671f\u4e3e\u529e\uff0c\u7531\u4e8e\u8bad\u7ec3\u5e76\u4e0d\u662f\u5f88\u79ef\u6781\uff0c\u52c9\u5f3a\u8fdb\u5165\u96c6\u8bad\u961f\uff0c\u81f3\u6b64\uff0c\u6211\u7684\u5927\u4e00\u7ed3\u675f\uff0c\u5f00\u59cb\u6691\u5047\u96c6\u8bad\u3002","title":"\u5165\u9009\u96c6\u8bad\u961f"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_9","text":"\u7531\u4e8e\u519b\u8bad\uff0c\u5728\u96c6\u8bad\u524d\u4e5f\u6ca1\u80fd\u56de\u5bb6\u770b\u770b\uff0c\u5306\u5fd9\u4ece\u5b89\u5409\u8d76\u6765\u5c0f\u548c\u5c71\uff0c\u8fd8\u6ca1\u719f\u6089\u5c31\u5f00\u59cb\u4e86\u4e00\u4e2a\u591a\u6708\u7684\u6691\u5047\u96c6\u8bad\u3002\u6211\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u4e86\u89e3\u5230\u7684Acwing\uff0c\u4f46\u65f6\u95f4\u5e94\u8be5\u4e5f\u5927\u5dee\u4e0d\u5dee\u4e86\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u786e\u5b9e\u662f\u4e2a\u5f88\u597d\u7684\u7f51\u7ad9\u3002 \u6691\u5047\u4e00\u5171\u8fdb\u884c\u4e8620\u573a\u6bd4\u8d5b\uff0c\u5728\u5f53\u65f6\u7b97\u6cd5\u77e5\u8bc6\u532e\u4e4f\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u8bf4\u6211\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u662f\u5728\u7f5a\u5750\uff0c\u4e00\u904d\u671f\u5f85\u4ec0\u4e48\u65f6\u5019\u80fd\u53d8\u5f97\u548c\u5b66\u957f\u4e00\u6837\u5389\u5bb3\uff0c\u4e00\u904d\u53c8\u7591\u60d1\u6211\u5f53\u65f6\u662f\u4e0d\u662f\u5e94\u8be5\u9009\u62e9\u7b97\u6cd5\u7ade\u8d5b\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6700\u7ec8\u8fd8\u662f\u575a\u6301\u4e0b\u6765\u4e86\uff0c\u5408\u8ba1100\u4e2a\u5c0f\u65f6\uff0c\u5728\u8fd9\u4e2a\u6691\u5047\uff0c\u6211\u7b2c\u4e00\u6b21\u611f\u89c9\u5230\u7b97\u6cd5\u80fd\u529b\u4ea7\u751f\u8d28\u7684\u98de\u8dc3\uff0c\u4e5f\u610f\u8bc6\u5230\u53c2\u52a0\u7f5a\u5750\u4e5f\u662f\u7b97\u6cd5\u6bd4\u8d5b\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u6211\u771f\u7684\u54ed\u6b7b\u3002","title":"\u6691\u5047\u96c6\u8bad"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_10","text":"","title":"\u5927\u4e8c"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#icpc","text":"\u5728\u6691\u5047\u8bad\u7ec3\u4e4b\u540e\uff0c\u90e8\u5206\u5927\u4e09\u5b66\u957f\u9000\u5f79\uff0c\u539f\u5927\u4e00\u5927\u4e8c\u6210\u4e86\u96c6\u8bad\u961f\u7684\u4e3b\u529b\uff0c\u7b2c\u4e00\u6b21ICPC\u6d4e\u5357\u7ad9\u9009\u62d4\u8d5b\u5230\u6765\uff0c\u6211\u4eec\u961f\u53d1\u6325\u6b63\u5e38\uff0c\u6210\u529f\u5165\u9009\u3002 \u4e24\u9898\u6458\u94dc\uff01\uff01\uff01\u9009\u5bf9\u8d5b\u7ad9\uff0c\u5c11\u6253\u4e09\u5e74\u8bf4\u7684\u4e00\u70b9\u6ca1\u9519\u3002\u56de\u987e\u6bd4\u8d5b\u5386\u7a0b\uff0c\u521a\u5f00\u59cb\u4e00\u5c0f\u65f6\u8fc7\u4e86\u7b7e\u5230\uff0c\u4e4b\u540e\u4e09\u4eba\u5404\u5f00\u4e00\u9898\u5f00\u59cb\u7f5a\u5750\uff0c\u8fc7\u4e86\u534a\u5c0f\u65f6\uff0c\u53c8\u8fc7\u4e86\u534a\u5c0f\u65f6\u5c0f\u65f6\uff0c\u4ecd\u7136\u6ca1\u6709\u601d\u8def\uff0c\u770b\u7740\u5176\u4ed6\u961f\u4f0d\u4e5f\u6101\u7709\u4e0d\u5c55\uff0c\u6211\u60f3\u770b\u6765\u8fd9\u6b21\u53c8\u662f\u6253\u94c1\u4e86\u3002\u4e0d\u5f97\u4e0d\u8bf4\u6768\u961f\u7684\u7761\u89c9\u601d\u8003\u771f\u7684\u662f\u5f88\u5f3a\u4e86\uff0c\u5728\u770b\u4f3c\u719f\u7761\u4e86\u4e00\u4e2a\u5c0f\u65f6\u4e4b\u540e\uff0c\u7a81\u7136\u60f3\u5230\u4e86DP\u7684\u4f18\u5316\u65b9\u6848\uff0c\u5728\u6211\u63d0\u4f9b\u4e00\u4e2a\u7ec4\u5408\u6570\u6a21\u677f\u4e4b\u540e\u5c31\u5f00\u59cb\u7801\u4e86\uff0c\u8fc7\u4e86\u534a\u5c0f\u65f6\u4e4b\u540eA\u4e86\uff0c\u987f\u65f6\u72c2\u559c\u3002\u6700\u540e\u9ad8\u65af\u6d88\u5143\u4ea4\u4e86\u5341\u51e0\u53d1\u4e5f\u6ca1\u80fd\u8fc7\uff0c\u8d5b\u540e\u53d1\u73b0\u9898\u89e3\u786e\u5b9e\u5f88\u5de7\u5999\uff0c\u59a5\u59a5\u7684\u94f6\u724c\u9898\uff0c\u81f3\u5c11\u5728\u5f53\u65f6\u6211\u662f\u80af\u5b9a\u60f3\u4e0d\u5230\u7684\u3002\u4e0d\u8fc7\u7ed3\u679c\u5df2\u7ecf\u5f88\u51fa\u4e4e\u610f\u6599\u4e86\uff0crk149\uff0c\u6210\u529f\u6458\u94dc\u3002\u8bb0\u5f97\u5728\u4e4b\u524d\u6768\u961f\u8bf4\u8fc7\u4e00\u5b9a\u8981\u5728\u5927\u4e8c\u62ff\u94dc\uff0c\u771f\u7684\u5c31\u505a\u5230\u4e86\u3002\u5f53\u65f6\u7684\u90a3\u573a\u6bd4\u8d5b\uff0c\u4e24\u9898\u94dc\uff0c\u4e09\u9898\u94f6\uff0c\u8d5b\u540e\u51fa\u9898\u4eba\u544a\u77e5\u662f\u6309WF\u96be\u5ea6\u6765\u8bbe\u7f6e\u7684\uff0c\u8fd9\u7b97\u4e0d\u7b97\u4f53\u9a8c\u4e86\u4e00\u628aWF\u54c8\u54c8\u54c8\u3002","title":"ICPC\u6d4e\u5357\u7ad9"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_11","text":"2022\u5e744\u67089\u65e5\u4e3e\u529e\u4e86\u84dd\u6865\u676f\u7701\u8d5b\uff0c\u4ee5\u5f80\u7684\u66b4\u529b\u676f\u73b0\u5728\u4e0d\u518d\u662f\u53ea\u4f1a\u66b4\u529b\u5c31\u80fd\u62ff\u597d\u540d\u6b21\u7684\u6bd4\u8d5b\u4e86\uff0c\u53ef\u4ee5\u53d1\u73b0\u84dd\u6865\u676f\u7684\u96be\u5ea6\u5728\u4e00\u6b21\u6b21\u5347\u9ad8\uff0cCA\u7ec4\u751a\u81f3\u53ef\u4ee5\u7b97\u662f\u5c0f\u533a\u57df\u8d5b\uff0c\u8d5b\u540e\u4f30\u520675\uff0c\u6700\u540e\u4e5f\u662f\u6210\u529f\u83b7\u5f97\u7701\u4e00\uff0c\u6709\u4e86\u53c2\u4e0e\u56fd\u8d5b\u7684\u8d44\u683c","title":"\u84dd\u6865\u676f\u7701\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_12","text":"\u7b2c\u4e8c\u6b21\u53c2\u52a0\u6d59\u6c5f\u7701\u8d5b\uff0c\u961f\u4f0d\u8fd8\u662f\u4e00\u6837\u7684\u961f\u4f0d\uff0c\u5b9e\u529b\u548c\u7b2c\u4e00\u6b21\u5df2\u7ecf\u5b8c\u5168\u4e0d\u4e00\u6837\u4e86\uff0c\u8f7b\u677e\u8fc7\u4e86\u524d6\u9898\uff0c\u7b2c7\u9898\u9a6c\u62c9\u8f66\u677f\u5b50\u9898\uff0c\u4f46\u56e0\u4e3a\u5c06i\u6284\u6210\u4e861\u5230\u6bd4\u8d5b\u7ed3\u675f\u4e5f\u6ca1\u80fd\u627e\u51fa\u9519\u8bef\uff0c\u751a\u81f3\u4e00\u5ea6\u4ee5\u4e3a\u662f\u677f\u5b50\u51fa\u4e86\u95ee\u9898\uff0c\u771f\u7684\u662f\u4e00\u4e2a\u5b57\u6bcd\u9519\u5931\u94f6\u724c\uff0c\u9057\u61be\u6458\u94dc\u3002\u4e24\u573a\u7701\u8d5b\uff0c\u4e00\u6b21\u96c6\u4f53\u770b\u9519\u9898\u76ee\uff0c\u4e00\u6b21\u96c6\u4f53\u6ca1\u627e\u51fa\u9519\u8bef\uff0c\u53ef\u4ee5\u8bf4\u771f\u7684\u5f88\u5947\u5999\u4e86","title":"\u6d59\u6c5f\u7701\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#icpc_1","text":"\u5728\u4f11\u8d5b\u671f\u4e4b\u540e\uff0c\u8f6c\u53bb\u5b66Linux\u548cDjango\u6846\u67b6\uff0c\u6ca1\u600e\u4e48\u78b0\u7b97\u6cd5\uff0c\u5306\u5fd9\u5eb7\u590d\u8bad\u7ec3\u3002\u8fd9\u662f\u8fd9\u4e2a\u8d5b\u5b63\u7684\u7b2c\u4e8c\u6b21ICPC\uff0c\u59a5\u59a5\u7684\u6570\u5b66\u573a\uff0c\u5728\u521a\u5f00\u59cb\u51b3\u7b56\u9519\u8bef\uff0c\u770b\u4e00\u9053\u9898\u773c\u719f\u5c31\u76f4\u63a5\u5f00\uff0c\u5728\u4e00\u4e2a\u5c0f\u65f6\u4e4b\u540e\u4ecd\u6ca1\u53bb\u505a\u7b7e\u5230\uff0c\u8d5b\u540e\u53d1\u73b0\u5f00\u7684\u662f\u4e00\u9053\u91d1\u724c\u9898\uff0c\u8fde\u7b7e\u5230\u90fd\u6ca1\u8fc7\uff0c\u53ef\u4ee5\u8bf4\u5f88\u9057\u61be\u4e86\uff0c\u4e0b\u4e00\u573aICPC\u7ee7\u7eed\u52a0\u6cb9\u5427\u3002","title":"ICPC\u6606\u660e\u7ad9"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#cccc_2","text":"2022\u5e744\u670823\u65e5\u4e3e\u529e\u4e86\u5929\u68af\u8d5b\uff0c\u6700\u540e\u7531\u4e8e\u8f93\u5165\u8f93\u51fa\u6d41\u7684\u7f18\u6545\u6ca1\u80fd\u5f00L2\u540e\u51e0\u9898\uff0c\u6ca1\u62ff\u5230\u4e2a\u4eba\u5956\uff0c\u597d\u5728\u56e2\u961f\u7ed9\u529b\uff0c\u83b7\u5f97\u56e2\u961f\u56fd\u4e8c\u548c\u7701\u4e8c\uff0c\u4e0b\u6b21\u7ee7\u7eed\u52a0\u6cb9\u5427","title":"CCCC\u5929\u68af\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_13","text":"\u84dd\u6865\u676f\u56fd\u8d5b\u4e8e2022\u5e746\u670818\u65e5\u4e3e\u884c\uff0c\u521a\u5f00\u59cb\u7b2c\u4e00\u9053\u586b\u7a7a\u5c31\u96be\u4f4f\u4e86\uff0c\u6302\u540e\u53f0\u8dd1\u5341\u51e0\u5206\u949f\u4e5f\u6ca1\u80fd\u8dd1\u51fa\u6765\uff0c\u8d5b\u540e\u624d\u77e5\u9053\u662fDP+int128\uff0c\u500d\u589e\u4e5f\u5fd8\u8bb0\u4e86\uff0c\u597d\u5728\u4f1a\u4e00\u905320\u5206\u6982\u7387\u9898\uff0c\u8d5b\u540e\u53d1\u73b0\u4e24\u4e2a\u586b\u7a7a\u90fd\u9519\u4e86\uff0c\u6700\u540e\u4f30\u520660\uff0c\u83b7\u56fd\u4e8c","title":"\u84dd\u6865\u676f\u56fd\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_14","text":"","title":"\u5173\u4e8e\u6211\u4e0d\u8bad\u7ec3\u5728\u5e72\u5565"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_15","text":"","title":"\u9ad8\u6570\u7ade\u8d5b"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_16","text":"","title":"\u6392\u821e"},{"location":"%E5%85%B3%E4%BA%8E/%E5%A4%A7%E5%AD%A6/#_17","text":"","title":"\u7b97\u6cd5\u8bbe\u8ba1\u4e0e\u7f16\u7a0b\u6311\u6218\u8d5b"}]}